[
  {
    "path": "README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# Setting up"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "**Prerequisites**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "* JDK 11"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "* Recommended: IntelliJ IDE"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "* Fork this repo to your GitHub account and clone the fork to your computer"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "**Importing the project into IntelliJ**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "1. Open IntelliJ (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "1. Set up the correct JDK version."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "   * Click `Configure` \u003e `Structure for new Projects` (in older versions of Intellij:`Configure` \u003e `Project Defaults` \u003e `Project Structure`)."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "   * If JDK 11 is listed in the drop down, select it. If it is not, click `New...` and select the directory where you installed JDK 11."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "   * Click `OK`."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "1. Click `Import Project`."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "1. Locate the project directory and click `OK`."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "1. Select `Create project from existing sources` and click `Next`."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "1. Rename the project if you want. Click `Next`."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "1. Ensure that your src folder is checked. Keep clicking `Next`."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "1. Click `Finish`."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "# Tutorials "
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "duke Increment | Tutorial"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "---------------|---------------"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "`A-Gradle` | [Gradle Tutorial](tutorials/gradleTutorial.md)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "`A-TextUiTesting` | [Text UI Testing Tutorial](tutorials/textUiTestingTutorial.md)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "`Level-10` | JavaFX tutorials:\u003cbr\u003e→ [Part 1: Introduction to JavaFX][fx1]\u003cbr\u003e→ [Part 2: Creating a GUI for duke][fx2]\u003cbr\u003e→ [Part 3: Interacting with the user][fx3]\u003cbr\u003e→ [Part 4: Introduction to FXML][fx4]"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "[fx1]: \u003ctutorials/javaFxTutorialPart1.md\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "[fx2]: \u003ctutorials/javaFxTutorialPart2.md\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "[fx3]: \u003ctutorials/javaFxTutorialPart3.md\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "[fx4]: \u003ctutorials/javaFxTutorialPart4.md\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "# Feedback, Bug Reports"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "* If you have feedback or bug reports, please post in [se-edu/duke issue tracker](https://github.com/se-edu/duke/issues)."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "* We welcome pull requests too."
      }
    ],
    "authorContributionMap": {
      "KxxMxxx": 2,
      "-": 37
    }
  },
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    id \u0027org.openjfx.javafxplugin\u0027 version \u00270.0.7\u0027"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "group \u0027seedu.duke\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "run {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    archiveVersion \u003d \"0.1.3\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "javafx {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    version \u003d \"11.0.2\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    modules \u003d [ \u0027javafx.controls\u0027, \u0027javafx.fxml\u0027 ]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "test {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    // Change this to your main class."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    mainClassName \u003d \"Duke\""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KxxMxxx": 32,
      "-": 15
    }
  },
  {
    "path": "gradlew.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "@rem Copyright 2015 the original author or authors."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "@rem Licensed under the Apache License, Version 2.0 (the \"License\");"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "@rem you may not use this file except in compliance with the License."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "@rem You may obtain a copy of the License at"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "@rem      https://www.apache.org/licenses/LICENSE-2.0"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "@rem Unless required by applicable law or agreed to in writing, software"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "@rem distributed under the License is distributed on an \"AS IS\" BASIS,"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "@rem WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "@rem See the License for the specific language governing permissions and"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "@rem limitations under the License."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "@if \"%DEBUG%\" \u003d\u003d \"\" @echo off"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "@rem ##########################################################################"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "@rem  Gradle startup script for Windows"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "@rem ##########################################################################"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Set local scope for the variables with windows NT shell"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%OS%\"\u003d\u003d\"Windows_NT\" setlocal"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "set DIRNAME\u003d%~dp0"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%DIRNAME%\" \u003d\u003d \"\" set DIRNAME\u003d."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "set APP_BASE_NAME\u003d%~n0"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "set APP_HOME\u003d%DIRNAME%"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "set DEFAULT_JVM_OPTS\u003d\"-Xmx64m\" \"-Xms64m\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Find java.exe"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "if defined JAVA_HOME goto findJavaFromJavaHome"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "set JAVA_EXE\u003djava.exe"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "%JAVA_EXE% -version \u003eNUL 2\u003e\u00261"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%ERRORLEVEL%\" \u003d\u003d \"0\" goto init"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "echo."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "echo ERROR: JAVA_HOME is not set and no \u0027java\u0027 command could be found in your PATH."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "echo."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "echo Please set the JAVA_HOME variable in your environment to match the"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "echo location of your Java installation."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "goto fail"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ":findJavaFromJavaHome"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "set JAVA_HOME\u003d%JAVA_HOME:\"\u003d%"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "set JAVA_EXE\u003d%JAVA_HOME%/bin/java.exe"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "if exist \"%JAVA_EXE%\" goto init"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "echo."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "echo."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "echo Please set the JAVA_HOME variable in your environment to match the"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "echo location of your Java installation."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "goto fail"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ":init"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Get command-line arguments, handling Windows variants"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "if not \"%OS%\" \u003d\u003d \"Windows_NT\" goto win9xME_args"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ":win9xME_args"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Slurp the command line arguments."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "set CMD_LINE_ARGS\u003d"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "set _SKIP\u003d2"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ":win9xME_args_slurp"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "if \"x%~1\" \u003d\u003d \"x\" goto execute"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "set CMD_LINE_ARGS\u003d%*"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ":execute"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Setup the command line"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "set CLASSPATH\u003d%APP_HOME%\\gradle\\wrapper\\gradle-wrapper.jar"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Execute Gradle"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "\"%JAVA_EXE%\" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% \"-Dorg.gradle.appname\u003d%APP_BASE_NAME%\" -classpath \"%CLASSPATH%\" org.gradle.wrapper.GradleWrapperMain %CMD_LINE_ARGS%"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ":end"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "@rem End local scope for the variables with windows NT shell"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%ERRORLEVEL%\"\u003d\u003d\"0\" goto mainEnd"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ":fail"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "rem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "rem the _cmd.exe /c_ return code!"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "if  not \"\" \u003d\u003d \"%GRADLE_EXIT_CONSOLE%\" exit 1"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "exit /b 1"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ":mainEnd"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%OS%\"\u003d\u003d\"Windows_NT\" endlocal"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ":omega"
      }
    ],
    "authorContributionMap": {
      "KxxMxxx": 17,
      "-": 83
    }
  },
  {
    "path": "src/main/java/DialogBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": " * An example of a custom control using FXML."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": " * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": " * containing text from the speaker."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    private DialogBox(String text, Image img) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        displayPicture.setImage(img);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        Collections.reverse(tmp);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     * Returns the User\u0027s DialogBox with a Text component and Image."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     * @param text the User\u0027s text."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     * @param img the Image of the User."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     * @return the User\u0027s DialogBox."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    public static DialogBox getUserDialog(String text, Image img) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        return new DialogBox(text, img);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     * Returns Duke\u0027s DialogBox with a reply as Text and Duke\u0027s Image."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     * @param text Duke\u0027s reply."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     * @param img Duke\u0027s Image."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     * @return Duke\u0027s DialogBox."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    public static DialogBox getDukeDialog(String text, Image img) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        var db \u003d new DialogBox(text, img);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KxxMxxx": 73
    }
  },
  {
    "path": "src/main/java/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import duke.command.CommandCentre;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import duke.parser.Parser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": " * Duke is a chat based task manager that keeps track of the Tasks keyed in by the user."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    private CommandCentre commandCentre;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    private boolean isExit;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     * Constructs a Duke object."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    public Duke() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        String filePath \u003d \"data/duke.txt\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        ui \u003d new Ui(new Scanner(System.in));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        storage \u003d new Storage(filePath);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        isExit \u003d false;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            tasks \u003d new TaskList(storage.load());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            ui.showError(e.toString());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        } finally {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            commandCentre \u003d new CommandCentre(tasks, ui);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            assert ui \u003d\u003d null : \"Ui should not be null\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            assert storage \u003d\u003d null : \"Storage should not be null\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            assert tasks \u003d\u003d null : \"TaskList should not be null\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     * Starts Duke."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        System.out.println(ui.showWelcome());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        while (!isExit) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            String input \u003d ui.readMessage();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "                Command command \u003d CommandCentre.getCommand(Parser.parseCommand(input));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "                ui.printMessage(command.execute(Parser.parseDescription(input)));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "                isExit \u003d command.isExit();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            } catch (DukeException e) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "                ui.printMessage(ui.showError(e.getMessage()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        ui.closeScanner();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        storage.write(tasks);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     * Get\u0027s Duke\u0027s response after executing the User\u0027s command."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     * @param input the User\u0027s input."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     * @return a String representation of Duke\u0027s response."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    public String getResponse(String input) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        if (isExit) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            storage.write(tasks);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "                Command command \u003d CommandCentre.getCommand(Parser.parseCommand(input));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "                isExit \u003d command.isExit();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "                return command.execute(Parser.parseDescription(input));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            } catch (DukeException e) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "                return ui.showError(e.getMessage());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        new Duke().run();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KxxMxxx": 82,
      "-": 4
    }
  },
  {
    "path": "src/main/java/Launcher.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        Application.launch(Main.class, args);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KxxMxxx": 7
    }
  },
  {
    "path": "src/main/java/Main.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": " * A GUI for Duke using FXML."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "public class Main extends Application {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    private Duke duke \u003d new Duke();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            AnchorPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            Scene scene \u003d new Scene(ap);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KxxMxxx": 29
    }
  },
  {
    "path": "src/main/java/MainWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": " * Controller for MainWindow. Provides the layout for the other controls."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "public class MainWindow extends AnchorPane {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    private Duke duke;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     * Initialises the GUI of Duke."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "                DialogBox.getDukeDialog(\"Hello! I\u0027m Duke!\\nWhat can I do?\", dukeImage)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        );"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    public void setDuke(Duke d) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        duke \u003d d;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        String response \u003d duke.getResponse(input);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "                DialogBox.getUserDialog(input, userImage),"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "                DialogBox.getDukeDialog(response, dukeImage)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        );"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "}"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "KxxMxxx": 57
    }
  },
  {
    "path": "src/main/java/duke/command/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": " * Represents a command entered by a user."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     * Returns a String after a command has been executed."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     * @param input the description of a command."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     * @return the String representation of the message to be printed after the execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     * @throws DukeException if a command fails to execute."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    public abstract String execute(Optional\u003cString[]\u003e input) throws DukeException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     * Returns a boolean of whether the command is a bye command. This method is overridden when the user"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     * enters a bye command."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     * @return the boolean of whether the command is a bye command."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KxxMxxx": 30
    }
  },
  {
    "path": "src/main/java/duke/command/CommandCentre.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import duke.exception.DukeCommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import duke.exception.DukeTaskException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import duke.parser.Parser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import duke.task.Todo;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "public class CommandCentre {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    private static HashMap\u003cString, Command\u003e commands;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    private TaskList taskList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     * Constructs a CommandCentre and populate it with standard commands."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     * @param taskList the TaskList that the commands can access."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     * @param ui the Ui that handles the String format of the output."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    public CommandCentre(TaskList taskList, Ui ui) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        commands \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        this.taskList \u003d taskList;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        this.ui \u003d ui;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        this.initialiseCommandList();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     * Returns a Command after it has been found from a collection of Commands."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     * @param key the Command\u0027s keyword."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     * @return the Command with it\u0027s implementation."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     * @throws DukeCommandException if the Command cannot be identified."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    public static Command getCommand(String key) throws DukeCommandException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        if (commands.containsKey(key)) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            Command command \u003d commands.get(key);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            return command;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            throw new DukeCommandException(\"I\u0027m sorry, but I don\u0027t know what that means :-(\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    private void initialiseCommandList() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        this.addByeCommand();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        this.addListCommand();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        this.addDoneCommand();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        this.addTodoCommand();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        this.addDeadlineCommand();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        this.addEventCommand();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        this.addDeleteCommand();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        this.addFindCommand();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        this.addAliasCommand();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    private void addByeCommand() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        commands.put(\"bye\", new Command() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            public String execute(Optional\u003cString[]\u003e input) throws DukeException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "                if (input.isPresent()) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "                    throw new DukeTaskException(\"Bye should not have a description.\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "                }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "                return ui.showBye();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            public boolean isExit() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        });"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    private void addListCommand() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        commands.put(\"list\", new Command() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            public String execute(Optional\u003cString[]\u003e input) throws DukeException {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "                if (input.isPresent()) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "                    throw new DukeTaskException(\"List should not have a description.\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "                }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "                return ui.showList(taskList.getTaskList());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        });"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    private void addDoneCommand() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        commands.put(\"done\", new Command() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            public String execute(Optional\u003cString[]\u003e input) throws DukeException {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "                if (input.isEmpty()) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "                    throw new DukeTaskException(\"The task to be done is not specified.\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "                }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "                Task doneTask \u003d taskList.doTask(input.get()[0]);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "                return ui.showCompletedTask(doneTask);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        });"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    private void addTodoCommand() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        commands.put(\"todo\", new Command() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            public String execute(Optional\u003cString[]\u003e input) throws DukeException {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "                if (input.isEmpty()) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "                    throw new DukeTaskException(\"The description of Todo cannot be empty.\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "                }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "                Todo todo \u003d new Todo(input.get()[0]);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "                taskList.addTask(todo);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "                return ui.showAddedTask(todo, taskList);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        });"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    private void addDeadlineCommand() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        commands.put(\"deadline\", new Command() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            public String execute(Optional\u003cString[]\u003e input) throws DukeException {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "                if (input.isEmpty()) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "                    throw new DukeTaskException(\"The description of a deadline cannot be empty.\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "                } else if (input.get().length \u003e 2) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "                    throw new DukeTaskException(\"There are too many /by in the description.\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "                } else if (input.get().length \u003c 2) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "                    throw new DukeTaskException(\"The description of the deadline is insufficient.\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "                }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "                Deadline deadline \u003d new Deadline(input.get()[0], Parser.parseDate(input.get()[1]));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "                taskList.addTask(deadline);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "                return ui.showAddedTask(deadline, taskList);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        });"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    private void addEventCommand() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        commands.put(\"event\", new Command() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            public String execute(Optional\u003cString[]\u003e input) throws DukeException {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "                if (input.isEmpty()) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "                    throw new DukeTaskException(\"The description of a event cannot be empty.\");"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "                } else if (input.get().length \u003e 2) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "                    throw new DukeTaskException(\"There are too many /at in the description.\");"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "                } else if (input.get().length \u003c 2) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "                    throw new DukeTaskException(\"The description of the deadline is insufficient.\");"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "                }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "                Event event \u003d new Event(input.get()[0], Parser.parseDate(input.get()[1]));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "                taskList.addTask(event);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "                return ui.showAddedTask(event, taskList);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        });"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    private void addDeleteCommand() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        commands.put(\"delete\", new Command() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            public String execute(Optional\u003cString[]\u003e input) throws DukeException {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "                if (input.isEmpty()) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "                    throw new DukeTaskException(\"The task to be deleted is not specified.\");"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "                }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "                Task deletedTask \u003d taskList.deleteTask(input.get()[0]);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "                return ui.showDeletedTask(deletedTask, taskList);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        });"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    private void addFindCommand() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        commands.put(\"find\", new Command() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            public String execute(Optional\u003cString[]\u003e input) throws DukeException {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "                if (input.isEmpty()) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "                    throw new DukeTaskException(\"The keyword(s) is not specified.\");"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "                }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "                TaskList foundList \u003d taskList.findTask(input.get()[0]);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "                return ui.showFound(foundList);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        });"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    private void addAliasCommand() {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        commands.put(\"alias\", new Command() {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "           public String execute(Optional\u003cString[]\u003e input) throws DukeException {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "               if (input.isEmpty()) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "                   throw new DukeTaskException(\"The alias of the command is not specified\");"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "               }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "               String keyword \u003d input.get()[0].split(\" \")[0];"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "               String alias \u003d input.get()[0].split(\" \")[1];"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "               commands.put(alias, CommandCentre.getCommand(keyword));"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "               return ui.showAddedAliasCommand(keyword, alias);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "           }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        });"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KxxMxxx": 186
    }
  },
  {
    "path": "src/main/java/duke/exception/DukeCommandException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": " * Represents a Command exception that occurs during Duke\u0027s execution."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "public class DukeCommandException extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     * Constructs a new DukeCommandException with the specified error message."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     * @param errorMsg the error message as a String."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    public DukeCommandException(String errorMsg) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        super(errorMsg);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KxxMxxx": 16
    }
  },
  {
    "path": "src/main/java/duke/exception/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": " * A checked exception thrown during the execution of the Duke application."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     * Constructs a new DukeException with the specified error message."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     * @param errorMsg the error message as a String."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    public DukeException(String errorMsg) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        super(errorMsg);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KxxMxxx": 16
    }
  },
  {
    "path": "src/main/java/duke/exception/DukeListException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": " * Represents a List exception that occurs during Duke\u0027s execution."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "public class DukeListException extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     * Constructs a new DukeListException with the specified error message."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     * @param errorMsg the error message as a String."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    public DukeListException(String errorMsg) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        super(errorMsg);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KxxMxxx": 16
    }
  },
  {
    "path": "src/main/java/duke/exception/DukeParserException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": " * Represents a Parser exception that occurs during duke\u0027s execution."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "public class DukeParserException  extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     * Constructs a new DukeParserException with the specified error message."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     * @param errorMsg the error message as a String."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    public DukeParserException(String errorMsg) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        super(errorMsg);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KxxMxxx": 16
    }
  },
  {
    "path": "src/main/java/duke/exception/DukeTaskException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": " * Represents a Task exception that occurs during duke\u0027s execution."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "public class DukeTaskException extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     * Constructs a new DukeTaskException with the specified error message."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     * @param errorMsg the error message as a String."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    public DukeTaskException(String errorMsg) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        super(errorMsg);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "}"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "KxxMxxx": 17
    }
  },
  {
    "path": "src/main/java/duke/parser/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "package duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import duke.exception.DukeParserException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import duke.exception.DukeTaskException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import duke.task.Todo;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": " * A Parser class parses all the user input."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    private static SimpleDateFormat formatter \u003d new SimpleDateFormat(\"dd/MM/yyyy HHmm\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     * Parses the user input passed into duke and extracts the command keyword."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     * @param input the user\u0027s input."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     * @return the command keyword."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    public static String parseCommand(String input) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        return input.split(\" \", 2)[0];"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     * Parses the user input passed into duke and extract the description of the command."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     * @param input the user\u0027s input."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     * @return the command\u0027s description."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    public static Optional\u003cString[]\u003e parseDescription(String input) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        String[] userInput \u003d input.split(\" \", 2);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        if (userInput.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        String desc \u003d userInput[1];"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        if (desc.contains(\"/by\")) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            String[] keywords \u003d desc.split(\" /by \");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            return Optional.of(keywords);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        } else if (desc.contains(\"/at\")) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            String[] keywords \u003d desc.split(\" /at \");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            return Optional.of(keywords);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            return Optional.of(new String[]{desc});"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     * Parses the user\u0027s date input to return a Date object."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     * @param input the user\u0027s date input when they specify the date of a task."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     * @return a Date object which date has been parsed into the desired format obtained from the formatter."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     * @throws DukeException if the user\u0027s input is not in the right format."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    public static Date parseDate(String input) throws DukeParserException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            return formatter.parse(input);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            throw new DukeParserException(\"Please key a date in the format dd/MM/yyyy HHHH.\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KxxMxxx": 72
    }
  },
  {
    "path": "src/main/java/duke/storage/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "package duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import duke.task.Todo;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import duke.parser.Parser;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": " * A Storage class loads and writes data into an output file."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    private String filePath;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     * Constructs a new Storage object to read and write to a text file stored"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     * on the hard disk."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     * @param filePath the file path of the file stored on the hard disk."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    public Storage(String filePath) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     * Returns the file path of the file stored on the hard disk."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     * @return the file path."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    public String getFilePath() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     * Loads the file from the hard disk and reads it\u0027s text. The text would then"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     * be converted into Task objects and stored in an ArrayList for duke to process."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     * @return an ArrayList that contains the tasks stored on the hard disk."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     * @throws DukeException if the file stated in the file path does not exist."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    public ArrayList\u003cTask\u003e load() throws DukeException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            File file \u003d new File(filePath);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            Scanner sc \u003d new Scanner(file);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            while (sc.hasNextLine()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "                String[] line \u003d sc.nextLine().split(\" \\\\| \");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "                switch (line[0]) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "                case \"T\":"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "                    Todo todo \u003d new Todo(line[2]);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "                    if (line[1].equals(\"1\")) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "                        todo.markDone();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "                        tasks.add(todo);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "                        tasks.add(todo);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "                case \"D\":"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "                    Deadline deadline \u003d new Deadline(line[2], Parser.parseDate(line[3]));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "                    if (line[1].equals(\"1\")) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "                        deadline.markDone();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "                        tasks.add(deadline);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "                        tasks.add(deadline);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "                case \"E\":"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "                    Event event \u003d new Event(line[2], Parser.parseDate(line[3]));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "                    if (line[1].equals(\"1\")) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "                        event.markDone();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "                        tasks.add(event);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "                        tasks.add(event);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "                default:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "                }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            return tasks;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            throw new DukeException(\"The file stated in the file path cannot be found.\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     * Writes the TaskList onto the file stored on the hard disk. The TaskList is gone"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     * through and the tasks stored in it are concatenated into a String before it is"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     * written to the file stored on the hard disk."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     * @param taskList The TaskList that will be written to the file on the hard disk."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    public void write(TaskList taskList) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            FileWriter fw \u003d new FileWriter(filePath);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            boolean first \u003d true;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            String textToAdd \u003d \"\";"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            for (Task task : taskList.getTaskList()) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "                if (first) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "                    textToAdd \u003d task.formatToWrite();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "                    first \u003d false;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "                    textToAdd \u003d String.format(\"%s\\n%s\", textToAdd, task.formatToWrite());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "                }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            fw.write(textToAdd);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            fw.close();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            System.out.println(e);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KxxMxxx": 122
    }
  },
  {
    "path": "src/main/java/duke/task/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": " * A Deadline task is a Task which the user wishes to be done by a certain deadline."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    Date by;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    SimpleDateFormat formatter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     * Constructs a new Deadline task."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     * @param description the description of the Deadline task."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     * @param by the deadline of the Deadline task."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    public Deadline(String description, Date by) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        this.by \u003d by;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        formatter \u003d new SimpleDateFormat(\"dd/MM/yyyy HHmm\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    public String formatToWrite() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        if (super.isDone) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            return String.format(\"D | %d | %s | %s\", 1, this.description, formatter.format(this.by));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            return String.format(\"D | %d | %s | %s\", 0, this.description, formatter.format(this.by));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        return String.format(\"[D]%s (by: %s)\", super.toString(), formatter.format(this.by));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KxxMxxx": 38
    }
  },
  {
    "path": "src/main/java/duke/task/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": " * An Event task is a Task which the user wishes to be done by a certain deadline."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    Date by;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    SimpleDateFormat formatter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     * Constructs a new Event task."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     * @param description the description of the event task."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     * @param by the deadline of the event task."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    public Event(String description, Date by) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        this.by \u003d by;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        formatter \u003d new SimpleDateFormat(\"dd/MM/yyyy HHmm\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    public String formatToWrite() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        if (super.isDone) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            return String.format(\"E | %d | %s | %s\", 1, this.description, formatter.format(this.by));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            return String.format(\"E | %d | %s | %s\", 0, this.description, formatter.format(this.by));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        return String.format(\"[E]%s (at: %s)\", super.toString(), formatter.format(this.by));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KxxMxxx": 38
    }
  },
  {
    "path": "src/main/java/duke/task/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import duke.exception.DukeTaskException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "public abstract class Task {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    protected Boolean isDone;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     * Constructs a Task with description."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     * @param description the description of the Task."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        return this.description;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     * Marks that the Task has been done."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     * @throws DukeTaskException if the Task has already been done and the user wants it to be done again."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    public void doTask() throws DukeTaskException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        if (this.isDone) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            throw new DukeTaskException(\"The task specified has already been done.\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            this.isDone \u003d true;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     * Marks the Task as done regardless of whether it has been done. This method is called when"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     * the text file stored on the hard disk is being written to the TaskList."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    public void markDone() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     * Returns a unicode representation of whether the Task has been done."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     * @return the String representation of the unicode."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        return this.isDone ? \"[\\u2713]\" : \"[\\u2718]\";  //represents tick and cross"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     * An abstract method that formats the Task into a format more suited to be written to the text"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     * file stored on the hard disk."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     * @return the formatted string that represents the details of a Task."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    public abstract String formatToWrite();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        return String.format(\"%s %s\", this.getStatusIcon(), this.description);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KxxMxxx": 65
    }
  },
  {
    "path": "src/main/java/duke/task/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import duke.exception.DukeParserException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import duke.exception.DukeListException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": " * A TaskList is a list of Tasks that has been entered by the user."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    private ArrayList\u003cTask\u003e tasks;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     * Constructs an empty TaskList."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        this.tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     * Constructs a TaskList based on a list of Tasks."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     * @param tasks the Tasks that will populate the TaskList."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    public TaskList(ArrayList\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        this.tasks \u003d tasks;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     * Gets a list of all the Tasks contained within the TaskList."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     * @return the list of all the Tasks in the TaskList."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    public ArrayList\u003cTask\u003e getTaskList() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        return this.tasks;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     * Gets the number of Tasks that is stored in the TaskList."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     * @return the number of Tasks in the TaskList."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    public int getSize() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        return this.tasks.size();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     * Executes a Task on the TaskList based on the position of the Task in the TaskList."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     * @param input the position of the Task on the TaskList."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     * @return the Task that has been executed."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     * @throws DukeException if the Task cannot be found on the TaskList, if the user did not enter"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     *      a Task number or if the user did not specify which Task to be deleted."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    public Task doTask(String input) throws DukeException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            int itemIndex \u003d Integer.parseInt(input);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            boolean isWithinSize \u003d itemIndex \u003e tasks.size() || itemIndex \u003c 1;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            if (isWithinSize) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "                throw new DukeListException(\"The task number specified is not within the list.\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "                Task currTask \u003d tasks.get(itemIndex - 1);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "                currTask.doTask();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "                return currTask;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            throw new DukeParserException(\"The task specified is not a number.\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     * Adds a Task to the TaskList."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     * @param task the Task to be added into the TaskList."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    public void addTask(Task task) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        tasks.add(task);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     * Deletes a task based on the position of the Task on the TaskList."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     * @param input the position of the Task on the TaskList."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     * @return the Task that has been deleted from the TaskList."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     * @throws DukeException if the Task cannot be found on the TaskList, if the user did not enter"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     *      a Task number or if the user did not specify which Task to be deleted."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    public Task deleteTask(String input) throws DukeException {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            int deleteIndex \u003d Integer.parseInt(input);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            boolean isWithinSize \u003d deleteIndex \u003e tasks.size() || deleteIndex \u003c 1;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            if (isWithinSize) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "                throw new DukeListException(\"The task number specified is not within the list.\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            Task deleted \u003d tasks.remove(deleteIndex - 1);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            return deleted;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            throw new DukeParserException(\"The task specified is not a number.\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     * Finds Tasks based on a keyword that matches the tasks\u0027 description."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     * @param input keyword"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     * @return a TaskList containing the Tasks that match the keyword"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    public TaskList findTask(String input) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        ArrayList\u003cTask\u003e foundTasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        for (Task task: this.tasks) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            if (task.getDescription().contains(input)) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "                foundTasks.add(task);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        return new TaskList(foundTasks);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KxxMxxx": 119
    }
  },
  {
    "path": "src/main/java/duke/task/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": " * A Todo task is a Task that the user wishes to complete."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "public class Todo extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     * Constructs a new Todo Task."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     * @param description the description of the Todo task."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    public Todo(String description) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    public String formatToWrite() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        if (super.isDone) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            return String.format(\"T | %d | %s\", 1, this.description);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            return String.format(\"T | %d | %s\", 0, this.description);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        return String.format(\"[T]%s\", super.toString());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KxxMxxx": 30
    }
  },
  {
    "path": "src/main/java/duke/ui/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": " * A user interface that handles the user input and interactions with the user."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    private Scanner sc;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     * Constructs a Ui object with a Scanner to read input from the command line."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     * @param sc the Scanner used to read input from the command line."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    public Ui(Scanner sc) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        this.sc \u003d sc;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     * Returns a String that has been read by the Scanner."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     * @return the String that is returned by the Scanner."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    public String readMessage() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        return sc.nextLine();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     * Closes the scanner at the end of Duke\u0027s execution."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    public void closeScanner() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        sc.close();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     * Prints a message."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     * @param message the message to be printed."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    public void printMessage(String message) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        System.out.print(message);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     * Returns the String representation of the Duke logo and the welcome message."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     * \u003cp\u003eThis method is called when the Parser starts scanning the user\u0027s input."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    public String showWelcome() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        String logo \u003d \" ____        _        \\n\""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "                + \"|  _ \\\\ _   _| | _____ \\n\""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "                + \"| | | | | | | |/ / _ \\\\\\n\""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "                + \"| |_| | |_| |   \u003c  __/\\n\""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "                + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        return String.format(\"%s\\nHello! I\u0027m Duke\\nWhat can I do for you?\", logo);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     * Returns the String representation of the farewell message."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     * \u003cp\u003eThis method is called when Parser is done scanning the user\u0027s input."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    public String showBye() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        return \"Bye. Hope to see you again soon!\\n\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     * Returns the String representation of the error message contained within the exception."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     * @param errorMsg the error message to be printed."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    public String showError(String errorMsg) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        return String.format(\"☹ OOPS!!! %s\\n\", errorMsg);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     * Returns the String representation of the entire list in the TaskList."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     * @param list the list to be printed."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    public String showList(ArrayList\u003cTask\u003e list) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        int count \u003d 1;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        String listTasks \u003d \"Here are the task(s) in your list:\\n\\n\";"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        for (Task task: list) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            listTasks \u003d String.format(\"%s\\t%d. %s\\n\",listTasks, count, task);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            count++;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        return listTasks;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     * Returns the String representation of the Task that has been added into the TaskList and also the number of"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     * remaining Tasks in the TaskList."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     * @param addedTask the Task that has been added."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     * @param taskList the TaskList which the Task is added to."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    public String showAddedTask(Task addedTask, TaskList taskList) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        return String.format(\"Got it. I\u0027ve added this task:\\n\\n\\t%s\\n\\nNow you have %d task(s) in the list.\\n\","
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "                addedTask, taskList.getSize());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     * Returns the String representation of the Task that has been deleted from the TaskList and also the number of"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     * remaining Tasks in the TaskList."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     * @param deletedTask the Task that has been deleted."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     * @param taskList the TaskList which the Task is deleted from."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    public String showDeletedTask(Task deletedTask, TaskList taskList) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        return String.format(\"Noted. I\u0027ve removed this task:\\n\\n\\t%s\\n\\nNow you have %d task(s) in the list.\\n\","
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "                deletedTask, taskList.getSize());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     * Returns the String representation of the Task after that has been completed."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     * @param completed the Task that has been completed."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    public String showCompletedTask(Task completed) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        return String.format(\"Nice! I\u0027ve marked this task as done: \\n\\n\\t%s\\n\", completed);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     * Returns the String representation of the Tasks found."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     * @param taskList the TaskList of the Tasks that were found."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    public String showFound(TaskList taskList) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        ArrayList\u003cTask\u003e list \u003d taskList.getTaskList();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        int count \u003d 1;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        String found \u003d \"Here are the matching tasks in your list:\\n\\n\";"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        for (Task task: list) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            found \u003d String.format(\"%s\\t%d. %s\\n\", found, count, task);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            count++;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        return found;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     * Returns the String representation of the alias that has been associated to the command."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     * @param keyword the command keyword."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     * @param alias the alias of the command."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     * @return the String representation of the alias."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    public String showAddedAliasCommand(String keyword, String alias) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        return String.format(\"%s has been added as an alias to the %s command.\\n\", alias, keyword);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KxxMxxx": 155
    }
  },
  {
    "path": "src/main/resources/view/DialogBox.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" spacing \u003d \"10.0\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    \u003cpadding\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    \u003c/padding\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "KxxMxxx": 16
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"MainWindow\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            \u003ccontent\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "                \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "            \u003c/content\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "KxxMxxx": 19
    }
  },
  {
    "path": "src/test/java/StorageTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "public class StorageTest {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    public void testGetFilePath() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        assertEquals(\"duke/hello.txt\", new Storage(\"duke/hello.txt\").getFilePath());"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KxxMxxx": 11
    }
  },
  {
    "path": "src/test/java/TodoTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import duke.task.Todo;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "public class TodoTest {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    public void formatToWrite() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        assertEquals(\"T | 0 | say hi\", new Todo(\"say hi\").formatToWrite());"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KxxMxxx": 11
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "todo read book"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "deadline return book /by June 6th"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "done 1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "event project meeting /at Aug 6th 2-4pm"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "done 2"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "todo join sports club"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "done 4"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "todo borrow book"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "list"
      }
    ],
    "authorContributionMap": {
      "KxxMxxx": 9
    }
  },
  {
    "path": "text-ui-test/runtest.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "#!/usr/bin/env bash"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "# create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "if [ ! -d \"../bin\" ]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "then"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    mkdir ../bin"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "fi"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "# delete output from previous run"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "if [ -e \"./ACTUAL.TXT\" ]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "then"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    rm ACTUAL.TXT"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "fi"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "# compile the code into the bin folder, terminates if error occurred"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "if ! javac -cp ../src -Xlint:none -d ../bin ../src/main/java/*.java"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "then"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    echo \"********** BUILD FAILURE **********\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "fi"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "java -classpath ../bin duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "# compare the output to the expected output"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "diff ACTUAL.TXT EXPECTED.TXT"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "if [ $? -eq 0 ]"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "then"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    echo \"Test result: PASSED\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    exit 0"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "else"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    echo \"Test result: FAILED\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "fi"
      }
    ],
    "authorContributionMap": {
      "KxxMxxx": 34
    }
  },
  {
    "path": "tutorials/gradleTutorial.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# Gradle Tutorial"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "Gradle is a _build automation tool_ used to automate build processes. There are many ways of integrating Gradle into a project. In this guide, we will be using the _Gradle wrapper_."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "* [Introduction](#introduction)"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "* [Adding Gradle Support to Your Project](#adding-gradle-support-to-your-project)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "* [Adding Plugins](#adding-plugins)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "  * [CheckStyle](#checkstyle)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "  * [Shadow](#shadow)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "* [Adding Dependencies](#adding-dependencies)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "  * [JUnit](#junit)"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "* [Further Reading](#further-reading)"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "## Introduction"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "As a developer, you write a _build file_ that describes the project. A build file mainly consists of _plugins_, _tasks_ and _properties_. "
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "* **Plugins** extend the functionality of Gradle. For example, the `java` plugin adds support for `Java` projects."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "* **Tasks** are reusable blocks of logic.  For example, the task `clean` simply deletes the project build directory. Tasks can be composed of other tasks or be dependent on another task. "
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "* **Properties** change the behavior of tasks. For instance, `mainClassName` of the `application` plugin is a compulsory property which tells Gradle which class is the entrypoint to your application."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "  As Gradle favors [_convention over configuration_](https://en.wikipedia.org/wiki/Convention_over_configuration), there is not much to you need to configure if you follow the recommended directory structure."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "## Adding Gradle Support to Your Project "
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "1. Pull the branch named `gradle`. Merge it to the `master` branch. This will add the Gradle wrapper to your project."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "   git checkout --track origin/gradle"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "   git checkout master"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "   git merge gradle"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "1. Open the `build.gradle` file in an editor. Update the following code block to point to the main class (i.e., the one containing the `main` method) of your application. The code below assumes your main class is `seedu.duke.duke`"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "   ```groovy"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "   application {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "       mainClassName \u003d \"seedu.duke.duke\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "   }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "1. To check if Gradle has been added to the project correctly, open a terminal window, navigate to the root directory of your project and run the command `gradlew run`. This should result in Gradle running the main method of your project."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ":bulb: Simply run the command `gradlew {taskName}` in the terminal and Gradle will run the task! Here are some example commands:"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "* `gradlew tasks` (or `gradlew tasks --all`): shows a list of tasks available"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "* `gradlew run`: runs the main class of your project"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ":bulb: Some plugins may add more helpful tasks so be sure to check their documentation!"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "#### Using Gradle from within Intellij"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "1. After adding support for Gradle, Intellij might automatically ask you (via a pop-up at the bottom right corner of the Window) whether to import the project as a Gradle project. In that case, go ahead and say yes."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "1. If the above didn\u0027t happen, import the Gradle project by `Help \u003e Find Action \u003e Import Gradle Project`."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "   ![Import Gradle](assets/ImportGradle.png)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "1. If the above didn\u0027t work either, close Intellij, delete the Intellij project files (i.e., `.idea` folder and `*.iml` files), and set up the project again, but instead of choosing `Create project from existing sources`, choose `Import project from external model` -\u003e `Gradle`."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "After this, IntelliJ IDEA will identify your project as a Gradle project and you will gain access to the `Gradle Toolbar`. Through the toolbar, you run Gradle tasks and view your project\u0027s dependencies."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "You can click on the Gradle icon in the Gradle toolbar and create a new run configuration for running Gradle tasks without needing to type a `gradlew` command."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "![Gradle icon](assets/GradleIcon.png)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "## Adding Plugins"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "Gradle plugins are reusable units of build logic. Most common build tasks are provided as core plugins by Gradle. Given below are instructions on how to use some useful plugins:"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "### CheckStyle"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "To add support for _Checkstyle_ (a tool to check if your code complies with a set of style rules), which comes as a core plugin, simply add the line `id \u0027checkstyle\u0027` into the `plugins` block."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "Your build file should look something like this now:"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "```groovy"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "// ..."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "Checkstyle expects configuration files for checkstyle to be in `./config/checkstyle/` by convention."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "A sample checkstyle rule configuration is provided in the branch."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "The plugin adds a few _tasks_ to your project. Run `gradlew checkstyleMain checkstyleTest` to verify that you have set up Checkstyle properly (the command will check your main code and test code against the style rules)."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "**Resources**:"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "* [Gradle documentation for CheckStyle plugin](https://docs.gradle.org/current/userguide/checkstyle_plugin.html)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "### Shadow"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "Shadow is a plugin that packages an application into an executable jar file. To use it, first add the following line to your Gradle build file:"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "```groovy"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    //..."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    //..."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "The plugin can be configured by setting some properties. Let\u0027s try to produce a jar file with the name in format of `{baseName}-{version}.jar`."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "Add the following block to your build file:"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "```groovy"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveVersion \u003d \"0.1.3\""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "Now you can run the command `gradlew shadowJar`.It publishes an executable jar to `./build/libs/`. You should be able to able to execute the created jar file by double-clicking it or using the command `java -jar {jarName}`?"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "**Resources**:"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "* [Gradle documentation for Shadow plugin](https://plugins.gradle.org/plugin/com.github.johnrengelman.shadow)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "* [Gradle documentation for JUnit](https://docs.gradle.org/current/userguide/java_testing.html#using_junit5)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "* [More about the Shadow plugin](https://imperceptiblethoughts.com/shadow/introduction/)"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "## Adding Dependencies"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "Gradle can automate the management of dependencies to third-party libraries. Given below are some examples."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "### JUnit"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "JUnit is a testing framework for Java. It allows developers to write tests and run them. To manage JUnit dependency via Gradle, add the following to your build file:"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "```groovy"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "Then, configure Gradle to use JUnit by adding the following block to your build file:"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "```groovy"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "By convention, java tests belong in `src/test/java` folder. Create a new `test/java` folder in under `src`."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "src"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "├─main"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "│  └─java"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "│     └─seedu/duke/duke.java"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "└─test"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    └─java"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        └─seedu/duke/DukeTest.java"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "If you have imported your Gradle project into IntelliJ IDEA, you will notice that IDEA is able to mark the test directory as the _Test root_ (colored in green by default) automatically."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "You can now write a test (e.g., `test/java/seedu/duke/DukeTest.java`) and run it with `gradlew test`."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "**Resources**:"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "* [Gradle documentation for JUnit](https://docs.gradle.org/current/userguide/java_testing.html#using_junit5)"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "## Further Reading"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "Now that you have a general idea of how to accomplish basic tasks with Gradle, here\u0027s a list of material you can read to further your understanding."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": " "
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "* [Official Gradle Documentation](https://docs.gradle.org/current/userguide/userguide.html)"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "----------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "**Authors:**"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "* Initial Version: Jeffry Lum"
      }
    ],
    "authorContributionMap": {
      "KxxMxxx": 3,
      "-": 167
    }
  },
  {
    "path": "tutorials/javaFxTutorialPart1.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# JavaFX Tutorial Part 1 – Introduction"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "## JavaFX lifecycle of an application"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "Imagine yourself as a director of a play. First you provision the props that you will feature in your play. These can be hand props for your actors to interact with or even set dressings just to liven up the background. You then decide where to layout the props for every scene. With a proper script in hand, you can finally approach a theatre and request for a stage. There on, it’s just a matter of pulling the curtains on your masterpiece."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "![Hierarchy of Objects in JavaFX](assets/JavaFxHierarchy.png)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "A JavaFX application is like a play you are directing. Instead of creating props, you create `Nodes` (`Nodes` are the fundamental building blocks of a JavaFX application), and place them onto a `Scene` (a scene is a graph of `Node`s). Then, you set your `Scene` on a `Stage` provided by JavaFX. When you call `Stage#show()` method, JavaFX renders a window with your `Stage` on it."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "## Setting up Java FX"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "### If you are not using Gradle"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "1. Download the [JavaFX 11 SDK](https://gluonhq.com/products/javafx/) and unzip it."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "1. Import the `libs` folder from the SDK into your project (note: `JAVAFX_HOME` is the directory in which you have unzipped the JavaFX SDK). "
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "   `File` \u003e `Project Structure` \u003e `Libraries` \u003e `+` \u003e `Java` \u003e `{JAVAFX_HOME}/lib`"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "1. From `Run` \u003e `Edit Configurations`, add the following line into your `VM options` for each of the `main` classes."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "   `--module-path {JAVAFX_HOME}/lib --add-modules javafx.controls,javafx.fxml`\u003cbr\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "   e.g., `--module-path C:/javafx-sdk-11.0.2/lib --add-modules javafx.controls,javafx.fxml`"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "### If you are using Gradle"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "Update your `build.gradle` to include the following lines:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "```groovy"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027org.openjfx.javafxplugin\u0027 version \u00270.0.7\u0027"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "javafx {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    version \u003d \"11.0.2\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    modules \u003d [ \u0027javafx.controls\u0027, \u0027javafx.fxml\u0027 ]"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "## Writing your first program"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "As customary, let’s start off with a simple “Hello World” program. Modify your `duke` class to extend `javafx.application.Application`. This requires you to override the `Application#start()` method and provide a concrete implementation. Notice that the method signature for `Application#start()` has a parameter `Stage`. This is the _primary stage_ that JavaFX provides."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "public class duke extends Application {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    "
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    // ..."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        Label helloWorld \u003d new Label(\"Hello World!\"); // Creating a new Label control"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        Scene scene \u003d new Scene(helloWorld); // Setting the scene to be our Label"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        stage.setScene(scene); // Setting the stage to show our screen"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        stage.show(); // Render the stage."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "Note how we have created a `Label` to contain the text that we want to show. We then create the `Scene` and set its content. Finally, we set the stage and show it. "
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "Next, we create another Java class, `Launcher`, as an entry point to our application."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "The `Launcher` class is reproduced below in its entirety."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": " * A launcher class to workaround classpath issues."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        Application.launch(duke.class, args);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "Run `Launcher` and you should see something like this:"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "![Hello World](assets/HelloWorld.png) "
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "Congratulations! You have created your first GUI application!"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "## Exercises"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "1. We mentioned that `Node`s are the fundamental building blocks of JavaFX and used a `Label` as our root node in the HelloWorld application."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "   1. What are some of the other types of `Node`s?"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "   1. How does JavaFX group them?"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "1. `Node`s can be interacted with like Plain Old Java Objects (POJO)."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "   1. What properties of a `Label` can you change programmatically?"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Try changing the `Label` to have a font of Arial at size 50."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "1. You’ve learnt that a `Stage` can be thought of as a window. "
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Can you have more than one `Stage` an application?"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Try creating another stage and showing it! What happens?"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "**Authors:**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "* Initial Version: Jeffry Lum"
      }
    ],
    "authorContributionMap": {
      "KxxMxxx": 3,
      "-": 107
    }
  },
  {
    "path": "tutorials/javaFxTutorialPart2.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "# JavaFX Tutorial Part 2 - Creating a GUI for duke"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "In this tutorial, we will be creating a GUI for duke from scratch based on the following mockup."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "![Mockup for duke](assets/DukeMockup.png)"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "## JavaFX controls"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "Controls are reusable UI elements. Refer to the [JavaFX\u0027s official documentation](https://openjfx.io/javadoc/11/javafx.controls/javafx/scene/control/package-summary.html) for a list of controls available."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "From the mockup above, can you identify the controls that we will need to use? "
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "Mockup | Control "
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "------ | :---: |"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "![ImageView](assets/MockupImageView.png) | ImageView"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "![Label](assets/MockupLabel.png) | Label"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "![Button](assets/MockupButton.png) | Button"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "![TextField](assets/MockupTextField.png) | TextField"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "![ScrollPane](assets/MockupScrollPane.png) | ScrollPane"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "## Designing the Layout"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "Now that we know what controls we need to implement our UI, let’s start programming! We quickly run into a problem: how do we show all of them on the screen at once? "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "Each scene is initialized with a root `Node`. In the previous tutorial, our root `Node` was a `Label`."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "What happens when we need to display more than one `Node` on the `Scene`? For that, we need to understand the JavaFX hierarchy. Recall from the previous tutorial:"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "![Hierarchy of Objects in JavaFX](assets/JavaFxHierarchy.png)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " "
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "From the diagram, you see that the root `Node` can contain many other `Nodes` and similarly, each of those `Nodes` can contain many other `Nodes`. This means that if we can find a _container_ to set as our root `Node`, we can place all our other `Nodes` in it."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "But how do we get the exact layout we want in the UI? JavaFX provides that functionality in the form of **layout panes** in `javafx.scene.layouts`. Each layout pane follows a _layout policy_ to decide how to arrange its children. For example, the `VBox` lays out its children in a single vertical column and its counterpart, the `HBox` lays out its children in a single horizontal row. "
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ":bulb: A comprehensive list of layouts and how they behave is available here from the [official documentation](https://openjfx.io/javadoc/11/javafx.graphics/javafx/scene/layout/package-summary.html)."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "One way to obtain the layout in the mockup is as follows. "
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "![duke\u0027s layout](assets/DukeSceneGraph.png) "
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "To get that layout, we create a new `AnchorPane` and add our controls to it. Similarly, we create a new `VBox` to hold the contents of the `ScrollPane`. The code should look something like this:"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "public class duke extends Application {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    private Scene scene;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // ... "
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "         //Step 1. Setting up required components"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "         "
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        //The container for the content of the chat to scroll."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "         scrollPane \u003d new ScrollPane();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "         dialogContainer \u003d new VBox();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "         scrollPane.setContent(dialogContainer);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "         userInput \u003d new TextField();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "         sendButton \u003d new Button(\"Send\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     "
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "         AnchorPane mainLayout \u003d new AnchorPane();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "         mainLayout.getChildren().addAll(scrollPane, userInput, sendButton);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "         scene \u003d new Scene(mainLayout);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     "
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "         stage.setScene(scene);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "         stage.show();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // more code to be added here later"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "Run the application and you should see something like this:"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "![duke\u0027s raw layout](assets/RawLayout.png)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": " "
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "That is not what we were expecting, what did we forget to do?"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "## Styling the Controls"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "Almost every JavaFX object offer properties that you can set to customize its look and feel. For example, the `Stage` allows you to set its preferred size and title. Again, refer to the official JavaFX documentation for a comprehensive list of properties that you can modify. Here’s how you can get the application to look like the mockup:"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "Add the following code to the bottom of the `start` method. You\u0027ll have to add `import javafx.scene.layout.Region;` to the imports too."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        //Step 1. Formatting the window to look as expected."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "         "
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        //..."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        //Step 2. Formatting the window to look as expected"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "        stage.setTitle(\"duke\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        stage.setResizable(false);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        stage.setMinHeight(600.0);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        stage.setMinWidth(400.0);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        mainLayout.setPrefSize(400.0, 600.0);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        scrollPane.setPrefSize(385, 535);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        scrollPane.setHbarPolicy(ScrollPane.ScrollBarPolicy.NEVER);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        scrollPane.setVbarPolicy(ScrollPane.ScrollBarPolicy.ALWAYS);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        scrollPane.setVvalue(1.0);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        scrollPane.setFitToWidth(true);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        // You will need to import `javafx.scene.layout.Region` for this. "
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        dialogContainer.setPrefHeight(Region.USE_COMPUTED_SIZE);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput.setPrefWidth(325.0);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        sendButton.setPrefWidth(55.0);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        AnchorPane.setTopAnchor(scrollPane, 1.0);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        AnchorPane.setBottomAnchor(sendButton, 1.0);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        AnchorPane.setRightAnchor(sendButton, 1.0);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        AnchorPane.setLeftAnchor(userInput , 1.0);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        AnchorPane.setBottomAnchor(userInput, 1.0);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        // more code to be added here later"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "Run the application again. It should now look like this:"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "![duke\u0027s Final layout](assets/FinalLayout.png)"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "## Exercises"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "1. In the tutorial, we used an `AnchorPane` to achieve the desired layout.  "
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Can you find other ways to obtain a similar layout? "
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "   1. What are the advantages and disadvantages of your layout?"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "1. Try interacting with the application"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "   1. What happens when you press the `Enter` key or left-click the send button?"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Why?"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "**Authors:**"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "* Initial Version: Jeffry Lum"
      }
    ],
    "authorContributionMap": {
      "KxxMxxx": 8,
      "-": 150
    }
  },
  {
    "path": "tutorials/javaFxTutorialPart3.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# JavaFX Tutorial 3 – Interacting with the user"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "Picking up from where we left off last tutorial, we have successfully achieved the desired layout. Now let’s make the application respond to user input. "
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "Rather than to do everything in one try, let’s iterate and build up towards our final goal. "
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "## Iteration 1 – Echoing the User"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "JavaFX has an _event-driven architecture style_. As such, we programmatically define _handler_ methods to execute as a response to certain _events_. When an event is detected, JavaFX will call the respective handlers."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "For duke, there are two events that we want to respond to, namely the user pressing `Enter` in the `TextField` and left-clicking the `Button`. These are the `onAction` event for the `TextField` and the `onMouseClicked` event for the `Button`."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "For now, let’s have the application add a new `Label` with the text from the `TextField`. Update the `Main` class as follows. You\u0027ll need to add an `import javafx.scene.control.Label;` too."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "@Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public void start(Stage stage) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    // Step 1 code here"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    //Step 2 code here"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    input.txt"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    sendButton.setOnMouseClicked((event) -\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        dialogContainer.getChildren().add(getDialogLabel(userInput.getText()));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    });"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    "
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    userInput.setOnAction((event) -\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        dialogContainer.getChildren().add(getDialogLabel(userInput.getText()));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    });"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": " * Iteration 1:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": " * Creates a label with the specified text and adds it to the dialog container."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": " * @param text String containing text to add"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": " * @return a label with the specified text that has word wrap enabled."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "private Label getDialogLabel(String text) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    // You will need to import `javafx.scene.control.Label`."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    Label textToAdd \u003d new Label(text);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    textToAdd.setWrapText(true);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    return textToAdd;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "Run the program and give it a whirl!"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "![Echo not scrolling as intended](assets/EchoNotScrolling.png)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "At first glance everything appears to work perfectly. However, when the `VBox` stretches beyond the confines of the `ScrollPane`, the `ScrollPane` does not scroll down automatically as expected. We can remedy this by attaching a handler on the `VBox` to react to its own size changing and scrolling the `ScrollPane` down."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "Update the `start` method as shown below."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "public void start(Stage stage) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    // current code ..."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": " "
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    //Scroll down to the end every time dialogContainer\u0027s height changes."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    dialogContainer.heightProperty().addListener((observable) -\u003e scrollPane.setVvalue(1.0));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "Verify that the `ScrollPane` scrolls as intended."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "## Iteration 2 – Adding Dialog Boxes"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "In the mockup of the UI, notice that the dialog boxes are composed of two different controls (`ImageView` and `Label`) and reused multiple times. In situations like this, it is often beneficial to create our own custom control."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s create our custom control `DialogBox`:"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label text;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public DialogBox(Label l, ImageView iv) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        text \u003d l;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        displayPicture \u003d iv;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        text.setWrapText(true);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        displayPicture.setFitWidth(100.0);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        displayPicture.setFitHeight(100.0);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        this.setAlignment(Pos.TOP_RIGHT);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        this.getChildren().addAll(text, displayPicture);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "We use the code in our main class just like any other control. Here are the steps to update the code to use the custom control in `Main.java`."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "First, add these imports:"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "Next, add two images to the `main/resources/images` folder."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "For this tutorial, we have two images `DaUser.png` and `DaDuke.png` to represent the user avatar and duke\u0027s avatar respectively but you can use any image you want."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "Image|Filename"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "---|---"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "![DaDuke](assets/DaUser.png) | `DaUser.png`"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "![DaUser](assets/DaDuke.png) | `DaDuke.png`"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "public class duke extends Application {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    // ..."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image user \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image duke \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    // ..."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "Add a new method to handle user input:"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": " * Iteration 2:"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": " * Creates two dialog boxes, one echoing user input and the other containing duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": " * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "private void handleUserInput() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    Label userText \u003d new Label(userInput.getText());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    Label dukeText \u003d new Label(getResponse(userInput.getText()));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            new DialogBox(userText, new ImageView(user)),"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            new DialogBox(dukeText, new ImageView(duke))"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    );"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    userInput.clear();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": " * You should have your own function to generate a response to user input."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": " * Replace this stub with your completed method."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "private String getResponse(String input) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    return \"duke heard: \" + input;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "Update the event handler code in the `start` method to use the new `handleUserInput` method:"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "@Override"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "public void start(Stage stage) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    //..."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    //Part 3. Add functionality to handle user input."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    sendButton.setOnMouseClicked((event) -\u003e {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        handleUserInput();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    });"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    userInput.setOnAction((event) -\u003e {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        handleUserInput();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    });"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "Run the program and see how it works."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "![DialogBoxes Iteration 2](assets/DialogBoxesIteration2.png) "
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "## Iteration 3 – Adding custom behavior to DialogBox"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "One additional benefit of defining a custom control is that we can add behavior specific to our `DialogBox`. Let’s add a method to flip a dialog box such that the image on the left to differentiate between user input and duke’s output."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": " * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "private void flip() {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    this.setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    FXCollections.reverse(tmp);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    this.getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "public static DialogBox getUserDialog(Label l, ImageView iv) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    return new DialogBox(l, iv);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "public static DialogBox getDukeDialog(Label l, ImageView iv) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    var db \u003d new DialogBox(l, iv);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    db.flip();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    return db;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "You\u0027ll need to update the imports as follows:"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "Now, we can go back to the `Main` class and change the event handler to use our new `DialogBox`. "
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "private void handleUserInput() {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    Label userText \u003d new Label(userInput.getText());"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    Label dukeText \u003d new Label(getResponse(userInput.getText()));"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "            DialogBox.getUserDialog(userText, new ImageView(user)),"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "            DialogBox.getDukeDialog(dukeText, new ImageView(duke))"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    );"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    userInput.clear();"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "Run the application and play around with it. "
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "![DialogBoxes Iteration 3](assets/DialogBoxesIteration3.png)"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "Congratulations! "
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "You have successfully implemented a fully functional GUI for duke!  "
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "## Exercises"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "1. While the GUI looks similar to the mockup, there are still parts that need to be refined. Try your hand at some of these tasks:"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "   * Add padding between each DialogBox"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "   * Add padding between each ImageView and its Label"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "   * Clip the ImageView into a circle"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "   * Add background color to each dialog box"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "1. After attempting the changes, reflect critically on the following:"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "   * What was the development workflow like?"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "   * Is the code base well-organized?"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "**Authors:**"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "* Initial Version: Jeffry Lum"
      }
    ],
    "authorContributionMap": {
      "KxxMxxx": 8,
      "-": 235
    }
  },
  {
    "path": "tutorials/javaFxTutorialPart4.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# JavaFX Tutorial 4 – FXML "
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "While we have produced a fully functional prototype, there are a few major problems with our application."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "1. The process of visually enhancing the GUI is long and painful:"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "   * Does the `TextField` need to be 330px or 325px wide? "
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "   * How much padding is enough padding to look good?"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "   Every small change requires us to rebuild and run the application.  "
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "1. Components are heavily dependent on each other:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "   Why does `Main` need to know that `DialogBox` needs a `Label`? "
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "   What happens if we change the `Label` to a custom `ColoredLabel` in the future?  "
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    "
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    We need to minimize the amount of information each control needs to know about another."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    Otherwise, making changes in the future will break existing features."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "1. The code is untidy and long:"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "   Why is all the code in one place?"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "   The `Main` class attempts to do it all. "
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "   Code for visual tweaks, listeners and even utility methods are all in one file."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "   This makes it difficult to find and make changes to existing code."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "FXML is a XML-based language that allows us to define our user interface. Properties of JavaFX objects can be defined in the FXML file. For example:  "
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "```xml"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "The FXML snippet define a TextField similar to the one that we programmatically defined previous in Tutorial 2. Notice how concise FXML is compared to the plain Java version."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "Let\u0027s return to duke and convert it to use FXML instead."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "# Rebuilding the Scene using FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "Scene Builder is a tool developed by Oracle and currently maintained by Gluon. It is a What-You-See-Is-What-You-Get GUI creation tool. [Download](https://gluonhq.com/products/scene-builder/#download) the appropriate version for your OS and install it."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "Create the following files in `src/main/resources/view`:"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "**MainWindow.fxml**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "```xml"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"MainWindow\"\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "         \u003ccontent\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" /\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "         \u003c/content\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "**DialogBox.fxml**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "```xml"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003cpadding\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003c/padding\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "1. Let’s explore the provided FXML files in Scene Builder. "
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    "
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    Running the tool brings up the main screen."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    Select `Open Project` \u003e `src/main/resources/view/MainWindow.fxml`. Inspect each control and its properties."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "   ![SceneBuilder opening MainWindow.fxml](assets/SceneBuilder.png)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "1. On the right accordion pane, you can modify the properties of the control that you have selected. Try changing the various settings and see what they do!"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": " "
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "1. On the left accordion, you can see that we have set the controller class to `MainWindow`. "
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "We will get to that later."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": " "
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "   ![Controller for MainWindow](assets/MainWindowController.png)"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "1. Let’s repeat the process for `DialogBox`."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "   The main difference here is that DialogBox checks `Use fx:root construct` and _does not define a controller class_. "
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "   ![Settings for DialogBox](assets/DialogBoxController.png)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "## Using Controllers"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "As part of the effort to separate the code handling duke\u0027s logic and UI, let\u0027s _refactor_ the UI-related code to its own class."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "We call these UI classes _controllers_. "
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s implement the `MainWindow` controller class that we specified in `MainWindow.fxml`."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "**MainWindow.java**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": " * Controller for MainWindow. Provides the layout for the other controls."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends AnchorPane {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    private duke duke;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    public void setDuke(duke d) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        duke \u003d d;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        String response \u003d duke.getResponse(input);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "                DialogBox.getUserDialog(input, userImage),"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "                DialogBox.getDukeDialog(response, dukeImage)"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        );"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "The `@FXML` annotation marks a `private` or `protected` member and makes it accessible to FXML despite its modifier."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "Without the annotation, we will have to make everything `public` and expose our UI to unwanted changes."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "The `FXMLLoader` will map the a control with a `fx:id` defined in FXML to a variable with the same name in its controller."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "Notice how in `MainWindow`, we can invoke `TextField#clear()` on `userInput` and access its content just as we did in the previous example."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "Similarly, methods like private methods like `handleUserInput` can be used in FXML when annotated by `@FXML`. "
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "## Using FXML in our application"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "Let\u0027s create a new `Main` class as the bridge between the existing logic in `duke` and the UI in `MainWindow`."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "**Main.java**"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "@Override"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": " * A GUI for duke using FXML."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "public class Main extends Application {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "    private duke duke \u003d new duke();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "            AnchorPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "            Scene scene \u003d new Scene(ap);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "Again, we can interact with the `AnchorPane` defined in the FXML as we would have if we created the `AnchorPane` ourselves."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "For our custom `DialogBox`, we did not define a controller so let\u0027s create a controller for it."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "**DialogBox.java**"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": " * An example of a custom control using FXML."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": " * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": " * containing text from the speaker."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    private DialogBox(String text, Image img) {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "        displayPicture.setImage(img);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "        Collections.reverse(tmp);"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "        getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "        setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "    public static DialogBox getUserDialog(String text, Image img) {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "        return new DialogBox(text, img);"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "    public static DialogBox getDukeDialog(String text, Image img) {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "        var db \u003d new DialogBox(text, img);"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "When we create a new instance of `DialogBox`, we set both the controller and root Node to `DialogBox`. "
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "From this point onwards we can interact with `DialogBox` as we have in the previous tutorials."
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "The last change that we have to make is to point our `Launcher` class in the right direction:"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "In `Launcher.java`"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "//...    "
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "Application.launch(Main.class, args);"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "//..."
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "[todo]: # (Discussion on the fx:root pattern.)"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "## Exercises"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "1. Convert `MainWindow` to use the `fx:root` construct."
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "1. Extend `MainWindow` to have a `Stage` as a root Node."
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "1. Customize the appearance of the application further with CSS."
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "**Authors:**"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "* Initial Version: Jeffry Lum"
      }
    ],
    "authorContributionMap": {
      "KxxMxxx": 8,
      "-": 286
    }
  },
  {
    "path": "tutorials/textUiTestingTutorial.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# Text UI Testing Tutorial"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "1. Create a folder `[project root]\\text-ui-test`"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "1. Add a `runtest.bat` (if you are on Windows) or `runtest.sh` (if you are on a *nix OS) into the folder, containing the script below.\u003cbr\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "  `runtest.bat`:"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "   @ECHO OFF"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "   "
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "   REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "   if not exist ..\\bin mkdir ..\\bin"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "   "
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "   REM delete output from previous run"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "   del ACTUAL.TXT"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "   "
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "   REM compile the code into the bin folder"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "   javac  -cp ..\\src -Xlint:none -d ..\\bin ..\\src\\main\\java\\duke.java"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "   IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "       echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "       exit /b 1"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "   )"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "   REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "   "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "   REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "   java -classpath ..\\bin duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "   "
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "   REM compare the output to the expected output"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "   FC ACTUAL.TXT EXPECTED.TXT"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "   "
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "   `runtest.sh`:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "   ```shell"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "   #!/usr/bin/env bash"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "   "
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "   # create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "   if [ ! -d \"../bin\" ]"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "   then"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "       mkdir ../bin"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "   fi"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "   "
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "   # delete output from previous run"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "   if [ -e \"./ACTUAL.TXT\" ]"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "   then"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "       rm ACTUAL.TXT"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "   fi"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "   "
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "   # compile the code into the bin folder, terminates if error occurred"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "   if ! javac -cp ../src -Xlint:none -d ../bin ../src/main/java/duke.java"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "   then"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "       echo \"********** BUILD FAILURE **********\""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "       exit 1"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "   fi"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "   "
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "   # run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "KxxMxxx"
        },
        "content": "   java -classpath ../bin duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "   "
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "   # compare the output to the expected output"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "   diff ACTUAL.TXT EXPECTED.TXT"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "   if [ $? -eq 0 ]"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "   then"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "       echo \"Test result: PASSED\""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "       exit 0"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "   else"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "       echo \"Test result: FAILED\""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "       exit 1"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "   fi"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "1. Update the `javac` and `java` commands in the script to match the name/location of your main class."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "1. Add an `EXPECTED.txt` to the same folder, containing the expected output."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "1. Add an `input.txt` containing the input commands."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "1. Run the `.bat`/`.sh` file to execute the test."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "**Authors:**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "* Initial Version: based on se-edu/addressbook-level2, adapted by Jeffry Lum"
      }
    ],
    "authorContributionMap": {
      "KxxMxxx": 4,
      "-": 70
    }
  }
]
