[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "group \u0027duke\u0027"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "    archiveBaseName \u003d \"Duke\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "    archiveVersion \u003d \"1.0\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "    String javaFxVersion \u003d \u002711.0.2\u0027"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": " "
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "test {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    // Change this to your main class."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "    mainClassName \u003d \"Launcher\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "run {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TanZhanMing": 31,
      "-": 17
    }
  },
  {
    "path": "docs/README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "## Introduction"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "Duke is a **Personal Assistant Chatbot** that helps a person organise a list of stuff to do; including deadlines or events. "
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "The name Duke was chosen in honor of Duke, the Java Mascot. **While Duke has a Graphical User Interface (GUI), its main form of input is Command Line Interface (CLI) based**, thus favoring people who can type fast."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": " "
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "## Pre-requisites"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "1. Ensure you have Java 11 or above installed in your Computer. You can do so at the [java website.](https://www.oracle.com/technetwork/java/javase/downloads/jdk11-downloads-5066655.html)"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "2. Download the latest Duke.jar [here.](https://github.com/TanZhanMing/duke/releases)"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": " "
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "## Starting Off"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "1. Copy the file to the folder you want to use as the home folder for Duke."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "2. Double-click the file to start the app. The GUI should appear in a few seconds."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "![Image of Duke start screen](https://tanzhanming.github.io/duke/UGpic1.PNG)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "3.Type the command in the command box and press `Enter` or click `Send` to execute it.\\"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "4.Lastly, entering `bye` exits the app."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": " "
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "## Features "
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "### Feature 1: Adding a \u0027To-Do\u0027 Task"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "Creates a basic \u0027To-Do\u0027 task"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "#### **keywords**: `todo`  "
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "Format: `todo` (insert task description here)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "#### Example: `todo` finish JUnit testing"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "![Image of Duke todo screen](https://tanzhanming.github.io/duke/UGpic2.PNG)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": " "
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "### Feature 2: Adding a \u0027Deadline\u0027 Task"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "Creates a basic \u0027Deadline\u0027 task with a date and time value"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "#### **keywords**: `deadline` `/by`  "
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "Format: `deadline` (insert task description here) `/by` (date and time)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "#### Example: `deadline` finish Project `/by` 20/04/2019 10:00"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": ":bulb: You can try different date-time formats such as \u0027dd/mm/yyyy HH:mm:ss\u0027 or \u0027dd-mmm-yyyy HHmm\u0027"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "![Image of Duke deadline screen](https://tanzhanming.github.io/duke/UGpic3.PNG)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": " "
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "### Feature 3: Adding an \u0027Event\u0027 Task"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "Creates a basic \u0027Event\u0027 task with a date and time value"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "#### **keywords**: `event` `/at`  "
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "Format: `event` (insert task description here) `/at` (date and time)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "#### Example: `event` game event `/at` 23-DEC-2020 0230"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "![Image of Duke event screen](https://tanzhanming.github.io/duke/UGpic4.PNG)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": " "
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "### Feature 4: Showing a \u0027List\u0027 of All Tasks"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "Displays a list of all tasks that have been previously inputted."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "#### **keywords**: `list`  "
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "Format: `list`"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "#### Example: `list`"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "Let us say for example you followed the previous 3 examples and input all 3 commands at once. You should get something like this. "
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "![Image of Duke event screen](https://tanzhanming.github.io/duke/UGpic5.PNG)"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": " "
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "### Feature 5: Marking a Task as \u0027Done\u0027"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "Marks a selected task as completed."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "#### **keywords**: `done`  "
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "Format: `done` (insert task number here)"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "#### Example: `done` 2"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": ":bulb: It is recommended that you use the `list` command beforehand to double check the task number of the task you wish to delete."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "![Image of Duke done screen](https://tanzhanming.github.io/duke/UGpic6.PNG)"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": " "
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "### Feature 6: \u0027Delete\u0027-ing a Task"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "Removes a task from the task list."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "#### **keywords**: `delete`  "
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "Format: `delete` (insert task number here)"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "#### Example: `delete` 1"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": ":bulb: Do note that when you delete a task, all the numbers after said task get shifted forward by 1. Do refresh the task list with the `list` command often to ensure you do not accidentally delete the wrong task. :sweat:"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "![Image of Duke delete screen](https://tanzhanming.github.io/duke/UGpic7.PNG) ![Image of Duke delete screen2](https://tanzhanming.github.io/duke/UGpic8.PNG)  "
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": " "
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "### Feature 7: \u0027Find\u0027-ing a Task"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "Finds a task from the task list that contains your expression."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "#### **keywords**: `find`  "
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "Format: `find` (insert task description here)"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "#### Example: `find` finish"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": ":bulb: The task description need not be a full word; even typing a partial word or just a few letters as the task description would work!"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "![Image of Duke find screen](https://tanzhanming.github.io/duke/UGpic9.PNG)"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": " "
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "### Feature 8: Checking for Duplicate Entries"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "The application will automatically check for entries where the task descriptions are exactly the same and warn you about them."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "#### **keywords**: NIL "
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "Format: Automatically enabled"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "#### Example: adding a duplicate \u0027game event\u0027 task."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "![Image of Duke duplicate screen](https://tanzhanming.github.io/duke/UGpic10.PNG)"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": " "
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "### Feature 9: Closing the application"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "The application will terminate and all data will be saved. (See feature 10)"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "#### **keywords**: `bye` "
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "Format: `bye`"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "#### Example: You can send the `bye` message or just click the \u0027x\u0027 button on the top right hand corner of the application to close it."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": " "
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "### Feature 10: Auto-save"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "The application will automatically save the data whenever changes are made."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "#### **keywords**: NIL "
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "Format: Automatically enabled"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "#### Example: You can open up the Duke application again after closing it to find all your data safe and sound. :smile:"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "![Image of Duke autosave screen](https://tanzhanming.github.io/duke/UGpic11.PNG)"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": " "
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "## FAQ"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "**Q:** How do I transfer my data to another Computer?\\"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "**A:** Install the app in the other computer and overwrite the empty data file it creates with the file that contains the data of your previous Duke folder."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": " "
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "## Command Summary"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "Command | Syntax  | Example"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "------- | ------- | -------"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "`todo` | `todo` (insert task description here) | `todo` finish JUnit testing"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "`deadline` | `deadline` (insert task description here) `/by` (date and time) | `deadline` finish Project `/by` 20/04/2019 10:00"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "`event` | `event` (insert task description here) `/at` (date and time) | `event` game event `/at` 23-DEC-2020 0230"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "`list` | `list` |"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "`done` | `done` (insert task number here) | `done` 2"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "`delete` | `delete` (insert task number here) | `delete` 1"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "`find` | `find` (insert task description here) | `find` finish"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "`bye` | `bye` | "
      }
    ],
    "authorContributionMap": {
      "TanZhanMing": 183,
      "-": 13
    }
  },
  {
    "path": "settings.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "rootProject.name \u003d \u0027Duke\u0027"
      }
    ],
    "authorContributionMap": {
      "TanZhanMing": 1
    }
  },
  {
    "path": "src/main/java/DateParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": " * A list of accepted date formats by me to parse user inputs through to recognise dates"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "class DateParser {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "    private static SimpleDateFormat formatter1 \u003d new SimpleDateFormat(\"dd-MM-yyyy HH:mm:ss\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "    private static SimpleDateFormat formatter2 \u003d new SimpleDateFormat(\"dd-MM-yyyy HH:mm\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "    private static SimpleDateFormat formatter3 \u003d new SimpleDateFormat(\"dd-MM-yyyy HHmm\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "    private static SimpleDateFormat formatter4 \u003d new SimpleDateFormat(\"dd-MM-yyyy\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "    private static SimpleDateFormat formatter5 \u003d new SimpleDateFormat(\"dd-MMM-yyyy HH:mm:ss\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "    private static SimpleDateFormat formatter6 \u003d new SimpleDateFormat(\"dd-MMM-yyyy HH:mm\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "    private static SimpleDateFormat formatter7 \u003d new SimpleDateFormat(\"dd-MMM-yyyy HHmm\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "    private static SimpleDateFormat formatter8 \u003d new SimpleDateFormat(\"dd-MMM-yyyy\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "    private static SimpleDateFormat formatter9 \u003d new SimpleDateFormat(\"dd/MM/yyyy HH:mm:ss\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "    private static SimpleDateFormat formatter10 \u003d new SimpleDateFormat(\"dd/MM/yyyy HH:mm\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "    private static SimpleDateFormat formatter11 \u003d new SimpleDateFormat(\"dd/MM/yyyy HHmm\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "    private static SimpleDateFormat formatter12 \u003d new SimpleDateFormat(\"dd/MM/yyyy\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "    private static SimpleDateFormat formatter13 \u003d new SimpleDateFormat(\"dd/MMM/yyyy HH:mm:ss\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "    private static SimpleDateFormat formatter14 \u003d new SimpleDateFormat(\"dd/MMM/yyyy HH:mm\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "    private static SimpleDateFormat formatter15 \u003d new SimpleDateFormat(\"dd/MMM/yyyy HHmm\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "    private static SimpleDateFormat formatter16 \u003d new SimpleDateFormat(\"dd/MMM/yyyy\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "     * Returns a Date object to the caller class by parsing through all listed formats."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "     * It ignores all wrong format exceptions until the final one"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "     * where it returns a null value to signify an inability to match the String"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "     * given to any date format."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "     * \u003cp\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "     * @param date the string given by the user which might contain a date."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "     * @return either a Date object or null value."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "    static Date parseDate(String date) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "            return formatter1.parse(date);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "        } catch (Exception ignored) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "            return formatter2.parse(date);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "        } catch (Exception ignored) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "        }try {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "            return formatter3.parse(date);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "        } catch (Exception ignored) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "        }try {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "            return formatter4.parse(date);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "        } catch (Exception ignored) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "        }try {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "            return formatter5.parse(date);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "        } catch (Exception ignored) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "        }try {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "            return formatter6.parse(date);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "        } catch (Exception ignored) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "        }try {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "            return formatter7.parse(date);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "        } catch (Exception ignored) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "            return formatter8.parse(date);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "        } catch (Exception ignored) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "            return formatter9.parse(date);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "        } catch (Exception ignored) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "        }try {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "            return formatter10.parse(date);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "        } catch (Exception ignored) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "        }try {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "            return formatter11.parse(date);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "        } catch (Exception ignored) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "        }try {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "            return formatter12.parse(date);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "        } catch (Exception ignored) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "        }try {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "            return formatter13.parse(date);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "        } catch (Exception ignored) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "        }try {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "            return formatter14.parse(date);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "        } catch (Exception ignored) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "            return formatter15.parse(date);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "        } catch (Exception ignored) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "        }try {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "            return formatter16.parse(date);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "        } catch (Exception ignored) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TanZhanMing": 95
    }
  },
  {
    "path": "src/main/java/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": " * A subclass of the Task class with added variables \u0027by\u0027 and \u0027date\u0027."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": " * @see Task"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "    protected String by;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "     * The constructor for the Deadline class."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "     * @param description  Description of the deadline task."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "     * @param by Used to store a date or user-inputted temporal descriptions."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "    Deadline(String description, String by) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "        this.by \u003d by;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "        Date date \u003d DateParser.parseDate(by);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "        if (date !\u003d null) { this.by \u003d date.toString(); }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "     * An overridden toString method."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "     * @return String containing deadline identifier, status, description and time."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "        return \"[D]\" + super.toString() + \" (by: \" + by + \")\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "     * An overridden getDetails method for {@link FileWriting}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "     * @return String containing deadline identifier, status, description and time for writing."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "    public String getDetails() {return \"D @ \" + super.getDetails() + \" @ \" + by; }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TanZhanMing": 42
    }
  },
  {
    "path": "src/main/java/DialogBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "import javafx.scene.text.Text;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "import javafx.scene.text.TextAlignment;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": " * An example of a custom control using FXML."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": " * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a text"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": " * containing text from the speaker."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "    private Text dialog \u003d new Text();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "    private ImageView displayPicture \u003d new ImageView();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "    private Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "    private DialogBox(String text, Image img) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "        displayPicture.setImage(img);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "        Collections.reverse(tmp);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "        getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "        setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "    static DialogBox getUserDialog(String text, Image img) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "        var db \u003d new DialogBox(text, img);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "        db.dialog.setTextAlignment(TextAlignment.RIGHT);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "    static DialogBox getDukeDialog(String text, Image img) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "        var db \u003d new DialogBox(text, img);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "        db.dialog.setTextAlignment(TextAlignment.LEFT);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TanZhanMing": 69
    }
  },
  {
    "path": "src/main/java/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": " * The main class for Duke."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "    private static Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "    private static ArrayList\u003cTask\u003e taskList \u003d new ArrayList\u003c\u003e(100);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "    private static InputParser inputParser \u003d new InputParser(taskList);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "    public enum Action {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "        ADD,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "        REMOVE,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "        DONE"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "    Duke() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "        loadFile();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "     * Used to start Duke application via the CLI"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "    public static void main(String[] args) throws IOException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "        Scanner scan \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "        String input \u003d \"\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "        loadFile();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "        ui.sayGreeting();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "        while (!input.equals(\"bye\")) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "            input \u003d scan.nextLine();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "            inputParser.determineAction(input);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "        ui.sayGoodbye();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "     * Used to start Duke application via the CLI"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "    String getResponse(String input) throws IOException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "            if (!input.equals(\"bye\")) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "                inputParser.determineAction(input);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "                String response \u003d ui.getGuidedUserInterfaceMsg();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "                ui.setGuidedUserInterfaceMsg(\"\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "                return response;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "            }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "            return ui.goodByeMsg;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "    private static void loadFile(){"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "            FileReading.checkFileExists(taskList);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "        }  catch (IOException e) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "            System.out.println(\"Oops. something went wrong with the duke.txt file\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TanZhanMing": 65,
      "-": 3
    }
  },
  {
    "path": "src/main/java/DuplicateChecker.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": " * The class used to check for duplicate tasks within the taskList"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "class DuplicateChecker {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "    private ArrayList\u003cTask\u003e taskList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "    private Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "     * The constructor for the DuplicateChecker class."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "     * @param taskList  Used to store task object information."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "    "
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "    DuplicateChecker(ArrayList\u003cTask\u003e taskList){"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "        this.taskList \u003d taskList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "     * Checks for duplicates in the description of tasks and warns the user if present."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "     * @param task  The new task given by the user."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "     * @return true or false depending if there is a duplicate"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "    boolean checkDuplicate (Task task){"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "        for (Task value : taskList) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "            if (value.description.equals(task.description)) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "                ui.printToConsoleAndGui(\"You already have a similar task\\n\" + value.toString() +"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "                        \"\\nIf intended, try renaming the task to be more specific\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "            }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TanZhanMing": 41
    }
  },
  {
    "path": "src/main/java/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": " * A subclass of the Task class with added variables \u0027at\u0027 and \u0027date\u0027."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": " * @see Task"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "    protected String at;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "     * The constructor for the Deadline class."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "     * @param description  Description of the event task."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "     * @param at Used to store a date or user-inputted temporal descriptions."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "    Event(String description, String at) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "        this.at \u003d at;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "        Date date \u003d DateParser.parseDate(at);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "        if (date !\u003d null) { this.at \u003d date.toString(); }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "     * An overridden toString method."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "     * @return String containing event identifier, status, description and time."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "        return \"[E]\" + super.toString() + \" (at: \" + at + \")\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "     * An overridden getDetails method for {@link FileWriting}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "     * @return String containing event identifier, status, description and time for writing."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "    public String getDetails() {return \"E @ \" + super.getDetails() + \" @ \" + at; }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TanZhanMing": 42
    }
  },
  {
    "path": "src/main/java/FileReading.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": " * The class used to check for existing file data and to load it into the Task array list"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "public class FileReading {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "     * Used to check for an existing \u0027data\u0027 directory and \u0027duke.txt\u0027 file."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "     * If not present, create the missing directory or file."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "     * If present, call the loadFile contents method."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "     * @param taskList  Used to store task object information."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "     * @throws IOException For cases where the file or directory could not"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "     * be created due to permissions."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "    public static void checkFileExists(ArrayList\u003cTask\u003e taskList) throws IOException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "        File directory \u003d new File(\"data\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "        if (! directory.exists()){"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "            directory.mkdir();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "        File f \u003d new File(\"data/duke.txt\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "        if (!f.createNewFile()){"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "            loadFileContents(taskList, f);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "     * Loads all the data from an existing \u0027duke.txt\u0027 into the task array list."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "     * @param taskList  Used to store task object information."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "     * @param f File path."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "     * @throws FileNotFoundException For cases where the method is called without a file present."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "    private static void loadFileContents(ArrayList\u003cTask\u003e taskList, File f) throws FileNotFoundException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "        String fullLine;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "        String type;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "        String done;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "        String desc;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "        String time \u003d \"\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "        Scanner s \u003d new Scanner(f);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "        while (s.hasNextLine()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "            fullLine \u003d s.nextLine();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "            String[] strArr \u003d fullLine.split(\" @ \");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "            type \u003d strArr[0];"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "            desc \u003d strArr[1];"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "            done \u003d strArr[2];"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "            if (type.equals(\"D\") | type.equals(\"E\")) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "                time \u003d strArr[3];"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "            }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "            switch (type) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "            case \"T\":"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "                ToDo toDo \u003d new ToDo(desc);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "                taskList.add(toDo);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "                if (done.equals(\"true\")) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "                    taskList.get(taskList.size() - 1).setDone();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "                }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "            case \"D\":"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "                Deadline d \u003d new Deadline(desc, time);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "                taskList.add(d);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "                if (done.equals(\"true\")) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "                    taskList.get(taskList.size() - 1).setDone();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "                }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "            case \"E\":"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "                Event e \u003d new Event(desc, time);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "                taskList.add(e);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "                if (done.equals(\"true\")) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "                    taskList.get(taskList.size() - 1).setDone();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "                }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "            }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "        s.close();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TanZhanMing": 89
    }
  },
  {
    "path": "src/main/java/FileWriting.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "import java.nio.file.StandardCopyOption;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": " * The class used to write data from the Task array list and store it in a \u0027duke.txt\u0027 file."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "class FileWriting {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "     * Used to check for an existing \u0027data\u0027 directory and \u0027temp.txt\u0027 file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "     * If not present, create the missing directory or file."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "     * If present, delete the existing file and create a new file."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "     * After that, it iterates through all the details of the task"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "     * and stores them in the \u0027temp.txt\u0027 file."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "     * Lastly, it replaces the existing \u0027duke.txt\u0027 file and deletes"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "     * the \u0027temp.txt\u0027 file."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "     * @param taskList  Used to store task object information."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "     * @throws IOException For cases where the file or directory could not"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "     * be created due to permissions."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "    static void writeToFile(ArrayList\u003cTask\u003e taskList) throws IOException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "        File directory \u003d new File(\"data\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "        if (!directory.exists()) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "            directory.mkdir();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "        File tmp \u003d new File(\"data/temp.txt\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "        if (!tmp.createNewFile()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "            Files.delete(Paths.get(\"data/temp.txt\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "            tmp.createNewFile();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "        FileWriter fw \u003d new FileWriter(\"data/temp.txt\", true);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "        Iterator\u003cTask\u003e taskIterator \u003d taskList.iterator();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "        while (taskIterator.hasNext()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "            fw.write(taskIterator.next().getDetails() + System.lineSeparator());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "        fw.close();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "        Files.copy(Paths.get(\"data/temp.txt\"),"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "                Paths.get(\"data/duke.txt\"), StandardCopyOption.REPLACE_EXISTING);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "        Files.delete(Paths.get(\"data/temp.txt\"));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TanZhanMing": 56
    }
  },
  {
    "path": "src/main/java/InputParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": " * The class used to handle the logic for user inputs"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "public class InputParser {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "    private ArrayList\u003cTask\u003e taskList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "    private TaskListModifier taskListModifier \u003d new TaskListModifier();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "     * The constructor for the InputParser class."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "     * @param taskList  Used to store task object information."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "    protected InputParser(ArrayList\u003cTask\u003e taskList) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "        this.taskList \u003d taskList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "     * Determines which method from the {@link TaskListModifier} class to call"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "     * depending on the first word from the input."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "     * @param input  The input from the user."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "     * @see TaskListModifier"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "    protected void determineAction(String input) throws IOException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "        String by;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "        String desc;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "        int taskNumber;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "        String at;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "        String firstWord;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "        InputSplitter inputSplitter \u003d new InputSplitter(input);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "        OutputLister outputLister \u003d new OutputLister(taskList);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "        final String MSG_UNKNOWN \u003d \"OOPS!!! I\u0027m sorry, but I don\u0027t know what that means\\n\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "        firstWord \u003d input.split(\" \")[0];"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "        switch (firstWord) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "        case \"bye\":"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "        case \"todo\":"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "            desc \u003d inputSplitter.splitInput(\"todo\")[0];"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "            ToDo toDo \u003d new ToDo(desc);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "            taskListModifier.addToTaskList(taskList, toDo, Duke.Action.ADD);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "        case \"deadline\":"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "            desc \u003d inputSplitter.splitInput(\"deadline\")[0];"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "            by \u003d inputSplitter.splitInput(\"deadline\")[1];"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "            Deadline d \u003d new Deadline(desc, by);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "            taskListModifier.addToTaskList(taskList, d, Duke.Action.ADD);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "        case \"event\":"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "            desc \u003d inputSplitter.splitInput(\"event\")[0];"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "            at \u003d inputSplitter.splitInput(\"event\")[1];"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "            Event e \u003d new Event(desc, at);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "            taskListModifier.addToTaskList(taskList, e, Duke.Action.ADD);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "        case \"list\":"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "            outputLister.listTasks();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "        case \"done\":"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "            taskNumber \u003d Integer.parseInt(inputSplitter.splitInput(\"done\")[0]);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "            taskListModifier.changeTaskList(taskList, taskNumber - 1, Duke.Action.DONE);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "        case \"delete\":"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "            taskNumber \u003d Integer.parseInt(inputSplitter.splitInput(\"delete\")[0]);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "            taskListModifier.changeTaskList(taskList, taskNumber - 1, Duke.Action.REMOVE);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "        case \"find\":"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "            desc \u003d inputSplitter.splitInput(\"find\")[0];"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "            outputLister.findTasks(desc);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "            ui.printToConsoleAndGui(MSG_UNKNOWN);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TanZhanMing": 93
    }
  },
  {
    "path": "src/main/java/InputSplitter.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": " * The class used to split user input"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "class InputSplitter {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "    private String input;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "    private Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "    InputSplitter(String input){"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "        this.input \u003d input;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "     * Returns a String array to {@link InputParser} containing the split input."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "     * @param type Output changes based on what tye of task in parsed in"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "    String[] splitInput (String type){"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "        String[] output \u003d new String[2];"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "        final String ERROR_INVALID_NUM \u003d \"OOPS!!! Please enter a valid number\\n\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "        final String ERROR_TODO \u003d \"OOPS!!! The description of a todo cannot be empty.\\n\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "        final String ERROR_DEADLINE \u003d \"OOPS!!! Incorrect description for deadline; \" +"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "                \"remember to use the /by keyword.\\n\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "        final String ERROR_EVENT \u003d \"OOPS!!! Incorrect description for event; \" +"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "                \"remember to use the /at keyword.\\n\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "        final String ERROR_FIND \u003d \"OOPS!!! Incorrect format for the \u0027find\u0027 command.\\n\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "        switch (type){"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "        case \"todo\":"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "                output[0] \u003d input.split(\" \", 2)[1];"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "            } catch (IndexOutOfBoundsException err) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "                ui.printToConsoleAndGui(ERROR_TODO);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "            }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "        case \"deadline\":"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "                output[0] \u003d input.split(\" /by \")[0].split(\" \", 2)[1];"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "                output[1] \u003d input.split(\" /by \")[1];"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "            } catch (IndexOutOfBoundsException err) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "                ui.printToConsoleAndGui(ERROR_DEADLINE);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "            }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "        case \"event\":"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "                output[0] \u003d input.split(\" /at \")[0].split(\" \", 2)[1];"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "                output[1] \u003d input.split(\" /at \")[1];"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "            } catch (IndexOutOfBoundsException err) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "                ui.printToConsoleAndGui(ERROR_EVENT);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "        case \"find\":"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "                output[0] \u003d input.split(\" \", 2)[1];"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "            } catch (IndexOutOfBoundsException err) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "                ui.printToConsoleAndGui(ERROR_FIND);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "            }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "            assert type.equals(\"done\") || type.equals(\"delete\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "                output[0] \u003d input.split(\" \")[1];"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "            } catch (NumberFormatException err) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "                ui.printToConsoleAndGui(ERROR_INVALID_NUM);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "            }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TanZhanMing": 82
    }
  },
  {
    "path": "src/main/java/Launcher.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": " * A launcher class to workaround classpath issues."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "        Application.launch(Main.class, args);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TanZhanMing": 11
    }
  },
  {
    "path": "src/main/java/Main.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": " * A GUI for Duke using FXML."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "public class Main extends Application {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "    private Duke duke \u003d new Duke();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "            stage.setTitle(\"Duke\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "            AnchorPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "            Scene scene \u003d new Scene(ap);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TanZhanMing": 32
    }
  },
  {
    "path": "src/main/java/MainWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "import java.util.concurrent.TimeUnit;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": " * Controller for MainWindow. Provides the layout for the other controls."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "public class MainWindow extends AnchorPane {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "    private Duke duke;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "    private Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "                DialogBox.getDukeDialog(ui.welcomeMsg, dukeImage)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "        );"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "    public void setDuke(Duke d) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "        duke \u003d d;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "     * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "    private void handleUserInput() throws IOException, InterruptedException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "        String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "        String response \u003d duke.getResponse(input);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "                DialogBox.getUserDialog(input, userImage),"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "                DialogBox.getDukeDialog(response, dukeImage)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "        );"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "        if (response.equals(ui.goodByeMsg)){"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "            TimeUnit.SECONDS.sleep(1);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "            System.exit(0);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TanZhanMing": 64
    }
  },
  {
    "path": "src/main/java/OutputLister.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": " * The class used to list output"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "public class OutputLister {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "    private ArrayList\u003cTask\u003e taskList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "    private Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "    private String userInterfaceMsg;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "    private final String MSG_LIST \u003d \"Here are the tasks in your list:\\n\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "    private final String MSG_FIND \u003d \"Here are the matching tasks in your list:\\n\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "    OutputLister(ArrayList\u003cTask\u003e taskList){"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "        this.taskList \u003d taskList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "     * Lists all of the Tasks in the taskList"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "    void listTasks (){"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "        userInterfaceMsg \u003d MSG_LIST;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "        for (int a \u003d 0; a \u003c taskList.size(); a++) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "            userInterfaceMsg +\u003d (a + 1) + \". \" + taskList.get(a).toString() + \"\\n\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "        ui.printToConsoleAndGui(userInterfaceMsg);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "     * Lists all of the Tasks in the taskList that contain the description"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "     * @param desc Used to find tasks that contain it"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "    void findTasks (String desc) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "        userInterfaceMsg \u003d MSG_FIND;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "        int findCounter \u003d 0;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "        for (int a \u003d 0; a \u003c taskList.size(); a++) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "            if (taskList.get(a).description.contains(desc)) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "                findCounter++;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "                userInterfaceMsg +\u003d findCounter + \". \" + taskList.get(a).toString() + \"\\n\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "            }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "        ui.printToConsoleAndGui(userInterfaceMsg);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TanZhanMing": 50
    }
  },
  {
    "path": "src/main/java/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": " * The Task object class with containing Task description and Task status."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "public abstract class Task {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "     String description;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "     private boolean isDone;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "     * The constructor for the Deadline class."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "     * @param description  Description of the task."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "     * @return A tick or cross status icon depending on whether the task is completed"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "    private String getStatusIcon() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "        return (isDone ? \"\\u2713\" : \"\\u2718\"); //return tick or X symbols"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "     * A setter to set the Task object to \u0027done\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "    void setDone(){"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "        isDone\u003dtrue;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "     * An basic toString method."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "     * @return String containing status and description."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "        return \"[\" + getStatusIcon() + \"] \" + description;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "     * A getDetails method for {@link FileWriting}."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "     * @return String containing status and description for writing."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "    public String getDetails() {return description + \" @ \" + isDone; }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TanZhanMing": 52
    }
  },
  {
    "path": "src/main/java/TaskListModifier.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": " * The class used to modify the existing task list based on the user\u0027s requests"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "public class TaskListModifier {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "    private Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "     * Adds an additional task to the Task array list."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "     * Invokes {@link Ui} class to print feedback to the user."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "     * Invokes {@link FileWriting} to update the \u0027duke.txt\u0027 file with the new Task array list."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "     * @param taskList  Used to store task object information."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "     * @param t The Task object."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "     * @param action The type of operation that is to be done on the task list (in this case add)."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "     * @throws IOException For cases where user input does not conform to the other classes\u0027 requirements."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "    void addToTaskList(ArrayList\u003cTask\u003e taskList, Task t, Duke.Action action) throws IOException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "        assert action \u003d\u003d Duke.Action.ADD;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "        DuplicateChecker duplicateChecker \u003d new DuplicateChecker(taskList);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "        if (!duplicateChecker.checkDuplicate(t)) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "            taskList.add(t);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "            ui.addTask(taskList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "            FileWriting.writeToFile(taskList);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "        assert (duplicateChecker.checkDuplicate(t)): \"Somehow a non-duplicate entry made it through.\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "     * Removes a task or sets the status of a Task to \u0027done\u0027."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "     * Invokes {@link Ui} class to print feedback to the user."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "     * Invokes {@link FileWriting} to update the \u0027duke.txt\u0027 file with the new Task array list."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "     * @param taskList  Used to store task object information."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "     * @param taskNumber The number of the Task object."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "     * @param action The type of operation that is to be done on the task list (in this case remove or set done)."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "     * @throws IndexOutOfBoundsException For numbers exceeding size of taskList."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "    void changeTaskList (ArrayList\u003cTask\u003e taskList, int taskNumber, Duke.Action action){"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "        if (action \u003d\u003d Duke.Action.REMOVE) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "                ui.removeTask(taskList, taskNumber);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "                taskList.remove(taskNumber);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "                FileWriting.writeToFile(taskList);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "            } catch (IndexOutOfBoundsException | IOException err){"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "                ui.printToConsoleAndGui(\"You only have \" + taskList.size() +"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "                        \" tasks, please choose a number from that.\\n\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "            }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "            assert action \u003d\u003d Duke.Action.DONE;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "                taskList.get(taskNumber).setDone();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "                ui.setTaskDone(taskList, taskNumber);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "                FileWriting.writeToFile(taskList);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "            } catch (IndexOutOfBoundsException | IOException err) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "                ui.printToConsoleAndGui(\"You only have \" + taskList.size() +"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "                        \" tasks, please choose a number from that.\\n\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "            }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TanZhanMing": 72
    }
  },
  {
    "path": "src/main/java/ToDo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": " * A subclass of the Task class."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": " * @see Task"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": " */"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "public class ToDo extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "     * The constructor for the ToDo class."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "     * @param description  Description of the event task."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "    ToDo(String description) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "     * An overridden toString method."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "     * @return String containing todo identifier, status and description."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "     * An overridden getDetails method for {@link FileWriting}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "     * @return String containing todo identifier, status and description for writing."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "    public String getDetails() {return \"T @ \" + super.getDetails();}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TanZhanMing": 34
    }
  },
  {
    "path": "src/main/java/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": " * The class used handle user interaction and dialogue"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "class Ui {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "    String goodByeMsg \u003d \"Bye. Hope to see you again soon!\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "    private static String guidedUserInterfaceMsg \u003d \"\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "    private final String logo \u003d \" ____        _        \\n\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "            + \"|  _ \\\\ _   _| | _____ \\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "            + \"| | | | | | | |/ / _ \\\\\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "            + \"| |_| | |_| |   \u003c  __/\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "            + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "    String welcomeMsg\u003d logo + \"\\nHello! I\u0027m Duke \\nWhat can I do for you?\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "     * A basic welcome message. Prints the duke logo and greeting."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "    void sayGreeting(){"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "        System.out.println(welcomeMsg);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "     * A basic goodbye message. Prints the goodbye."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "    void sayGoodbye(){"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "        System.out.println(goodByeMsg);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "     * A basic message to indicate a Task has been added to the Task array list."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "    void addTask(ArrayList\u003cTask\u003e taskList){"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "        printToConsoleAndGui(\"Got it. I\u0027ve added this task:\\n\" + taskList.get(taskList.size() - 1).toString() +"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "                \"\\n\" + \"Now you have \" + taskList.size() + \" tasks in the list.\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "     * A basic message to indicate a Task has been removed from the Task array list."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "    void removeTask(ArrayList\u003cTask\u003e taskList, int taskNumber){"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "        assert (taskNumber \u003c\u003d taskList.size()) : \"Somehow a task number larger than the task list size was entered\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "        printToConsoleAndGui(\"Noted. I\u0027ve removed this task:\\n\" + taskList.get(taskNumber).toString() +"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "                \"\\nNow you have \" + (taskList.size()-1) + \" tasks in the list.\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "     * A basic message to indicate a Task has been set as \u0027done\u0027 in the Task array list."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "    void setTaskDone(ArrayList\u003cTask\u003e taskList, int taskNumber){"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "        assert (taskNumber \u003c\u003d taskList.size()) : \"Somehow a task number larger than the task list size was entered\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "        printToConsoleAndGui(\"Nice! I\u0027ve marked this task as done:\\n\" + taskList.get(taskNumber).toString());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "     * Returns the GUI message"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "    String getGuidedUserInterfaceMsg() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "        return guidedUserInterfaceMsg;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "     * Sets the GUI message"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "    void setGuidedUserInterfaceMsg(String guidedUserInterfaceMsg) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "        Ui.guidedUserInterfaceMsg \u003d guidedUserInterfaceMsg;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "     * Prints the output to both the console and sets the GUI message"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "    void printToConsoleAndGui (String message){"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "        System.out.println(message);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "        setGuidedUserInterfaceMsg(message);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TanZhanMing": 93
    }
  },
  {
    "path": "src/main/resources/view/DialogBox.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "\u003c?import javafx.scene.text.Text?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "\u003cfx:root alignment\u003d\"TOP_RIGHT\" fillHeight\u003d\"true\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "      \u003cText fx:id\u003d\"dialog\" text\u003d\"Text\" wrappingWidth\u003d\"250.0\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "         \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "            \u003cInsets left\u003d\"5.0\" right\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "         \u003c/HBox.margin\u003e\u003c/Text\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "      \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" HBox.hgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "   \u003cpadding\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "      \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "   \u003c/padding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "TanZhanMing": 19
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"MainWindow\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "      \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "      \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "      \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "         \u003ccontent\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "            \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "         \u003c/content\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "      \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "TanZhanMing": 19
    }
  },
  {
    "path": "src/test/data/duke.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "T @ finish JUnit testing @ false"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "D @ finish Project @ true @ Sat Apr 20 00:00:00 SGT 2019"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "E @ game event @ false @ Wed Dec 23 00:00:00 SGT 2020"
      }
    ],
    "authorContributionMap": {
      "TanZhanMing": 3
    }
  },
  {
    "path": "src/test/java/FileReadingTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": " * A class to test the {@link FileReading} class"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "public class FileReadingTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "     * Utilise {@link TaskListModifierTest} to create a \u0027duke\u0027.txt file"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "     * and then read the file and compare data."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "    public void fileReadTest() throws IOException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "        ArrayList\u003cTask\u003e taskList \u003d new ArrayList\u003c\u003e(100);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "        TaskListModifierTest modifyTaskListTest \u003d new TaskListModifierTest();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "        modifyTaskListTest.modifyTest();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "        FileReading.checkFileExists(taskList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "        String expectedOutput1 \u003d \"[T][✘] finish JUnit testing\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "        String expectedOutput2 \u003d \"[D][✓] finish Project (by: Sat Apr 20 10:00:00 SGT 2019)\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "        String expectedOutput3 \u003d \"[E][✘] game event (at: Wed Dec 23 02:30:00 SGT 2020)\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "        assertEquals(expectedOutput1, taskList.get(0).toString());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "        assertEquals(expectedOutput2, taskList.get(1).toString());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "        assertEquals(expectedOutput3, taskList.get(2).toString());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TanZhanMing": 30
    }
  },
  {
    "path": "src/test/java/InputParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": " * A class to test the {@link InputParser} class"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "public class InputParserTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "     * Input in random strings to see which ones the {@link InputParser} class accepts"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "     * and compare the number of total Tasks in the Task array list."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "    public void inputTest() throws IOException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "        ArrayList\u003cTask\u003e taskList \u003d new ArrayList\u003c\u003e(100);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "        InputParser inputParser \u003d new InputParser(taskList);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "        String input1 \u003d \"todo finish JUnit testing\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "        String input2 \u003d \"random nonsense\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "        String input3 \u003d \"deadline finish Project /by 20/04/2019 10:00\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "        String input4 \u003d \"event game event /at 23-DEC-2020 0230\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "        String input5 \u003d \"bye\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "        String input6 \u003d \"deadline will never surface /by 22/11/2039\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "        String input7 \u003d \"more random nonsense\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "        inputParser.determineAction(input1);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "        inputParser.determineAction(input2);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "        inputParser.determineAction(input3);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "        inputParser.determineAction(input4);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "        inputParser.determineAction(input5);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "        inputParser.determineAction(input6);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "        inputParser.determineAction(input7);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "        assertEquals(4, taskList.size());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TanZhanMing": 40
    }
  },
  {
    "path": "src/test/java/TaskListModifierTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": " * A class to test the {@link TaskListModifier} class"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "public class TaskListModifierTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "     * Adds and modifies Tasks to in Task array list"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "     * and compares the details of the Tasks to the expected output strings."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "    public void modifyTest() throws IOException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "        ArrayList\u003cTask\u003e taskList \u003d new ArrayList\u003c\u003e(100);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "        InputParser inputParser \u003d new InputParser(taskList);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "        String input1 \u003d \"todo finish JUnit testing\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "        String input2 \u003d \"todo to-be-removed\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "        String input3 \u003d \"random nonsense\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "        String input4 \u003d \"deadline finish Project /by 20/04/2019 10:00\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "        String input5 \u003d \"event game event /at 23-DEC-2020 0230\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "        String input6 \u003d \"bye\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "        String input7 \u003d \"deadline will never surface /by 22/11/2039\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "        String input8 \u003d \"done 3\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "        String input9 \u003d \"delete 5\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "        String input10 \u003d \"delete 2\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "        String expectedOutput1 \u003d \"[T][✘] finish JUnit testing\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "        String expectedOutput2 \u003d \"[D][✓] finish Project (by: Sat Apr 20 10:00:00 SGT 2019)\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "        String expectedOutput3 \u003d \"[E][✘] game event (at: Wed Dec 23 02:30:00 SGT 2020)\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "        inputParser.determineAction(input1);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "        inputParser.determineAction(input2);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "        inputParser.determineAction(input3);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "        inputParser.determineAction(input4);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "        inputParser.determineAction(input5);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "        inputParser.determineAction(input6);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "        inputParser.determineAction(input7);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "        inputParser.determineAction(input8);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "        inputParser.determineAction(input9);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "        inputParser.determineAction(input10);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "        assertEquals(expectedOutput1, taskList.get(0).toString());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "        assertEquals(expectedOutput2, taskList.get(1).toString());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "        assertEquals(expectedOutput3, taskList.get(2).toString());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "TanZhanMing"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TanZhanMing": 51
    }
  }
]
