[
  {
    "path": "README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# Setting up"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "**Prerequisites**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "* JDK 11"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "* Recommended: IntelliJ IDE"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "* Fork this repo to your GitHub account and clone the fork to your computer"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "**Importing the project into IntelliJ**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "1. Open IntelliJ (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "1. Set up the correct JDK version."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "   * Click `Configure` \u003e `Structure for new Projects` (in older versions of Intellij:`Configure` \u003e `Project Defaults` \u003e `Project Structure`)."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "   * If JDK 11 is listed in the drop down, select it. If it is not, click `New...` and select the directory where you installed JDK 11."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "   * Click `OK`."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "1. Click `Import Project`."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "1. Locate the project directory and click `OK`."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "1. Select `Create project from existing sources` and click `Next`."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "1. Rename the project if you want. Click `Next`."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "1. Ensure that your src folder is checked. Keep clicking `Next`."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "1. Click `Finish`."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "# Tutorials "
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "Duke Increment | Tutorial"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "---------------|---------------"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "`A-Gradle` | [Gradle Tutorial](tutorials/gradleTutorial.md)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "`A-TextUiTesting` | [Text UI Testing Tutorial](tutorials/textUiTestingTutorial.md)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "`Level-10` | JavaFX tutorials:\u003cbr\u003e→ [Part 1: Introduction to JavaFX][fx1]\u003cbr\u003e→ [Part 2: Creating a GUI for Duke][fx2]\u003cbr\u003e→ [Part 3: Interacting with the user][fx3]\u003cbr\u003e→ [Part 4: Introduction to FXML][fx4]"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "[fx1]: \u003ctutorials/javaFxTutorialPart1.md\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "[fx2]: \u003ctutorials/javaFxTutorialPart2.md\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "[fx3]: \u003ctutorials/javaFxTutorialPart3.md\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "[fx4]: \u003ctutorials/javaFxTutorialPart4.md\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "# Feedback, Bug Reports"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "* If you have feedback or bug reports, please post in [se-edu/duke issue tracker](https://github.com/se-edu/duke/issues)."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "* We welcome pull requests too."
      }
    ],
    "authorContributionMap": {
      "JunHongT": 1,
      "-": 38
    }
  },
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-media\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-media\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-media\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "test {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    archiveVersion \u003d \"0.2\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "group \u0027seedu.duke\u0027"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    // Change this to your main class."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    mainClassName \u003d \"Launcher\""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JunHongT": 40,
      "-": 14
    }
  },
  {
    "path": "build/libs/savedList.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "[T][?] a0"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "[T][?] b0"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "[T][?] c0"
      }
    ],
    "authorContributionMap": {
      "JunHongT": 3
    }
  },
  {
    "path": "docs/README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "## 1. Introduction"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "Duke is a product for those who prefer to have a simple interface to note down their schedule."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "Duke is optimised for those who prefer to work with a Command Line Interface(CLI) while still having a basic GUI."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "## 2. Quick Start"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "1. Ensure that you have Java 11 or above installed in your Computer."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "1. Download the latest Duke.zip [here!](https://github.com/JunHongT/duke/releases/tag/A-Release)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "1. Copy the file to the folder you want to use as the home folder for your Duke."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "1. Double-click the file to start the app. The GUI should appear in a few seconds."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "![Image of Duke startup](Startup.png)"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "1. Some example of the commands are:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    * list : List all saved task"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    * todo : Add a task "
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    * deadline : Add a task with a deadline of date and time"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    * event : Add a task with date and duration"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    * delete : Delete a task"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    * done : Mark a task as done"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    * bye : exit program"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "## 3. Features "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "### 3.1 Adding a Task"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "Adding a task to Duke."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "#### 3.1.1 Todo Task"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "Format : `todo {description}`"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "#### 3.1.2 Deadline Task"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "Format : `deadline {description} /by {dd/mm/yyyy hh:mm}`"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "#### 3.1.3 Event Task"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "Format : `event {description} /at {dd/mm/yyyy hh:mm - hh:mm}`"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "### 3.2 List"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "Show a list of all tasks added by user."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "Format : `list`"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "### 3.3 Delete"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "Delete a task that is saved in Duke."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "Format : `delete {index of task}`"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "### 3.4 Done"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "Mark a task as done. Default value for task is undone."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "Format : `done {index of task}`"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "### 3.5 Find"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "Display all task that contained search term."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "Format : `fine {search term}`"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "### 3.6 Bye"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "Exiting from the program and save added task to local file."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "Format : `bye`"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "## Additional Information"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "1. Type `hello` to receive a greeting from Duke."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "1. Added tasks will only be saved if program is exited by `bye` commands"
      }
    ],
    "authorContributionMap": {
      "JunHongT": 46,
      "-": 3
    }
  },
  {
    "path": "savedList.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "[T][?] a0"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "[T][?] b0"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "[T][?] c0"
      }
    ],
    "authorContributionMap": {
      "JunHongT": 3
    }
  },
  {
    "path": "src/main/java/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    protected Date by;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "     * Constructor for Deadline."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "     *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "     * @param description title of Deadline"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "     * @param by datetime for deadline"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    public Deadline(String description, Date by) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        this.by \u003d by;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        SimpleDateFormat formatter \u003d new SimpleDateFormat(\"dd/MM/yyyy HH:mm\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        return \"[D]\" + super.toString() + \"(by: \" + formatter.format(by) + \")\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        return Objects.hash(this.description, this.by);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    public boolean equals(Object o) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        if (this \u003d\u003d o) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        if (o \u003d\u003d null || this.getClass() !\u003d o.getClass()) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        Deadline test \u003d (Deadline) o;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        return this.description.equals(test.description) \u0026\u0026"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                this.by.equals(test.by);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JunHongT": 43
    }
  },
  {
    "path": "src/main/java/DialogBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    private Label text;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "     * Constructor for DialogBox."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "     * @param l content of box"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "     * @param iv image of user"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    public DialogBox(Label l, ImageView iv) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        text \u003d l;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        displayPicture \u003d iv;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        text.setWrapText(true);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        displayPicture.setFitWidth(50.0);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        displayPicture.setFitHeight(50.0);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        displayPicture.setSmooth(true);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        this.setAlignment(Pos.TOP_RIGHT);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        this.getChildren().addAll(text, displayPicture);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        this.setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        FXCollections.reverse(tmp);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        this.getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "     * Retrieve DialogBox from user view."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "     * @param l content of box"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "     * @param iv image of user"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "     * @return User DialogBox"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    public static DialogBox getUserDialog(Label l, ImageView iv) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        return new DialogBox(l, iv);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "     * Retrieve DialogBox from Duke view."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "     * @param l content of box"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "     * @param iv image of Duke"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "     * @return Duke DialogBox"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    public static DialogBox getDukeDialog(Label l, ImageView iv) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        var db \u003d new DialogBox(l, iv);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JunHongT": 62
    }
  },
  {
    "path": "src/main/java/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "public class Duke extends Application {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    private Ui user;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    private Parser parse;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    private Storage store;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    private Image dukeServer\u003d new Image(this.getClass().getResourceAsStream(\"/images/user.png\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    private Image dukeUser \u003d new Image(this.getClass().getResourceAsStream(\"/images/Speaker.png\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "     * Constructor for Duke class."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    public Duke() throws FileNotFoundException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        user \u003d new Ui();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        parse \u003d new Parser(user);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        store \u003d new Storage(parse);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        Duke execute \u003d new Duke();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "            execute.run();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "            System.out.println(\"Stored file not found!!!\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        System.out.println(\"Loading \");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        store.loadExisting();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        //Step 1. Setting up required components"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        //The container for the content of the chat to scroll."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        ScrollPane scrollPane \u003d new ScrollPane();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        VBox dialogContainer \u003d new VBox();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        scrollPane.setContent(dialogContainer);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        TextField userInput \u003d new TextField();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        Button sendButton \u003d new Button(\"Send\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        AnchorPane mainLayout \u003d new AnchorPane();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        mainLayout.getChildren().addAll(scrollPane, userInput, sendButton);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        Scene scene \u003d new Scene(mainLayout);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        stage.setScene(scene);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        stage.show();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        //Step 2. Formatting the window to look as expected"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        stage.setTitle(\"Duke\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        stage.setResizable(false);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        stage.setMinHeight(600.0);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        stage.setMinWidth(400.0);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        mainLayout.setPrefSize(400.0, 600.0);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        scrollPane.setPrefSize(385, 535);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        scrollPane.setHbarPolicy(ScrollPane.ScrollBarPolicy.NEVER);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        scrollPane.setVbarPolicy(ScrollPane.ScrollBarPolicy.ALWAYS);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        scrollPane.setVvalue(1.0);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        scrollPane.setFitToWidth(true);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        dialogContainer.setPrefHeight(Region.USE_COMPUTED_SIZE);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        userInput.setPrefWidth(325.0);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        sendButton.setPrefWidth(55.0);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        AnchorPane.setTopAnchor(scrollPane, 1.0);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        AnchorPane.setBottomAnchor(sendButton, 1.0);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        AnchorPane.setRightAnchor(sendButton, 1.0);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        AnchorPane.setLeftAnchor(userInput, 1.0);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        AnchorPane.setBottomAnchor(userInput, 1.0);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        //Scroll down to the end every time dialogContainer\u0027s height changes."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        dialogContainer.heightProperty().addListener((observable) -\u003e scrollPane.setVvalue(1.0));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        //Part 3. Add functionality to handle user input."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        sendButton.setOnMouseClicked((event) -\u003e {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "            Label userText \u003d new Label(userInput.getText());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "            Label dukeText \u003d new Label(dukeRun(userInput.getText()));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "            dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                    DialogBox.getUserDialog(userText, new ImageView(dukeUser)),"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                    DialogBox.getDukeDialog(dukeText, new ImageView(dukeServer))"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "            );"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "            userInput.clear();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        });"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        userInput.setOnAction((event) -\u003e {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "            Label userText \u003d new Label(userInput.getText());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "            Label dukeText \u003d new Label(dukeRun(userInput.getText()));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "            dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                    DialogBox.getUserDialog(userText, new ImageView(dukeUser)),"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                    DialogBox.getDukeDialog(dukeText, new ImageView(dukeServer))"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "            );"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "            userInput.clear();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        });"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "     * Processing method for GUI version of Duke."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "     * @param input String value from user typing in textfield"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "     * @return String output for Duke to reply"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    public String dukeRun(String input) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        String reply \u003d \"\";"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        if (input.toLowerCase().equals(\"hello\")) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "            reply \u003d user.welcome() + user.greeting();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "            assert !reply.isEmpty() : \"Reply should not be empty\";"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        } else if (input.toLowerCase().equals(\"bye\")) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "            //store current tasks into local file for future reference"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "            store.storeCurrent(parse.getList());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "            Platform.exit();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        } else if (input.toLowerCase().contains(\"done\")) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                //mark task as done, change cross to tick"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                int itemNum \u003d Integer.parseInt(input.substring(input.length() - 1));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                Task curr \u003d parse.getList().get(itemNum - 1);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                curr.markAsDone();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                assert curr.isDone : \"Task should have been marked as done\";"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                //forming the message"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                reply \u003d user.doneMessage(curr);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "            } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                reply \u003d user.indexError();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "            } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                reply \u003d user.emptyError();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "            }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        } else if (input.toLowerCase().equals(\"list\")) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "            reply \u003d user.listTask(parse.getList());"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        } else if (input.toLowerCase().contains(\"delete\")) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                int itemNum \u003d Integer.parseInt(input.substring(input.length() - 1));"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                reply \u003d parse.deleteTask(itemNum);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "            } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                reply \u003d user.indexError();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "            } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                reply \u003d user.emptyError();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "            }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        } else if (input.toLowerCase().contains(\"find\")) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "            String searchTerm \u003d input.substring(5);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "            reply \u003d user.findTask(parse.getList(), searchTerm);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "            reply \u003d parse.generateTask(input);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        return reply;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JunHongT": 171,
      "-": 3
    }
  },
  {
    "path": "src/main/java/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    protected Date start;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    protected Date end;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "     * Constructor for event class."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "     * @param description content of event"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "     * @param start date and start time of event"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "     * @param end end time of event"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    public Event(String description, Date start, Date end) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        this.start \u003d start;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        this.end \u003d end;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        SimpleDateFormat startFormat \u003d new SimpleDateFormat(\"dd/MM/yyyy HH:mm\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        SimpleDateFormat endFormat \u003d new SimpleDateFormat(\" - HH:mm\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        return \"[E]\" + super.toString() + \"(at: \" + startFormat.format(start) + endFormat.format(end) + \")\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        return Objects.hash(this.description, this.start, this.end);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    public boolean equals(Object o) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        if (this \u003d\u003d o) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        if (o \u003d\u003d null || this.getClass() !\u003d o.getClass()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        Event test \u003d (Event) o;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        return this.description.equals(test.description) \u0026\u0026"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                this.start.equals(test.start) \u0026\u0026"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                this.end.equals(test.end);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JunHongT": 49
    }
  },
  {
    "path": "src/main/java/Launcher.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JunHongT"
        },
        "content": " * A launcher class to workaround classpath issues."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JunHongT"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        Application.launch(Duke.class, args);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JunHongT": 10
    }
  },
  {
    "path": "src/main/java/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "import java.sql.SQLOutput;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    private Ui user;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    private ArrayList\u003cTask\u003e items;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "     * Constructor method for Parser."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "     * @param user object handling all messages"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    public Parser(Ui user) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        this.user \u003d user;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        this.items \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    //return Ui obj"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    public Ui getUser() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        return this.user;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    //return list of tasks"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    public ArrayList\u003cTask\u003e getList() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        return this.items;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "     * Deleting of task from ArrayList."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "     * @param num index of task in list"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "     * @return String delete message"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "     * @throws IndexOutOfBoundsException index of task not found in list"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    public String deleteTask(int num) throws IndexOutOfBoundsException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        Task curr \u003d items.get(num - 1);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        items.remove(num - 1);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        String reply \u003d user.deleteMessage(curr, items.size());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        return reply;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "     * Converting String to datetime for storage."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "     * @param input String from user input containing datetime for deadline"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "     * @return Date containing dd/MM/yyyy HH:mm"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "     * @throws ParseException when input does not matched date format"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    public static Date convertStringToDeadline(String input) throws ParseException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        Date result \u003d new SimpleDateFormat(\"dd/MM/yyyy HH:mm\").parse(input);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "     * Converting String to datetime for storage."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "     * @param input String from user input from date to start time for event"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "     * @return Date containing dd/MM/yyy HH:mm"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "     * @throws ParseException input does not matched date format"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    public static Date convertStringToEventStart(String input) throws ParseException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        Date result \u003d new SimpleDateFormat(\"dd/MM/yyyy HH:mm\").parse(input);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "     * Converting String to datetime for storage."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "     * @param input String from user input containing end time for event"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "     * @return Date containing HH:mm"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "     * @throws ParseException input does not matched date format"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    public static Date convertStringToEventEnd(String input) throws ParseException {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        Date result \u003d new SimpleDateFormat(\"HH:mm\").parse(input);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "     * Generation of task - Todo, Event, Deadline and store in ArrayList."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "     * @param input String input from user input"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "     * @return output message for different task"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    public String generateTask(String input) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        String message \u003d \"\";"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        if (input.toLowerCase().contains(\"todo\")) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "            //adding an item"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                Todo newTask \u003d new Todo(input.substring(5));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                if (!checkDuplicate(newTask)) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                    items.add(newTask);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                    message \u003d user.generateMessage(newTask, items.size());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                    System.out.println(message);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                    message \u003d user.duplicateMessage(newTask);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "            } catch (StringIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                message \u003d user.todoError();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "            }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        } else if (input.toLowerCase().contains(\"deadline\")) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                int date \u003d input.indexOf(\"/by\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                //split input into [deadline] [description] [date]"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                Date deadLineDate \u003d convertStringToDeadline(input.substring(date + 3));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                Deadline newTask \u003d new Deadline(input.substring(9, date), deadLineDate);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                if (!checkDuplicate(newTask)) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                    items.add(newTask);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                    message \u003d user.generateMessage(newTask, items.size());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                    System.out.println(message);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                    message \u003d user.duplicateMessage(newTask);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "            } catch (StringIndexOutOfBoundsException | ParseException e) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                message \u003d user.deadlineError();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "            }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        } else if (input.toLowerCase().contains(\"event\")) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                int time \u003d input.indexOf(\"/at\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                int timeRange \u003d input.indexOf(\"-\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                //split input into [event] [description] [timing]"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                Date eventDate \u003d convertStringToEventStart(input.substring(time + 3, timeRange));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                Date eventEnd \u003d convertStringToEventEnd(input.substring(timeRange + 1));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                Event newTask \u003d new Event(input.substring(6, time), eventDate, eventEnd);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                if (!checkDuplicate(newTask)) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                    items.add(newTask);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                    message \u003d user.generateMessage(newTask, items.size());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                    System.out.println(message);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                    message \u003d user.duplicateMessage(newTask);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "            } catch (StringIndexOutOfBoundsException | ParseException e) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                message \u003d user.eventError();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "            }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "            message \u003d user.invalidInput();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        return message;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    /* run method for cmd version"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    public void run() throws FileNotFoundException {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        //Start of program"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        user.welcome();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        user.greeting();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        //Loading stored task into current list"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        Scanner pastScan \u003d new Scanner(new FileReader(\"/Users/teojunhong/JavaProject/2103T/duke/savedList.txt\"));"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        loadExisting(pastScan);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        //Scanner obj for input"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        Scanner sc \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        //Loop till user input \u0027bye\u0027"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        String input \u003d \"\";"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        if (sc.hasNextLine()) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "            input \u003d sc.nextLine();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        while (!input.toLowerCase().equals(\"bye\")) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "            //adding items to arraylist for listing purpose"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "            if (input.toLowerCase().contains(\"done\")) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                    //mark task as done, change cross to tick"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                    int itemNum \u003d Integer.parseInt(input.substring(input.length() - 1));"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                    Task curr \u003d items.get(itemNum - 1);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                    curr.markAsDone();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                    //forming the message"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                    user.doneMessage(curr);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                    sb.setLength(0);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                    input \u003d sc.nextLine();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                    user.indexError();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                    input \u003d sc.nextLine();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                    user.emptyError();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                    input \u003d sc.nextLine();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "            } else if (input.toLowerCase().contains(\"delete\")) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                    //delete task"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                    int itemNum \u003d Integer.parseInt(input.substring(input.length() - 1));"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                    deleteTask(itemNum);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                    input \u003d sc.nextLine();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                    user.indexError();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                    input \u003d sc.nextLine();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                    user.emptyError();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                    input \u003d sc.nextLine();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "            } else if (input.toLowerCase().equals(\"list\")) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                //listing all task in current list"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                user.listTask(items);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                input \u003d sc.nextLine();"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "            } else if (input.toLowerCase().contains(\"find\")) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                String searchTerm \u003d input.substring(5);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                user.findTask(items, searchTerm);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                input \u003d sc.nextLine();"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                //generate task and store into list"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                generateTask(input);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                input \u003d sc.nextLine();"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "            }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        //store current tasks into local file for future reference"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        storeCurrent(items);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        //Concluding Message"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        user.conclusion();"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    */"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    public boolean checkDuplicate(Task curr) {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        boolean result \u003d false;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        for (int i \u003d 0; i \u003c items.size(); i++) {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "            Task test \u003d items.get(i);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "            if (test.getClass().equals(curr.getClass())) {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                System.out.println(\"same task class\");"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                if(test.equals(curr)) {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                    result \u003d true;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "            }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JunHongT": 234
    }
  },
  {
    "path": "src/main/java/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "import java.io.FileReader;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "import java.io.PrintWriter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    private Parser parse;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    private Ui user;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    private ArrayList\u003cTask\u003e items;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    private Scanner pastScan;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    private File relative;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "     * Constructor for Storage."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "     * @param p Parser obj which handle all the processing of input"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "     * @throws FileNotFoundException in the event the textfile is not located"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    public Storage(Parser p) throws FileNotFoundException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        parse \u003d p;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        user \u003d p.getUser();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        items \u003d p.getList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        relative \u003d new File(\"savedList.txt\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        if(!relative.exists()) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                relative.createNewFile();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "            } catch (IOException e) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                System.out.println(\"File cannot be created\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "            }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        pastScan \u003d new Scanner(new FileReader(relative));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "     * Load past tasks to current ArrayList."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    public void loadExisting() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        while (pastScan.hasNextLine()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "            String input \u003d pastScan.nextLine();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "            if (input.toLowerCase().contains(\"[t]\")) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                //adding an item"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                    Todo newTask \u003d new Todo(input.substring(7, input.length() - 1));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                    if (Integer.parseInt(input.substring(input.length() - 1)) \u003d\u003d 1) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                        newTask.markAsDone();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                    items.add(newTask);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                } catch (StringIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                    user.todoError();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "            } else if (input.toLowerCase().contains(\"[d]\")) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                    int date \u003d input.indexOf(\"(by\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                    Date deadLineDate \u003d parse.convertStringToDeadline(input.substring(date + 4));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                    Deadline newTask \u003d new Deadline(input.substring(7, date), deadLineDate);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                    if (Integer.parseInt(input.substring(input.length() - 1)) \u003d\u003d 1) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                        newTask.markAsDone();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                    items.add(newTask);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                } catch (StringIndexOutOfBoundsException | ParseException e) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                    user.deadlineError();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "            } else if (input.toLowerCase().contains(\"[e]\")) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                    int time \u003d input.indexOf(\"(at\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                    int timeRange \u003d input.indexOf(\"-\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                    Date eventDate \u003d parse.convertStringToEventStart(input.substring(time + 4, timeRange));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                    Date eventEnd \u003d parse.convertStringToEventEnd(input.substring(timeRange + 1));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                    //split input into [event] [description] [timing]"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                    Event newTask \u003d new Event(input.substring(7, time), eventDate, eventEnd);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                    if (Integer.parseInt(input.substring(input.length() - 1)) \u003d\u003d 1) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                        newTask.markAsDone();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                    items.add(newTask);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                } catch (StringIndexOutOfBoundsException | ParseException e) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                    user.eventError();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "            }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "     * Store current tasks into text file."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "     * @param inputs Arraylist containing current tasks"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    public void storeCurrent(ArrayList\u003cTask\u003e inputs) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "            FileWriter fw \u003d new FileWriter(relative);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "            PrintWriter pw \u003d new PrintWriter(fw);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "            for (Task input : inputs) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                int status \u003d 0;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                if (input.isDone) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                    status \u003d 1;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                pw.println(input.toString() + \"\" + status);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "            }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "            fw.flush();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "            fw.close();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JunHongT": 114
    }
  },
  {
    "path": "src/main/java/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "     * constructor for Task."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "     * @param description title of task"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "     * Retrieved description of task."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "     * @return String description of task"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        return this.description;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "     * Retrieve a tick or cross symbol depending on isDone."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "      * @return String which is either a tick or cross"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        return (isDone ? \"\\u2713\" : \"\\u2718\"); //return tick or X symbols"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "     * Change isDone from false to true."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    public void markAsDone() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        return \"[\" + getStatusIcon() + \"] \" + this.description;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JunHongT": 42
    }
  },
  {
    "path": "src/main/java/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "public class Todo extends Task {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    public Todo(String description) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        return Objects.hash(this.description);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    public boolean equals(Object o) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        if (this \u003d\u003d o) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        if (o \u003d\u003d null || this.getClass() !\u003d o.getClass()) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        Todo test \u003d (Todo) o;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        return this.description.equals(test.description);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JunHongT": 32
    }
  },
  {
    "path": "src/main/java/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    public static final String BORDER \u003d \"-------------------------------------\";"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "     * Welcome message when program is executed."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    public String welcome() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        String logo \u003d \" ____        _        \\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                + \"|  _ \\\\ _   _| | _____ \\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                + \"| | | | | | | |/ / _ \\\\\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                + \"| |_| | |_| |   \u003c  __/\\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        return  logo;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "     * Greeting message before user input is required."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    public String greeting() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        //Greetings before program"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        sb.append(BORDER + \"\\n\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        sb.append(\"Hello! I\u0027m Duke\\n\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        sb.append(\"What can I do for you?\\n\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        sb.append(BORDER + \"\\n\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        String greetings \u003d sb.toString();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        System.out.println(greetings);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        return greetings;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "     * Message when index given is out of range."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "     * @return String message generated"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    public String indexError() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        //error message for indexOutOfBound"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        sb.append(BORDER + \"\\n\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        sb.append(\"Invalid number. Number not listed. \\n\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        sb.append(BORDER + \"\\n\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        String indexError \u003d sb.toString();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        System.out.println(indexError);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        return indexError;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "     * Message when no index is provided."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "     * @return String message generated"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    public String emptyError() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        //error message for empty input"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        sb.append(BORDER + \"\\n\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        sb.append(\"No input detected. Please enter a number. \\n\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        sb.append(BORDER + \"\\n\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        String emptyError \u003d sb.toString();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        System.out.println(emptyError);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        return emptyError;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "     * Message when input for event is invalid."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "     * @return String message generated"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    public String eventError() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        //error message for empty input"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        sb.append(BORDER + \"\\n\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        sb.append(\"Invalid Event\u0027s arguments \\n\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        sb.append(\"Please follow the format below: \\n\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        sb.append(\"event {description} /at {dd/mm/yyyy hh:mm - hh:mm}\\n\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        sb.append(BORDER + \"\\n\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        String eventMessage \u003d sb.toString();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        System.out.println(eventMessage);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        return eventMessage;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "     * Message when input for deadline is invalid."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "     * @return String message generated"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    public String deadlineError() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        //error message for empty input"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        sb.append(BORDER + \"\\n\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        sb.append(\"Invalid Deadline\u0027s arguments \\n\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        sb.append(\"Please follow the format below: \\n\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        sb.append(\"deadline {description} /by {dd/mm/yyyy hh:mm}\\n\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        sb.append(BORDER + \"\\n\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        String deadlineMessage \u003d sb.toString();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        System.out.println(deadlineMessage);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        return deadlineMessage;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "     * Message when no details is provided for todo."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "     * @return String message generated"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    public String todoError() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        //error message for empty input"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        sb.append(BORDER + \"\\n\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        sb.append(\"Todo must have valid description\\n\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        sb.append(BORDER + \"\\n\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        String todoMessage \u003d sb.toString();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        System.out.println(todoMessage);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        return todoMessage;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "     * Message when user does not input any term that is valid for system."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "     * @return String message generated"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    public String invalidInput() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        //error message for empty input"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        sb.append(BORDER + \"\\n\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        sb.append(\"Unable to understand. Invalid Input. \\n\");"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        sb.append(BORDER + \"\\n\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        String invalidMessage \u003d sb.toString();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        System.out.println(invalidMessage);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        return invalidMessage;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "     * Ending message when user input bye."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    public String conclusion() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        sb.append(BORDER + \"\\n\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        sb.append(\"Bye. Hope to see you again soon!\\n\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        sb.append(BORDER + \"\\n\");"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        String conclude \u003d sb.toString();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        System.out.println(conclude);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        return conclude;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "     * Message notifying user when a task is marked done."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "     * @param curr task that user wish to mark as done"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "     * @return String message notifying user"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    public String doneMessage(Task curr) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        sb.append(BORDER + \"\\n\");"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        sb.append(\"Nice! I\u0027ve marked this task as done:\\n\");"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        sb.append(curr + \"\\n\");"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        sb.append(BORDER + \"\\n\");"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        String done \u003d sb.toString();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        System.out.println(done);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        return done;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "     * Message notifying user when a task is deleted."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "     * @param curr Task that user wished to delete"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "     * @param size size of list after deletion"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "     * @return String message notifying user"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    public String deleteMessage(Task curr, int size) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        sb.append(BORDER + \"\\n\");"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        sb.append(\"Noted! I\u0027ve removed this task:\\n\");"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        sb.append(curr + \"\\n\");"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        sb.append(\"Now you have \" + size + \" tasks in the list.\\n\");"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        sb.append(BORDER + \"\\n\");"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        String delete \u003d sb.toString();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        System.out.println(delete);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        return delete;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "     * Listing all tasks stored in list."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "     * @param items ArrayList containing current tasks"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "     * @return String message collating all tasks"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    public String listTask(ArrayList\u003cTask\u003e items) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        sb.append(BORDER + \"\\n\");"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        //list out all items in arraylist items"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        for (int i \u003d 1; i \u003c\u003d items.size(); i++) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "            Task curr \u003d items.get(i - 1);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "            sb.append(i + \".\" + curr + \"\\n\");"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        sb.append(BORDER + \"\\n\");"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        String output \u003d sb.toString();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        System.out.println(sb.toString());"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "     * Listing all tasks stored in list that matched with search term."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "     * @param items ArrayList containing current tasks"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "     * @param key search term provided by user"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    public String findTask(ArrayList\u003cTask\u003e items, String key) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        sb.append(BORDER + \"\\n\");"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        sb.append(\"Here are the matching tasks in your list: \\n\");"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        //list out all items in arraylist items that matched with user input"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        for (int i \u003d 1; i \u003c\u003d items.size(); i++) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "            Task curr \u003d items.get(i - 1);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "            if (curr.getDescription().contains(key)) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                sb.append(i + \".\" + curr + \"\\n\");"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "            }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        sb.append(BORDER + \"\\n\");"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        String output \u003d sb.toString();"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        System.out.println(output);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "     * generating message for individual task with border and indentation."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "     * @param current current task"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "     * @param size size of list"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "     * @return message generated for selected task"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    public String generateMessage(Task current, int size) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        sb.append(BORDER + \"\\n\");"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        sb.append(\"Got it. I\u0027ve added this task: \\n\");"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        sb.append(current + \"\\n\");"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        sb.append(\"Now you have \" + size + \" tasks in the list.\\n\");"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        sb.append(BORDER + \"\\n\");"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "     * generating message for task which had already been added to list."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "     * @param current task user is trying to create/add"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "     * @return message indicating the existed task"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    public String duplicateMessage(Task current) {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        sb.append(BORDER + \"\\n\");"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        sb.append(\"This task had already been added: \\n\");"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        sb.append(current + \"\\n\");"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        sb.append(BORDER + \"\\n\");"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JunHongT": 246
    }
  },
  {
    "path": "src/test/java/DeadlineTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "public class DeadlineTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    public void testDeadline() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        String border \u003d \"-------------------------------------\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        final Parser d \u003d new Parser(new Ui());"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        Task t \u003d new Task(\"test\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        sb.append(border + \"\\n\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        sb.append(\"Got it. I\u0027ve added this task: \\n\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        sb.append(\"[D][\" + t.getStatusIcon() + \"] test  (by: 12/12/1212 18:00)\\n\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        sb.append(\"Now you have 1 tasks in the list.\\n\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        sb.append(border + \"\\n\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        String correct \u003d sb.toString();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        sb.setLength(0);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        assertEquals(correct, d.generateTask(\"deadline test /by 12/12/1212 18:00\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        sb.append(border + \"\\n\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        sb.append(\"Invalid Deadline\u0027s arguments \\n\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        sb.append(border + \"\\n\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        String wrong \u003d sb.toString();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        assertEquals(wrong, d.generateTask(\"deadline test /by 12/12/1212 1800\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        assertEquals(wrong, d.generateTask(\"deadline test /by 12/12/1212 18/00\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        assertEquals(wrong, d.generateTask(\"deadline test /by 12-1-212 25:00\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        assertEquals(wrong, d.generateTask(\"deadline test /by 12/12/1212 2pm\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        assertEquals(wrong, d.generateTask(\"deadline test /by 18:00 12/12/1212\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JunHongT": 39
    }
  },
  {
    "path": "src/test/java/EventTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "public class EventTest {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    public void testEvent() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        final Parser d \u003d new Parser(new Ui());"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        String border \u003d \"-------------------------------------\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        Task t \u003d new Task(\"test\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        sb.append(border + \"\\n\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        sb.append(\"Got it. I\u0027ve added this task: \\n\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        sb.append(\"[E][\" + t.getStatusIcon() + \"] test  (at: 12/12/1212 18:00 - 19:00)\\n\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        sb.append(\"Now you have \" + 1 + \" tasks in the list.\\n\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        sb.append(border + \"\\n\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        String correct \u003d sb.toString();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        sb.setLength(0);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        assertEquals(correct, d.generateTask(\"event test /at 12/12/1212 18:00 - 19:00\"));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        sb.append(border + \"\\n\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        sb.append(\"Invalid Event\u0027s arguments \\n\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        sb.append(border + \"\\n\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        String wrong \u003d sb.toString();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        assertEquals(wrong, d.generateTask(\"event test /at 12/12/1212 1800 - 1900\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        assertEquals(wrong, d.generateTask(\"event test /at 12/12/212 25:00\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        assertEquals(wrong, d.generateTask(\"event test /at 12/12/1212 2pm\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        assertEquals(wrong, d.generateTask(\"event test /at 18:00 12/12/1212\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JunHongT": 35
    }
  },
  {
    "path": "src/test/java/TodoTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "public class TodoTest {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    public void testTodo() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        final Parser d \u003d new Parser(new Ui());"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        String border \u003d \"-------------------------------------\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        Task t \u003d new Task(\"test\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        sb.append(border + \"\\n\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        sb.append(\"Got it. I\u0027ve added this task: \\n\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        sb.append(\"[T][\" + t.getStatusIcon() + \"] test\\n\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        sb.append(\"Now you have \" + 1 + \" tasks in the list.\\n\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        sb.append(border + \"\\n\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        String correct \u003d sb.toString();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        sb.setLength(0);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        assertEquals(correct, d.generateTask(\"todo test\"));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        sb.append(border + \"\\n\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        sb.append(\"Todo must have valid description\\n\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        sb.append(border + \"\\n\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        String wrong \u003d sb.toString();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        assertEquals(wrong, d.generateTask(\"todo\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JunHongT": 31
    }
  },
  {
    "path": "tutorials/textUiTestingTutorial.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# Text UI Testing Tutorial"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "1. Create a folder `[project root]\\text-Ui-test`"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "1. Add a `runtest.bat` (if you are on Windows) or `runtest.sh` (if you are on a *nix OS) into the folder, containing the script below.\u003cbr\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "  `runtest.bat`:"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "   @ECHO OFF"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "   "
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "   REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "   if not exist ..\\bin mkdir ..\\bin"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "   "
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "   REM delete output from previous run"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "   del ACTUAL.TXT"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "   "
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "   REM compile the code into the bin folder"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "   javac  -cp ..\\src -Xlint:none -d ..\\bin ..\\src\\main\\java\\Duke.java"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "   IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "       echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "       exit /b 1"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "   )"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "   REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "   "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "   REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "   java -classpath ..\\bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "   "
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "   REM compare the output to the expected output"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "   FC ACTUAL.TXT EXPECTED.TXT"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "   "
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "   `runtest.sh`:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "   ```shell"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "   #!/usr/bin/env bash"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "   "
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "   # create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "   if [ ! -d \"../bin\" ]"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "   then"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "       mkdir ../bin"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "   fi"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "   "
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "   # delete output from previous run"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "   if [ -e \"./ACTUAL.TXT\" ]"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "   then"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "       rm ACTUAL.TXT"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "   fi"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "   "
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "   # compile the code into the bin folder, terminates if error occurred"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "   if ! javac -cp ../src -Xlint:none -d ../bin ../src/main/java/Duke.java"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "   then"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "       echo \"********** BUILD FAILURE **********\""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "       exit 1"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "   fi"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "   "
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "   # run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "   java -classpath ../bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "   "
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "   # compare the output to the expected output"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "   diff ACTUAL.TXT EXPECTED.TXT"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "   if [ $? -eq 0 ]"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "   then"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "       echo \"Test result: PASSED\""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "       exit 0"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "   else"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "       echo \"Test result: FAILED\""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "       exit 1"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "   fi"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "1. Update the `javac` and `java` commands in the script to match the name/location of your main class."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "1. Add an `EXPECTED.txt` to the same folder, containing the expected output."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "1. Add an `input.txt` containing the input commands."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "1. Run the `.bat`/`.sh` file to execute the test."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "**Authors:**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "* Initial Version: based on se-edu/addressbook-level2, adapted by Jeffry Lum"
      }
    ],
    "authorContributionMap": {
      "JunHongT": 1,
      "-": 73
    }
  }
]
