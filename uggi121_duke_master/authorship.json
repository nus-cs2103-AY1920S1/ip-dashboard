[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "uggi121"
        },
        "content": "\tid \u0027org.openjfx.javafxplugin\u0027 version \u00270.0.7\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "group \u0027seedu.duke\u0027"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    // Change this to your main class."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    mainClassName \u003d \"Launcher\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "run {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "uggi121"
        },
        "content": "compileJava.options.encoding \u003d \u0027UTF-8\u0027"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "uggi121"
        },
        "content": "tasks.withType(JavaCompile) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    options.encoding \u003d \u0027UTF-8\u0027"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "uggi121"
        },
        "content": "}"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "uggi121"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "uggi121"
        },
        "content": "}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "uggi121"
        },
        "content": "test {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "uggi121"
        },
        "content": "}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "uggi121"
        },
        "content": "tasks.withType(Test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    scanForTestClasses \u003d false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    include \"**/*Test.class\" // whatever Ant pattern matches your test class files"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "uggi121"
        },
        "content": "}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "uggi121"
        },
        "content": "task fatJar(type: Jar) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "uggi121"
        },
        "content": "\tmanifest {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        attributes \u0027Implementation-Title\u0027: \u0027Gradle Jar File Example\u0027,  "
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        \t\u0027Implementation-Version\u0027: version,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        \t\u0027Main-Class\u0027: \u0027com.mkyong.DateUtils\u0027"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    baseName \u003d project.name + \u0027-all\u0027"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    with jar"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "uggi121"
        },
        "content": "}"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "uggi121"
        },
        "content": "javafx {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    version \u003d \"11.0.2\""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    modules \u003d [ \u0027javafx.controls\u0027, \u0027javafx.fxml\u0027 ]"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "uggi121"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "uggi121": 37,
      "-": 19
    }
  },
  {
    "path": "src/main/java/DialogBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "uggi121"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "uggi121"
        },
        "content": " * An example of a custom control using FXML."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "uggi121"
        },
        "content": " * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "uggi121"
        },
        "content": " * containing text from the speaker."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "uggi121"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "uggi121"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private DialogBox(String text, Image img) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        displayPicture.setImage(img);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        Collections.reverse(tmp);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * Gets text input from the user."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @param text The user entered text."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @param img The image corresponding to the user."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @return DialogBox based on the input."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public static DialogBox getUserDialog(String text, Image img) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return new DialogBox(text, img);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * Gets text response from Duke."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @param text The response from Duke."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @param img Duke\u0027s image"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @return Dialog Box corresponding to Duke\u0027s output."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public static DialogBox getDukeDialog(String text, Image img) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        var db \u003d new DialogBox(text, img);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "uggi121"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "uggi121": 71
    }
  },
  {
    "path": "src/main/java/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import duke.command.LoadCommand;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import duke.parser.Parser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "uggi121"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "uggi121"
        },
        "content": " * Handles program semantics at a very high level of abstraction."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "uggi121"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private Parser parser;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * Constructor for Duke. Initializes the task list, UI, parser and storage classes."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public Duke() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        parser \u003d new Parser();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        storage \u003d new Storage();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            LoadCommand c \u003d new LoadCommand();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            c.execute(tasks, ui, storage);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            ui.showLoadingError();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                storage.flushData();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            } catch (DukeException ex) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                ui.displayOutput(ex.getMessage());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * Gets Duke\u0027s response to the user input."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @param input User input."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @return Duke\u0027s response."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    String getResponse(String input) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            Command c \u003d parser.parseInput(input);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            String output \u003d c.execute(tasks, ui, storage);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            return output;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            return e.getMessage();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "uggi121": 52,
      "-": 3
    }
  },
  {
    "path": "src/main/java/Launcher.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "uggi121"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "uggi121"
        },
        "content": " * A launcher class to workaround classpath issues."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "uggi121"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "uggi121"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * Launches the application."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @param args Command line input."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        Application.launch(Main.class, args);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "uggi121"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "uggi121": 14
    }
  },
  {
    "path": "src/main/java/Main.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "uggi121"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "uggi121"
        },
        "content": " * A GUI for Duke using FXML."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "uggi121"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "uggi121"
        },
        "content": "public class Main extends Application {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private Duke duke \u003d new Duke();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * Starts the GUI."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @param stage Stage used by JavaFX."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            AnchorPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            Scene scene \u003d new Scene(ap);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "uggi121"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "uggi121": 32
    }
  },
  {
    "path": "src/main/java/MainWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "uggi121"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "uggi121"
        },
        "content": " * Controller for MainWindow. Provides the layout for the other controls."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "uggi121"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "uggi121"
        },
        "content": "public class MainWindow extends AnchorPane {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private Duke duke;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public void setDuke(Duke d) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        duke \u003d d;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        String response \u003d duke.getResponse(input);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                DialogBox.getUserDialog(input, userImage),"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                DialogBox.getDukeDialog(response, dukeImage)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        );"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "uggi121"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "uggi121": 50
    }
  },
  {
    "path": "src/main/java/duke/command/AddCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "uggi121"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import duke.date.InvalidDateDukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import duke.task.*;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "uggi121"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "uggi121"
        },
        "content": " * Represents a command instructing Duke to add a task."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "uggi121"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "uggi121"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private String input;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    /** Add-Command start phrases */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private static final String TODO_COMMAND_START \u003d \"todo\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private static final String DEADLINE_COMMAND_START \u003d \"deadline\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private static final String EVENT_COMMAND_START \u003d \"event\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * Constructor for the add command."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @param input Command description."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public AddCommand(String input) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        this.input \u003d input;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * Executes the add command."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @param tasks List of tasks"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @param ui User-Interface"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @param storage Storage class"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @return Duke\u0027s response."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @throws InvalidTaskDukeException If the task is invalid."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @throws InvalidDateDukeException If the date is invalid."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public String execute(TaskList tasks, Ui ui, Storage storage)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            throws InvalidTaskDukeException, InvalidDateDukeException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        String cleanedInput \u003d cleanInput(input);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        Task t \u003d makeTask(cleanedInput);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        String output \u003d tasks.addTask(t);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * Makes a task corresponding to the input."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @param cleanedInput Cleaned user input."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @return Task representing user input."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @throws InvalidTaskDukeException If task is invalid."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @throws InvalidDateDukeException If the date format is invalid."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public Task makeTask(String cleanedInput) throws InvalidTaskDukeException, InvalidDateDukeException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        if (cleanedInput.startsWith(TODO_COMMAND_START)) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            return makeTodo(cleanedInput);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        } else if (cleanedInput.startsWith(DEADLINE_COMMAND_START)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            return makeDeadline(cleanedInput);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        } else if (cleanedInput.startsWith(EVENT_COMMAND_START)) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            return makeEvent(cleanedInput);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            throw new InvalidTaskDukeException(\"Invalid add command!\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private Todo makeTodo(String task) throws InvalidTodoDukeException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            assert task.startsWith(TODO_COMMAND_START) : \"This is not a to-do command\";"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            String[] tokens \u003d task.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            StringBuilder description \u003d new StringBuilder();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            for (int i \u003d 1; i \u003c tokens.length; i++) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                description.append(tokens[i] + \" \");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            return new Todo(description.toString().strip());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        } catch (IndexOutOfBoundsException | InvalidTaskDukeException e) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            throw new InvalidTodoDukeException(\"Oops! Invalid \\\"todo\\\" command. Please stick to this format:\\n\""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                    + \"  \\\"todo [description]\\\"\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private Event makeEvent(String task) throws InvalidEventDukeException, InvalidDateDukeException {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            assert task.startsWith(EVENT_COMMAND_START) : \"This is not an event command\";"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            int indexOfEvent \u003d task.indexOf(\"event\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            int indexOfAt \u003d task.indexOf(\"/at\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            String description \u003d task.substring(indexOfEvent + 5, indexOfAt).strip();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            String at \u003d task.substring(indexOfAt + 3).strip();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            return new Event(description, at);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        } catch (IndexOutOfBoundsException | InvalidTaskDukeException e) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            throw new InvalidEventDukeException(\"Oops! Invalid \\\"event\\\" command. Please stick to this format:\\n\""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                    + \"  \\\"event [description] /at [time]\\\"\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private Deadline makeDeadline(String task) throws InvalidDeadlineDukeException, InvalidDateDukeException {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            assert task.startsWith(DEADLINE_COMMAND_START) : \"This is not a deadline command\";"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            int indexOfDeadline \u003d task.indexOf(\"deadline\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            int indexOfBy \u003d task.indexOf(\"/by\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            String description \u003d task.substring(indexOfDeadline + 8, indexOfBy).strip();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            String by \u003d task.substring(indexOfBy + 3).strip();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            return new Deadline(description, by);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        } catch (IndexOutOfBoundsException | InvalidTaskDukeException e) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            throw new InvalidDeadlineDukeException(\"Oops! Invalid \\\"deadline\\\" command. Please stick to this format:\\n\""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                    + \"  \\\"deadline [description] /by [time]\\\"\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * Checks if the command is an exit command."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @return False"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public boolean checkExit() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "uggi121"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "uggi121": 116
    }
  },
  {
    "path": "src/main/java/duke/command/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "uggi121"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "uggi121"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "uggi121"
        },
        "content": " * Represents an abstract command that instructs Duke."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "uggi121"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "uggi121"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * Executes the command."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @param tasks List of tasks"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @param ui User-Interface"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @param storage Storage object"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @return Duke\u0027s response as a string."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @throws DukeException If something goes wrong."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public abstract String execute(TaskList tasks, Ui ui, Storage storage) throws DukeException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public abstract boolean checkExit();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    protected String cleanInput(String input) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return input.strip().toLowerCase();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "uggi121"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "uggi121": 27
    }
  },
  {
    "path": "src/main/java/duke/command/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "uggi121"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import java.lang.reflect.Array;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "uggi121"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "uggi121"
        },
        "content": " * Represents a command instructing Duke to delete a task."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "uggi121"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "uggi121"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private String input;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * Constructor of the command."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @param input User input that represents the command."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public DeleteCommand(String input) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        this.input \u003d input;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * Deletes the required task."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @param tasks List of tasks"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @param ui User-Interface"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @param storage Storage object"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @return Duke\u0027s response to the command."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @throws InvalidDeleteDukeException If the task ID is invalid."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public String execute(TaskList tasks, Ui ui, Storage storage) throws InvalidDeleteDukeException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        String cleanedInput \u003d cleanInput(input);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        String output \u003d deleteTask(cleanedInput, tasks);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private String deleteTask(String cleanedInput, TaskList tasks) throws InvalidDeleteDukeException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        ArrayList\u003cInteger\u003e taskIds \u003d getTaskIds(cleanedInput);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        boolean isInvalidSize \u003d taskIds.size() !\u003d 1;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        if (isInvalidSize) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            throw new InvalidDeleteDukeException(\"Invalid \\\"delete\\\" command. Please enter only ONE task ID.\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return tasks.removeTaskFromList(taskIds.get(0));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private ArrayList\u003cInteger\u003e getTaskIds(String cleanedInput) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        Pattern p \u003d Pattern.compile(\"\\\\d+\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        Matcher m \u003d p.matcher(cleanedInput);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        ArrayList\u003cInteger\u003e taskIds \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        while (m.find()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            taskIds.add(Integer.parseInt(m.group()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return taskIds;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * Checks if the command is an exit command."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @return False."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public boolean checkExit() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "uggi121"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "uggi121": 68
    }
  },
  {
    "path": "src/main/java/duke/command/DoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "uggi121"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import duke.task.InvalidTaskDukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "uggi121"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "uggi121"
        },
        "content": " * Represents a command instructing Duke to mark a task as done."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "uggi121"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "uggi121"
        },
        "content": "public class DoneCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private String input;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * Constructor for done commands."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @param input User-input representing a done command."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public DoneCommand(String input) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        this.input \u003d input;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * Marks the input task(s) as done."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @param tasks List of tasks"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @param ui User-Interface"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @param storage Storage object"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @return Duke\u0027s response to the done command."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @throws DukeException If the done command is invalid."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public String execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        String cleanedInput \u003d cleanInput(input);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        String output \u003d markAsDone(cleanedInput, tasks);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private String markAsDone(String input, TaskList tasks) throws DukeException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            ArrayList\u003cInteger\u003e listOfTaskIds \u003d getListOfTaskIds(input);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            if (listOfTaskIds.isEmpty()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                throw new DukeException(\"Invalid \\\"done\\\" command!\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                        + \" Please enter one or more integer IDs after \\\"done\\\".\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            return tasks.getDoneUpdates(listOfTaskIds);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            throw new InvalidTaskDukeException(\"Task not found! Please enter a valid task ID.\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private ArrayList\u003cInteger\u003e getListOfTaskIds(String input) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        Pattern p \u003d Pattern.compile(\"\\\\d+\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        Matcher m \u003d p.matcher(input);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        ArrayList\u003cInteger\u003e listOfTaskIds \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        while (m.find()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            int taskId \u003d Integer.parseInt(m.group());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            listOfTaskIds.add(taskId);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return listOfTaskIds;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * Checks if the command is an exit command."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @return False."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public boolean checkExit() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "uggi121"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "uggi121": 72
    }
  },
  {
    "path": "src/main/java/duke/command/ExitCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "uggi121"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "uggi121"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "uggi121"
        },
        "content": " * Represents a command that instructs Duke to exit the program."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "uggi121"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "uggi121"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * Executes the exit command."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @param tasks List of tasks"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @param ui User-Interface"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @param storage Storage object"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @return Duke\u0027s response."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public String execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return \"Bye! See you again :-)\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * Checks if the command is an exit command."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @return True"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public boolean checkExit() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "uggi121"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "uggi121": 30
    }
  },
  {
    "path": "src/main/java/duke/command/FindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "uggi121"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "uggi121"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "uggi121"
        },
        "content": " * Represents a command that instructs Duke to search for a particular task description."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "uggi121"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "uggi121"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private String cleanedInput;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * Constructor for a find command."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @param cleanedInput Cleaned input representing a find command."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public FindCommand(String cleanedInput) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        this.cleanedInput \u003d cleanedInput;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * Executes the find command and searches for tasks with matching descriptions."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @param tasks List of tasks"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @param ui User-Interface"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @param storage Storage object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @return Duke\u0027s response to the find command."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @throws InvalidFindDukeException If the find command is invalid."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public String execute(TaskList tasks, Ui ui, Storage storage) throws InvalidFindDukeException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        if (isInvalidFindCommand(cleanedInput)) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            throw new InvalidFindDukeException(\"Invalid find command! Please enter a description after \\\"find\\\"\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            String matchedDescriptions \u003d getMatchingDescriptions(cleanedInput, tasks);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            if (matchedDescriptions.isBlank()) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                return \"No matching tasks found!\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                return matchedDescriptions;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private String getMatchingDescriptions(String cleanedInput, TaskList tasks) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        String descriptionToMatch \u003d cleanedInput.substring(cleanedInput.indexOf(\"find\") + 4)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                .toLowerCase().strip();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        String matchedDescriptions \u003d tasks.findTasks(descriptionToMatch);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return matchedDescriptions;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private boolean isInvalidFindCommand(String input) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return cleanedInput.equalsIgnoreCase(\"find\")"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                || cleanedInput.split(\"\\\\s+\").length \u003d\u003d 1;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * Checks if this is an exit command."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @return False."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public boolean checkExit() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "uggi121"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "uggi121": 63
    }
  },
  {
    "path": "src/main/java/duke/command/InvalidCommandDukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "uggi121"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "uggi121"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "uggi121"
        },
        "content": " * Represents an exceptional situation involving invalid commands."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "uggi121"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "uggi121"
        },
        "content": "public class InvalidCommandDukeException extends DukeException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public InvalidCommandDukeException(String message) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "uggi121"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "uggi121": 14
    }
  },
  {
    "path": "src/main/java/duke/command/InvalidDeleteDukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "uggi121"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "uggi121"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "uggi121"
        },
        "content": " * Represents an exceptional situation dealing with an invalid delete command."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "uggi121"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "uggi121"
        },
        "content": "public class InvalidDeleteDukeException extends DukeException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public InvalidDeleteDukeException(String message) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "uggi121"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "uggi121": 14
    }
  },
  {
    "path": "src/main/java/duke/command/InvalidFindDukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "uggi121"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "uggi121"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "uggi121"
        },
        "content": " * Represents an exceptional situation that deals with an invalid find command."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "uggi121"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "uggi121"
        },
        "content": "public class InvalidFindDukeException extends DukeException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public InvalidFindDukeException(String message) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "uggi121"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "uggi121": 14
    }
  },
  {
    "path": "src/main/java/duke/command/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "uggi121"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "uggi121"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "uggi121"
        },
        "content": " * Represents a command instructing Duke to list out all the tasks."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "uggi121"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "uggi121"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * Executes the command and lists out all the tasks."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @param tasks List of tasks"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @param ui User-Interface"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @param storage Storage object"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @return Duke\u0027s response."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public String execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        String listOfTasks \u003d tasks.getListOfTasks();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return listOfTasks;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * Checks if this command is an exit command."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @return False."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public boolean checkExit() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "uggi121"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "uggi121": 31
    }
  },
  {
    "path": "src/main/java/duke/command/LoadCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "uggi121"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import duke.date.InvalidDateDukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import duke.storage.Serializer;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import duke.task.InvalidTaskDukeException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "uggi121"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "uggi121"
        },
        "content": " * Represents a command instructing Duke to load tasks from the hard-disk."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "uggi121"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "uggi121"
        },
        "content": "public class LoadCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private static final String LOAD_SUCCESS_MESSAGE \u003d \"Tasks pre-loaded\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * Executes the command and loads the tasks from the hard-disk."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @param tasks List of tasks"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @param ui User-Interface"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @param storage Storage object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @return Duke\u0027s response."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @throws DukeException If tasks cannot be loaded from the hard-disk."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public String execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            ArrayList\u003cTask\u003e taskList \u003d loadAndDeserializeTasks(storage);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            tasks.addAllTasks(taskList);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            return LOAD_SUCCESS_MESSAGE;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            throw new DukeException(\"File not found.\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private ArrayList\u003cTask\u003e loadAndDeserializeTasks(Storage storage) throws FileNotFoundException,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            InvalidDateDukeException, InvalidTaskDukeException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        ArrayList\u003cString\u003e stringTasks \u003d storage.loadTasks();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        ArrayList\u003cTask\u003e taskList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        Serializer serializer \u003d new Serializer();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        for (String s : stringTasks) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            Task t \u003d serializer.deserializeTask(s);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            taskList.add(t);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return taskList;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * Checks if this command is an exit command."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @return False."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public boolean checkExit() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "uggi121"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "uggi121": 60
    }
  },
  {
    "path": "src/main/java/duke/command/SaveCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "uggi121"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import duke.storage.Serializer;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import duke.task.InvalidTaskDukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import java.lang.reflect.Array;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "uggi121"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "uggi121"
        },
        "content": " * Represents a command instructing Duke to save tasks onto the hard-disk"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "uggi121"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "uggi121"
        },
        "content": "public class SaveCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private static final String SAVE_SUCCESS_MESSAGE \u003d \"Tasks saved. Bye bye!\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private static final String SAVE_FAIL_MESSAGE \u003d \"Unable to save tasks. Please check your file path.\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * Executes the command and saves tasks into a file on the hard-disk."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @param tasks List of tasks"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @param ui User-Interface"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @param storage Storage object"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @throws InvalidTaskDukeException"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public String execute(TaskList tasks, Ui ui, Storage storage) throws InvalidTaskDukeException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            ArrayList\u003cString\u003e stringTasks \u003d serializeAndSaveTasks(tasks);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            storage.saveTasks(stringTasks);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            return SAVE_SUCCESS_MESSAGE;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            return SAVE_FAIL_MESSAGE;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private ArrayList\u003cString\u003e serializeAndSaveTasks(TaskList tasks) throws InvalidTaskDukeException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        ArrayList\u003cTask\u003e taskList \u003d tasks.getTasks();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        ArrayList\u003cString\u003e stringTasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        Serializer serializer \u003d new Serializer();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        for (Task t : taskList) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            String serializedTask \u003d serializer.serializeTask(t);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            stringTasks.add(serializedTask);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return stringTasks;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * Checks if the command is an exit command."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @return False."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public boolean checkExit() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "uggi121"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "uggi121": 58
    }
  },
  {
    "path": "src/main/java/duke/date/DateValidator.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "uggi121"
        },
        "content": "package duke.date;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import java.time.DateTimeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import java.time.Month;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "uggi121"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "uggi121"
        },
        "content": " * Deals with making sense of user entered dates and times"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "uggi121"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "uggi121"
        },
        "content": "public class DateValidator {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private static final String INVALID_DATE_MSG \u003d \"Invalid date format! \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            + \"Please ensure your date sticks to this format:\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            + \"    Deadlines : \\\"DD/MM/YYYY HHMM\\\"\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            + \"    Events : \\\"DD/MM/YYYY HHMM-HHMM\\\"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * Validates the date-time string entered by the user and returns an array with start, end times."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @param date Date-time input by the user."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @param hasEndTime Boolean indicating if the date-time has an end time."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @return Array of start time, along with end time for event."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @throws InvalidDateDukeException If the date format is invalid."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public LocalDateTime[] getAndValidateDates(String date, boolean hasEndTime) throws InvalidDateDukeException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        ArrayList\u003cString\u003e dateParams \u003d getDateParameters(date);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        if (isInvalidFormat(dateParams, hasEndTime)) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            throw new InvalidDateDukeException(INVALID_DATE_MSG);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            Month month \u003d getMonth(dateParams);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            return getValidDate(dateParams, hasEndTime, month);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        } catch (DateTimeException e) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            throw new InvalidDateDukeException(INVALID_DATE_MSG);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private Month getMonth(ArrayList\u003cString\u003e dateParams) throws DateTimeException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return Month.of(Integer.parseInt(dateParams.get(1)));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private boolean isInvalidFormat(ArrayList\u003cString\u003e dateParams, boolean hasEndTime) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return isInvalidDeadlineFormat(dateParams, hasEndTime)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                || isInvalidEventFormat(dateParams, hasEndTime);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private boolean isInvalidEventFormat(ArrayList\u003cString\u003e dateParams, boolean hasEndTime) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return hasEndTime \u0026\u0026 dateParams.size() !\u003d 5;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private boolean isInvalidDeadlineFormat(ArrayList\u003cString\u003e dateParams, boolean hasEndTime) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return !hasEndTime \u0026\u0026 dateParams.size() !\u003d 4;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private ArrayList\u003cString\u003e getDateParameters(String date) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        Pattern p \u003d Pattern.compile(\"\\\\d+\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        Matcher m \u003d p.matcher(date);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        ArrayList\u003cString\u003e dateParams \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        while (m.find()) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            dateParams.add(m.group());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return dateParams;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private LocalDateTime[] getValidDate(ArrayList\u003cString\u003e dateParams, boolean hasEndTime, Month month)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            throws InvalidDateDukeException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            ArrayList\u003cInteger\u003e integerDateParams \u003d getIntegerDateParams(dateParams);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            if (hasEndTime) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                ArrayList\u003cInteger\u003e integerEndTimeParams \u003d getEndTimeParams(dateParams);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                return getValidEventDates(integerDateParams, month, integerEndTimeParams);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                return getValidDeadlineDate(integerDateParams, month);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            throw new InvalidDateDukeException(INVALID_DATE_MSG);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private ArrayList\u003cInteger\u003e getEndTimeParams(ArrayList\u003cString\u003e dateParams) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        String end \u003d dateParams.get(4);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        assert end.length() \u003d\u003d 4 : \"End time invalid for event!\";"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        int endHours \u003d Integer.parseInt(end.substring(0, 2));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        int endMinutes \u003d Integer.parseInt(end.substring(2));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        ArrayList\u003cInteger\u003e endParams \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        endParams.add(endHours);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        endParams.add(endMinutes);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return endParams;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private ArrayList\u003cInteger\u003e getIntegerDateParams(ArrayList\u003cString\u003e dateParams) throws InvalidDateDukeException {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        int day \u003d Integer.parseInt(dateParams.get(0));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        int year \u003d Integer.parseInt(dateParams.get(2));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        String start \u003d dateParams.get(3);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        int startHours \u003d Integer.parseInt(start.substring(0, 2));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        int startMinutes \u003d Integer.parseInt(start.substring(2));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return makeArrayList(day, year, startHours, startMinutes);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private ArrayList\u003cInteger\u003e makeArrayList(int ... args) throws InvalidDateDukeException {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        ArrayList\u003cInteger\u003e dateParams \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        int argCount \u003d 0;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        for (int arg : args) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            argCount++;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            dateParams.add(arg);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        boolean invalidArgCount \u003d argCount !\u003d 4;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        if (invalidArgCount) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            throw new InvalidDateDukeException(INVALID_DATE_MSG);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return dateParams;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private LocalDateTime[] getValidDeadlineDate(ArrayList\u003cInteger\u003e intParams, Month month)"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            throws InvalidDateDukeException {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            LocalDateTime dateTime \u003d LocalDateTime.of(intParams.get(1),"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                    month, intParams.get(0), intParams.get(2), intParams.get(3));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            return new LocalDateTime[] {dateTime};"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        } catch (DateTimeException e) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            throw new InvalidDateDukeException(\"Invalid date semantics!\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private LocalDateTime[] getValidEventDates(ArrayList\u003cInteger\u003e intParams, Month month, ArrayList\u003cInteger\u003e endParams)"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            throws InvalidDateDukeException {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            int year \u003d intParams.get(1);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            int day \u003d intParams.get(0);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            LocalDateTime dateTimeStart \u003d LocalDateTime.of(year, month, day,"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                    intParams.get(2), intParams.get(3));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            LocalDateTime dateTimeEnd \u003d LocalDateTime.of(year, month, day,"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                    endParams.get(0), endParams.get(1));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            if (areInvalidStartEndTimes(dateTimeStart, dateTimeEnd)) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                throw new InvalidDateDukeException(\"Invalid date semantics!\");"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            return new LocalDateTime[] {dateTimeStart, dateTimeEnd};"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        } catch (DateTimeException e) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            throw new InvalidDateDukeException(\"Invalid date semantics!\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private boolean areInvalidStartEndTimes(LocalDateTime start, LocalDateTime end) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return start.isAfter(end) || start.isEqual(end);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "uggi121"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "uggi121": 148
    }
  },
  {
    "path": "src/main/java/duke/date/EventConflictChecker.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "uggi121"
        },
        "content": "package duke.date;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "uggi121"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "uggi121"
        },
        "content": " * Checks if events are scheduled at conflicting times."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "uggi121"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "uggi121"
        },
        "content": "public class EventConflictChecker {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private static final String DATE_CONFLICT \u003d \"Error! This event clashes with an existing event.\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private static ArrayList\u003cInterval\u003e bookedIntervals \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * Adds an interval to be blocked so that future events can\u0027t clash."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @param event Event whose interval is to be added."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @throws InvalidDateDukeException If the event\u0027s time slot clashes."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public static void addInterval(Event event) throws InvalidDateDukeException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        Interval interval \u003d makeIntervalFromEvent(event);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        boolean isInvalidInterval \u003d isConflicting(interval);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        if (isInvalidInterval) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            throw new InvalidDateDukeException(DATE_CONFLICT);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        bookedIntervals.add(interval);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private static boolean isConflicting(Interval newInterval) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        for (Interval interval : bookedIntervals) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            if (interval.isOverlapping(newInterval)) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private static Interval makeIntervalFromEvent(Event event) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        LocalDateTime startTime \u003d event.getStartTime();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        LocalDateTime endTime \u003d event.getEndTime();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        Interval newInterval \u003d new Interval(startTime, endTime);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return newInterval;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * Deletes the time-slot corresponding to the input event, effectively freeing it."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @param event Event whose time slot is to be freed."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public static void deleteInterval(Event event) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        Interval interval \u003d makeIntervalFromEvent(event);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        removeInterval(interval);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private static void removeInterval(Interval interval) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        for (Interval i : bookedIntervals) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            if (i.equals(interval)) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                bookedIntervals.remove(i);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "uggi121"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "uggi121": 63
    }
  },
  {
    "path": "src/main/java/duke/date/Interval.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "uggi121"
        },
        "content": "package duke.date;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "uggi121"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "uggi121"
        },
        "content": " * Represents a time interval with a demarcated start and end time."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "uggi121"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "uggi121"
        },
        "content": "class Interval {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private LocalDateTime startTime;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private LocalDateTime endTime;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * Constructs a time interval."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @param startTime Starting time of the interval."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @param endTime Ending time of the interval."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    Interval(LocalDateTime startTime, LocalDateTime endTime) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        setStartTime(startTime);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        setEndTime(endTime);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * Sets the start time of the interval."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @param startTime The starting time."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    void setStartTime(LocalDateTime startTime) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        this.startTime \u003d startTime;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * Sets the end time of the interval."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @param endTime The ending time."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    void setEndTime(LocalDateTime endTime) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        this.endTime \u003d endTime;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * Gets the starting time of the interval."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @return Etarting time."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    LocalDateTime getStartTime() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return startTime;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * Gets the ending time of the interval."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @return Ending time."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    LocalDateTime getEndTime() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return endTime;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * Checks if the input interval overlaps with the current interval."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @param interval Interval to check for overlap."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @return True if there is overlap, false otherwise."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    boolean isOverlapping(Interval interval) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return !isNonOverlapping(interval);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private boolean isNonOverlapping(Interval interval) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        boolean isBefore \u003d isBeforeInterval(interval);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        boolean isAfter \u003d isAfterInterval(interval);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return isBefore || isAfter;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private boolean isBeforeInterval(Interval interval) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        boolean isCurrentEndBeforeEndTime \u003d this.endTime.isBefore(interval.getEndTime());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        boolean isCurrentEndBeforeStartTime \u003d this.endTime.isBefore(interval.getStartTime());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        boolean isCurrentEndEqualToStartTime \u003d this.endTime.isEqual(interval.getStartTime());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return isCurrentEndBeforeEndTime"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                \u0026\u0026 (isCurrentEndBeforeStartTime || isCurrentEndEqualToStartTime);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private boolean isAfterInterval(Interval interval) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        boolean isCurrentStartAfterStartTime \u003d this.startTime.isAfter((interval.getStartTime()));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        boolean isCurrentStartAfterEndTime \u003d this.startTime.isAfter(interval.getEndTime());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        boolean isCurrentStartEqualToEndTime \u003d this.startTime.isEqual(interval.getEndTime());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return isCurrentStartAfterStartTime"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                \u0026\u0026 (isCurrentStartAfterEndTime || isCurrentStartEqualToEndTime);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        if (this \u003d\u003d obj) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        } else if (obj instanceof Interval) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            Interval i \u003d (Interval) obj;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            return i.endTime.isEqual(endTime) \u0026\u0026 i.startTime.isEqual(startTime);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "uggi121"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "uggi121": 97
    }
  },
  {
    "path": "src/main/java/duke/date/InvalidDateDukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "uggi121"
        },
        "content": "package duke.date;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "uggi121"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "uggi121"
        },
        "content": " * Represents an exceptional situation related to invalid date formats and semantics."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "uggi121"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "uggi121"
        },
        "content": "public class InvalidDateDukeException extends DukeException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * Constructor of the exception."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @param message Message carried by the exception."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public InvalidDateDukeException(String message) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "uggi121"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "uggi121": 18
    }
  },
  {
    "path": "src/main/java/duke/exception/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "uggi121"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "uggi121"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "uggi121"
        },
        "content": " * Represents all exceptional situations related to Duke."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "uggi121"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "uggi121"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * Constructor of the duke exception."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @param message Message carried by the exception."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public DukeException(String message) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "uggi121"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "uggi121": 16
    }
  },
  {
    "path": "src/main/java/duke/parser/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "uggi121"
        },
        "content": "package duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import duke.command.*;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "uggi121"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "uggi121"
        },
        "content": " * Deals with parsing user input."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "uggi121"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "uggi121"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * Parses the user input and returns the corresponding command."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @param input User input"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @return Command corresponding to the user input."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @throws DukeException If the command is invalid."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public Command parseInput(String input) throws DukeException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        String cleanedInput \u003d cleanInput(input);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        if (isNullaryCommand(cleanedInput)) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            return makeNullaryCommand(cleanedInput);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        } else if (isUnaryCommand(cleanedInput)) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            return makeUnaryCommand(cleanedInput);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        } else if (isDoneCommand(cleanedInput)) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            return new DoneCommand(cleanedInput);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            throw new InvalidCommandDukeException(\"Unrecognized Command!\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private boolean isDoneCommand(String input) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return input.startsWith(\"done\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private String cleanInput(String input) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return input.strip().toLowerCase();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private boolean isNullaryCommand(String cleanedInput) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return cleanedInput.startsWith(\"list\") || cleanedInput.startsWith(\"bye\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private Command makeNullaryCommand(String cleanedInput) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        if (cleanedInput.startsWith(\"list\")) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private boolean isUnaryCommand(String cleanedInput) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return cleanedInput.startsWith(\"delete\") || isValidAddCommand(cleanedInput) || cleanedInput.startsWith(\"find\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private Command makeUnaryCommand(String cleanedInput) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        if (cleanedInput.startsWith(\"delete\")) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            return new DeleteCommand(cleanedInput);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        } else if (cleanedInput.startsWith(\"find\")) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            return new FindCommand(cleanedInput);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            return new AddCommand(cleanedInput);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private boolean isValidAddCommand(String cleanedInput) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return cleanedInput.startsWith(\"todo \") || cleanedInput.startsWith(\"deadline \")"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                || cleanedInput.startsWith(\"event \");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "uggi121"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "uggi121": 69
    }
  },
  {
    "path": "src/main/java/duke/storage/Serializer.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "uggi121"
        },
        "content": "package duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import duke.date.InvalidDateDukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import duke.task.*;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "uggi121"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "uggi121"
        },
        "content": " * Serializes and de-serializes tasks to load and save them onto the hard-disk."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "uggi121"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "uggi121"
        },
        "content": "public class Serializer {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private static final String DESERIALIZE_FAIL_MSG \u003d \"Unable to deserialize task from text.\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private static final String SERIALIZE_FAIL_MSG \u003d \"Oops! Unable to serialize this task.\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * De-serializes a task entry from the text file on the hard disk and returns the corresponding task object."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @param input String task entry"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @return Task object"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @throws InvalidTaskDukeException If task is invalid."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @throws InvalidDateDukeException If date is invalid."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public Task deserializeTask(String input) throws InvalidTaskDukeException, InvalidDateDukeException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        if (input.isBlank()) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            throw new InvalidTaskDukeException(DESERIALIZE_FAIL_MSG);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        String[] tokens \u003d tokenize(input);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        if (isTodo(tokens)) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            return deserializeTodo(tokens);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        } else if (isDeadline(tokens)) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            return deserializeDeadline(tokens);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        } else if (isEvent(tokens)) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            return deserializeEvent(tokens);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            throw new InvalidTaskDukeException(DESERIALIZE_FAIL_MSG);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private boolean isTodo(String[] tokens) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return tokens[0].equals(\"T\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private boolean isDeadline(String[] tokens) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return tokens[0].equals(\"D\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private boolean isEvent(String[] tokens) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return tokens[0].equals(\"E\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private String[] tokenize(String input) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return input.split(\"\\\\|\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private Task deserializeTodo(String[] tokens) throws InvalidTaskDukeException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        Task t \u003d new Todo(tokens[2]);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        if (tokens[1].equals(\"1\")) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            t.setDone(true);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return t;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private Task deserializeEvent(String[] tokens) throws InvalidDateDukeException, InvalidTaskDukeException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        Task t \u003d new Event(tokens[2], tokens[3]);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        if (tokens[1].equals(\"1\")) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            t.setDone(true);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return t;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private Task deserializeDeadline(String[] tokens) throws InvalidDateDukeException, InvalidTaskDukeException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        Task t \u003d new Deadline(tokens[2], tokens[3]);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        if (tokens[1].equals(\"1\")) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            t.setDone(true);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return t;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * Serialize task to store it into a text file on the hard-disk."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @param task Task object"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @return String representing a task entry."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @throws InvalidTaskDukeException If the task is invalid."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public String serializeTask(Task task) throws InvalidTaskDukeException {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        String completionState \u003d getCompletionState(task);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        String description \u003d task.getDescription();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        if (task instanceof Todo) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            return serializeTodo(completionState, description);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        } else if (task instanceof Event) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            return serializeEvent(completionState, description, task);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        } else if (task instanceof Deadline) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            return serializeDeadline(completionState, description, task);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            throw new InvalidTaskDukeException(SERIALIZE_FAIL_MSG);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private String getCompletionState(Task task) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return task.getIsDone() ? \"1\" : \"0\";"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private String serializeTodo(String completionState, String description) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return \"T | \" + completionState + \" | \" + description;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private String serializeEvent(String completionState, String description, Task task) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return \"E | \" + completionState + \" | \" + description + \" | \" + task.getTime();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private String serializeDeadline(String completionState, String description, Task task) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return \"D | \" + completionState + \" | \" + description + \" | \" + task.getTime();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "uggi121"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "uggi121": 112
    }
  },
  {
    "path": "src/main/java/duke/storage/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "uggi121"
        },
        "content": "package duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "uggi121"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "uggi121"
        },
        "content": " * Deals with loading and saving of tasks from the hard-disk."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "uggi121"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "uggi121"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private String filepath;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * Constructor for the storage object."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public Storage() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        filepath \u003d Paths.get(\".\").toAbsolutePath().getParent()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                .toString() + \"\\\\data\\\\tasks.txt\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * Loads tasks from the hard disk."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @return Loaded tasks in the form of a string list."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @throws FileNotFoundException If the file on the hard-disk doesn\u0027t exist."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public ArrayList\u003cString\u003e loadTasks() throws FileNotFoundException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        File f \u003d new File(filepath);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        ArrayList\u003cString\u003e tasks \u003d loadFromFile(f);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return tasks;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private ArrayList\u003cString\u003e loadFromFile(File f) throws FileNotFoundException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        Scanner sc \u003d new Scanner(f);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        ArrayList\u003cString\u003e tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        while (sc.hasNext()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            tasks.add(sc.nextLine());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        sc.close();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return tasks;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * Saves the list of tasks into a file on the hard-disk."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @param tasks The list of tasks."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @throws IOException If the file doesn\u0027t exist."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public void saveTasks(ArrayList\u003cString\u003e tasks) throws IOException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        File f \u003d new File(filepath);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        FileWriter writer \u003d new FileWriter(f);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            if (!f.exists()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                f.createNewFile();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            writeToFile(writer, tasks);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        } finally {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            writer.close();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private void writeToFile(FileWriter writer, ArrayList\u003cString\u003e tasks) throws IOException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        for (String s : tasks) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            writer.write(s + \"\\n\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * Deletes the existing file on the hard disk and creates a new copy."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @throws DukeException If the file is not found."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public void flushData() throws DukeException {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            File f \u003d new File(filepath);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            f.delete();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            f.createNewFile();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            throw new DukeException(\"File not found. The directory entered is invalid\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "uggi121"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "uggi121": 86
    }
  },
  {
    "path": "src/main/java/duke/task/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "uggi121"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import duke.date.DateValidator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import duke.date.InvalidDateDukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "uggi121"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "uggi121"
        },
        "content": " * Represents a deadline. Consists of a description which the user intends to perform by a certain deadline."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "uggi121"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "uggi121"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    protected String by;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private LocalDateTime dateTime;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * Constructor for a task of type deadline."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @param description Task to be done."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @param by Deadline."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @throws InvalidTaskDukeException If the task description is invalid."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @throws InvalidDateDukeException If the deadline (date) is invalid."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public Deadline(String description, String by) throws InvalidTaskDukeException, InvalidDateDukeException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        setBy(by);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * Sets the date to the entered date if possible."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @param by Date represented as a string."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @throws InvalidDateDukeException If the date is invalid."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public void setBy(String by) throws InvalidDateDukeException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        DateValidator v \u003d new DateValidator();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        LocalDateTime[] date \u003d v.getAndValidateDates(by, false);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        this.dateTime \u003d date[0];"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        this.by \u003d by;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public LocalDateTime getDateTime() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return dateTime;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * Returns the deadline for the task."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @return Deadline."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public String getTime() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return by;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return \"[Deadline] \" + super.toString() + \" (by: \" + by + \")\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "uggi121"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "uggi121": 56
    }
  },
  {
    "path": "src/main/java/duke/task/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "uggi121"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import duke.date.DateValidator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import duke.date.EventConflictChecker;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import duke.date.InvalidDateDukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "uggi121"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "uggi121"
        },
        "content": " * Represents an event that is held from a start time to an end time."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "uggi121"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "uggi121"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    protected String at;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private LocalDateTime startTime;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private LocalDateTime endTime;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * Constructor for the event class."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @param description Description of the event"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @param at Time duration of the event."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @throws InvalidTaskDukeException If the description is invalid"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @throws InvalidDateDukeException If the date-time is invalid"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public Event(String description, String at) throws InvalidTaskDukeException, InvalidDateDukeException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        setAt(at);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * Set the time of the event, if possible."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @param at The time of the event"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @throws InvalidDateDukeException If the date is invalid."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public void setAt(String at) throws InvalidDateDukeException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        DateValidator v \u003d new DateValidator();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        LocalDateTime[] dates \u003d v.getAndValidateDates(at, true);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        this.startTime \u003d dates[0];"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        this.endTime \u003d dates[1];"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        EventConflictChecker.addInterval(this);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        this.at \u003d at;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public LocalDateTime getStartTime() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return startTime;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public LocalDateTime getEndTime() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return endTime;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * Returns the time slot of the event."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public String getTime() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return at;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return \"[Event] \" + super.toString() + \" (at: \" + at + \")\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "uggi121"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "uggi121": 64
    }
  },
  {
    "path": "src/main/java/duke/task/InvalidDeadlineDukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "uggi121"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "uggi121"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "uggi121"
        },
        "content": " * Represents an exceptional situation where the the deadline is invalid."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "uggi121"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "uggi121"
        },
        "content": "public class InvalidDeadlineDukeException extends InvalidTaskDukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * Constructor for the deadline exception."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @param message The message carried by the exception."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public InvalidDeadlineDukeException(String message) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "uggi121"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "uggi121": 16
    }
  },
  {
    "path": "src/main/java/duke/task/InvalidEventDukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "uggi121"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "uggi121"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "uggi121"
        },
        "content": " * Represents an exceptional situation where the event is invalid."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "uggi121"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "uggi121"
        },
        "content": "public class InvalidEventDukeException extends InvalidTaskDukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * Constructor for the exception."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @param message Message carried by the exception."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public InvalidEventDukeException(String message) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "uggi121"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "uggi121": 16
    }
  },
  {
    "path": "src/main/java/duke/task/InvalidTaskDukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "uggi121"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "uggi121"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "uggi121"
        },
        "content": " * Represents an exceptional situation where the task is invalid."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "uggi121"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "uggi121"
        },
        "content": "public class InvalidTaskDukeException extends DukeException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * Constructor for an invalid task exception."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @param message Message carried by the exception."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public InvalidTaskDukeException(String message) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "uggi121"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "uggi121": 18
    }
  },
  {
    "path": "src/main/java/duke/task/InvalidTodoDukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "uggi121"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "uggi121"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "uggi121"
        },
        "content": " * Represents an exceptional situation where the to-do is invalid."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "uggi121"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "uggi121"
        },
        "content": "public class InvalidTodoDukeException extends InvalidTaskDukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * Constructor for the to-do exception."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @param message Message carried by the exception."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public InvalidTodoDukeException(String message) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "uggi121"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "uggi121": 16
    }
  },
  {
    "path": "src/main/java/duke/task/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "uggi121"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "uggi121"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "uggi121"
        },
        "content": " * Represents a task. Contains a description and a flag that indicates if the task has been completed or not."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "uggi121"
        },
        "content": " * It is an abstract entity whose children are deadlines, events and to-dos."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "uggi121"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "uggi121"
        },
        "content": "public abstract class Task {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    protected static final String INVALID_DATE_MSG \u003d \"Invalid date format! \""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            + \"Please ensure your date sticks to this format:\\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            + \"    Deadlines : \\\"DD/MM/YYYY HHMM\\\"\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            + \"    Events : \\\"DD/MM/YYYY HHMM-HHMM\\\"\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * Constructor for an abstract task."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @param description Description of the task."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @throws InvalidTaskDukeException If the task is invalid."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public Task(String description) throws InvalidTaskDukeException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        if (description.isBlank()) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            throw new InvalidTaskDukeException(\"Description cannot be empty! Please enter a valid description.\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * Returns a tick if the task is complete, cross otherwise."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @return Status symbol indicating completion."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return (isDone ? \"\\u2713\" : \"\\u2718\"); //return tick or X symbols"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * Returns the description of the task."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @return Description."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return this.description;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * Sets the task\u0027s completion flag"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @param isDone Boolean to be set."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public void setDone(boolean isDone) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        this.isDone \u003d isDone;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * Returns the completion flag of the task."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @return Boolean"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public boolean getIsDone() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return isDone;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * Returns the time associated with the task."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @return String representing time."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public abstract String getTime();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return \"[\" + getStatusIcon() + \"]\" + \" \" + description;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "uggi121"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "uggi121": 71
    }
  },
  {
    "path": "src/main/java/duke/task/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "uggi121"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "uggi121"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "uggi121"
        },
        "content": " * Represents a to-do which consists of a description with no particular deadline."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "uggi121"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "uggi121"
        },
        "content": "public class Todo extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    protected String by;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * Constructor for a to-do task."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @param description Description of the task."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @throws InvalidTaskDukeException If the to-do is invalid."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public Todo(String description) throws InvalidTaskDukeException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public String getTime() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return \"\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return \"[Todo] \" + super.toString();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "uggi121"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "uggi121": 27
    }
  },
  {
    "path": "src/main/java/duke/tasklist/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "uggi121"
        },
        "content": "package duke.tasklist;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import duke.command.InvalidDeleteDukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import duke.date.EventConflictChecker;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import duke.task.InvalidTaskDukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import java.lang.reflect.Array;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "uggi121"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "uggi121"
        },
        "content": " * Deals with storing, adding, deleting, finding of tasks. Stores their state of completion."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "uggi121"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "uggi121"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private static ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private static final String EMPTY_LIST_MSG \u003d \"Oops! The list is empty.\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * Removes the task corresponding to the task ID from the list."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @param id ID of the task to be removed."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @return A message confirming task removal along with the removed task."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @throws InvalidDeleteDukeException If the task ID is invalid."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public String removeTaskFromList(int id) throws InvalidDeleteDukeException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            Task t \u003d tasks.remove(id - 1);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            updateIntervals(t);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            return getRemoveTaskMessage(t);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            throw new InvalidDeleteDukeException(\"Invalid \\\"delete\\\" command. Please enter a valid task ID.\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private void updateIntervals(Task task) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        if (task instanceof Event) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            EventConflictChecker.deleteInterval((Event) task);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private String getRemoveTaskMessage(Task t) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return \"Nice! I\u0027ve removed this task from the list:\\n\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                + \"  \" + t.toString() + \"\\n\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                + \"Now you have \" + tasks.size() + \" tasks in the list.\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * Gets text confirmation after a task has been marked as done."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @param listOfTaskIds IDs of tasks to be marked done."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @return String"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @throws IndexOutOfBoundsException If ID/IDs are invalid."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public String getDoneUpdates(ArrayList\u003cInteger\u003e listOfTaskIds) throws IndexOutOfBoundsException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        StringBuilder finalOutput \u003d initializeFinalOutput(listOfTaskIds);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        developFinalOutput(finalOutput, listOfTaskIds);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return finalOutput.toString();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private StringBuilder initializeFinalOutput(ArrayList\u003cInteger\u003e listOfTaskIds) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        StringBuilder finalOutput \u003d listOfTaskIds.size() \u003d\u003d 1"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                ? new StringBuilder(\"Nice! I\u0027ve marked this task as done:\\n\")"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                : new StringBuilder(\"Nice! I\u0027ve marked these tasks as done:\\n\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return finalOutput;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private void developFinalOutput(StringBuilder finalOutput, ArrayList\u003cInteger\u003e listOfTaskIds) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        for (int i \u003d 0; i \u003c listOfTaskIds.size(); i++) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            Task t \u003d tasks.get(listOfTaskIds.get(i) - 1);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            t.setDone(true);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            updateIntervals(t);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            finalOutput.append(\"  \" + t.toString());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            if (i !\u003d listOfTaskIds.size() - 1) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                finalOutput.append(\"\\n\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * Adds a task to the list."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @param task The task to be added."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @return A confirmation along with the new task\u0027s description."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @throws InvalidTaskDukeException If the task is invalid."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public String addTask(Task task) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        tasks.add(task);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return getAddTaskMessage();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private String getAddTaskMessage() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return \"Nice! I\u0027ve added this task to the list:\\n\""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                + \"  \" + tasks.get(tasks.size() - 1).toString() + \"\\n\""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                + \"Now you have \" + tasks.size() + \" tasks in the list.\";"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * Returns a list of the tasks, ordered by ID"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @return String representing ordered list."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public String getListOfTasks() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        String finalOutput \u003d getFinalListOfTasks();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        if (finalOutput.isBlank()) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            return EMPTY_LIST_MSG;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return finalOutput;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private String getFinalListOfTasks() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        StringBuilder output \u003d new StringBuilder();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        for (int i \u003d 0; i \u003c tasks.size(); i++) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            output.append((i + 1) + \". \" + tasks.get(i));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            if (i !\u003d tasks.size() - 1) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                output.append(\"\\n\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        String finalOutput \u003d output.toString();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return finalOutput;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * Finds the tasks whose descriptions match the input string."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @param descriptionToMatch Description to search for."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @return String representing found tasks."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public String findTasks(String descriptionToMatch) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        String findResults \u003d getFindResult(descriptionToMatch);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return findResults;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private String getFindResult(String descriptionToMatch) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        StringBuilder result \u003d new StringBuilder();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        boolean taskExists \u003d false;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        for (int i \u003d 0; i \u003c tasks.size(); i++) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            if (tasks.get(i).getDescription().toLowerCase().contains(descriptionToMatch.toLowerCase())) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                if (taskExists) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                    result.append(\"\\n\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                result.append((i + 1) + \". \" + tasks.get(i).toString());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                taskExists \u003d true;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return result.toString();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * Adds all tasks to the current list."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @param tasks Tasks to be added."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public void addAllTasks(ArrayList\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        this.tasks.addAll(tasks);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * Gets the list of tasks."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @return List of tasks."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    @SuppressWarnings(\"unchecked\")"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public ArrayList\u003cTask\u003e getTasks() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return (ArrayList\u003cTask\u003e) tasks.clone();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "uggi121"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "uggi121": 159
    }
  },
  {
    "path": "src/main/java/duke/ui/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "uggi121"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "uggi121"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "uggi121"
        },
        "content": " * REDUNDANT"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "uggi121"
        },
        "content": " * Represents the UI."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "uggi121"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "uggi121"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private static final String LOGO \u003d \" ____        _        \\n\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            + \"|  _ \\\\ _   _| | _____ \\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            + \"| |_| | | | | |/ / _ \\\\\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            + \"|  _ _/ |_| |   \u003c  __/\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            + \"|_|   \\\\__,_|_|\\\\_\\\\___|\\n\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private static final String LOADING_ERROR_MSG \u003d \"WARNING! UNABLE TO LOAD \""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            + \"AND/OR DESERIALIZE TASKS FROM DATA DIRECTORY. \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            + \"PLEASE CHECK THE FILEPATH.\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            + \"YOU MAY CONTINUE TO WORK WITHOUT ANY OF YOUR PREVIOUS TASKS.\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private Scanner sc;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * Initializes the UI."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public Ui() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        sc \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public void greetUser() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        displayOutput(\"Hello from\\n\" + LOGO);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * Displays Duke\u0027s response."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @param output"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public String displayOutput(String output) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        String bound \u003d \"     ____________________________________________________________\\n     \";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        String intermediate \u003d output.replace(\"\\n\", \"\\n     \");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        String finalOutput \u003d bound + intermediate + \"\\n\" + bound;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        System.out.println(finalOutput);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "uggi121"
        },
        "content": "         */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return getResponse(output);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public String readInput() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return sc.nextLine();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public void showLoadingError() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        displayOutput(LOADING_ERROR_MSG);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public String getResponse(String input) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return input;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public boolean checkNextInput() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return sc.hasNext();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "uggi121"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "uggi121": 63
    }
  },
  {
    "path": "src/main/resources/view/DialogBox.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "uggi121"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "uggi121"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "uggi121"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "uggi121"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "uggi121"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "uggi121"
        },
        "content": "\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "uggi121"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "uggi121"
        },
        "content": "      \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "uggi121"
        },
        "content": "      \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "uggi121"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "uggi121"
        },
        "content": "   \u003cpadding\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "uggi121"
        },
        "content": "      \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "uggi121"
        },
        "content": "   \u003c/padding\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "uggi121"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "uggi121": 16
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "uggi121"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "uggi121"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "uggi121"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "uggi121"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "uggi121"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "uggi121"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "uggi121"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"MainWindow\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "uggi121"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "uggi121"
        },
        "content": "      \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "uggi121"
        },
        "content": "      \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "uggi121"
        },
        "content": "      \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "uggi121"
        },
        "content": "         \u003ccontent\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"557.0\" prefWidth\u003d\"388.0\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "uggi121"
        },
        "content": "         \u003c/content\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "uggi121"
        },
        "content": "      \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "uggi121"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "uggi121"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "uggi121": 19
    }
  },
  {
    "path": "src/test/java/duke/date/DateValidatorTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "uggi121"
        },
        "content": "package duke.date;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "uggi121"
        },
        "content": "public class DateValidatorTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * REDUNDANT"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public void validateDate_validDatesDeadline_trueReturned() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            DateValidator v \u003d new DateValidator();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            assertEquals(true, v.validateDate(\"11/01/2000 1800\", false));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            assertEquals(true, v.validateDate(\"15/03/2019 0815\", false));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            assertEquals(true, v.validateDate(\"12/12/2024 0000\", false));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            assertEquals(true, v.validateDate(\"11/11/2005 2000\", false));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        } catch (InvalidDateDukeException e) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public void validateDate_invalidDateFormatDeadline_falseReturned() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            DateValidator v \u003d new DateValidator();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            assertEquals(false, v.validateDate(\"11/01/20001800\", false));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            assertEquals(false, v.validateDate(\"15/03/2019 0815-0830\", false));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            assertEquals(false, v.validateDate(\"12/12/2024 2500\", false));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            assertEquals(false, v.validateDate(\"11/14/2005 2060\", false));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            assertEquals(false, v.validateDate(\"11/11/2005 2060\", false));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        } catch (InvalidDateDukeException e) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            assertEquals(\"Invalid date format! Please ensure your date sticks to this format:\\n\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                    + \"    Deadlines : \\\"DD/MM/YYYY HHMM\\\"\\n\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                    + \"    Events : \\\"DD/MM/YYYY HHMM-HHMM\\\"\", e.getMessage());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public void validateDate_validDatesEvent_trueReturned() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            DateValidator v \u003d new DateValidator();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            assertEquals(true, v.validateDate(\"11/01/2000 1800-2000\", true));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            assertEquals(true, v.validateDate(\"15/03/2019 0815-0830\", true));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            assertEquals(true, v.validateDate(\"12/12/2024 2300-2359\", true));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            assertEquals(true, v.validateDate(\"11/11/2005 2000-2115\", true));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            assertEquals(true, v.validateDate(\"11/10/1982 0000-0615\", true));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        } catch (InvalidDateDukeException e) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "uggi121"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "uggi121": 57
    }
  },
  {
    "path": "text-ui-test/EXPECTED.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     ____________________________________________________________"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     Hello from"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "uggi121"
        },
        "content": "      ____        _        "
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     |  _ \\ _   _| | _____ "
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     | |_| | | | | |/ / _ \\"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     |  _ _/ |_| |   \u003c  __/"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     |_|   \\__,_|_|\\_\\___|"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     "
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     ____________________________________________________________"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     "
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     ____________________________________________________________"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     Oops! The list is empty."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     ____________________________________________________________"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     "
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     ____________________________________________________________"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     Nice! I\u0027ve added this task to the list:"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "uggi121"
        },
        "content": "       [Todo] [✘] buy book"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     Now you have 1 tasks in the list."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     ____________________________________________________________"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     "
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     ____________________________________________________________"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     Nice! I\u0027ve added this task to the list:"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "uggi121"
        },
        "content": "       [Deadline] [✘] return book (by: Sept 5th)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     Now you have 2 tasks in the list."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     ____________________________________________________________"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     "
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     ____________________________________________________________"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     Nice! I\u0027ve marked these tasks as done:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "uggi121"
        },
        "content": "       [Todo] [✓] buy book"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "uggi121"
        },
        "content": "       [Deadline] [✓] return book (by: Sept 5th)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     ____________________________________________________________"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     "
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     ____________________________________________________________"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     1. [Todo] [✓] buy book"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     2. [Deadline] [✓] return book (by: Sept 5th)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     ____________________________________________________________"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     "
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     ____________________________________________________________"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     Bye! Hope to see you again :-)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     ____________________________________________________________"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "uggi121": 41
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "uggi121"
        },
        "content": "list"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "uggi121"
        },
        "content": "todo buy book"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "uggi121"
        },
        "content": "deadline return book /by Sept 5th"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "uggi121"
        },
        "content": "done 1 2"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "uggi121"
        },
        "content": "list"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "uggi121"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "uggi121": 6
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "uggi121"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "uggi121"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "uggi121"
        },
        "content": "if not exist C:\\CS2103\\Duke-New\\duke-master\\bin mkdir C:\\CS2103\\Duke-New\\duke-master\\bin"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "uggi121"
        },
        "content": "REM delete output from previous run"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "uggi121"
        },
        "content": "del ACTUAL.TXT"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "uggi121"
        },
        "content": "REM compile the code into the bin folder"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "uggi121"
        },
        "content": "javac  -cp C:\\CS2103\\Duke-New\\duke-master\\src -Xlint:none -d C:\\CS2103\\Duke-New\\duke-master\\bin C:\\CS2103\\Duke-New\\duke-master\\src\\main\\java\\*.java"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "uggi121"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    exit /b 1"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "uggi121"
        },
        "content": ")"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "uggi121"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "uggi121"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "uggi121"
        },
        "content": "java -classpath C:\\CS2103\\Duke-New\\duke-master\\bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "uggi121"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "uggi121"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT"
      }
    ],
    "authorContributionMap": {
      "uggi121": 21
    }
  }
]
