[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    id \u0027org.openjfx.javafxplugin\u0027 version \u00270.0.7\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "javafx {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    version \u003d \"11.0.2\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    modules \u003d [ \u0027javafx.controls\u0027, \u0027javafx.fxml\u0027 ]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "group \u0027seedu.duke\u0027"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "test {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    // Change this to your main class."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    mainClassName \u003d \"Launcher\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "honhaochen": 24,
      "-": 11
    }
  },
  {
    "path": "data/tasks.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "[T] | 1 | play"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "[D] | 1 | submission | 20/8/2019 03:00"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "[E] | 1 | dota | 20/1/2019 03:00"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "[T] | 1 | homework"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "[E] | 1 | abc | 05/9/2019 03:45"
      }
    ],
    "authorContributionMap": {
      "honhaochen": 5
    }
  },
  {
    "path": "src/main/java/Launcher.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "honhaochen"
        },
        "content": " * A launcher class to workaround classpath issues."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "honhaochen"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        Application.launch(Main.class, args);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "honhaochen": 10
    }
  },
  {
    "path": "src/main/java/Main.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import duke.Duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import javafx.MainWindow;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "honhaochen"
        },
        "content": " * A GUI for Duke using FXML."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "honhaochen"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "public class Main extends Application {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    private Duke duke \u003d new Duke();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     * Starts the GUI stage for Duke application."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     * @param stage the javafx stage."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "            AnchorPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "            Scene scene \u003d new Scene(ap);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "honhaochen": 35
    }
  },
  {
    "path": "src/main/java/command/ByeCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import task.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "honhaochen"
        },
        "content": " * Command for shut down the bot."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "honhaochen"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "public class ByeCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     * Execute deleting a task in user\u0027s tasks list."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     * Output bye message and update to hard disk storage."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     * @param tasks the TaskList."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     * @param ui the User Interface which responsible for every output printing."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     * @param storage user\u0027s hard disk storage."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     * @return Executed output as String."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    public String execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        storage.save(tasks);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        return \"Bye. Hope to see you again soon!\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "honhaochen": 27
    }
  },
  {
    "path": "src/main/java/command/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "honhaochen"
        },
        "content": " * Abstract class for every Commands."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "honhaochen"
        },
        "content": " * Encapsulates user\u0027s input into a command for easy handling."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "honhaochen"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    public abstract String execute(TaskList tasks, Ui ui, Storage storage) throws DukeException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "honhaochen": 16
    }
  },
  {
    "path": "src/main/java/command/DeadlineCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import exception.DeadlineException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import exception.DukeParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import task.Deadline;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import task.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import task.TaskList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "honhaochen"
        },
        "content": " * Command for creating a Deadline task."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "honhaochen"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "public class DeadlineCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    protected String[] input;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    public DeadlineCommand(String[] input) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        this.input \u003d input;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     * Execute creating Deadline task."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     * Output what is needed."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     * @param tasks the TaskList."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     * @param ui the User Interface which responsible for every output printing."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     * @param storage user\u0027s hard disk storage."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     * @return Executed output as String."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    public String execute(TaskList tasks, Ui ui, Storage storage) throws DukeParseException, DeadlineException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        if (input.length \u003c\u003d 1) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "            throw new DeadlineException();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        } else if (input.length \u003c\u003d 4) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "            throw new DeadlineException(\"OOPS!!! Did you type something wrong?\\n\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "                    + \"Make sure to type \u003c/by\u003e and state the datetime in \u0027dd/M/yyyy hh:mm\u0027 format!\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "                String output \u003d \"\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "                String description \u003d input[1];"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "                for (int i \u003d 2; i \u003c input.length - 3; i++) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "                    description +\u003d \" \" + input[i];"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "                }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "                String time \u003d input[input.length - 2] + \" \" + input[input.length - 1];"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "                Task newDeadlineTask \u003d new Deadline(description, time);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "                tasks.addTask(newDeadlineTask);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "                output +\u003d \"Got it. I\u0027ve added this task:\\n\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "                output +\u003d \"  \" + newDeadlineTask + \"\\n\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "                if (tasks.getSize() \u003e 1) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "                    output +\u003d \"Now you have \" + tasks.getSize() + \" tasks in the list.\\n\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "                    output +\u003d \"Now you have \" + tasks.getSize() + \" task in the list.\\n\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "                }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "                return output;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "            } catch (ParseException e) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "                throw new DukeParseException();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "            }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "honhaochen": 62
    }
  },
  {
    "path": "src/main/java/command/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import exception.DeleteException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import task.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "honhaochen"
        },
        "content": " * Command for deleting a task."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "honhaochen"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    protected String[] input;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    public DeleteCommand(String[] input) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        this.input \u003d input;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     * Execute deleting a task in user\u0027s tasks list."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     * Output what is needed."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     * @param tasks the TaskList."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     * @param ui the User Interface which responsible for every output printing."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     * @param storage user\u0027s hard disk storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     * @return Executed output as String."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    public String execute(TaskList tasks, Ui ui, Storage storage) throws DeleteException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        if (input.length \u003c\u003d 1) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "            throw new DeleteException();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "            int taskToDelete \u003d Integer.parseInt(input[1]);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "            if (tasks.getSize() \u003c taskToDelete) { //check if it\u0027s a valid delete"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "                throw new DeleteException(\"OOPS!!! There is no such task in your list!\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "                        + \"Current number of tasks \u003d \" + tasks.getTaskList().size());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "                String output \u003d \"\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "                Task task \u003d tasks.deleteTask(taskToDelete - 1);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "                output +\u003d \"Noted I\u0027ve removed this task:\\n\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "                output +\u003d \"  \" + task + \"\\n\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "                if (tasks.getSize() \u003e 1) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "                    output +\u003d \"Now you have \" + tasks.getSize() + \" tasks in the list.\\n\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "                    output +\u003d \"Now you have \" + tasks.getSize() + \" task in the list.\\n\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "                }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "                return output;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "            }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "honhaochen": 51
    }
  },
  {
    "path": "src/main/java/command/DoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import exception.DoneException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import task.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "honhaochen"
        },
        "content": " * Command for specifying that a task is done."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "honhaochen"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "public class DoneCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    protected String[] input;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    public DoneCommand(String[] input) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        this.input \u003d input;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     * Execute \u0027ticking\u0027 a task in user\u0027s tasks list."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     * Output what is needed."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     * @param tasks the TaskList."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     * @param ui the User Interface which responsible for every output printing."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     * @param storage user\u0027s hard disk storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     * @return Executed output as String."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    public String execute(TaskList tasks, Ui ui, Storage storage) throws DoneException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        if (input.length \u003c\u003d 1) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "            throw new DoneException();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "            int taskToBeDone \u003d Integer.parseInt(input[1]);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "            if (tasks.getSize() \u003c taskToBeDone) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "                throw new DoneException(\"OOPS!!! There is no such task in your list!\\n\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "                        + \"Current number of tasks \u003d \" + tasks.getTaskList().size());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "                String output \u003d \"\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "                Task task \u003d tasks.getTask(taskToBeDone - 1);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "                if (task.isDone()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "                    output +\u003d \"Hey! I\u0027ve already marked this task as done :)\\n\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "                    output +\u003d \"  \" + task + \"\\n\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "                    task.markAsDone();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "                    output +\u003d \"Nice! I\u0027ve marked this task as done:\\n\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "                    output +\u003d \"  \" + task + \"\\n\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "                }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "                return output;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "            }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "honhaochen": 52
    }
  },
  {
    "path": "src/main/java/command/EventCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import exception.DukeParseException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import exception.EventException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import task.Event;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import task.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import task.TaskList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "public class EventCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    protected String[] input;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    public EventCommand(String[] input) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        this.input \u003d input;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     * Execute creating Event task."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     * Output what is needed."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     * @param tasks the TaskList."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     * @param ui the User Interface which responsible for every output printing."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     * @param storage user\u0027s hard disk storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     * @return Executed output as String."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    public String execute(TaskList tasks, Ui ui, Storage storage) throws DukeParseException, EventException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        if (input.length \u003c\u003d 1) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "            throw new EventException();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        } else if (input.length \u003c\u003d 4) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "            throw new EventException(\"OOPS!!! Did you type something wrong?\\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "                    + \"Make sure to type \u003c/at\u003e and state the datetime in \u0027dd/M/yyyy hh:mm\u0027 format!\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "                String output \u003d \"\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "                String description \u003d input[1];"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "                for (int i \u003d 2; i \u003c input.length - 3; i++) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "                    description +\u003d \" \" + input[i];"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "                }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "                String time \u003d input[input.length - 2] + \" \" + input[input.length - 1];"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "                Task newEventTask \u003d new Event(description, time);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "                tasks.addTask(newEventTask);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "                output +\u003d \"Got it. I\u0027ve added this task:\\n\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "                output +\u003d \"  \" + newEventTask + \"\\n\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "                if (tasks.getSize() \u003e 1) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "                    output +\u003d \"Now you have \" + tasks.getSize() + \" tasks in the list.\\n\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "                    output +\u003d \"Now you have \" + tasks.getSize() + \" task in the list.\\n\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "                }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "                return output;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "            } catch (ParseException e) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "                throw new DukeParseException();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "honhaochen": 58
    }
  },
  {
    "path": "src/main/java/command/FindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import exception.FindException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import task.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "honhaochen"
        },
        "content": " * Command for finding query in TaskList."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "honhaochen"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    protected String[] input;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    public FindCommand(String[] input) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        this.input \u003d input;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     * execute command for finding query in user\u0027s tasks list."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     * @param tasks a TaskList."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     * @param ui User Interface for output printing."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     * @param storage hard disk storage."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     * @return Executed output as String."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    public String execute(TaskList tasks, Ui ui, Storage storage) throws FindException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        if (input.length \u003c\u003d 1) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "            throw new FindException();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "            String output \u003d \"\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "            ArrayList\u003cTask\u003e resultList \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "            for (Task task : tasks.getTaskList()) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "                String[] result \u003d task.toString().split(\" \");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "                for (String s : result) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "                    if (s.equals(input[1])) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "                        resultList.add(task);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "                }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "            }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "            if (resultList.isEmpty()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "                output +\u003d \"There are no matching tasks in your list\\n\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "                output +\u003d \"Here are the matching tasks in your list:\\n\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "                int i \u003d 1;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "                for (Task task : resultList) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "                    output +\u003d i + \".\" + task.toString() + \"\\n\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "                    i++;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "                }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "            return output;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "honhaochen": 59
    }
  },
  {
    "path": "src/main/java/command/InvalidCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import exception.InvalidInstructionException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "honhaochen"
        },
        "content": " * Command for handling invalid command."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "honhaochen"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "public class InvalidCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     * Output invalid instruction exception."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     * @param tasks the TaskList."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     * @param ui the User Interface which responsible for every output printing."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     * @param storage user\u0027s hard disk storage."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     * @return Executed output as String."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     * @see InvalidInstructionException"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    public String execute(TaskList tasks, Ui ui, Storage storage) throws InvalidInstructionException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        throw new InvalidInstructionException();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "honhaochen": 25
    }
  },
  {
    "path": "src/main/java/command/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "honhaochen"
        },
        "content": " * Command for listing tasks."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "honhaochen"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     * Execute listing of tasks."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     * @param tasks the TaskList."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     * @param ui the User Interface which responsible for every output printing."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     * @param storage user\u0027s hard disk storage."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     * @return Executed output as String."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    public String execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        String output \u003d \"\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        output +\u003d \"Here are the tasks in your list:\\n\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        int i \u003d 1;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        for (Task task : tasks.getTaskList()) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "            output +\u003d i + \". \" + task + \"\\n\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "            i++;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     * For JUnit testing purpose."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        return obj instanceof ListCommand;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "honhaochen": 40
    }
  },
  {
    "path": "src/main/java/command/ToDoCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import exception.ToDoException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import task.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import task.ToDo;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "honhaochen"
        },
        "content": " * Command for creating a ToDo Task."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "honhaochen"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "public class ToDoCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    protected String[] input;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    public ToDoCommand(String[] input) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        this.input \u003d input;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     * Execute creating ToDo task."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     * Output what is needed."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     * @param tasks the TaskList."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     * @param ui the User Interface which responsible for every output printing."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     * @param storage user\u0027s hard disk storage."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     * @return Executed output as String."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    public String execute(TaskList tasks, Ui ui, Storage storage) throws ToDoException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        if (input.length \u003c\u003d 1) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "            throw new ToDoException();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "            String output \u003d \"\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "            String description \u003d input[1];"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "            for (int i \u003d 2; i \u003c input.length; i++) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "                description +\u003d \" \" + input[i];"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "            }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "            Task newToDoTask \u003d new ToDo(description);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "            tasks.addTask(newToDoTask);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "            output +\u003d \"Got it. I\u0027ve added this task:\\n\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "            output +\u003d \"  \" + newToDoTask + \"\\n\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "            if (tasks.getSize() \u003e 1) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "                output +\u003d \"Now you have \" + tasks.getSize() + \" tasks in the list.\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "                output +\u003d \"Now you have \" + tasks.getSize() + \" task in the list.\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "            }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "            return output;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "honhaochen": 51
    }
  },
  {
    "path": "src/main/java/duke/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import exception.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import parser.Parser;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import task.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "honhaochen"
        },
        "content": " * Main Duke bot class."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "honhaochen"
        },
        "content": " * Used to instantiate your personal Duke bot."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "honhaochen"
        },
        "content": " * Currently the file path for record savings is hard-coded."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "honhaochen"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     * Constructor for Duke class."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    public Duke() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        storage \u003d new Storage(\"data/tasks.txt\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "            tasks \u003d new TaskList(storage.load());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "            System.out.println(ui.showLoadingError());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "            tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     * main run method."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    public String run(String command) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "            Command c \u003d Parser.parse(command);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "            return c.execute(tasks, ui, storage);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "            return ui.showError(e.getMessage());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     * Outputs a welcome message when Duke is started."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     * @return the welcome message as String"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    public String showWelcome() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        return ui.showWelcome();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "honhaochen": 54
    }
  },
  {
    "path": "src/main/java/exception/DeadlineException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "package exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "honhaochen"
        },
        "content": " * Responsible for problems occured during Deadline task handling."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "honhaochen"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "public class DeadlineException extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    public DeadlineException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        super(\"OOPS!!! The description of a deadline cannot be empty.\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    public DeadlineException(String msg) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        super(msg);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "honhaochen": 16
    }
  },
  {
    "path": "src/main/java/exception/DeleteException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "package exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "honhaochen"
        },
        "content": " * Responsible for problems occured during Delete task handling."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "honhaochen"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "public class DeleteException extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    public DeleteException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        super(\"OOPS!!! The description of a delete cannot be empty.\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    public DeleteException(String msg) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        super(msg);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "honhaochen": 16
    }
  },
  {
    "path": "src/main/java/exception/DoneException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "package exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "honhaochen"
        },
        "content": " * Responsible for problems occured during Done task handling."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "honhaochen"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "public class DoneException extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    public DoneException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        super(\"OOPS!!! The description of a done cannot be empty, please indicate which task is done :)\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    public DoneException(String msg) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        super(msg);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "honhaochen": 16
    }
  },
  {
    "path": "src/main/java/exception/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "package exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "honhaochen"
        },
        "content": " * General exception for Duke program."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "honhaochen"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    public DukeException(String msg) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        super(msg);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "honhaochen": 12
    }
  },
  {
    "path": "src/main/java/exception/DukeParseException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "package exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "honhaochen"
        },
        "content": " * Responsible for problems occured during parsing a user input."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "honhaochen"
        },
        "content": " * Mainly used for DateTime format parsing errors."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "honhaochen"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "public class DukeParseException extends DukeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    public DukeParseException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        super(\"OOPS!!! Please key in date and time in the format of \u003cdd/M/yyyy hh:mm\u003e\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "honhaochen": 11
    }
  },
  {
    "path": "src/main/java/exception/EventException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "package exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "honhaochen"
        },
        "content": " * Responsible for problems occured during Event task handling."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "honhaochen"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "public class EventException extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    public EventException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        super(\"OOPS!!! The description of an event cannot be empty.\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    public EventException(String msg) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        super(msg);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "honhaochen": 16
    }
  },
  {
    "path": "src/main/java/exception/FindException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "package exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "honhaochen"
        },
        "content": " * Responsible for problems occurred while finding a task."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "honhaochen"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "public class FindException extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    public FindException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        super(\"OOPS!!! You are not finding anything.\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "honhaochen": 12
    }
  },
  {
    "path": "src/main/java/exception/InvalidInstructionException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "package exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "honhaochen"
        },
        "content": " * Specify validity of instructions given to Duke."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "honhaochen"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "public class InvalidInstructionException extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    public InvalidInstructionException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        super(\"OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "honhaochen": 12
    }
  },
  {
    "path": "src/main/java/exception/ToDoException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "package exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "honhaochen"
        },
        "content": " * Responsible for problems occured during ToDo task handling."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "honhaochen"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "public class ToDoException extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    public ToDoException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        super(\"OOPS!!! The description of a todo cannot be empty.\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "honhaochen": 12
    }
  },
  {
    "path": "src/main/java/javafx/DialogBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "package javafx;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import javafx.scene.text.Text;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import javafx.scene.text.TextAlignment;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "honhaochen"
        },
        "content": " * An example of a custom control using FXML."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "honhaochen"
        },
        "content": " * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a text"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "honhaochen"
        },
        "content": " * containing text from the speaker."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "honhaochen"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    private Text text;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    private DialogBox(String text, Image img) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        this.text.setText(text);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        displayPicture.setImage(img);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        Collections.reverse(tmp);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        ((Text) tmp.get(1)).setTextAlignment(TextAlignment.LEFT);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     * Factory constructor for constructing a user dialog."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     * @param text user input text."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     * @param img user image."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     * @return a DialogBox containing the image and text."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    public static DialogBox getUserDialog(String text, Image img) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        return new DialogBox(text, img);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     * Factory constructor for constructing a duke dialog."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     * @param text duke\u0027s reply text."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     * @param img duke\u0027s image."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     * @return a DialogBox containing the image and text."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    public static DialogBox getDukeDialog(String text, Image img) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        var db \u003d new DialogBox(text, img);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "honhaochen": 76
    }
  },
  {
    "path": "src/main/java/javafx/MainWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "package javafx;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import duke.Duke;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "honhaochen"
        },
        "content": " * Controller for javafx.MainWindow. Provides the layout for the other controls."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "honhaochen"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "public class MainWindow extends AnchorPane {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    private Duke duke;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/User.png\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/Duke.png\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    private boolean isExit \u003d false;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     * initialise Duke."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     * @param d the constructed Duke object instance."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    public void setDuke(Duke d) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        duke \u003d d;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "                DialogBox.getDukeDialog(duke.showWelcome(), dukeImage)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        );"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     * Meanwhile, the Duke\u0027s main logic is implemented here."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    private void handleUserInput() throws InterruptedException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        if (!isExit) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "            String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "            String response \u003d duke.run(input);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "            dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "                    DialogBox.getUserDialog(input, userImage),"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "                    DialogBox.getDukeDialog(response, dukeImage)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "            );"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "            if (input.equals(\"bye\")) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "                isExit \u003d true;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "            }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "            userInput.clear();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "            dialogContainer.getScene().getWindow().hide();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "honhaochen": 73
    }
  },
  {
    "path": "src/main/java/manifest.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "Main-Class: Duke"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "honhaochen": 2
    }
  },
  {
    "path": "src/main/java/parser/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "package parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import command.DoneCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import command.ListCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import command.ToDoCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import command.DeadlineCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import command.EventCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import command.DeleteCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import command.ByeCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import command.InvalidCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import command.FindCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "honhaochen"
        },
        "content": " * Parser to understand user inputs."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "honhaochen"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     * Parser is responsible for understanding the user\u0027s input. It will parse the"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     * input and react with a suitable command."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     * @param userInput users\u0027s input as String"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     * @return the respective Command."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     * @See Command"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    public static Command parse(String userInput) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        String[] input \u003d userInput.split(\" \");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        if (input[0].equals(\"list\")) { // list out"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        } else if (input[0].equals(\"done\")) { // done"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "            return new DoneCommand(input);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        } else if (input[0].equals(\"todo\")) { // todo task"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "            return new ToDoCommand(input);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        } else if (input[0].equals(\"deadline\")) { // deadline task"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "            return new DeadlineCommand(input);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        } else if (input[0].equals(\"event\")) { // event task"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "            return new EventCommand(input);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        } else if (input[0].equals(\"delete\")) { // delete"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "            return new DeleteCommand(input);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        } else if (input[0].equals(\"bye\")) { // bye"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "            return new ByeCommand();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        } else if (input[0].equals(\"find\")) { // find"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "            return new FindCommand(input);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "            return new InvalidCommand();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "honhaochen": 48
    }
  },
  {
    "path": "src/main/java/storage/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "package storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import task.ToDo;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import task.Deadline;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import task.Event;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import java.io.PrintWriter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "honhaochen"
        },
        "content": " * Storage responsible for interacting with user\u0027s hard disk storage."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "honhaochen"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    private Scanner sc;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    private String filepath;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     * Storage Constructor."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     * @param filepath the file location in local pc."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    public Storage(String filepath) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        this.filepath \u003d filepath;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "            this.sc \u003d new Scanner(new File(this.filepath));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "            System.err.println(e);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     * Read data from hard disk storage."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     * @return an array list of tasks, which will be passed into TaskList."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     * @throws DukeException is thrown if problems occur during file reading."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     * @see TaskList"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    public ArrayList\u003cTask\u003e load() throws DukeException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "            ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "            while (sc.hasNext()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "                String[] input \u003d sc.nextLine().split(\"\\\\|\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "                //strip any leading spaces"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "                for (int i \u003d 0; i \u003c input.length; i++) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "                    input[i] \u003d input[i].strip();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "                }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "                if (input[0].equals(\"[T]\")) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "                    tasks.add(new ToDo(input[1], input[2]));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "                } else if (input[0].equals(\"[D]\")) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "                    tasks.add(new Deadline(input[1], input[2], input[3]));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "                } else { //Event task"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "                    tasks.add(new Event(input[1], input[2], input[3]));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "                }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "            }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "            return tasks;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "            throw new DukeException(\"Load fails\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     * Store tasks list into hard disk storage."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     * @param tasks the tasks list to store."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    public void save(TaskList tasks) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "            PrintWriter pw \u003d new PrintWriter(filepath);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "            pw.close();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "            PrintWriter pw2 \u003d new PrintWriter(filepath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "            for (Task task : tasks.getTaskList()) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "                pw2.println(task.toDataBase());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "            }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "            pw2.close();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "            System.err.println(e);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "honhaochen": 86
    }
  },
  {
    "path": "src/main/java/task/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "package task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "honhaochen"
        },
        "content": " * Specific extension of Task Class."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "honhaochen"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    private Date date;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    private SimpleDateFormat formatter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     * Constructor for Deadline Task."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     * @param description description of this task."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     * @param date date of this deadline."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     * @throws ParseException is thrown when date format is wrong."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    public Deadline(String description, String date) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        formatter \u003d new SimpleDateFormat(\"dd/M/yyyy hh:mm\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        this.date \u003d formatter.parse(date);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     * Second constructor for reading data from hard disk storage."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     * @param isDone status of this task."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     * @param description description of this task."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     * @param date deadline of this task."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     * @throws ParseException is thrown when user input\u0027s date format is incorrect."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    public Deadline(String isDone, String description, String date) throws ParseException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        formatter \u003d new SimpleDateFormat(\"dd/M/yyyy hh:mm\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        this.date \u003d formatter.parse(date);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        if (isDone.equals(\"1\")) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "            this.isDone \u003d true;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     * Used to store into hard disk storage for easy reading."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     * @return format output for hard disk storage."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    public String toDataBase() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        return \"[D] | \" + 1 + \" | \" + description + \" | \" + formatter.format(date);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        return \"[D]\" + super.toString() + \" (by: \" + formatter.format(date) + \")\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "honhaochen": 56
    }
  },
  {
    "path": "src/main/java/task/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "package task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "honhaochen"
        },
        "content": " * Specific extension of Task Class."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "honhaochen"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    private Date date;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    private SimpleDateFormat formatter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     * Constructor for Event Task."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     * @param description description for the event."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     * @param date date of the event."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     * @throws ParseException is thrown when date format is incorrect."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    public Event(String description, String date) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        formatter \u003d new SimpleDateFormat(\"dd/M/yyyy hh:mm\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        this.date \u003d formatter.parse(date);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     * Second constructor for reading data from hard disk storage."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     * @param isDone status of this task."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     * @param description description of this task."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     * @param date event date of this task."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     * @throws ParseException is thrown when user input\u0027s date format is incorrect."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    public Event(String isDone, String description, String date) throws ParseException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        formatter \u003d new SimpleDateFormat(\"dd/M/yyyy hh:mm\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        this.date \u003d formatter.parse(date);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        if (isDone.equals(\"1\")) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "            this.isDone \u003d true;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     * Used to store into hard disk storage for easy reading."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     * @return format output for hard disk storage."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    public String toDataBase() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        return \"[E] | \" + \"1\" + \" | \" + description + \" | \" + formatter.format(date);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        return \"[E]\" + super.toString() + \" (at: \" + formatter.format(date) + \")\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "honhaochen": 56
    }
  },
  {
    "path": "src/main/java/task/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "package task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "honhaochen"
        },
        "content": " * A user\u0027s task."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "honhaochen"
        },
        "content": " * Encapsulate details of the user\u0027s task."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "honhaochen"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "public abstract class Task {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    boolean isDone;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     * Constructor for a task."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     * @param description the task\u0027s description."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     * Used to store task into user\u0027s hard disk storage."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     * @return the format to store in DataBase."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    public abstract String toDataBase();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    private String getStatusIcon() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        return (isDone ? \"\\u2713\" : \"\\u2718\"); //return tick or X symbols"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     * Mark this task\u0027s status as done."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    public void markAsDone() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        isDone \u003d true;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    public boolean isDone() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        return isDone;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        return \"[\" + getStatusIcon() + \"] \" + description;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "honhaochen": 45
    }
  },
  {
    "path": "src/main/java/task/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "package task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "honhaochen"
        },
        "content": " * Encapsulates tasks into a TaskList."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "honhaochen"
        },
        "content": " * Responsible for recording all tasks."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "honhaochen"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    private ArrayList\u003cTask\u003e tasks;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    public int getSize() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        return tasks.size();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    public void addTask(Task task) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        this.tasks.add(task);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     * Delete a task in TaskList."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     * @param index index number of task to be deleted."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     * @return the deleted task."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    public Task deleteTask(int index) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        Task task \u003d tasks.get(index);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        tasks.remove(index);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        return task;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    public Task getTask(int index) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        return tasks.get(index);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     * Constructor to be called when there\u0027s no file read."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        this.tasks \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    public TaskList(ArrayList\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        this.tasks \u003d tasks;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    public ArrayList\u003cTask\u003e getTaskList() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        return this.tasks;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "honhaochen": 51
    }
  },
  {
    "path": "src/main/java/task/ToDo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "package task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "honhaochen"
        },
        "content": " * Specific extension of Task Class."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "honhaochen"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "public class ToDo extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    public ToDo(String description) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     * Second constructor which used to read from hard disk storage."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     * @param isDone status of this task."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     * @param description description of this task."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    public ToDo(String isDone, String description) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        if (isDone.equals(\"1\")) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "            this.isDone \u003d true;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     * Stores into hard disk storage for easy reading."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     * @return format output for hard disk storage."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    public String toDataBase() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        return \"[T] | \" + \"1\" + \" | \" + description;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "honhaochen": 37
    }
  },
  {
    "path": "src/main/java/ui/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "package ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "honhaochen"
        },
        "content": " * User interface to communicate with user."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "honhaochen"
        },
        "content": " * Responsible for every output printing."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "honhaochen"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     * Shows greeting message at start of the program."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    public String showWelcome() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        return \"Hello from! I\u0027m Duke\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "                + \"What can I do for you?\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     * Prints out the error."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     * @param e the error message."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     * @return the error message as String."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    public String showError(String e) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        return e;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     * Prints out error about unable to load data stored in user\u0027s hard disk."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    public String showLoadingError() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        return \"Note: task.TaskList storage is initially empty / the file is corrupted\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "                + \"New empty file will be created.\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "honhaochen": 34
    }
  },
  {
    "path": "src/main/resources/view/DialogBox.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "\u003c?import javafx.scene.text.Text?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefHeight\u003d\"122.0\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "      \u003cText fx:id\u003d\"text\" lineSpacing\u003d\"0.2\" strokeType\u003d\"OUTSIDE\" strokeWidth\u003d\"0.0\" text\u003d\"Text\" textAlignment\u003d\"RIGHT\" wrappingWidth\u003d\"277.33674240112305\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "         \u003cfont\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "            \u003cFont name\u003d\"Comic Sans MS\" size\u003d\"13.0\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "         \u003c/font\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "      \u003c/Text\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "      \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "   \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "      \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "   \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "honhaochen": 21
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"javafx.MainWindow\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "      \u003cTextField fx:id\u003d\"userInput\" layoutX\u003d\"74.0\" layoutY\u003d\"557.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"42.0\" prefWidth\u003d\"325.0\" AnchorPane.bottomAnchor\u003d\"0.6000000000000227\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "      \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"1.0\" layoutY\u003d\"557.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"42.0\" prefWidth\u003d\"74.0\" text\u003d\"Send\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "      \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "         \u003ccontent\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "            \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "         \u003c/content\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "      \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "honhaochen": 19
    }
  },
  {
    "path": "src/test/java/DukeTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "public class DukeTest {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    public void dummyTest() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        assertEquals(2,2);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "honhaochen": 10
    }
  },
  {
    "path": "src/test/java/ParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import command.ListCommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import parser.Parser;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "class ParserTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    void parse() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        assertEquals(new ListCommand(), Parser.parse(\"list\"));"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "honhaochen": 13
    }
  },
  {
    "path": "src/test/java/storage/StorageTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "package storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "class StorageTest {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    void load() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    void save() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "honhaochen": 14
    }
  },
  {
    "path": "src/test/java/ui/UiTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "package ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "class UiTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    void showLoadingError() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        assertEquals(\"Note: task.TaskList storage is initially empty / the file is corrupted\\n\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "                + \"New empty file will be created.\", new Ui().showLoadingError());"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "honhaochen": 14
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "list"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "todo returnbook"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "deadline homework /by 26/8/2019 3:00"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "event projectmeeting /at 27/8/2019 4:00"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "list"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "done 1"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "done 2"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "done 3"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "list"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "honhaochen": 10
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "if not exist ..\\bin mkdir ..\\bin"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "REM delete output from previous run"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "del ACTUAL.TXT"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "REM compile the code into the bin folder"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "javac  -cp ..\\src -Xlint:none -d ..\\bin ..\\src\\main\\java\\Duke.java"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    exit /b 1"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ")"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "java -classpath ..\\bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT"
      }
    ],
    "authorContributionMap": {
      "honhaochen": 21
    }
  },
  {
    "path": "text-ui-test/runtest.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "#!/usr/bin/env bash"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "# create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "if [ ! -d \"../bin\" ]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "then"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    mkdir ../bin"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "fi"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "# delete output from previous run"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "if [ -e \"./ACTUAL.TXT\" ]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "then"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    rm ACTUAL.TXT"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "fi"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "# compile the code into the bin folder, terminates if error occurred"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "if ! javac -cp ../src -Xlint:none -d ../bin ../src/main/java/*.java ../src/main/java/ui/*.java ../src/main/java/task/*.java ../src/main/java/storage/*.java ../src/main/java/exception/*.java ../src/main/java/command/*.java"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "then"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    echo \"********** BUILD FAILURE **********\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "fi"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "java -classpath ../bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "honhaochen"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "# compare the output to the expected output"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "diff ACTUAL.TXT EXPECTED.TXT"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "if [ $? -eq 0 ]"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "then"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    echo \"Test result: PASSED\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    exit 0"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "else"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    echo \"Test result: FAILED\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "fi"
      }
    ],
    "authorContributionMap": {
      "honhaochen": 34
    }
  },
  {
    "path": "tutorials/javaFxTutorialPart3.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# JavaFX Tutorial 3 – Interacting with the user"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "Picking up from where we left off last tutorial, we have successfully achieved the desired layout. Now let’s make the application respond to user input. "
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "Rather than to do everything in one try, let’s iterate and build up towards our final goal. "
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "## Iteration 1 – Echoing the User"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "JavaFX has an _event-driven architecture style_. As such, we programmatically define _handler_ methods to execute as a response to certain _events_. When an event is detected, JavaFX will call the respective handlers."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "For Duke, there are two events that we want to respond to, namely the user pressing `Enter` in the `TextField` and left-clicking the `Button`. These are the `onAction` event for the `TextField` and the `onMouseClicked` event for the `Button`."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "For now, let’s have the application add a new `Label` with the text from the `TextField`. Update the `Main` class as follows. You\u0027ll need to add an `import javafx.scene.control.Label;` too."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "@Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public void start(Stage stage) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    // Step 1 code here"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    //Step 2 code here"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    //Step 3. Add functionality to handle user input."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    sendButton.setOnMouseClicked((event) -\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        dialogContainer.getChildren().add(getDialogLabel(userInput.getText()));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    });"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    "
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    userInput.setOnAction((event) -\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        dialogContainer.getChildren().add(getDialogLabel(userInput.getText()));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    });"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": " * Iteration 1:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": " * Creates a label with the specified text and adds it to the dialog container."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": " * @param text String containing text to add"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": " * @return a label with the specified text that has word wrap enabled."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "private Label getDialogLabel(String text) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    // You will need to import `javafx.scene.control.Label`."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    Label textToAdd \u003d new Label(text);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    textToAdd.setWrapText(true);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    return textToAdd;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "Run the program and give it a whirl!"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "![Echo not scrolling as intended](assets/EchoNotScrolling.png)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "At first glance everything appears to work perfectly. However, when the `VBox` stretches beyond the confines of the `ScrollPane`, the `ScrollPane` does not scroll down automatically as expected. We can remedy this by attaching a handler on the `VBox` to react to its own size changing and scrolling the `ScrollPane` down."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "Update the `start` method as shown below."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "public void start(Stage stage) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    // current code ..."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": " "
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    //Scroll down to the end every time dialogContainer\u0027s height changes."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    dialogContainer.heightProperty().addListener((observable) -\u003e scrollPane.setVvalue(1.0));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "Verify that the `ScrollPane` scrolls as intended."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "## Iteration 2 – Adding Dialog Boxes"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "In the mockup of the UI, notice that the dialog boxes are composed of two different controls (`ImageView` and `Label`) and reused multiple times. In situations like this, it is often beneficial to create our own custom control."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "Let’s create our custom control `javafx.DialogBox`:"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "public class javafx.DialogBox extends HBox {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label text;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    public javafx.DialogBox(Label l, ImageView iv) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        text \u003d l;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        displayPicture \u003d iv;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        text.setWrapText(true);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        displayPicture.setFitWidth(100.0);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        displayPicture.setFitHeight(100.0);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        this.setAlignment(Pos.TOP_RIGHT);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        this.getChildren().addAll(text, displayPicture);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "We use the code in our main class just like any other control. Here are the steps to update the code to use the custom control in `Main.java`."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "First, add these imports:"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "Next, add two images to the `main/resources/images` folder."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "For this tutorial, we have two images `DaUser.png` and `DaDuke.png` to represent the user avatar and Duke\u0027s avatar respectively but you can use any image you want."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "Image|Filename"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "---|---"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "![DaDuke](assets/DaUser.png) | `DaUser.png`"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "![DaUser](assets/DaDuke.png) | `DaDuke.png`"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke extends Application {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    // ..."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image user \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image duke \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    // ..."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "Add a new method to handle user input:"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": " * Iteration 2:"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": " * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": " * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "private void handleUserInput() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    Label userText \u003d new Label(userInput.getText());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    Label dukeText \u003d new Label(getResponse(userInput.getText()));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "            new javafx.DialogBox(userText, new ImageView(user)),"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "            new javafx.DialogBox(dukeText, new ImageView(duke))"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    );"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    userInput.clear();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": " * You should have your own function to generate a response to user input."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": " * Replace this stub with your completed method."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "private String getResponse(String input) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    return \"Duke heard: \" + input;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "Update the event handler code in the `start` method to use the new `handleUserInput` method:"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "@Override"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "public void start(Stage stage) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    //..."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    //Part 3. Add functionality to handle user input."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    sendButton.setOnMouseClicked((event) -\u003e {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        handleUserInput();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    });"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    userInput.setOnAction((event) -\u003e {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        handleUserInput();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    });"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "Run the program and see how it works."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "![DialogBoxes Iteration 2](assets/DialogBoxesIteration2.png) "
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "## Iteration 3 – Adding custom behavior to javafx.DialogBox"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "One additional benefit of defining a custom control is that we can add behavior specific to our `javafx.DialogBox`. Let’s add a method to flip a dialog box such that the image on the left to differentiate between user input and Duke’s output."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": " * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "private void flip() {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    this.setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    FXCollections.reverse(tmp);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    this.getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "public static javafx.DialogBox getUserDialog(Label l, ImageView iv) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    return new javafx.DialogBox(l, iv);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "public static javafx.DialogBox getDukeDialog(Label l, ImageView iv) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    var db \u003d new javafx.DialogBox(l, iv);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    db.flip();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    return db;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "You\u0027ll need to update the imports as follows:"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "Now, we can go back to the `Main` class and change the event handler to use our new `javafx.DialogBox`. "
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "private void handleUserInput() {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    Label userText \u003d new Label(userInput.getText());"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    Label dukeText \u003d new Label(getResponse(userInput.getText()));"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "            javafx.DialogBox.getUserDialog(userText, new ImageView(user)),"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "            javafx.DialogBox.getDukeDialog(dukeText, new ImageView(duke))"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    );"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    userInput.clear();"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "Run the application and play around with it. "
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "![DialogBoxes Iteration 3](assets/DialogBoxesIteration3.png)"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "Congratulations! "
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "You have successfully implemented a fully functional GUI for Duke!  "
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "## Exercises"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "1. While the GUI looks similar to the mockup, there are still parts that need to be refined. Try your hand at some of these tasks:"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "   * Add padding between each javafx.DialogBox"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "   * Add padding between each ImageView and its Label"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "   * Clip the ImageView into a circle"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "   * Add background color to each dialog box"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "1. After attempting the changes, reflect critically on the following:"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "   * What was the development workflow like?"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "   * Is the code base well-organized?"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "**Authors:**"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "* Initial Version: Jeffry Lum"
      }
    ],
    "authorContributionMap": {
      "honhaochen": 15,
      "-": 228
    }
  },
  {
    "path": "tutorials/javaFxTutorialPart4.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# JavaFX Tutorial 4 – FXML "
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "While we have produced a fully functional prototype, there are a few major problems with our application."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "1. The process of visually enhancing the GUI is long and painful:"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "   * Does the `TextField` need to be 330px or 325px wide? "
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "   * How much padding is enough padding to look good?"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "   Every small change requires us to rebuild and run the application.  "
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "1. Components are heavily dependent on each other:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "   Why does `Main` need to know that `javafx.DialogBox` needs a `Label`? "
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "   What happens if we change the `Label` to a custom `ColoredLabel` in the future?  "
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    "
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    We need to minimize the amount of information each control needs to know about another."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    Otherwise, making changes in the future will break existing features."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "1. The code is untidy and long:"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "   Why is all the code in one place?"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "   The `Main` class attempts to do it all. "
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "   Code for visual tweaks, listeners and even utility methods are all in one file."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "   This makes it difficult to find and make changes to existing code."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "FXML is a XML-based language that allows us to define our user interface. Properties of JavaFX objects can be defined in the FXML file. For example:  "
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "```xml"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "The FXML snippet define a TextField similar to the one that we programmatically defined previous in Tutorial 2. Notice how concise FXML is compared to the plain Java version."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s return to Duke and convert it to use FXML instead."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "# Rebuilding the Scene using FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "Scene Builder is a tool developed by Oracle and currently maintained by Gluon. It is a What-You-See-Is-What-You-Get GUI creation tool. [Download](https://gluonhq.com/products/scene-builder/#download) the appropriate version for your OS and install it."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "Create the following files in `src/main/resources/view`:"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "**javafx.MainWindow.fxml**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "```xml"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"javafx.MainWindow\"\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "         \u003ccontent\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" /\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "         \u003c/content\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "**javafx.DialogBox.fxml**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "```xml"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003cpadding\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003c/padding\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "1. Let’s explore the provided FXML files in Scene Builder. "
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    "
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    Running the tool brings up the main screen."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    Select `Open Project` \u003e `src/main/resources/view/javafx.MainWindow.fxml`. Inspect each control and its properties."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "   ![SceneBuilder opening javafx.MainWindow.fxml](assets/SceneBuilder.png)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "1. On the right accordion pane, you can modify the properties of the control that you have selected. Try changing the various settings and see what they do!"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": " "
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "1. On the left accordion, you can see that we have set the controller class to `javafx.MainWindow`. "
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "We will get to that later."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": " "
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "   ![Controller for javafx.MainWindow](assets/MainWindowController.png)"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "1. Let’s repeat the process for `javafx.DialogBox`."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "   The main difference here is that javafx.DialogBox checks `Use fx:root construct` and _does not define a controller class_. "
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "   ![Settings for javafx.DialogBox](assets/DialogBoxController.png)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "## Using Controllers"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "As part of the effort to separate the code handling Duke\u0027s logic and UI, let\u0027s _refactor_ the UI-related code to its own class."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "We call these UI classes _controllers_. "
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "Let\u0027s implement the `javafx.MainWindow` controller class that we specified in `javafx.MainWindow.fxml`."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "**javafx.MainWindow.java**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "honhaochen"
        },
        "content": " * Controller for javafx.MainWindow. Provides the layout for the other controls."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "public class javafx.MainWindow extends AnchorPane {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    private Duke duke;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setDuke(Duke d) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        duke \u003d d;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        String response \u003d duke.getResponse(input);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "                javafx.DialogBox.getUserDialog(input, userImage),"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "                javafx.DialogBox.getDukeDialog(response, dukeImage)"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        );"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "The `@FXML` annotation marks a `private` or `protected` member and makes it accessible to FXML despite its modifier."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "Without the annotation, we will have to make everything `public` and expose our UI to unwanted changes."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "The `FXMLLoader` will map the a control with a `fx:id` defined in FXML to a variable with the same name in its controller."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "Notice how in `javafx.MainWindow`, we can invoke `TextField#clear()` on `userInput` and access its content just as we did in the previous example."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "Similarly, methods like private methods like `handleUserInput` can be used in FXML when annotated by `@FXML`. "
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "## Using FXML in our application"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "Let\u0027s create a new `Main` class as the bridge between the existing logic in `Duke` and the UI in `javafx.MainWindow`."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "**Main.java**"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "@Override"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": " * A GUI for Duke using FXML."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "public class Main extends Application {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    private Duke duke \u003d new Duke();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/javafx.MainWindow.fxml\"));"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "            AnchorPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "            Scene scene \u003d new Scene(ap);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "            fxmlLoader.\u003cjavafx.MainWindow\u003egetController().setDuke(duke);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "Again, we can interact with the `AnchorPane` defined in the FXML as we would have if we created the `AnchorPane` ourselves."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "For our custom `javafx.DialogBox`, we did not define a controller so let\u0027s create a controller for it."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "**javafx.DialogBox.java**"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": " * An example of a custom control using FXML."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": " * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": " * containing text from the speaker."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "public class javafx.DialogBox extends HBox {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    private javafx.DialogBox(String text, Image img) {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(javafx.MainWindow.class.getResource(\"/view/javafx.DialogBox.fxml\"));"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "        displayPicture.setImage(img);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "        Collections.reverse(tmp);"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "        getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "        setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    public static javafx.DialogBox getUserDialog(String text, Image img) {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        return new javafx.DialogBox(text, img);"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "    public static javafx.DialogBox getDukeDialog(String text, Image img) {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "        var db \u003d new javafx.DialogBox(text, img);"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "When we create a new instance of `javafx.DialogBox`, we set both the controller and root Node to `javafx.DialogBox`. "
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "From this point onwards we can interact with `javafx.DialogBox` as we have in the previous tutorials."
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "The last change that we have to make is to point our `Launcher` class in the right direction:"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "In `Launcher.java`"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "//...    "
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "Application.launch(Main.class, args);"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "//..."
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "[todo]: # (Discussion on the fx:root pattern.)"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "## Exercises"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "1. Convert `javafx.MainWindow` to use the `fx:root` construct."
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "honhaochen"
        },
        "content": "1. Extend `javafx.MainWindow` to have a `Stage` as a root Node."
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "1. Customize the appearance of the application further with CSS."
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "**Authors:**"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "* Initial Version: Jeffry Lum"
      }
    ],
    "authorContributionMap": {
      "honhaochen": 34,
      "-": 260
    }
  }
]
