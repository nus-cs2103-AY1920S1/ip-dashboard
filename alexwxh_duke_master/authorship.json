[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "group \u0027seedu.duke\u0027"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    // Change this to your main class."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    mainClassName \u003d \"duke.gui.Launcher\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alexwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alexwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "test {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alexwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "run {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "   standardInput \u003d System.in"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alexwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    archiveVersion \u003d \"1.1\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "}"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alexwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-media\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-media\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-media\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-web\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-web\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-web\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alexwxh": 44,
      "-": 15
    }
  },
  {
    "path": "src/main/data/list.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "E | 1 | b | 1/1/2002 1111-2222"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "T | 0 | la"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "T | 0 | blah"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "T | 0 | blah"
      }
    ],
    "authorContributionMap": {
      "alexwxh": 4
    }
  },
  {
    "path": "src/main/java/data/list.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "E | 0 | b | 1/2/2002 1000-2200"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "T | 0 | addsa"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "T | 1 | a"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "T | 0 | 2"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "E | 0 | blah | 2/1/1999 1800-2000"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "D | 0 | blah | 1/1/2002 1800"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "T | 0 | test"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "T | 0 | test1"
      }
    ],
    "authorContributionMap": {
      "alexwxh": 8
    }
  },
  {
    "path": "src/main/java/duke/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alexwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "import duke.execution.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "import duke.execution.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "import duke.execution.FileManager;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "import duke.execution.Parser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "import duke.execution.TaskManager;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "import duke.execution.UserInterface;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alexwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alexwxh"
        },
        "content": " * Duke is a mini list AI project for CS2103 iP and it steals my soul"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alexwxh"
        },
        "content": " *  p.s. i\u0027m not a furry i swear the uwus are just a joke :)"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alexwxh"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke{"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    //private static final String PATHFILE \u003d \"src/main/java/data/list.txt\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    private static final String PATHFILE \u003d \"./data/list.txt\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    private UserInterface ui;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    private TaskManager tasks;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    private FileManager fileManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alexwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "     * Constructor for Duke. Instantiates a new UserInterface, TaskManager, FileManager"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "     * Prints response through ui depending on whether file is successfully found/transferred to local list"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    public Duke() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        this.ui \u003d new UserInterface();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        ui.printWelcome();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        this.tasks \u003d new TaskManager();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "            this.fileManager \u003d new FileManager();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "            if(this.fileManager.initialize(PATHFILE, tasks)){"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "                ui.printNewFile();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "            }else {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "                ui.printLoadSave();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        }catch(DukeException e){"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "            ui.printError(e.getMessage());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alexwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "     * Run process of Duke."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "     * ui reads and return user input line by line, passing it to Parser which will convert it to Command"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "     * Command executes accordingly"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "     * Each loop checks for possible exit command"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "     * All DukeException will be caught and the message printed here."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    private void run(){"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        boolean isExit \u003d false;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        while(!isExit){"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "                String userCommand \u003d ui.readLine();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "                Command c \u003d Parser.parse(userCommand);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "                c.execute(tasks, ui, fileManager);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "                isExit \u003d c.isExit();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "            }catch(DukeException e){"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "                ui.printError(e.getMessage());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        ui.printExit();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "alexwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "     * main process of Duke"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "     * @param args"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        Duke process \u003d new Duke();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        process.run();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "     * Returns String as response to user input."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    public String getResponse(String input) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "            Command c \u003d Parser.parse(input);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "            return c.executeGui(tasks, ui, fileManager);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        }catch(DukeException e){"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "            return ui.printErrorGui(e.getMessage());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "alexwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alexwxh": 79,
      "-": 4
    }
  },
  {
    "path": "src/main/java/duke/execution/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "package duke.execution;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alexwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alexwxh"
        },
        "content": " * Command class of Duke."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alexwxh"
        },
        "content": " * Represents a command that the program executes depending on user input."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alexwxh"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "public class Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    String[] info;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    private boolean isAdd;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    private boolean isDelete;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    private boolean isDone;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    private boolean isFind;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    private boolean isExit \u003d false;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alexwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "     * Constructor that contains information from the user input"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "     * @param info information given by user"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "     * @param add if this is an add command"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "     * @param delete if this is a delete command"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "     * @param done if this is a done command"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    public Command(String[] info, boolean add, boolean delete, boolean done, boolean find){"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        this.info \u003d info;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        this.isAdd \u003d add;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        this.isDelete \u003d delete;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        this.isDone \u003d done;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        this.isFind \u003d find;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alexwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "     * Carries out the command by editing TaskManager, FileManager and using UserInterface objects"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "     * @param tasks TaskManager of the Duke instance"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "     * @param ui UserInterface object"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "     * @param fileManager FileManager of the Duke instance"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "     * @throws DukeException"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    public void execute(TaskManager tasks, UserInterface ui, FileManager fileManager) throws DukeException{"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        if(isAdd){"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "            Task task \u003d tasks.addNewTask(info);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "            fileManager.saveToFile(task);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "            ui.printAdd(task, tasks.getSize());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        }else if(isDelete){"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "            Task task \u003d tasks.delete(info[1]);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "            fileManager.fileDelete(Integer.parseInt(info[1]) - 1);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "            ui.printDelete(task, tasks.getSize());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        }else if(isDone){"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "            Task task \u003d tasks.done(info[1]);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "            fileManager.fileSetDone(Integer.parseInt(info[1]) - 1);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "            ui.printDone(task);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        }else if(isFind){"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "            String foundList \u003d tasks.findMatch(info[1]);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "            ui.printFind(foundList);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        if(info[0].equals(\"list\")){"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "            ui.printList(tasks.generateList());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        }else if(info[0].equals(\"bye\")){"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "            this.isExit \u003d true;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        }else if(info[0].equals(\"snooze\")){"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "            Task task \u003d tasks.delayTask(info[1]);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "            fileManager.fileEditTime(tasks.getTaskIndex(task), task);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "            ui.printSnooze(task);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "alexwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    public String executeGui(TaskManager tasks, UserInterface ui, FileManager fileManager) throws DukeException{"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        if(isAdd){"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "            Task task \u003d tasks.addNewTask(info);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "            fileManager.saveToFile(task);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "            return ui.printAddGui(task, tasks.getSize());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        }else if(isDelete){"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "            Task task \u003d tasks.delete(info[1]);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "            fileManager.fileDelete(Integer.parseInt(info[1]) - 1);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "            return ui.printDeleteGui(task, tasks.getSize());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        }else if(isDone){"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "            Task task \u003d tasks.done(info[1]);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "            fileManager.fileSetDone(Integer.parseInt(info[1]) - 1);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "            return ui.printDoneGui(task);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        }else if(isFind){"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "            String foundList \u003d tasks.findMatch(info[1]);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "            return ui.printFindGui(foundList);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        if(info[0].equals(\"list\")){"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "            return ui.printListGui(tasks.generateList());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        }else if(info[0].equals(\"bye\")){"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "            return ui.printByeGui();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        }else if(info[0].equals(\"snooze\")){"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "            Task task \u003d tasks.delayTask(info[1]);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "            fileManager.fileEditTime(tasks.getTaskIndex(task), task);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "            return ui.printSnoozeGui(task);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        return \"Command not recognized?\";"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "alexwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    public boolean isExit(){"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        return this.isExit;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "alexwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alexwxh": 102
    }
  },
  {
    "path": "src/main/java/duke/execution/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "package duke.execution;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alexwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    public DukeException(String s) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        super(s);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alexwxh": 7
    }
  },
  {
    "path": "src/main/java/duke/execution/FileManager.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "package duke.execution;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alexwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "import java.nio.charset.StandardCharsets;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "import duke.task.*;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alexwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alexwxh"
        },
        "content": " * FileManager class of Duke."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alexwxh"
        },
        "content": " * Handles reading and writing to .txt save file in the local system."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alexwxh"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "public class FileManager {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    private File saveList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    private FileWriter editor;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    private Scanner sc;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    private boolean isActive \u003d true;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alexwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    public FileManager(){"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alexwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "     * Links FileManager with the save file from local system. And loads existing tasks if it exists"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "     * @param pathname file path of local save file"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "     * @param tasks to match TaskManager with existing tasks from the save file"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "     * @return boolean value to inform user if there is an existing save file"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "     * @throws DukeException if save file is corrupted/cannot be found"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    public boolean initialize(String pathname, TaskManager tasks) throws DukeException{"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        File directory \u003d new File(\"./data\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        boolean isNew;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "            if(!directory.exists()) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "                directory.mkdirs();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "            saveList\u003dnew File(pathname);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "            isNew \u003d saveList.createNewFile();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "            editor \u003d new FileWriter(saveList, true);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "            if(!isNew){"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "                sc \u003d new Scanner(saveList);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "                this.transferSavedFile(tasks);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "            return isNew;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        }catch(IOException e){"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "            this.isActive \u003d false;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "            throw new DukeException(\"Directory search error. No save file loaded. Initialized with blank list. \" +"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "                    \"No commands will be saved to hard disk\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        }catch(DukeException e){"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "            throw new DukeException(\"Bad datetime in saved file. List may be partially loaded. Editing not recommended\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        }catch(ArrayIndexOutOfBoundsException e){"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "            throw new DukeException(\"Corrupted save file. Delete or edit then relaunch\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "alexwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "     * Transfers tasks in the save file with the todoList in the TaskManager instance"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "     * @param taskList TaskManager instance of the current Duke process"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "     * @throws DukeException"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    private void transferSavedFile(TaskManager taskList) throws DukeException{"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        if(!this.isActive){"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        int index \u003d 0;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        while(sc.hasNext()){"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "            String saveEntry \u003d sc.nextLine();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "            String instruction[] \u003d saveEntry.split(\" \\\\| \");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "            if(instruction[0].equals(\"T\")){"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "                Todo task \u003d new Todo(instruction[2]);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "                taskList.load(task);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "            }else if(instruction[0].equals(\"E\")){"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "                Event task \u003d new Event(instruction[2], instruction[3]);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "                taskList.load(task);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "            }else if(instruction[0].equals(\"D\")){"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "                Deadline task \u003d new Deadline(instruction[2], instruction[3]);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "                taskList.load(task);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "            if(instruction[1].equals(\"1\")){"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "                taskList.savedDone(index);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "            index++;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        sc.close();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "alexwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "     * Saves new task to save file"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "     * @param task New task created"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "     * @throws DukeException"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    protected void saveToFile(Task task) throws DukeException{"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        if(!isActive){"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "            editor.write(task.toFileString());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "            editor.flush();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        } catch (IOException e){"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "            throw new DukeException(\"File write error\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "alexwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "     * Saves task status to done in the save file"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "     * @param doneIndex Index of task to change"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "     * @throws DukeException"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    protected void fileSetDone(int doneIndex) throws DukeException{"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        if(!isActive){"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        StringBuilder finalInput \u003d new StringBuilder();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "            ArrayList\u003cString\u003e fileContent \u003d new ArrayList\u003c\u003e(Files.readAllLines(saveList.toPath(), StandardCharsets.UTF_8));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "            StringBuilder editString \u003d new StringBuilder(fileContent.get(doneIndex));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "            editString.setCharAt(4, \u00271\u0027);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "            fileContent.set(doneIndex, editString.toString());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "            for(String s: fileContent){"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "                finalInput.append(s + \"\\n\");"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "            FileWriter overwriteEditor \u003d new FileWriter(saveList, false);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "            overwriteEditor.write(finalInput.toString());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "            overwriteEditor.close();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        } catch (IOException e){"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "            throw new DukeException(\"File write error\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "alexwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "     * Deletes a task in the save file"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "     * @param deleteIndex Index of task to delete"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "     * @throws DukeException"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    protected void fileDelete(int deleteIndex) throws DukeException{"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        if(!isActive){"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        StringBuilder finalInput \u003d new StringBuilder();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "            ArrayList\u003cString\u003e fileContent \u003d new ArrayList\u003c\u003e(Files.readAllLines(saveList.toPath(), StandardCharsets.UTF_8));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "            fileContent.remove(deleteIndex);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "            for(String s: fileContent){"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "                finalInput.append(s + \"\\n\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "            FileWriter overwriteEditor \u003d new FileWriter(saveList, false);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "            overwriteEditor.write(finalInput.toString());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "            overwriteEditor.close();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        } catch (IOException e){"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "            throw new DukeException(\"File write error\");"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "alexwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    protected void fileEditTime(int editIndex, Task editedTask) throws DukeException{"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        StringBuilder finalInput \u003d new StringBuilder();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "            ArrayList\u003cString\u003e fileContent \u003d new ArrayList\u003c\u003e(Files.readAllLines(saveList.toPath(), StandardCharsets.UTF_8));"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "            fileContent.set(editIndex, editedTask.toFileString());"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "            for(String s: fileContent){"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "                finalInput.append(s + \"\\n\");"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "            FileWriter overwriteEditor \u003d new FileWriter(saveList, false);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "            overwriteEditor.write(finalInput.toString());"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "            overwriteEditor.close();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        } catch (IOException e){"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "            throw new DukeException(\"File write error\");"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "alexwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alexwxh": 172
    }
  },
  {
    "path": "src/main/java/duke/execution/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "package duke.execution;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alexwxh"
        },
        "content": " * Parser class of Duke."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alexwxh"
        },
        "content": " * Translates user input into a function."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alexwxh"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "     * Returns Command object that does what user input requires when executed"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "     * @param fullCommand full user input"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "     * @return Command object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "     * @throws DukeException when user input is not formatted correctly/not recognized"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    public static Command parse(String fullCommand) throws DukeException{"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        fullCommand \u003d fullCommand.trim();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        int spacePosition \u003d fullCommand.indexOf(\" \");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        if(spacePosition \u003d\u003d -1 \u0026\u0026 !(fullCommand.equals(\"list\") || fullCommand.equals(\"bye\"))){"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "            raiseSingleBadInput(fullCommand);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        String[] taskInfo \u003d fullCommand.split(\" \", 2);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        switch(taskInfo[0]){"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        case \"todo\":"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        case \"event\":"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        case \"deadline\":"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "            return new Command(taskInfo, true, false, false, false);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        case \"delete\":"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "            return new Command(taskInfo, false, true, false, false);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        case \"done\":"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "            return new Command(taskInfo, false, false, true, false);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        case \"find\":"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "            return new Command(taskInfo, false, false, false, true);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        case \"list\":"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        case \"snooze\":"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        case \"bye\":"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "            return new Command(taskInfo, false, false, false, false);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "            throw new DukeException(\"Command not recognized\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alexwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "     * helper function to raise specific error when only 1 word is given as user input"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "     * @param badInput the erroneous user input"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "     * @throws DukeException thrown with a specific reason included in message"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    private static void raiseSingleBadInput(String badInput) throws DukeException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        if (badInput.equals(\"todo\") || badInput.equals(\"event\") || badInput.equals(\"deadline\")) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "            throw new DukeException(\"No description for task.\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        } else if (badInput.equals(\"done\") || badInput.equals(\"delete\")) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "            throw new DukeException(\"Task index missing\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "            throw new DukeException(\"No such command\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alexwxh": 54
    }
  },
  {
    "path": "src/main/java/duke/execution/TaskManager.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "package duke.execution;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alexwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "import duke.task.*;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alexwxh"
        },
        "content": " * TaskManager class of Duke."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alexwxh"
        },
        "content": " * In charge of storing and updating existing list of Tasks."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alexwxh"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "public class TaskManager {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    private ArrayList\u003cTask\u003e todoList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alexwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "     * Constructor for TaskManager."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "     * Initiates TaskManager object with empty ArrayList"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    public TaskManager(){"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        this.todoList\u003dnew ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alexwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "     * Adds new Task to ArrayList"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "     * Task type added depends on input"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "     * @param taskInfo information regarding new task given by user input"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "     * @return returns the task added to the list for easy I/O processing and file write"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "     * @throws DukeException thrown when user input does not adhere to default format"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    protected Task addNewTask(String[] taskInfo) throws DukeException{"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        if(taskInfo[0].equals(\"todo\")){"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "            return this.addTodo(taskInfo[1]);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        }else if(taskInfo[0].equals(\"event\")){"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "            return this.addEvent(taskInfo[1]);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        }else if (taskInfo[0].equals(\"deadline\")){"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "            return this.addDeadline(taskInfo[1]);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        throw new DukeException(\"Something wrong lol\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alexwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "     * Adds Todo task to the list"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "     * @param task task information"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "     * @return Todo object"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    private Todo addTodo(String task) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        task \u003d task.trim();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        Todo todo \u003d new Todo(task);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        this.todoList.add(todo);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        return todo;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "alexwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "     * Adds Event task to the list"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "     * @param task task information"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "     * @return Event object"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "     * @throws DukeException"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    private Event addEvent(String task) throws DukeException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        int split \u003d task.indexOf(\" /at\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        if (split \u003d\u003d -1) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "            throw new DukeException(\"Event time not given. Specify event time using \\\"/at\\\"\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "                String description \u003d task.substring(0, split);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "                String deadline \u003d task.substring(split + 5);       //exception may occur"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "                description \u003d description.trim();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "                deadline \u003d deadline.trim();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "                Event event \u003d new Event(description, deadline);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "                this.todoList.add(event);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "                return event;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "            } catch (IndexOutOfBoundsException e) {         // happens when input is \"event xx /at\" with no time given"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "                throw new DukeException(\"No event time provided\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "alexwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "     * Adds Deadline task to the list"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "     * @param task task information"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "     * @return Deadline object"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "     * @throws DukeException"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    private Deadline addDeadline(String task) throws DukeException {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        int split \u003d task.indexOf(\" /by\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        if (split \u003d\u003d -1) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "            throw new DukeException(\"Deadline not given. Specify deadline using \\\"/by\\\"\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "                String description \u003d task.substring(0, split);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "                String deadline \u003d task.substring(split + 5);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "                description \u003d description.trim();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "                deadline \u003d deadline.trim();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "                Deadline newDeadline \u003d new Deadline(description, deadline);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "                this.todoList.add(newDeadline);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "                return newDeadline;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "            } catch (IndexOutOfBoundsException e) { //same as event time"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "                throw new DukeException(\"No deadline provided\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "alexwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "     * Helper function for FileManager {@link FileManager#saveToFile(Task)}"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "     * @param task task to add to list"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    protected void load(Task task){"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        this.todoList.add(task);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "alexwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "     * Helper function for FileManager {@link FileManager#saveToFile(Task)}"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "     * Similar to done method, except this takes in int argument rather than String."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "     * @param index index of done task"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    protected void savedDone(int index){"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        this.todoList.get(index).setDone();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "alexwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "     * Sets task as done"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "     * @param doneIndex index of done task"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "     * @return task that was set as done"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "     * @throws DukeException"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    protected Task done(String doneIndex) throws DukeException{"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "            int doneInt \u003d Integer.parseInt(doneIndex);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "            this.todoList.get(doneInt - 1).setDone();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "            return this.todoList.get(doneInt - 1);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "            throw new DukeException(\"Bad task index\"); // for wrong index provided"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "            throw new DukeException(\"No such task index\");  //for index\u003earray length"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "alexwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "     * Delete task specified by index"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "     * @param deleteIndex Index of task to be deleted"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "     * @return Deleted task"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "     * @throws DukeException"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    protected Task delete(String deleteIndex) throws DukeException{  //exception same as done method"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "            int deleteInt \u003d Integer.parseInt(deleteIndex);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "            Task deletedTask \u003d this.todoList.get(deleteInt - 1);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "            this.todoList.remove(deleteInt - 1);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "            return deletedTask;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "            throw new DukeException(\"Bad task index\");"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "            throw new DukeException(\"No such task index\");"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "alexwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "     * Returns a string containing all the tasks currently in the list"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "     * @return string of tasks"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    protected String generateList() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        StringBuilder outputMessage \u003d new StringBuilder();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        int i \u003d todoList.size();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        for (int x \u003d 1; x \u003c\u003d i; x++) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "            outputMessage.append(\"\\n  \" + x + \".\" + todoList.get(x - 1));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        return outputMessage.toString();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "alexwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "     * Returns string containing all tasks that is keyword in its description"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "     * @param keyword word to match with task description"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "     * @return string of tasks"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    protected String findMatch(String keyword){"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        ArrayList\u003cTask\u003e foundList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        int foundTask \u003d 0;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        for(Task t: todoList){"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "            if(t.description.contains(keyword)){"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "                foundTask++;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "                foundList.add(t);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        return this.listToString(foundList);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "alexwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "     * Returns ArrayList of tasks as a String. Helper function in \"list\" command from user."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "     * @param taskList"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    private String listToString(ArrayList\u003cTask\u003e taskList){"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        StringBuilder outputMessage \u003d new StringBuilder();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        int i \u003d taskList.size();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        for(int x \u003d 1; x \u003c\u003d i; x++){"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "            outputMessage.append(\"\\n  \" + x + \".\" + taskList.get(x-1));"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        return outputMessage.toString();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "alexwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "     * Returns number of tasks currently"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "     * @return number of tasks"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "alexwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    protected int getSize(){"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        return this.todoList.size();"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "alexwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "     * Returns index of task"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "     * @param task"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    protected int getTaskIndex(Task task){"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        return todoList.indexOf(task);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "alexwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    protected Task delayTask(String input) throws DukeException{"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "            String[] userInput \u003d input.split(\" \", 2);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "            int editIndex \u003d Integer.parseInt(userInput[0]);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "            Task task \u003d todoList.get(editIndex-1);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "            task.updateDateTime(userInput[1]);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "            return task;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        }catch(NumberFormatException e){"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "            throw new DukeException(\"Bad snooze input. Enter command as \\\"snooze + index + new date \u0026 time\\\"\");"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        }catch(IndexOutOfBoundsException e){"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "            throw new DukeException(\"Task index does not exist\");"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alexwxh": 229
    }
  },
  {
    "path": "src/main/java/duke/execution/UserInterface.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "package duke.execution;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alexwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alexwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alexwxh"
        },
        "content": " * UserInterface class of Duke."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alexwxh"
        },
        "content": " * In charge of program I/O."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alexwxh"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "public class UserInterface {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    Scanner sc;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alexwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "     * Constructor for UserInterface"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "     * Initializes with a Scanner object"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    public UserInterface(){"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        this.sc \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alexwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "     * Print method of Duke"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "     * @param message message to print"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    private void print(String message){"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        System.out.println(\"\u003e\u003e\" + message + \"\\n\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alexwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "     * Prints welcome message"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    public void printWelcome(){"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        String logo \u003d \"\\n\" +"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "                \" ______       ___    _ .--.   .--.      .-\u0027\u0027-.   \\n\" +"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "                \"|    _ `\u0027\u0027. .\u0027   |  | ||  | _/  /     .\u0027_ _   \\\\  \\n\" +"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "                \"| _ | ) _  \\\\|   .\u0027  | || (`\u0027 ) /     / ( ` )   \u0027 \\n\" +"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "                \"|( \u0027\u0027_\u0027  ) |.\u0027  \u0027_  | ||(_ ()_)     . (_ o _)  | \\n\" +"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "                \"| . (_) `. |\u0027   ( \\\\.-.|| (_,_)   __ |  (_,_)___| \\n\" +"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "                \"|(_    ._) \u0027\u0027 (`. _` /||  |\\\\ \\\\  |  |\u0027  \\\\   .---. \\n\" +"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "                \"|  (_.\\\\.\u0027 / | (_ (_) _)|  | \\\\ `\u0027   / \\\\  `-\u0027    / \\n\" +"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "                \"|       .\u0027   \\\\ /  . \\\\ /|  |  \\\\    /   \\\\       /  \\n\" +"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "                \"\u0027-----\u0027`      ``-\u0027`-\u0027\u0027 `--\u0027   `\u0027-\u0027     `\u0027-..-\u0027   \\n\" +"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "                \"(◕ᴗ◕✿)\\n\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        System.out.println(\"Hewwo from\" + logo);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alexwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    public String printWelcomeGui(){"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        return \"H-hewwo from Duke (◕ω◕✿)\\n\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "alexwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "     * Prints message when task is successfully added"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "     * @param task task added"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "     * @param listSize current number of tasks"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    private String generateAddMessage(Task task, int listSize){"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        StringBuilder outputMessage \u003d new StringBuilder(\"Task added:\\n\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        outputMessage.append(\"    \" + task);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        outputMessage.append(\"\\n  There are \" + listSize + \" tasks in the list.\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        return outputMessage.toString();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "alexwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    public void printAdd(Task task, int listSize){"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        this.print(generateAddMessage(task, listSize));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "alexwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    public String printAddGui(Task task, int listSize){"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        return generateAddMessage(task, listSize);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "alexwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "     * Print load save file message"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    public void printLoadSave(){"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        this.print(\"Save file loaded successfully\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "alexwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "     * Print new file message"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    public void printNewFile(){"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        this.print(\"New save file created\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "alexwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "     * Print file set to done message"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "     * @param task"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    public void printDone(Task task){"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        this.print(\"The following task has been marked as done:\\n    \" + task);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "alexwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    public String printDoneGui(Task task){"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        return \"The following task has been marked as done:\\n    \" + task;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "alexwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "     * Print file deleted message"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "     * @param task deleted task"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "     * @param listSize number of tasks left"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    private String generateDeleteMessage(Task task, int listSize){"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        StringBuilder outputMessage \u003d new StringBuilder(\"Following task yeeted:\\n    \" + task);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        outputMessage.append(\"\\n  \" + listSize + \" tasks left in the list\\n\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        return outputMessage.toString();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    public void printDelete(Task task, int listSize){"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        this.print(generateDeleteMessage(task, listSize));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "alexwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    public String printDeleteGui(Task task, int listSize){"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        return generateDeleteMessage(task, listSize);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "alexwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    public void printSnooze(Task task){"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        this.print(\"Following task has been rescheduled:\\n\" + task);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "alexwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    public String printSnoozeGui(Task task){"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        return \"Following task rescheduled uwu:\\n\" + task;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "alexwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "     * Prints error message"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "     * @param message error details"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    public void printError(String message){"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        this.print(\"Error: \" + message);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "alexwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    public String printErrorGui(String message){"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        return \"(◕︵◕) Error: \" + message;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "alexwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "     * Prints list"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "     * @param list the list"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    public void printList(String list){"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        this.print(\"List:\" + list);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "alexwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    public String printListGui(String list){ return \"Listing tasks owo:\" + list; }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "alexwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "     * Prints list of tasks that match keyword given by user"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "     * @param list list of tasks"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    public void printFind(String list){"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        this.print(\"Matching tasks:\" + list);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "alexwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    public String printFindGui(String list){"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        return \"Here are the matching tasks owo:\" + list;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "alexwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "     * Reads and return next command input from user"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "     * @return next user command"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    public String readLine(){"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        return sc.nextLine();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "alexwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "     * Prints exit message"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    public void printExit(){"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        this.print(\"Goodbye. Hope to see you again UwU\");"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "alexwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    public String printByeGui(){"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        return \"Goodbye. This window will close soon. Hope to see you again UwU\";"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "}"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "alexwxh"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "alexwxh": 176
    }
  },
  {
    "path": "src/main/java/duke/gui/DialogBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "package duke.gui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alexwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alexwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "import javafx.scene.shape.Circle;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alexwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alexwxh"
        },
        "content": " * An example of a custom control using FXML."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alexwxh"
        },
        "content": " * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alexwxh"
        },
        "content": " * containing text from the speaker."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alexwxh"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alexwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    private DialogBox(String text, Image img) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alexwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        displayPicture.setImage(img);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        dialog.setMinHeight(Region.USE_PREF_SIZE);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        Circle circle \u003d new Circle(45, 43, 40);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        displayPicture.setClip(circle);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alexwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        Collections.reverse(tmp);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "alexwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    public static DialogBox getUserDialog(String text, Image img) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        var db \u003d new DialogBox(text, img);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        db.setStyle(\"-fx-background-color: #F1FEF3\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "alexwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    public static DialogBox getDukeDialog(String text, Image img) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        var db \u003d new DialogBox(text, img);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        db.setStyle(\"-fx-background-color: #F4EDF9\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alexwxh": 69
    }
  },
  {
    "path": "src/main/java/duke/gui/Launcher.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "package duke.gui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alexwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alexwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alexwxh"
        },
        "content": " * A launcher class to workaround classpath issues."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alexwxh"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        Application.launch(Main.class, args);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alexwxh": 12
    }
  },
  {
    "path": "src/main/java/duke/gui/Main.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "package duke.gui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alexwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "import duke.Duke;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alexwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alexwxh"
        },
        "content": " * A GUI for Duke using FXML."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alexwxh"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "public class Main extends Application {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alexwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    private Duke duke \u003d new Duke();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alexwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "            AnchorPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "            Scene scene \u003d new Scene(ap);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().welcomeMessage();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "            stage.setTitle(\"Duke \u0026 my uwus\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alexwxh": 33
    }
  },
  {
    "path": "src/main/java/duke/gui/MainWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "package duke.gui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alexwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "import duke.Duke;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "import duke.execution.UserInterface;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "import javafx.animation.PauseTransition;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "import javafx.util.Duration;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alexwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alexwxh"
        },
        "content": " * Controller for MainWindow. Provides the layout for the other controls."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alexwxh"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "public class MainWindow extends AnchorPane {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alexwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    private Duke duke;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alexwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/woman_yelling_edited.jpg\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/tablecat_editedflip.jpg\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alexwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alexwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    public void setDuke(Duke d) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        duke \u003d d;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alexwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    public void welcomeMessage(){"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        String message \u003d new UserInterface().printWelcomeGui();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        dialogContainer.getChildren().add(DialogBox.getDukeDialog(message, dukeImage));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "alexwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "     * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        String response \u003d duke.getResponse(input);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "                DialogBox.getUserDialog(input, userImage),"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "                DialogBox.getDukeDialog(response, dukeImage)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        );"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        if(input.equals(\"bye\")){"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "            PauseTransition delay \u003d new PauseTransition(Duration.seconds(1.5));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "            delay.setOnFinished(event -\u003e Platform.exit());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "            delay.play();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alexwxh": 67
    }
  },
  {
    "path": "src/main/java/duke/task/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alexwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "import java.time.DateTimeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "import duke.execution.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alexwxh"
        },
        "content": " * Represents Deadline object, subclass of Task"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alexwxh"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    private LocalDateTime deadline; //   DD/MM/YYYY"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alexwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    public Deadline(String description, String deadline) throws DukeException{"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        this.setDateTime(deadline);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alexwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "     * Sets local datetime specified by user input"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "     * @param deadline user input"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "     * @throws DukeException thrown if user input does not follow format"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    private void setDateTime(String deadline) throws DukeException{"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        String datetimeInput[] \u003d deadline.split(\" \");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        String dateInput[] \u003d datetimeInput[0].split(\"/\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        String timeInput \u003d datetimeInput[1];"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        int year, month, day, hour, minute;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        year \u003d Integer.parseInt(dateInput[2]);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        month \u003d Integer.parseInt(dateInput[1]);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        day \u003d Integer.parseInt(dateInput[0]);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        hour \u003d Integer.parseInt(timeInput)/100;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        minute \u003d Integer.parseInt(timeInput)%100;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "            this.deadline \u003d LocalDateTime.of(year, month, day, hour, minute);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        }catch(DateTimeException e){"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "            throw new DukeException(\"Bad date or time provided\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        }catch(NumberFormatException e){"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "            throw new DukeException(\"Bad date or time format\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alexwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    public Task updateDateTime(String newDateTime) throws DukeException{"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        this.setDateTime(newDateTime);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alexwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    public String toFileString(){"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        StringBuilder fileString \u003d new StringBuilder();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        fileString.append(\"D | 0 | \" + description + \" | \");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        fileString.append(datetimeToString() + \"\\n\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        return fileString.toString();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "alexwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "     * Helper function to return local datetime in a specific format"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "     * @return local datetime"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    private String datetimeToString(){"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        StringBuilder datetimeString \u003d new StringBuilder();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        datetimeString.append(deadline.getDayOfMonth() + \"/\" + deadline.getMonthValue() + \"/\" + deadline.getYear());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        if(deadline.getHour()\u003c10) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "            datetimeString.append(\" 0\" + deadline.getHour());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        }else{"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "            datetimeString.append(\" \" + deadline.getHour());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        if(deadline.getMinute()\u003c10){"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "            datetimeString.append(\"0\" + deadline.getMinute());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        }else{"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "            datetimeString.append(deadline.getMinute());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        return datetimeString.toString();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "alexwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        if (isDone) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "            return \"[D]\" + \"[\" + \"\\u2713\" + \"]\" + this.description + \" (by: \" + this.datetimeToString() + \")\";"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "            return \"[D]\" + \"[\" + \"\\u2718\" + \"]\" + this.description + \" (by: \" +this.datetimeToString() + \")\";"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alexwxh": 81
    }
  },
  {
    "path": "src/main/java/duke/task/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alexwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "import java.time.DateTimeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "import duke.execution.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alexwxh"
        },
        "content": " * Represents an Event object, subclass of Task"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alexwxh"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    private LocalDateTime startDateTime;   // DD/MM/YYYY"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    private LocalDateTime endDateTime;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alexwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    public Event(String description, String timePeriod) throws DukeException{"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        this.setDateTime(timePeriod);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alexwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "     * Sets local datetime specified by user input"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "     * @param timePeriod user input"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "     * @throws DukeException thrown if user input does not follow format"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    private void setDateTime(String timePeriod) throws DukeException{"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        String datetimeInput[] \u003d timePeriod.split(\" \");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        String dateInput[] \u003d datetimeInput[0].split(\"/\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        String timeInput[] \u003d datetimeInput[1].split(\"-\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        int year, month, day, startHour, startMinute, endHour, endMinute;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        year \u003d Integer.parseInt(dateInput[2]);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        month \u003d Integer.parseInt(dateInput[1]);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        day \u003d Integer.parseInt(dateInput[0]);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        startHour \u003d Integer.parseInt(timeInput[0])/100;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        startMinute \u003d Integer.parseInt(timeInput[0])%100;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        endHour \u003d Integer.parseInt(timeInput[1])/100;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        endMinute \u003d Integer.parseInt(timeInput[1])%100;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "            this.startDateTime \u003d LocalDateTime.of(year, month, day, startHour, startMinute);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "            this.endDateTime \u003d LocalDateTime.of(year, month, day, endHour, endMinute);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        }catch(DateTimeException e){"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "            throw new DukeException(\"Bad date or time provided\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alexwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    public Task updateDateTime(String newDateTime) throws DukeException{"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        this.setDateTime(newDateTime);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "alexwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    public String toFileString(){"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        StringBuilder fileString \u003d new StringBuilder();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        fileString.append(\"E | 0 | \" + description + \" | \");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        fileString.append(datetimeToString());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        return fileString.toString();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "alexwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "     * Helper function to return local datetime in a specific format"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "     * @return local datetime"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "alexwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    private String datetimeToString(){"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        StringBuilder datetimeString \u003d new StringBuilder();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        datetimeString.append(startDateTime.getDayOfMonth() + \"/\" + startDateTime.getMonthValue() + \"/\""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "                + startDateTime.getYear());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        if(startDateTime.getHour()\u003c10) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "            datetimeString.append(\" 0\" + startDateTime.getHour());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        }else{"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "            datetimeString.append(\" \" + startDateTime.getHour());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        if(startDateTime.getMinute()\u003c10){"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "            datetimeString.append(\"0\" + startDateTime.getMinute());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        }else{"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "            datetimeString.append(startDateTime.getMinute());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        if(endDateTime.getHour()\u003c10) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "            datetimeString.append(\"-0\" + endDateTime.getHour());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        }else{"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "            datetimeString.append(\"-\" + endDateTime.getHour());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        if(endDateTime.getMinute()\u003c10){"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "            datetimeString.append(\"0\" + endDateTime.getMinute());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        }else{"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "            datetimeString.append(endDateTime.getMinute());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        return datetimeString.toString();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "alexwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        if (isDone) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "            return \"[E]\" + \"[\" + \"\\u2713\" + \"]\" + this.description + \" (at: \" + this.datetimeToString() + \")\";"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "            return \"[E]\" + \"[\" + \"\\u2718\" + \"]\" + this.description + \" (at: \" + this.datetimeToString() + \")\";"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alexwxh": 95
    }
  },
  {
    "path": "src/main/java/duke/task/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alexwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "import duke.execution.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alexwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alexwxh"
        },
        "content": " * Represents a task in a checklist"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alexwxh"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "public abstract class Task {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    public String description;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alexwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "     * Constructor that initializes a Task object."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "     * Set isDone to false since newly created tasks are mostly not completed"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "     * @param description description of the task"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alexwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "     * Changes Task isDone parameter to true"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    public void setDone() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alexwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "     * Returns Task object description in a specific format for writing to save file"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "     * @return Task object full description for save file"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    public abstract String toFileString();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alexwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "     * Returns Task object description in a specific format for printing"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "     * @return Task object full description for I/O"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    public abstract String toString();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alexwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    public abstract Task updateDateTime(String info) throws DukeException;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alexwxh"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "alexwxh": 44
    }
  },
  {
    "path": "src/main/java/duke/task/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alexwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "import duke.execution.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alexwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alexwxh"
        },
        "content": " * Represents Todo object, subclass of Task"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alexwxh"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "public class Todo extends Task {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    public Todo(String description) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alexwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    public String toFileString(){"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        StringBuilder fileString \u003d new StringBuilder();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        fileString.append(\"T | 0 | \" + description + \"\\n\" );"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        return fileString.toString();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alexwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        if (this.isDone) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "            return \"[T]\" + \"[\" + \"\\u2713\" + \"]\" + this.description;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "            return \"[T]\" + \"[\" + \"\\u2718\" + \"]\" + this.description;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alexwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    public Task updateDateTime(String info) throws DukeException{"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        throw new DukeException(\"Task is a Todo. There is no associated date/time.\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alexwxh": 31
    }
  },
  {
    "path": "src/main/resources/view/DialogBox.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alexwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alexwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    \u003cpadding\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    \u003c/padding\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "alexwxh": 16
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alexwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alexwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"duke.gui.MainWindow\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "            \u003ccontent\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "                \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "            \u003c/content\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "alexwxh": 19
    }
  },
  {
    "path": "src/test/java/DeadlineTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alexwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "public class DeadlineTest {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    public void deadline_toStringTest(){"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        String testInput_1 \u003d \"test\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        String testInput_2 \u003d \"2/9/2019 2000\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        String expectedFileResult \u003d \"D | 0 | test | 2/9/2019 2000\\n\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        String expectedPrintResult \u003d \"[D][✘]test (by: 2/9/2019 2000)\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "            Deadline deadlineTest \u003d new Deadline(testInput_1, testInput_2);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "            assertEquals(expectedFileResult, deadlineTest.toFileString());"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "            assertEquals(expectedPrintResult, deadlineTest.toString());"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        }catch (DukeException e){"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "            fail(\"DukeException thrown: \" + e.getMessage());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alexwxh": 20
    }
  },
  {
    "path": "src/test/java/TodoTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alexwxh"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "public class TodoTest {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    public void todo_toStringTest(){"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        String testInput \u003d \"test\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        String expectedFileResult \u003d \"T | 0 | test\\n\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        String expectedPrintResult \u003d \"[T][✘]test\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        Todo todoTest \u003d new Todo(testInput);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        assertEquals(expectedFileResult, todoTest.toFileString());"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "        assertEquals(expectedPrintResult, todoTest.toString());"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alexwxh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alexwxh": 14
    }
  }
]
