[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Dandford"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Dandford"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    archiveVersion \u003d \"0.1.3\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Dandford"
        },
        "content": "}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Dandford"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Dandford"
        },
        "content": "}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Dandford"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Dandford"
        },
        "content": "test {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Dandford"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "group \u0027seedu.duke\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    // Change this to your main class."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    mainClassName \u003d \"Duke\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Dandford": 24,
      "-": 15
    }
  },
  {
    "path": "src/main/java/Command/AddCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Dandford"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import duke.core.Ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import duke.core.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import duke.helper.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import duke.helper.DateTimeHelper;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import duke.task.ToDo;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Dandford"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * Constructor for AddCommand which inherits from Command."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * @param inputCommand String that is parsed from the Parser."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public AddCommand(String inputCommand) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        super(inputCommand);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * Reads and creates new ToDo, Event or Deadline based on the parsed input."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * public method called by Duke.run() in the for loop as part of the Command Pattern."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * Needs to be implemented as inherited from Command abstract method."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * Uses Storage Class to write to file duke.txt, Ui class to print responses and TaskList to store the arraylist."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * @param tasks TaskList passed from the Duke main class, containing Array of Tasks."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * @param ui Ui passed from the Duke main class, responsible for printing output to the user and obtaining input."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * @param storage Storage passed from the Duke main class, responsible for updating duke.txt after every command."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * @throws DukeException which can come from two sources, itself if the description of the Task is empty or"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * from the Storage Class."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    //note private can\u0027t be accessed by child"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        String[] inputsplit \u003d this.inputCommand.split(\" \", 2);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        String typeTask \u003d inputsplit[0];"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        if (inputsplit.length \u003c\u003d 1) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            throw new DukeException(\"OOPS!!! The description of a \" + typeTask + \" cannot be empty.\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        Task taskToAdd;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        if (typeTask.equalsIgnoreCase(\"todo\")) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            taskToAdd \u003d new ToDo(inputsplit[1]);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        } else if (typeTask.equalsIgnoreCase(\"deadline\")) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            String[] descripSplit \u003d inputsplit[1].split(\" /by \", 2);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            LocalDateTime ldt \u003d DateTimeHelper.formatInput(descripSplit[1]);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            taskToAdd \u003d new Deadline(descripSplit[0],ldt);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            String[] descripSplit \u003d inputsplit[1].split(\" /at \", 2);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            LocalDateTime ldt \u003d DateTimeHelper.formatInput(descripSplit[1]);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            taskToAdd \u003d new Event(descripSplit[0], ldt);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        tasks.addToRecord(taskToAdd);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        ui.printAdd(taskToAdd, tasks.getSize());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        storage.writeToFile(tasks.getTaskList());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Dandford"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Dandford": 61
    }
  },
  {
    "path": "src/main/java/Command/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Dandford"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import duke.core.Ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import duke.core.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import duke.helper.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Dandford"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    protected String inputCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    protected boolean shouldExit;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * Constructor for Command which will be inherited by all other commands."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * @param inputCommand String that is parsed from the Parser."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * shouldExit is the boolean that will stop the for loop and exit the program."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public Command(String inputCommand) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        this.inputCommand \u003d inputCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        this.shouldExit \u003d false;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * public method called by Duke.run() in the for loop to check if the for loop should continue."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * Inherited by all child classes as all Command classes need to check if should end for loop."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * @return shouldExit is the boolean that will stop the for loop and exit the program."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public boolean shouldExit() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        return this.shouldExit;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * abstract method called by Duke.run() in the for loop."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * Inherited by all child classes as it\u0027s the core of CommandPattern."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * @param tasks TaskList passed from the Duke main class, containing Array of Tasks."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * @param ui Ui passed from the Duke main class, responsible for printing output to the user and obtaining input."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * @param storage Storage passed from the Duke main class, responsible for updating duke.txt after every command."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * @throws DukeException which will be dealed with by the Duke class."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public abstract void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Dandford"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Dandford": 44
    }
  },
  {
    "path": "src/main/java/Command/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Dandford"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import duke.core.Ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import duke.core.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import duke.helper.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Dandford"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * Constructor for DeleteCommand which inherits from Command."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * @param inputCommand String that is parsed from the Parser."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public DeleteCommand(String inputCommand) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        super(inputCommand);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * Deletes the aforementioned task from TaskList based on the number parsed from inputcommand."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * public method called by Duke.run() in the for loop as part of the Command Pattern."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * Needs to be implemented as inherited from Command abstract method."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * Uses Storage Class to write to file duke.txt, Ui class to print responses and TaskList to store the arraylist."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * @param tasks TaskList passed from the Duke main class, containing Array of Tasks."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * @param ui Ui passed from the Duke main class, responsible for printing output to the user and obtaining input."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * @param storage Storage passed from the Duke main class, responsible for updating duke.txt after every command."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * @throws DukeException which can come from two sources, itself when the description passed in by the user is not complete"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * and if the values for delete is invalid or the Storage Class."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        String[] inputsplit \u003d inputCommand.split(\" \", 2);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        if (inputsplit.length \u003c\u003d 1) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            throw new DukeException(\"OOPS!!! The description of delete must have a value.\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        } else if (Integer.parseInt(inputsplit[1]) \u003e tasks.getSize() || Integer.parseInt(inputsplit[1]) \u003c\u003d 0) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            throw new DukeException(\"OOPS!!! Invalid value for task delete!\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            int num \u003d Integer.parseInt(inputsplit[1]);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            Task t \u003d tasks.removeTask(num);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            ui.printDelete(t, tasks.getSize());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            storage.writeToFile(tasks.getTaskList());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Dandford"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Dandford": 45
    }
  },
  {
    "path": "src/main/java/Command/DoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Dandford"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import duke.core.Ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import duke.core.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import duke.helper.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Dandford"
        },
        "content": "public class DoneCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * Constructor for DoneCommand which inherits from Command."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * @param inputCommand String that is parsed from the Parser."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public DoneCommand(String inputCommand) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        super(inputCommand);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * Marks as done the aforementioned task from TaskList based on the number parsed from inputcommand."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * public method called by Duke.run() in the for loop as part of the Command Pattern."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * Needs to be implemented as inherited from Command abstract method."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * Uses Storage Class to write to file duke.txt, Ui class to print responses and TaskList to store the arraylist."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * @param tasks TaskList passed from the Duke main class, containing Array of Tasks."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * @param ui Ui passed from the Duke main class, responsible for printing output to the user and obtaining input."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * @param storage Storage passed from the Duke main class, responsible for updating duke.txt after every command."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * @throws DukeException which can come from two sources, itself when the description of done isn\u0027t complete"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * or when there is an invalid value for done command or if the task is already done,or the Storage Class."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        String[] inputsplit \u003d this.inputCommand.split(\" \", 2);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        if (inputsplit.length \u003c\u003d 1) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            throw new DukeException(\"OOPS!!! The description of done must have a value.\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        } else if (Integer.parseInt(inputsplit[1]) \u003e tasks.getSize() || Integer.parseInt(inputsplit[1]) \u003c\u003d 0) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            throw new DukeException(\"OOPS!!! Invalid value for task done!\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        } else if (tasks.getTask(Integer.parseInt(inputsplit[1])).getIsDone() \u003d\u003d true) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            throw new DukeException(\"OOPS!!! Task is already done!\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            int num \u003d Integer.parseInt(inputsplit[1]);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            Task t \u003d  tasks.getTask(num);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            t.markIsDone();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            ui.printDone(t);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            storage.writeToFile(tasks.getTaskList());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Dandford"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Dandford": 50
    }
  },
  {
    "path": "src/main/java/Command/ExitCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Dandford"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import duke.core.Ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import duke.core.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import duke.helper.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Dandford"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * Constructor for ExitCommand which inherits from Command."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * @param inputCommand String that is parsed from the Parser."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public ExitCommand(String inputCommand) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        super(inputCommand);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * Assigns the boolean shouldExit as true from parent class Command, thus terminating the for loop and closing Duke."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * public method called by Duke.run() in the for loop as part of the Command Pattern."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * Needs to be implemented as inherited from Command abstract method."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * @param tasks TaskList passed from the Duke main class, containing Array of Tasks."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * @param ui Ui passed from the Duke main class, responsible for printing output to the user and obtaining input."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * @param storage Storage passed from the Duke main class, responsible for updating duke.txt after every command."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        this.shouldExit \u003d true;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        ui.printBye();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Dandford"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Dandford": 32
    }
  },
  {
    "path": "src/main/java/Command/FindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Dandford"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import duke.core.Ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import duke.core.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import duke.helper.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Dandford"
        },
        "content": "public class FindCommand extends Command{"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * Constructor for FindCommand which inherits from Command."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * @param inputCommand String that is parsed from the Parser."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public FindCommand(String inputCommand) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        super(inputCommand);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * Reads and creates new ToDo, Event or Deadline based on the parsed input."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * public method called by Duke.run() in the for loop as part of the Command Pattern."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * Needs to be implemented as inherited from Command abstract method."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * Uses Ui class to print responses and TaskList to obtain the shortlisted and found arraylist."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * @param tasks TaskList passed from the Duke main class, containing Array of Tasks."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * @param ui Ui passed from the Duke main class, responsible for printing output to the user and obtaining input."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * @param storage Storage passed from the Duke main class, responsible for updating duke.txt after every command."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * @throws DukeException which can come from one sources, itself if the description of the find is empty or has more"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * than one keyword"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        String[] inputsplit \u003d this.inputCommand.split(\" \");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        if (inputsplit.length \u003c\u003d 1 ) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            throw new DukeException(\"OOPS!!! The description of a find Command cannot be empty.\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        } else if (inputsplit.length \u003e 2) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            throw new DukeException(\"OOPS!!! The find Command can only accept one keyword.\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            ArrayList\u003cTask\u003e taskToFind \u003d tasks.findTask(inputsplit[1]);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            ui.printFind(taskToFind);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Dandford"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Dandford": 45
    }
  },
  {
    "path": "src/main/java/Command/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Dandford"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import duke.core.Ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import duke.core.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import duke.helper.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Dandford"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * Constructor for ListCommand which inherits from Command."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * @param inputCommand String that is parsed from the Parser."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public ListCommand(String inputCommand) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        super(inputCommand);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * Calls Ui to print the list of tasks which is obtained from TaskList tasks."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * public method called by Duke.run() in the for loop as part of the Command Pattern."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * Needs to be implemented as inherited from Command abstract method."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * @param tasks TaskList passed from the Duke main class, containing Array of Tasks."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * @param ui Ui passed from the Duke main class, responsible for printing output to the user and obtaining input."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * @param storage Storage passed from the Duke main class, responsible for updating duke.txt after every command."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        ui.printRecord(tasks.getTaskList());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Dandford"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Dandford": 31
    }
  },
  {
    "path": "src/main/java/Core/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Dandford"
        },
        "content": "package duke.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import duke.command.AddCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import duke.command.DeleteCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import duke.command.DoneCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import duke.command.ExitCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import duke.command.ListCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import duke.command.FindCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import duke.helper.DukeException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Dandford"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * Understands the user\u0027s input command from class Ui."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * public method called by Duke.run() in the for loop as part of the Command Pattern."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * @param inputCommand String that is obtained from the scanner which is located in Ui."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * @return Command which can be any one of the commands based on the first word of the user input parsed."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * @throws DukeException which happens if the user input is not one of the predefined inputs."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public static Command parse(String inputCommand) throws DukeException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        String[] inputsplit \u003d inputCommand.split(\" \", 2);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        if (inputsplit[0].equalsIgnoreCase(\"list\")) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            return new ListCommand(inputCommand);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        } else if (inputsplit[0].equalsIgnoreCase(\"done\")) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            return new DoneCommand(inputCommand);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        } else if (inputsplit[0].equalsIgnoreCase(\"todo\") ||"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Dandford"
        },
        "content": "                inputsplit[0].equalsIgnoreCase(\"deadline\") ||"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Dandford"
        },
        "content": "                inputsplit[0].equalsIgnoreCase(\"event\")) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            return new AddCommand(inputCommand);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        } else if (inputsplit[0].equalsIgnoreCase(\"delete\")) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            return new DeleteCommand(inputCommand);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        } else if (inputsplit[0].equalsIgnoreCase(\"find\")) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            return new FindCommand(inputCommand);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        } else if (inputsplit[0].equalsIgnoreCase(\"bye\")){"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            return new ExitCommand(inputCommand);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            throw new DukeException(\"OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Dandford"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Dandford": 42
    }
  },
  {
    "path": "src/main/java/Core/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Dandford"
        },
        "content": "package duke.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import duke.helper.DateTimeHelper;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import duke.helper.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import duke.task.ToDo;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Dandford"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    //stores information of the data in the duke.txt file."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    final String FILE_NAME \u003d \"C:\\\\Users\\\\dandf\\\\Pictures\\\\CS2103-Duke\\\\duke/data/duke.txt\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    final String DIRECTORY_NAME \u003d \"C:\\\\Users\\\\dandf\\\\Pictures\\\\CS2103-Duke\\\\duke/data\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * Write the updated contents from TaskList."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * First checks if the file or directory exists, if it doesn\u0027t create a new empty file."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * public method called by Command and it\u0027s child classes each time Command.execute is run."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * @param taskEntered ArrayList of Tasks obtained from the TaskList class."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * @throws DukeException which occurs if there is problem in loading the duke.txt."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public void writeToFile(ArrayList\u003cTask\u003e taskEntered) throws DukeException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            File taskStorage \u003d new File(FILE_NAME);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            File directoryStorage \u003d new File(DIRECTORY_NAME);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            if (!taskStorage.getAbsoluteFile().exists()) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Dandford"
        },
        "content": "                directoryStorage.mkdir();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Dandford"
        },
        "content": "                taskStorage.createNewFile();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            FileWriter taskWrite \u003d new FileWriter(FILE_NAME);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            String s \u003d writeFromArray(taskEntered);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            taskWrite.write(s);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            taskWrite.close();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        } catch(IOException e) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            throw new DukeException(\"OOPS!!! Error occured when loading file.\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * Uses StringBuffer to append string of tasks obtained from tastEntered into format required to put into duke.txt."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * public method called by writeToFile, which is called each time Command.execute is run."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * @param taskEntered ArrayList of Tasks obtained from the TaskList class."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public String writeFromArray(ArrayList\u003cTask\u003e taskEntered) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        StringBuffer toWrite \u003d new StringBuffer(\"\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        for (int i \u003d 0; i \u003c taskEntered.size(); i++) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            Task t \u003d taskEntered.get(i);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            String s;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            if (t.getType().equalsIgnoreCase(\"[T]\")) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Dandford"
        },
        "content": "                s \u003d t.getType() + \"|\" + t.getIsDone() + \"|\" + t.getDescription() + \"\\n\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Dandford"
        },
        "content": "                s \u003d t.getType() + \"|\" + t.getIsDone() + \"|\" + t.getDescription()  + \"\\n\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            toWrite.append(s);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        return toWrite.toString();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * Understands the string from duke.txt and creates a arraylist of tasks based on the strings in duke.txt."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * First checks if the file or directory exists, if it doesn\u0027t create a new empty file."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * public method called by duke when it first starts up."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     *"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * @return ArrayList of Tasks which will be assigned to TaskList class."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * @throws DukeException which occurs if there is problem in loading the duke.txt."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public ArrayList\u003cTask\u003e outputFileContents() throws DukeException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            File taskStorage \u003d new File(FILE_NAME);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            File directoryStorage \u003d new File(DIRECTORY_NAME);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            if (!taskStorage.getAbsoluteFile().exists()) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Dandford"
        },
        "content": "                directoryStorage.mkdir();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Dandford"
        },
        "content": "                taskStorage.createNewFile();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            Scanner s \u003d new Scanner(taskStorage); // create a Scanner using the File as the source"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            ArrayList\u003cTask\u003e retrievedTask \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            while (s.hasNext()) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Dandford"
        },
        "content": "                //note that | is known as || in java"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Dandford"
        },
        "content": "                String[] inputsplit \u003d s.nextLine().split(\"\\\\|\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Dandford"
        },
        "content": "                if (inputsplit[0].equalsIgnoreCase(\"[T]\")) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Dandford"
        },
        "content": "                    ToDo t \u003d new ToDo(inputsplit[2]);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Dandford"
        },
        "content": "                    this.checkIfDone(t,inputsplit[1]);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Dandford"
        },
        "content": "                    retrievedTask.add(t);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Dandford"
        },
        "content": "                } else if (inputsplit[0].equalsIgnoreCase(\"[D]\")) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Dandford"
        },
        "content": "                    LocalDateTime ldt \u003d DateTimeHelper.formatInput(inputsplit[3]);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Dandford"
        },
        "content": "                    Deadline d \u003d new Deadline(inputsplit[2], ldt);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Dandford"
        },
        "content": "                    this.checkIfDone(d,inputsplit[1]);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Dandford"
        },
        "content": "                    retrievedTask.add(d);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Dandford"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Dandford"
        },
        "content": "                    LocalDateTime ldt \u003d DateTimeHelper.formatInput(inputsplit[3]);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Dandford"
        },
        "content": "                    Event e \u003d new Event(inputsplit[2], ldt);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Dandford"
        },
        "content": "                    this.checkIfDone(e,inputsplit[1]);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Dandford"
        },
        "content": "                    retrievedTask.add(e);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Dandford"
        },
        "content": "                }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            return retrievedTask;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            throw new DukeException(\"OOPS!!! I\u0027m sorry, but file not found :-(\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * Called by outputFileContents and checks the string which is retrieved from duke.txt if the task is Done."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public void checkIfDone(Task t, String booleanValue) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        if(booleanValue.equalsIgnoreCase(\"True\")) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            t.markIsDone();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Dandford"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Dandford": 119
    }
  },
  {
    "path": "src/main/java/Core/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Dandford"
        },
        "content": "package duke.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Dandford"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    Scanner scanner;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * Constructor for User Interface Ui and creates one scanner everytime it starts up."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public Ui() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        Scanner scanner \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        this.scanner \u003d scanner;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * Message printed when Duke first starts up."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public void printHello() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        System.out.println(\"Hello! I\u0027m Duke\\nWhat can I do for you?\\n\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * Called by Duke class to read user\u0027s input."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * @return input which is a String that is read from the user\u0027s input which will later be passed to the Parser."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public String readCommand() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        String input \u003d scanner.nextLine();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        return input;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * Called by ListCommand class to print all existing tasks."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * @param textEntered is retrieved from TaskList class."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public void printRecord(ArrayList\u003cTask\u003e textEntered) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        System.out.println(\"Here are the tasks in your list:\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        for (int i \u003d 0; i \u003c textEntered.size(); i++) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            System.out.print((i + 1) + \".\" + textEntered.get(i).toString() + \"\\n\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        System.out.println();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * Message printed when Duke ends as ExitCommand is called."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public void printBye() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        System.out.println(\"Bye. Hope to see you again soon!\\n\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * Message of DukeException to be printed out to the User, to be printed when"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public void printError(String excepMsg) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        System.out.println(excepMsg + \"\\n\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public void printAdd(Task t, int sizeOfTask) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        System.out.printf(\"Got it. I\u0027ve added this task: \\n  %s\\nNow you have %d tasks in the list.%n\", t.toString(),"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Dandford"
        },
        "content": "                sizeOfTask);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        System.out.println();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public void printDone(Task t) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        System.out.println(\"Nice! I\u0027ve marked this task as done: \");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        System.out.println(\"  \" + t.toString() + \"\\n\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public void printDelete(Task t, int sizeOfTask) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        System.out.println(\"Noted. I\u0027ve removed this task: \\n\" + \"  \" + t.toString() + \"\\n\""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Dandford"
        },
        "content": "                + \"Now you have \" + sizeOfTask + \" tasks in the list.\" + \"\\n\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public void printFind(ArrayList\u003cTask\u003e inputList) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        System.out.println(\"Here are the matching tasks in your list:\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        for(int i \u003d 0; i \u003c inputList.size(); i++){"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            System.out.print((i + 1) + \".\" + inputList.get(i).toString() + \"\\n\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        System.out.println();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Dandford"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Dandford": 86
    }
  },
  {
    "path": "src/main/java/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import duke.core.Storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import duke.core.Ui;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import duke.core.Parser;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import duke.helper.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    private ArrayList\u003cTask\u003e textEntered;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    private Ui userIF;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * Constructor for Duke which is called in main. Creates a new Ui and Storage. If Storage can\u0027t find the file"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * duke.txt it will throw an exception, in which case a new TaskList will be created that is empty."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public Duke() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        this.userIF \u003d new Ui();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        this.storage \u003d new Storage();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            tasks \u003d new TaskList(storage.outputFileContents());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            e.getMessage();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        new Duke().run();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * First greets the user then enters a loop which includes the Command Pattern, reading the user input"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * using Ui then calling command.execute()."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        userIF.printHello();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        boolean isExit \u003d false;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        while (!isExit) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Dandford"
        },
        "content": "                String fullCommand \u003d userIF.readCommand();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Dandford"
        },
        "content": "                Command c \u003d Parser.parse(fullCommand);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Dandford"
        },
        "content": "                c.execute(tasks, userIF, storage);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Dandford"
        },
        "content": "                isExit \u003d c.shouldExit();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            } catch (DukeException e) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Dandford"
        },
        "content": "                userIF.printError(e.getMessage());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Dandford": 50,
      "-": 4
    }
  },
  {
    "path": "src/main/java/Helper/DateTimeHelper.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Dandford"
        },
        "content": "package duke.helper;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import java.time.format.DateTimeFormatterBuilder;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Dandford"
        },
        "content": "public class DateTimeHelper {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    //contains possible formats of inputs that the user may pass in for the date and time."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    static DateTimeFormatter INPUTFORMATTER \u003d new DateTimeFormatterBuilder()"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            .appendOptional(DateTimeFormatter.ofPattern(\"yyyy/MM/dd HHmm\"))"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            .appendOptional(DateTimeFormatter.ofPattern(\"yyyy/MM/d HHmm\"))"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            .appendOptional(DateTimeFormatter.ofPattern(\"yyyy-MM-dd HHmm\"))"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            .appendOptional(DateTimeFormatter.ofPattern(\"yyyy-MM-d HHmm\"))"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            .appendOptional(DateTimeFormatter.ofPattern(\"yyyy.MM.dd HHmm\"))"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            .appendOptional(DateTimeFormatter.ofPattern(\"yyyy.MM.d HHmm\"))"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            .appendOptional(DateTimeFormatter.ofPattern(\"dd/MM/yyyy HHmm\"))"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            .appendOptional(DateTimeFormatter.ofPattern(\"d/MM/yyyy HHmm\"))"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            .appendOptional(DateTimeFormatter.ofPattern(\"d-MM-yyyy HHmm\"))"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            .appendOptional(DateTimeFormatter.ofPattern(\"dd-MM-yyyy HHmm\"))"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            .appendOptional(DateTimeFormatter.ofPattern(\"dd.MM.yyyy HHmm\"))"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            .appendOptional(DateTimeFormatter.ofPattern(\"d.MM.yyyy HHmm\"))"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            .toFormatter();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    //formatter for user input to be converted to to standardize."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    static DateTimeFormatter OUTPUTFORMATTER \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd HHmm\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * Formats the user input for date and time using the INPUTFORMATTER to ensure it is in the proper format."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * @param inputDateTime is the date and time passed in by the user."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * @throws DukeException which occurs if there is problem in user input date and time and outputs error to user."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public static LocalDateTime formatInput(String inputDateTime) throws DukeException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            LocalDateTime ldt \u003d LocalDateTime.parse(inputDateTime, INPUTFORMATTER);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            return ldt;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            throw new DukeException(\"OOPS! Please make sure that date \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Dandford"
        },
        "content": "                    + \"keyed in is of format Year(yyyy)/Month(mm)/Date(dd) Hour(hh)Minute(mm), eg 2019-09-14 1800\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * Formats the user input for date and time using the OUTPUTFORMATTER to be printed or saved in the duke.txt."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * @param outputDateTime is the LocalDateTime saved in the tasks."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public static String formatOutput(LocalDateTime outputDateTime) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        return outputDateTime.format(OUTPUTFORMATTER);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Dandford"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Dandford": 54
    }
  },
  {
    "path": "src/main/java/Helper/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Dandford"
        },
        "content": "package duke.helper;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Dandford"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    String message;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * Constructor for DukeException which inherits from Exception. Modifies the string with a sad unicode face."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     *"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * @param errormsg String which contains error."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public DukeException(String errormsg) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        String modifiedMsg \u003d \"\\u2639 \" + errormsg;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        this.message \u003d modifiedMsg;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * Called by to print the error."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * @return the error message for the Exception."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        return this.message;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Dandford"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Dandford": 24
    }
  },
  {
    "path": "src/main/java/Task/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Dandford"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import duke.helper.DateTimeHelper;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Dandford"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    final String taskType \u003d \"[D]\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    protected LocalDateTime deadlineTime;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * Constructor for Deadline which inherits from Task."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * @param description String that is passed from the commands containing info about the Deadline."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * @param LocalDateTime contains information about the deadlineTime from the user."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public Deadline(String description, LocalDateTime by) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        this.deadlineTime \u003d by;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * Abstract method implemented from parent Task."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * @return the description of the task to be placed into Storage class."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        return this.description + \"|\" + DateTimeHelper.formatOutput(this.deadlineTime);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * Abstract method implemented from parent Task."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * @return the symbol for type of task, \"[D]\"."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public String getType() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        return taskType;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * toString() method."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * @return string containing information of task to be printed out by ListCommand and Ui."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        return taskType + super.getStatusIcon() + \" \" + super.toString()"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Dandford"
        },
        "content": "                + \" (by: \" + DateTimeHelper.formatOutput(deadlineTime)  + \")\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Dandford"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Dandford": 50
    }
  },
  {
    "path": "src/main/java/Task/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Dandford"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import duke.helper.DateTimeHelper;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Dandford"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    final String TASK_TYPE \u003d \"[E]\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    protected LocalDateTime eventTime;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * Constructor for Event which inherits from Task."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * @param description String that is passed from the commands containing info about the Task."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * @param LocalDateTime contains information about the eventTime from the user."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public Event(String description, LocalDateTime eventTime) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        this.eventTime \u003d eventTime;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * Abstract method implemented from parent Task."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * @return the symbol for type of task, \"[E]\"."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public String getType() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        return TASK_TYPE;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * Abstract method implemented from parent Task."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * @return the description of the task to be placed into Storage class."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        return this.description + \"|\" + DateTimeHelper.formatOutput(this.eventTime);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * toString() method."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * @return string containing information of task to be printed out by ListCommand and Ui."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        return TASK_TYPE + super.getStatusIcon() + \" \" + super.toString() + \" (at: \""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Dandford"
        },
        "content": "                + DateTimeHelper.formatOutput(eventTime) + \")\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Dandford"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Dandford": 50
    }
  },
  {
    "path": "src/main/java/Task/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Dandford"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Dandford"
        },
        "content": "public abstract class Task {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * Constructor for Task which will be inherited by Deadline Event and ToDo. Default boolean for isDone is false."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * @param description String that is passed from the commands containing info about the Task."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * Called to obtain information if the task is completed."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * @return boolean of whether task is completed."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public boolean getIsDone(){"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        return this.isDone;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * Called to change information if the task is completed. Modifies the isDone boolean value to true."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public void markIsDone(){"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * Called to provide tick or cross symbols to be printed out."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * @return String of tick or cross symbols."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        return (isDone ? \"[\" + \"\\u2713\" + \"]\" : \"[\" + \"\\u2718\" + \"]\"); //return tick or X symbols"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * Called to provide description of event."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * @return description of event."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public String toString(){"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        return this.description;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public abstract String getType();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public abstract String getDescription();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Dandford"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Dandford": 55
    }
  },
  {
    "path": "src/main/java/Task/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Dandford"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Dandford"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    private ArrayList\u003cTask\u003e taskArray;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * Constructor for TaskList if duke.txt file exists."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * @param taskArray Array of Tasks that is loaded from the duke.txt file."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public TaskList(ArrayList\u003cTask\u003e taskArray) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        this.taskArray \u003d taskArray;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * Constructor for TaskList if duke.txt file does not exists a empty Task array is created."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        this.taskArray \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public int getSize() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        return taskArray.size();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public ArrayList\u003cTask\u003e getTaskList() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        return this.taskArray;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public Task getTask(int num) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        return taskArray.get(num - 1);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public void addToRecord(Task t) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        this.taskArray.add(t);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public Task removeTask(int num) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        return this.taskArray.remove(num - 1);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public ArrayList\u003cTask\u003e findTask(String inputString) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        ArrayList\u003cTask\u003e returnedTaskList \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        for (int i \u003d 0; i \u003c taskArray.size(); i++) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            Task t \u003d taskArray.get(i);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            String[] tSplit \u003d t.getDescription().split(\" \");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            for (int j \u003d 0; j \u003c tSplit.length; j++) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Dandford"
        },
        "content": "                if(tSplit[j].equalsIgnoreCase(inputString)) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Dandford"
        },
        "content": "                    returnedTaskList.add(t);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Dandford"
        },
        "content": "                }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        return returnedTaskList;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Dandford"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Dandford": 57
    }
  },
  {
    "path": "src/main/java/Task/ToDo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Dandford"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Dandford"
        },
        "content": "public class ToDo extends Task {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    final String TASK_TYPE \u003d \"[T]\";"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * Constructor for ToDo which inherits from Task."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * @param description String that is passed from the commands containing info about the Task."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public ToDo(String description) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * Abstract method implemented from parent Task."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * @return the symbol for type of task, \"[T]\"."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public String getType() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        return TASK_TYPE;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * Abstract method implemented from parent Task."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * @return the description of the task to be placed into Storage class."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        return this.description;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * toString() method."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * @return string containing information of task to be printed out by ListCommand and Ui."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        return TASK_TYPE + super.getStatusIcon() + \" \" +  super.toString();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Dandford"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Dandford": 44
    }
  },
  {
    "path": "src/test/java/Command/AddCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Dandford"
        },
        "content": "package duke.test.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import duke.command.AddCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import duke.core.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import duke.core.Storage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import duke.helper.DukeException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Dandford"
        },
        "content": "public class AddCommandTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public ByteArrayOutputStream modifiedOut \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    private final PrintStream originalOut \u003d System.out;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public AddCommandTest(){"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        System.setOut(new PrintStream(modifiedOut));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public void addCommandTest() throws DukeException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        String printedAssert \u003d \"Got it. I\u0027ve added this task: \\n  [T]\" + \"[\" + \"\\u2718\" + \"]\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Dandford"
        },
        "content": "                              + \"borrow book\\nNow you have 1 tasks in the list.\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        Command a \u003d new AddCommand(\"todo borrow book\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        TaskList tl \u003d new TaskList(new ArrayList\u003cTask\u003e());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        a.execute(tl ,new Ui() , new Storage());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        assertEquals(printedAssert,modifiedOut.toString().trim());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Dandford"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Dandford": 34
    }
  },
  {
    "path": "src/test/java/Core/ParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Dandford"
        },
        "content": "package duke.test.Core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import duke.command.AddCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import duke.command.DoneCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import duke.command.ListCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import duke.command.DeleteCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import duke.core.Parser;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import duke.helper.DukeException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Dandford"
        },
        "content": "public class ParserTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public void parserParseTestAdd() throws DukeException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        String addToDo \u003d \"todo borrow book\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        Command c \u003d Parser.parse(addToDo);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        assertTrue(c instanceof AddCommand);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public void parserParseTestDone() throws DukeException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        String addDone \u003d \"done 3\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        Command c \u003d Parser.parse(addDone);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        assertTrue(c instanceof DoneCommand);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public void parserParseTestDelete() throws DukeException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        String addDelete \u003d \"delete 3\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        Command c \u003d Parser.parse(addDelete);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        assertTrue(c instanceof DeleteCommand);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public void parserParseTestList() throws DukeException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        String addList \u003d \"list\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        Command c \u003d Parser.parse(addList);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        assertTrue(c instanceof ListCommand);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public void parserParseTest_exceptionThrown() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            String testError \u003d \"Blah\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            assertEquals(testError, Parser.parse(testError));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            fail(); // the test should not reach this line"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            assertEquals(\"\\u2639 \" + \"OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\", e.getMessage());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Dandford"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Dandford": 57
    }
  },
  {
    "path": "src/test/java/Task/DeadlineTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Dandford"
        },
        "content": "package duke.test.Task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import duke.helper.DateTimeHelper;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import duke.helper.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Dandford"
        },
        "content": "public class DeadlineTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public void deadlineTypeTest_Success() throws DukeException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        String d \u003d \"deadline return book /by 2019-09-17 0900\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        LocalDateTime ldt \u003d DateTimeHelper.formatInput(\"2019-09-17 0900\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        Deadline deadL \u003d new Deadline(\"return book\", ldt);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        assertEquals(\"[D]\", deadL.getType());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public void deadlineGetDescription_Success() throws DukeException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        String d \u003d \"deadline return book /by 2019-09-17 0900\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        LocalDateTime ldt \u003d DateTimeHelper.formatInput(\"2019-09-17 0900\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        Deadline deadL \u003d new Deadline(\"return book\", ldt);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        assertEquals(\"return book|\" + DateTimeHelper.formatOutput(ldt), deadL.getDescription());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public void deadlineToString_Success() throws DukeException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        String d \u003d \"deadline return book /by 2019-09-17 0900\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        String assertD \u003d \"[D]\" + \"[\" + \"\\u2718\" + \"] return book (by: 2019-09-17 0900)\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        LocalDateTime ldt \u003d DateTimeHelper.formatInput(\"2019-09-17 0900\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        Deadline deadL \u003d new Deadline(\"return book\", ldt);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        assertEquals(assertD, deadL.toString());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Dandford"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Dandford": 38
    }
  },
  {
    "path": "src/test/java/Task/EventTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Dandford"
        },
        "content": "package duke.test.Task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import duke.helper.DateTimeHelper;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import duke.helper.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Dandford"
        },
        "content": "public class EventTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public void eventTypeTest_Success() throws DukeException {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        String d \u003d \"event sing song /at 2019-09-17 0900\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        LocalDateTime ldt \u003d DateTimeHelper.formatInput(\"2019-09-17 0900\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        Event eve \u003d new Event(\"sing song\", ldt);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        assertEquals(\"[E]\", eve.getType());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public void eventGetDescription_Success() throws DukeException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        String d \u003d \"event sing song /at 2019-09-17 0900\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        LocalDateTime ldt \u003d DateTimeHelper.formatInput(\"2019-09-17 0900\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        Event eve \u003d new Event(\"sing song\", ldt);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        assertEquals(\"sing song|\" + DateTimeHelper.formatOutput(ldt), eve.getDescription());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public void eventToString_Success() throws DukeException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        String d \u003d \"event sing song /at 2019-09-17 0900\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        String assertE \u003d \"[E]\" + \"[\" + \"\\u2718\" + \"] sing song (at: 2019-09-17 0900)\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        LocalDateTime ldt \u003d DateTimeHelper.formatInput(\"2019-09-17 0900\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        Event eve \u003d new Event(\"sing song\", ldt);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        assertEquals(assertE, eve.toString());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Dandford"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Dandford": 37
    }
  },
  {
    "path": "src/test/java/Task/ToDoTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Dandford"
        },
        "content": "package duke.test.Task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import duke.task.ToDo;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import duke.helper.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Dandford"
        },
        "content": "public class ToDoTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public void todoTypeTest_Success() throws DukeException {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        String d \u003d \"todo borrow book\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        ToDo td \u003d new ToDo(\"borrow book\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        assertEquals(\"[T]\", td.getType());"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public void todoGetDescription_Success() throws DukeException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        String d \u003d \"todo borrow book\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        ToDo td \u003d new ToDo(\"borrow book\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        assertEquals(\"borrow book\", td.getDescription());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public void todoToString_Success() throws DukeException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        String d \u003d \"todo borrow book\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        String assertE \u003d \"[T]\" + \"[\" + \"\\u2718\" + \"] borrow book\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        ToDo td \u003d new ToDo(\"borrow book\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        assertEquals(assertE, td.toString());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Dandford"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Dandford": 31
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Dandford"
        },
        "content": "todo borrow book"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Dandford"
        },
        "content": "deadline return book /by Sunday"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Dandford"
        },
        "content": "event project meeting /at Mon 2-4pm"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Dandford"
        },
        "content": "list"
      }
    ],
    "authorContributionMap": {
      "Dandford": 4
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Dandford"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Dandford"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Dandford"
        },
        "content": "if not exist ..\\bin mkdir ..\\bin"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Dandford"
        },
        "content": "REM delete output from previous run"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Dandford"
        },
        "content": "del ACTUAL.TXT"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Dandford"
        },
        "content": "REM compile the code into the bin folder"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Dandford"
        },
        "content": "javac  -cp ..\\src -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Dandford"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    exit /b 1"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Dandford"
        },
        "content": ")"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Dandford"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Dandford"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Dandford"
        },
        "content": "java -classpath ..\\bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Dandford"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Dandford"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT"
      }
    ],
    "authorContributionMap": {
      "Dandford": 21
    }
  }
]
