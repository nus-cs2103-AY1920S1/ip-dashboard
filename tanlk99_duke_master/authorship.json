[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "group \u0027seedu.duke\u0027"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    // Change this to your main class."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    mainClassName \u003d \"duke.Duke\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    archiveVersion \u003d \"0.1.3\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "task runTests(type:Exec) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    workingDir \u003d \"text-ui-test\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    commandLine \u003d \"./runtest.sh\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "test {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "run {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tanlk99": 27,
      "-": 19
    }
  },
  {
    "path": "gradlew.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "@rem Copyright 2015 the original author or authors."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "@rem Licensed under the Apache License, Version 2.0 (the \"License\");"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "@rem you may not use this file except in compliance with the License."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "@rem You may obtain a copy of the License at"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "@rem      https://www.apache.org/licenses/LICENSE-2.0"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "@rem Unless required by applicable law or agreed to in writing, software"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "@rem distributed under the License is distributed on an \"AS IS\" BASIS,"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "@rem WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "@rem See the License for the specific language governing permissions and"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "@rem limitations under the License."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "@if \"%DEBUG%\" \u003d\u003d \"\" @echo off"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "@rem ##########################################################################"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "@rem  Gradle startup script for Windows"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "@rem ##########################################################################"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Set local scope for the variables with windows NT shell"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%OS%\"\u003d\u003d\"Windows_NT\" setlocal"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "set DIRNAME\u003d%~dp0"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%DIRNAME%\" \u003d\u003d \"\" set DIRNAME\u003d."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "set APP_BASE_NAME\u003d%~n0"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "set APP_HOME\u003d%DIRNAME%"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "set DEFAULT_JVM_OPTS\u003d\"-Xmx64m\" \"-Xms64m\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Find java.exe"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "if defined JAVA_HOME goto findJavaFromJavaHome"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "set JAVA_EXE\u003djava.exe"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "%JAVA_EXE% -version \u003eNUL 2\u003e\u00261"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%ERRORLEVEL%\" \u003d\u003d \"0\" goto init"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "echo."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "echo ERROR: JAVA_HOME is not set and no \u0027java\u0027 command could be found in your PATH."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "echo."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "echo Please set the JAVA_HOME variable in your environment to match the"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "echo location of your Java installation."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "goto fail"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ":findJavaFromJavaHome"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "set JAVA_HOME\u003d%JAVA_HOME:\"\u003d%"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "set JAVA_EXE\u003d%JAVA_HOME%/bin/java.exe"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "if exist \"%JAVA_EXE%\" goto init"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "echo."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "echo."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "echo Please set the JAVA_HOME variable in your environment to match the"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "echo location of your Java installation."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "goto fail"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ":init"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Get command-line arguments, handling Windows variants"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "if not \"%OS%\" \u003d\u003d \"Windows_NT\" goto win9xME_args"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ":win9xME_args"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Slurp the command line arguments."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "set CMD_LINE_ARGS\u003d"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "set _SKIP\u003d2"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ":win9xME_args_slurp"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "if \"x%~1\" \u003d\u003d \"x\" goto execute"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "set CMD_LINE_ARGS\u003d%*"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ":execute"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Setup the command line"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "set CLASSPATH\u003d%APP_HOME%\\gradle\\wrapper\\gradle-wrapper.jar"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Execute Gradle"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "\"%JAVA_EXE%\" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% \"-Dorg.gradle.appname\u003d%APP_BASE_NAME%\" -classpath \"%CLASSPATH%\" org.gradle.wrapper.GradleWrapperMain %CMD_LINE_ARGS%"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ":end"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "@rem End local scope for the variables with windows NT shell"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%ERRORLEVEL%\"\u003d\u003d\"0\" goto mainEnd"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ":fail"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "rem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "rem the _cmd.exe /c_ return code!"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "if  not \"\" \u003d\u003d \"%GRADLE_EXIT_CONSOLE%\" exit 1"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "exit /b 1"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ":mainEnd"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%OS%\"\u003d\u003d\"Windows_NT\" endlocal"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ":omega"
      }
    ],
    "authorContributionMap": {
      "tanlk99": 17,
      "-": 83
    }
  },
  {
    "path": "src/main/java/duke/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import duke.util.Parser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import duke.util.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import duke.util.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import duke.util.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tanlk99"
        },
        "content": " * Duke is an interactive task scheduler. Users can interact with Duke through its command-line interface."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tanlk99"
        },
        "content": " * Duke can add tasks, delete tasks and mark tasks as complete. Duke caches its task list at default location"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tanlk99"
        },
        "content": " * \"[project root]/data/duke-cache.txt\"."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tanlk99"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    private Parser parser;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    private TaskList taskList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * Creates a new Duke instance and initializes Duke\u0027s utility classes."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * @param   filePath    Location of the cache file"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    public Duke(String filePath) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        parser \u003d new Parser();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            storage \u003d new Storage(filePath);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            storage.createCacheIfNotExists();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            taskList \u003d new TaskList(storage.readCache());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            ui.showLoadingError();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * Initializes the command-line interface."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    private void init() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        ui.showGreetings();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        Scanner sc \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        while (sc.hasNext()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "                String rawInput \u003d sc.nextLine();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "                Command parsedCommand \u003d parser.parseInput(rawInput);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "                parsedCommand.execute(storage, ui, taskList);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "                if (parsedCommand.terminate()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "                    return;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "                }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            } catch (DukeException e) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "                ui.printHorizontalLine();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "                ui.formatLine(\"Sorry! \" + e);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "                ui.printHorizontalLine();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * Starts up a new Duke instance."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        new Duke(\"data/duke-cache.txt\").init();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tanlk99": 67,
      "-": 4
    }
  },
  {
    "path": "src/main/java/duke/command/AddCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import duke.util.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import duke.util.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import duke.util.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tanlk99"
        },
        "content": " * Represents a command to add a task to the task list."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tanlk99"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    private Task toAdd;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * Creates a new AddCommand with a task to add."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * @param   toAdd   Task object to add to task list"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    public AddCommand(Task toAdd) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        this.toAdd \u003d toAdd;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * Indicates whether Duke needs to exit after this command."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * AddCommand instances will always return false."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * @return True if Duke needs to terminate"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    public boolean terminate() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * Adds the task to the task list."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * @param   storage     A {@link Storage} object to cache task list"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * @param   ui          A {@link Ui} object to display Duke\u0027s output"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * @param   taskList    A {@link TaskList} object which stores the task list"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    public void execute(Storage storage, Ui ui, TaskList taskList) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        taskList.addNewTask(toAdd);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        ui.printHorizontalLine();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        ui.formatLine(\"Got it. I\u0027ve added this task:\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        ui.formatLine(\"  \" + toAdd);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        ui.formatLine(\"Now you have \" + taskList.getSize() + \" task\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "                + (taskList.getSize() \u003d\u003d 1 ? \"\" : \"s\") + \" in the list.\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            storage.writeCache(taskList);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            ui.formatLine(\"Sorry! I was unable to save this update in storage. I\u0027ll try again next time.\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        ui.printHorizontalLine();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tanlk99": 58
    }
  },
  {
    "path": "src/main/java/duke/command/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import duke.util.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import duke.util.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import duke.util.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tanlk99"
        },
        "content": " * Represents a command given by the user. Can have a variety of functions,"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tanlk99"
        },
        "content": " * including exiting, adding tasks and deleting tasks."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tanlk99"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * Indicates whether Duke needs to exit after this command."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * @return True if Duke needs to terminate"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    public abstract boolean terminate();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * Executes the command."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * @param   storage     A {@link Storage} object to cache task list"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * @param   ui          A {@link Ui} object to display Duke\u0027s output"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * @param   taskList    A {@link TaskList} object which stores the task list"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    public abstract void execute(Storage storage, Ui ui, TaskList taskList) throws DukeException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tanlk99": 28
    }
  },
  {
    "path": "src/main/java/duke/command/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import duke.util.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import duke.util.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import duke.util.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tanlk99"
        },
        "content": " * Represents a command to delete a task in the task list."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tanlk99"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * Creates a new DeleteCommand."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * @param   index   Index of the task to delete"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    public DeleteCommand(int index) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * Indicates whether Duke needs to exit after this command."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * DeleteCommand instances will always return false."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * @return True if Duke needs to terminate"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    public boolean terminate() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * Deletes the task given by \u003ci\u003eindex\u003c/i\u003e."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * @param   storage     A {@link Storage} object to cache task list"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * @param   ui          A {@link Ui} object to display Duke\u0027s output"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * @param   taskList    A {@link TaskList} object which stores the task list"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * @throws  DukeException   If index is invalid"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    public void execute(Storage storage, Ui ui, TaskList taskList) throws DukeException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        if (index \u003c\u003d 0 || index \u003e taskList.getSize()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            throw new DukeException(\"That is not a valid task number.\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        ui.printHorizontalLine();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        ui.formatLine(\"Noted. I\u0027ve removed this task.\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        Task toRemove \u003d taskList.getTask(index);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        taskList.deleteTask(index);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        ui.formatLine(\"  \" + toRemove);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        ui.formatLine(\"Now you have \" + taskList.getSize() + \" task\""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "                + (taskList.getSize() \u003d\u003d 1 ? \"\" : \"s\") + \" in the list.\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            storage.writeCache(taskList);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            ui.formatLine(\"Sorry! I was unable to save this update in storage. I\u0027ll try again next time.\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        ui.printHorizontalLine();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tanlk99": 65
    }
  },
  {
    "path": "src/main/java/duke/command/DoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import duke.util.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import duke.util.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import duke.util.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tanlk99"
        },
        "content": " * Represents a command to mark a task in the task list as done."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tanlk99"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "public class DoneCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * Creates a new DoneCommand."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * @param   index   Index of task to mark as done"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    public DoneCommand(int index) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * Indicates whether Duke needs to exit after this command."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * DoneCommand instances will always return false."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * @return True if Duke needs to terminate"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    public boolean terminate() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * Marks the task given by \u003ci\u003eindex\u003c/i\u003e as done."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * @param   storage     A {@link Storage} object to cache task list"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * @param   ui          A {@link Ui} object to display Duke\u0027s output"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * @param   taskList    A {@link TaskList} object which stores the task list"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * @throws  DukeException   If index is invalid"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    public void execute(Storage storage, Ui ui, TaskList taskList) throws DukeException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        if (index \u003c\u003d 0 || index \u003e taskList.getSize()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            throw new DukeException(\"That is not a valid task number.\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        taskList.markTaskAsDone(index);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        ui.printHorizontalLine();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        ui.formatLine(\"Nice! I\u0027ve marked this task as done:\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        ui.formatLine(\"  \" + taskList.getTask(index));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            storage.writeCache(taskList);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            ui.formatLine(\"Sorry! I was unable to save this update in storage. I\u0027ll try again next time.\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        ui.printHorizontalLine();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tanlk99": 60
    }
  },
  {
    "path": "src/main/java/duke/command/ExitCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import duke.util.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import duke.util.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import duke.util.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tanlk99"
        },
        "content": " * Represents a command to quit the system."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tanlk99"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * Indicates whether Duke needs to exit after this command."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * ExitCommand instances will always return true."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * @return True if Duke needs to terminate"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    public boolean terminate() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * Prints Duke\u0027s goodbye message."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * @param   storage     A {@link Storage} object to cache task list"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * @param   ui          A {@link Ui} object to display Duke\u0027s output"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * @param   taskList    A {@link TaskList} object which stores the task list"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    public void execute(Storage storage, Ui ui, TaskList taskList) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        ui.printHorizontalLine();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        ui.formatLine(\"Bye. Hope to see you again soon!\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        ui.printHorizontalLine();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tanlk99": 33
    }
  },
  {
    "path": "src/main/java/duke/command/FindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import duke.util.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import duke.util.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import duke.util.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tanlk99"
        },
        "content": " * Represents a command to search for all tasks in the task list with descriptions containing a string."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tanlk99"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    private String filter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * Creates a new FindCommand."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * @param filter    String to search for"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    public FindCommand(String filter) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        this.filter \u003d filter;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * Indicates whether Duke needs to exit after this command."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * FindCommand instances will always return false."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * @return True if Duke needs to terminate"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    public boolean terminate() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * Finds all tasks with descriptions containing the filter and lists them."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * @param   storage     A {@link Storage} object to cache task list"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * @param   ui          A {@link Ui} object to display Duke\u0027s output"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * @param   taskList    A {@link TaskList} object which stores the task list"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    public void execute(Storage storage, Ui ui, TaskList taskList) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        ArrayList\u003cInteger\u003e matchIndices \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        for (int index \u003d 1; index \u003c\u003d taskList.getSize(); index++) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            if (taskList.taskDescriptionContains(index, filter)) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "                matchIndices.add(index);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        ui.printHorizontalLine();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        if (matchIndices.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            ui.formatLine(\"There were no tasks in the list that matched your search term.\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            ui.formatLine(\"Here are the matching tasks in your list:\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            for (int index : matchIndices) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "                ui.formatLine(index + \".\" + taskList.getTask(index));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        ui.printHorizontalLine();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tanlk99": 61
    }
  },
  {
    "path": "src/main/java/duke/command/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import duke.util.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import duke.util.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import duke.util.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tanlk99"
        },
        "content": " * Represents a command to list all tasks in the task list."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tanlk99"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * Indicates whether Duke needs to exit after this command."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * ListCommand instances will always return false."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * @return True if Duke needs to terminate"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    public boolean terminate() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * Lists all tasks in the task list."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * @param   storage     A {@link Storage} object to cache task list"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * @param   ui          A {@link Ui} object to display Duke\u0027s output"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * @param   taskList    A {@link TaskList} object which stores the task list"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    public void execute(Storage storage, Ui ui, TaskList taskList) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        ui.printHorizontalLine();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        if (taskList.getSize() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            ui.formatLine(\"You have no tasks right now.\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            ui.formatLine(\"Here are the tasks in your list:\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            for (int i \u003d 1; i \u003c\u003d taskList.getSize(); i++) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "                ui.formatLine(i + \".\" + taskList.getTask(i));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        ui.printHorizontalLine();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tanlk99": 40
    }
  },
  {
    "path": "src/main/java/duke/exception/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tanlk99"
        },
        "content": " * Exception class for Duke. Meant to be thrown as an internal exception and"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tanlk99"
        },
        "content": " * must be caught to be thrown in a method."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tanlk99"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    private String message;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * Creates a new DukeException."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * @param   message The error message to display"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    public DukeException(String message) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        this.message \u003d message;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        return message;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tanlk99": 24
    }
  },
  {
    "path": "src/main/java/duke/task/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import java.text.DateFormat;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tanlk99"
        },
        "content": " * Represents a deadline."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tanlk99"
        },
        "content": " * Deadline have a date associated with them, and can be marked as done."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tanlk99"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    protected String timeString;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    protected Calendar time;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    protected boolean hasCalendar;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * Creates a new Deadline instance using a string to represent time."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * @param   description Description of the deadline"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * @param   timeString  A String describing the due date"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    public Deadline(String description, String timeString) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        this.timeString \u003d timeString;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        hasCalendar \u003d false;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * Creates a new Deadline instance using a {@link Calendar} to represent time."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * @param   description Description of the deadline"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * @param   time  A {@link Calendar} describing the due data"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    public Deadline(String description, Calendar time) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        hasCalendar \u003d true;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    private String getTime() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        if (hasCalendar) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            DateFormat dateFormat \u003d new SimpleDateFormat(\"dd-MM-yyyy HH:mm\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            return dateFormat.format(time.getTime());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            return timeString;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        return \"[D]\" + super.toString() + \" (by: \" + getTime() + \")\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tanlk99": 53
    }
  },
  {
    "path": "src/main/java/duke/task/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import java.text.DateFormat;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tanlk99"
        },
        "content": " * Represents a future event."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tanlk99"
        },
        "content": " * Events have a date associated with them, and can be marked as complete."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tanlk99"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    protected String timeString;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    protected Calendar time;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    protected boolean hasCalendar;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * Creates a new Event instance using a string to represent time."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * @param   description Description of the event"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * @param   timeString  A String describing the time of the event"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    public Event(String description, String timeString) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        this.timeString \u003d timeString;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        hasCalendar \u003d false;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * Creates a new Event instance using a {@link Calendar} to represent time."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * @param   description Description of the event"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * @param   time  A {@link Calendar} describing the time of the event"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    public Event(String description, Calendar time) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        hasCalendar \u003d true;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    private String getTime() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        if (hasCalendar) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            DateFormat dateFormat \u003d new SimpleDateFormat(\"dd-MM-yyyy HH:mm\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            return dateFormat.format(time.getTime());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            return timeString;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        return \"[E]\" + super.toString() + \" (at: \" + getTime() + \")\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tanlk99": 53
    }
  },
  {
    "path": "src/main/java/duke/task/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tanlk99"
        },
        "content": " * Represents a task in the task list."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tanlk99"
        },
        "content": " * Can be marked as done."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tanlk99"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "public abstract class Task implements Serializable {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * Creates a new Task."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * New tasks are created as incomplete."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * @param   description A description of the task"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        isDone \u003d false;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * Marks the task as done."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    public void markAsDone() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        isDone \u003d true;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * Returns the description of the task."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * @return  Description of the task"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    private String getStatusIcon() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        return (isDone ? \"[O]\" : \"[X]\"); //can\u0027t display unicode"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        return getStatusIcon() + \" \" + description;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tanlk99": 48
    }
  },
  {
    "path": "src/main/java/duke/task/ToDo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tanlk99"
        },
        "content": " * Represents a to-do task."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tanlk99"
        },
        "content": " * Todos can be marked as done."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tanlk99"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "public class ToDo extends Task {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * Creates a new ToDo instance."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * @param   description     Description of the to-do task"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    public ToDo(String description) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tanlk99": 21
    }
  },
  {
    "path": "src/main/java/duke/util/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "package duke.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import java.text.DateFormat;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import duke.task.ToDo;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import duke.command.AddCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import duke.command.DeleteCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import duke.command.DoneCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import duke.command.ExitCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import duke.command.FindCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import duke.command.ListCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tanlk99"
        },
        "content": " * Parses Duke\u0027s commands."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tanlk99"
        },
        "content": " *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tanlk99"
        },
        "content": " * \u003cp\u003eInterprets and converts raw input from the command line to instances of"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tanlk99"
        },
        "content": " * {@link Command} to be executed by Duke.\u003c/p\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tanlk99"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    private static final List\u003cString\u003e DATE_FORMAT_STRINGS \u003d Arrays.asList("
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        \"dd/MM/yyyy HH:mm\", \"dd-MM-yyyy HH:mm\", \"yyyy/MM/dd HH:mm\", \"yyyy-MM-dd HH:mm\","
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        \"dd/MM/yyyy\", \"dd-MM-yyyy\", \"yyyy/MM/dd\", \"yyyy-MM-dd\","
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        \"dd/MM HH:mm\", \"dd-MM HH:mm\", \"dd/MM\", \"dd-MM\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * Enumerates all task types known to the parser."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    private static enum TaskType {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        TODO(\"todo\", Optional.empty()),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        DEADLINE(\"deadline\", Optional.of(\"/by\")),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        EVENT(\"event\", Optional.of(\"/at\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        public final String commandPhrase;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        public final Optional\u003cString\u003e timeDivider;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        TaskType(String commandPhrase, Optional\u003cString\u003e timeDivider) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            this.commandPhrase \u003d commandPhrase;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            this.timeDivider \u003d timeDivider;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "         * Gets the corresponding TaskType using its command phrase."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "         */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        static TaskType getTaskType(String commandPhrase) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            Optional\u003cTaskType\u003e result \u003d Arrays.stream(TaskType.values())"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "                    .filter(t -\u003e t.commandPhrase.equals(commandPhrase))"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "                    .findFirst();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            if (!result.isPresent()) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "                throw new RuntimeException(\"Our parser encountered a fatal error.\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            return result.get();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * Interprets a command input string to create a {@link Command} object."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * Leading and trailing spaces are ignored. Below is a table of all accepted commands:"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * \u003ctable border\u003d\"1\"\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     *   \u003ctr\u003e\u003ctd\u003eCommand\u003c/td\u003e\u003ctd\u003eFunction\u003c/td\u003e\u003c/tr\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     *   \u003ctr\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     *     \u003ctd\u003etodo \u003ci\u003ename\u003c/i\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     *     \u003ctd\u003eAdd a new to-do with description \u003ci\u003ename\u003c/i\u003e to the task list.\u003c/td\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     *   \u003c/tr\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     *   \u003ctr\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     *     \u003ctd\u003edeadline \u003ci\u003ename\u003c/i\u003e /by \u003ci\u003etime\u003c/i\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     *     \u003ctd\u003eAdd a new deadline with description \u003ci\u003ename\u003c/i\u003e and due date \u003ci\u003etime\u003c/i\u003e to the task list.\u003c/td\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     *   \u003c/tr\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     *   \u003ctr\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     *     \u003ctd\u003eevent \u003ci\u003ename\u003c/i\u003e /at \u003ci\u003etime\u003c/i\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     *     \u003ctd\u003eAdd a new event with description \u003ci\u003ename\u003c/i\u003e which occurs at time \u003ci\u003etime\u003c/i\u003e to the task list.\u003c/td\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     *   \u003c/tr\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     *   \u003ctr\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     *     \u003ctd\u003elist\u003c/td\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     *     \u003ctd\u003eList all the events in order indicating their completion status, type, and time (if applicable).\u003c/td\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     *   \u003c/tr\u003e"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     *   \u003ctr\u003e"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     *     \u003ctd\u003edone \u003ci\u003eindex\u003c/i\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     *     \u003ctd\u003eMark the \u003ci\u003eindex\u003c/i\u003e-th task in the task list as complete (\u003ci\u003eindex\u003c/i\u003e must be a valid integer).\u003c/td\u003e"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     *   \u003c/tr\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     *   \u003ctr\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     *     \u003ctd\u003edelete \u003ci\u003eindex\u003c/i\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     *     \u003ctd\u003eDelete the \u003ci\u003eindex\u003c/i\u003e-th task in the task list (\u003ci\u003eindex\u003c/i\u003e must be a valid integer).\u003c/td\u003e"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     *   \u003c/tr\u003e"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     *   \u003ctr\u003e"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     *     \u003ctd\u003efind \u003ci\u003esubstring\u003c/i\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     *     \u003ctd\u003eFinds and lists all tasks with description containing \u003ci\u003esubstring\u003c/i\u003e.\u003c/td\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     *   \u003ctr\u003e"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     *     \u003ctd\u003ebye\u003c/td\u003e"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     *     \u003ctd\u003eExit Duke.\u003c/td\u003e"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     *   \u003c/tr\u003e"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * \u003c/table\u003e"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * @param   untrimmedRawInput    Raw input passed into command line"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * @return  A {@link Command} object representing the command"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * @throws  DukeException   If input is invalid (see above)"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    public Command parseInput(String untrimmedRawInput) throws DukeException {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        String rawInput \u003d untrimmedRawInput.trim();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        String commandPhrase \u003d rawInput.split(\" \", 2)[0];"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        int index;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        switch (commandPhrase) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        case \"bye\":"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        case \"list\":"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        case \"done\":"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "                index \u003d Integer.parseInt(rawInput.split(\" \", 2)[1]);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "                return new DoneCommand(index);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            } catch (NumberFormatException | ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "                throw new DukeException(\"Please use \u0027done i\u0027 to mark completion of the i-th task in the list.\");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        case \"delete\":"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "                index \u003d Integer.parseInt(rawInput.split(\" \", 2)[1]);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "                return new DeleteCommand(index);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            } catch (NumberFormatException | ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "                throw new DukeException(\"Please use \u0027delete i\u0027 to delete the i-th task in the list.\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        case \"find\":"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            if (!rawInput.contains(\" \")) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "                throw new DukeException(\"Your search string cannot be empty. To see all tasks, use \\\"list\\\" instead.\");"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            return new FindCommand(rawInput.split(\" \", 2)[1]);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        case \"todo\": //Fallthrough"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        case \"event\": //Fallthrough"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        case \"deadline\":"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            if (!rawInput.contains(\" \")) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "                throw new DukeException(\"The description of a \" + commandPhrase + \" cannot be empty.\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            String rawTaskDescription \u003d rawInput.split(\" \", 2)[1];"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            TaskType taskType \u003d TaskType.getTaskType(commandPhrase);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            return new AddCommand(parseTask(rawTaskDescription, taskType));"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            throw new DukeException(\"I don\u0027t understand that command.\");"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * Interprets a command to add a task and creates the corresponding {@link Task} object."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * @param   rawTaskDescription    Raw description of task passed to command line"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * @return  A Task object to add to the task list"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * @throws  DukeException   If task description or time is invalid"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    private Task parseTask(String rawTaskDescription, TaskType taskType) throws DukeException {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        if (taskType.timeDivider.isPresent()) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            return parseTimedTask(rawTaskDescription, taskType);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            return parseUntimedTask(rawTaskDescription, taskType);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * Interprets a command to add a timed task and creates the corresponding {@link Task} object."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * Timed tasks include {@link Event} and {@link Deadline}."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * @param   rawTaskDescription    Raw description of task passed to command line"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * @return  A Task object to add to the task list"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * @throws  DukeException   If task description or time is invalid"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    private Task parseTimedTask(String rawTaskDescription, TaskType taskType) throws DukeException {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        String divider \u003d taskType.timeDivider.get();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        String command \u003d taskType.commandPhrase;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        if (!rawTaskDescription.contains(\" \" + divider + \" \")) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            throw new DukeException(\"Please specify the \" + command + \" using \" + divider"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "                    + \" (with spaces preceding and following).\");"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        String taskDescription \u003d rawTaskDescription.split(\" \" + divider + \" \", 2)[0].trim();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        String rawTaskTime \u003d rawTaskDescription.split(\" \" + divider + \" \", 2)[1].trim();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        if (taskDescription.length() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            throw new DukeException(\"The description of a \" + command + \" cannot be empty.\");"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        if (rawTaskTime.length() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            throw new DukeException(\"Please specify the \" + command + \" using \" + divider"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "                    + \" (with spaces preceding and following).\");"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        switch (taskType) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        case DEADLINE:"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "                return new Deadline(taskDescription, parseTime(rawTaskTime));"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            } catch (DukeException e) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "                assert e.getMessage().equals(\"Internal exception: no date format found\");"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "                return new Deadline(taskDescription, rawTaskTime);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        case EVENT:"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "                return new Event(taskDescription, parseTime(rawTaskTime));"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            } catch (DukeException e) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "                assert e.getMessage().equals(\"Internal exception: no date format found\");"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "                return new Event(taskDescription, rawTaskTime);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            throw new RuntimeException(\"Our parser encountered a fatal error.\"); //should not continue"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * Interprets a command to add an untimed task and creates the corresponding {@link Task} object."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * Untimed tasks include {@link Todo}."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * @param   rawTaskDescription    Raw description of task passed to command line"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * @return  A Task object to add to the task list"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * @throws  DukeException   If task description is invalid"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    private Task parseUntimedTask(String rawTaskDescription, TaskType taskType) throws DukeException {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        String taskDescription \u003d rawTaskDescription.trim();"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        if (taskDescription.length() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            throw new DukeException(\"The description of a \" + taskType.commandPhrase + \" cannot be empty.\");"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        switch (taskType) {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        case TODO:"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            return new ToDo(rawTaskDescription);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            throw new RuntimeException(\"Our parser encountered a fatal error.\"); //should not continue"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * Attempts to interpret a string representing time using a list of date formats."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * If there was no suitable format, throws a {@link DukeException}."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * @param   rawTime Substring of command representing a time"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * @return  A {@link Calendar} object if the command can be parsed"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * @throws  DukeException   If command cannot be parsed"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    private Calendar parseTime(String rawTime) throws DukeException {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        DateFormat dateFormat;"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        for (String dateFormatString : DATE_FORMAT_STRINGS) {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            dateFormat \u003d new SimpleDateFormat(dateFormatString);"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            dateFormat.setLenient(false);"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "                Date dateTime \u003d dateFormat.parse(rawTime);"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "                Calendar calendarTime \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "                calendarTime.setTime(dateTime);"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "                if (!dateFormatString.contains(\"yyyy\")) { //set year of calendar"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "                    Calendar currentTime \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "                    int currentYear \u003d currentTime.get(Calendar.YEAR);"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "                    calendarTime.set(Calendar.YEAR, currentYear);"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "                    if (calendarTime.before(currentTime)) {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "                        calendarTime.set(Calendar.YEAR, currentYear + 1);"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "                }"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "                return calendarTime;"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            } catch (ParseException ignored) {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        //no date format worked"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        throw new DukeException(\"Internal exception: no date format found\");"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tanlk99": 278
    }
  },
  {
    "path": "src/main/java/duke/util/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "package duke.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import java.io.FileInputStream;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import java.io.FileOutputStream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import java.io.ObjectInputStream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import java.io.ObjectOutputStream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tanlk99"
        },
        "content": " * Handles I/O between Duke and an external cache file. Storage instances can load the"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tanlk99"
        },
        "content": " * task list from the cache file, or write the task list to the cache file."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tanlk99"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    private String cacheAddr;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * Creates a Storage object."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * @param   cacheAddr   Relative path to cache file"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    public Storage(String cacheAddr) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        this.cacheAddr \u003d cacheAddr;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * Creates and initializes the cache file if it does not exist."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * @throws  DukeException  If creation or initialization of the cache file failed."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    public void createCacheIfNotExists() throws DukeException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            File file \u003d new File(cacheAddr);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            if (!file.exists()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "                file.createNewFile();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "                ArrayList\u003cTask\u003e emptyList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "                FileOutputStream fileOut \u003d new FileOutputStream(cacheAddr, false);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "                ObjectOutputStream objOut \u003d new ObjectOutputStream(fileOut);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "                objOut.writeObject(emptyList);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "                objOut.close();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "                fileOut.close();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            throw new DukeException(\"Could not load/create cache file.\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * Retrieves the saved task list from the cache file."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * @return  An ArrayList containing the retrieved task list"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * @throws  DukeException  If unable to read from cache file or the cache file is corrupted"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    public ArrayList\u003cTask\u003e readCache() throws DukeException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        ArrayList\u003cTask\u003e result;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            FileInputStream fileIn \u003d new FileInputStream(cacheAddr);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            ObjectInputStream objIn \u003d new ObjectInputStream(fileIn);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            ArrayList\u003cTask\u003e taskArrayList \u003d (ArrayList\u003cTask\u003e)objIn.readObject();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            objIn.close();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            fileIn.close();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            result \u003d taskArrayList;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        } catch (IOException | ClassNotFoundException e) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            System.out.println(e);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            throw new DukeException(\"Could not load cache file.\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * Writes the contents of a task list to the cache file."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * @param   taskList    TaskList to write to cache file"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * @throws  DukeException   If unable to write to cache file"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    public void writeCache(TaskList taskList) throws DukeException {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            FileOutputStream fileOut \u003d new FileOutputStream(cacheAddr, false);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            ObjectOutputStream objOut \u003d new ObjectOutputStream(fileOut);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            objOut.writeObject(taskList.getFullTaskList());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            objOut.close();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            fileOut.close();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            throw new DukeException(\"Could not write to cache file.\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tanlk99": 101
    }
  },
  {
    "path": "src/main/java/duke/util/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "package duke.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tanlk99"
        },
        "content": " * Handles all operations on the task list and tasks in the task list."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tanlk99"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    protected ArrayList\u003cTask\u003e taskList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * Initializes an empty TaskList."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        taskList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * Initializes a new TaskList with some pre-existing tasks."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * @param from      An ArrayList containing some Task objects"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    public TaskList(ArrayList\u003cTask\u003e from) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        taskList \u003d from;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * Returns the size of the task list."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * @return  Size of current task list"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    public int getSize() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        return taskList.size();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * Returns a Task object from the task list by index. If the index is invalid, this"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * method will throw an assertion error."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * @param index     1-indexed value indicating position in the task list to return"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * @return          Task object at position index"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    public Task getTask(int index) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        assert index \u003e 0 \u0026\u0026 index \u003c\u003d taskList.size();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        return taskList.get(index - 1);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * Adds a new Task to the back of the task list."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * @param toAdd     The Task object to add"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    public void addNewTask(Task toAdd) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        taskList.add(toAdd);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * Deletes the task given by index. If the index is invalid, this method will throw"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * an assertion error."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * @param index     1-indexed value indicating position of the task to delete"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    public void deleteTask(int index) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        assert index \u003e 0 \u0026\u0026 index \u003c\u003d taskList.size();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        taskList.remove(index - 1);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * Marks the task given by index as done. If the index is invalid, this method will throw"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * an assertion error."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * @param index     1-indexed value indicating position of the task to mark"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    public void markTaskAsDone(int index) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        assert index \u003e 0 \u0026\u0026 index \u003c\u003d taskList.size();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        taskList.get(index - 1).markAsDone();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * Checks if the description of a task given by index contains a given filter string."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * If the index is invalid, this method will throw an assertion error. This search is"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * case-insensitive."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * @param index     1-indexed value indicating position of the task to check"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * @param filter    The string to check"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * @return          True if task description contains filter string"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    public boolean taskDescriptionContains(int index, String filter) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        assert index \u003e 0 \u0026\u0026 index \u003c\u003d taskList.size();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        String descriptionLower \u003d taskList.get(index - 1).getDescription().toLowerCase();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        return descriptionLower.contains(filter.toLowerCase());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * Returns the entire task list. This method is intended for file storage purposes only."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * @return      An ArrayList containing the current task list"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    ArrayList\u003cTask\u003e getFullTaskList() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        return taskList;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tanlk99": 103
    }
  },
  {
    "path": "src/main/java/duke/util/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "package duke.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tanlk99"
        },
        "content": " * Handles the output done by Duke through wrapper functions."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tanlk99"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * Prints an indented long horizontal line. The length of this line is fixed."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    public void printHorizontalLine() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        formatLine(\"________________________________________\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "                + \"________________________________________\\n\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * Formats and prints a string as the output of Duke."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * Currently, this function indents the output by 4 spaces and prints it."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * @param   output  Output string to print"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    public void formatLine(String output) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        System.out.println(\"    \" + output);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * Shows Duke\u0027s standard welcome on startup."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    public void showGreetings() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        String[] greeting \u003d {\" ____        _        \","
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "                             \"|  _ \\\\ _   _| | _____ \","
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "                             \"| | | | | | | |/ / _ \\\\\","
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "                             \"| |_| | |_| |   \u003c  __/\","
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "                             \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\","
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "                             \"Hello! I\u0027m Duke.\","
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "                             \"What can I do for you?\"};"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        printHorizontalLine();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        for (String line : greeting) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            formatLine(line);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        printHorizontalLine();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * Shows an error message if loading from cache failed."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    public void showLoadingError() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        String[] apology \u003d {\"Sorry! Duke could not load up your previous task list from storage.\","
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "                            \"If this is your first time using Duke, you can ignore this message.\","
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "                            \"Starting Duke with a blank task list...\"};"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        printHorizontalLine();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        for (String line : apology) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            formatLine(line);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        printHorizontalLine();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tanlk99": 58
    }
  },
  {
    "path": "src/test/java/DummyTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "class DummyTest {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    void testArithmetic() {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        int a \u003d 2;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        int b \u003d 5;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        assertEquals(7, a + b);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        assertEquals(10, a * b);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        assertEquals(-3, a - b);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tanlk99": 14
    }
  },
  {
    "path": "src/test/java/duke/command/AddCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import duke.stubs.StorageStub;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import duke.stubs.TaskListStub;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import duke.stubs.TaskStub;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import duke.stubs.UiStub;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "class AddCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    private StorageStub storageStub;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    private UiStub uiStub;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    void initTests() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        storageStub \u003d new StorageStub();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        uiStub \u003d new UiStub();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    void testExecute_default() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        TaskListStub taskListStub \u003d new TaskListStub(5);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        TaskStub dummyTask \u003d new TaskStub(\"do dishes\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        AddCommand addCommand \u003d new AddCommand(dummyTask);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        addCommand.execute(storageStub, uiStub, taskListStub);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        assertEquals(\"LINE#Got it. I\u0027ve added this task:#  X do dishes#\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "                + \"Now you have 6 tasks in the list.#LINE#\", uiStub.getOutputString());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    void testExecute_taskListEmpty() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        TaskListStub taskListStub \u003d new TaskListStub(0);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        TaskStub dummyTask \u003d new TaskStub(\"do dishes\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        AddCommand addCommand \u003d new AddCommand(dummyTask);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        addCommand.execute(storageStub, uiStub, taskListStub);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        assertEquals(\"LINE#Got it. I\u0027ve added this task:#  X do dishes#\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "                + \"Now you have 1 task in the list.#LINE#\", uiStub.getOutputString());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    void testExecute_storageExceptionThrown() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        storageStub.setWillThrowException(true);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        TaskListStub taskListStub \u003d new TaskListStub(5);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        TaskStub dummyTask \u003d new TaskStub(\"do dishes\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        AddCommand addCommand \u003d new AddCommand(dummyTask);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        addCommand.execute(storageStub, uiStub, taskListStub);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        assertEquals(\"LINE#Got it. I\u0027ve added this task:#  X do dishes#\""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "                + \"Now you have 6 tasks in the list.#Sorry! I was unable to save \""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "                + \"this update in storage. I\u0027ll try again next time.#LINE#\", uiStub.getOutputString());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    void testExecute_taskListEmptyStorageExceptionThrown() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        storageStub.setWillThrowException(true);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        TaskListStub taskListStub \u003d new TaskListStub(0);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        TaskStub dummyTask \u003d new TaskStub(\"do dishes\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        AddCommand addCommand \u003d new AddCommand(dummyTask);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        addCommand.execute(storageStub, uiStub, taskListStub);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        assertEquals(\"LINE#Got it. I\u0027ve added this task:#  X do dishes#\""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "                + \"Now you have 1 task in the list.#Sorry! I was unable to save \""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "                + \"this update in storage. I\u0027ll try again next time.#LINE#\", uiStub.getOutputString());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tanlk99": 70
    }
  },
  {
    "path": "src/test/java/duke/command/DeleteCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import duke.stubs.StorageStub;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import duke.stubs.TaskListStub;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import duke.stubs.UiStub;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "class DeleteCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    private StorageStub storageStub;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    private UiStub uiStub;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    void initTests() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        storageStub \u003d new StorageStub();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        uiStub \u003d new UiStub();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    void testExecute_default() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        TaskListStub taskListStub \u003d new TaskListStub(5);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(3);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            deleteCommand.execute(storageStub, uiStub, taskListStub);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            assertEquals(\"LINE#Noted. I\u0027ve removed this task.#  X task3#\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "                    + \"Now you have 4 tasks in the list.#LINE#\", uiStub.getOutputString());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        } catch (DukeException e) { //shouldn\u0027t throw this exception"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            assertEquals(0, 1);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    void testExecute_taskListSmall() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        TaskListStub taskListStub \u003d new TaskListStub(2);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(2);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            deleteCommand.execute(storageStub, uiStub, taskListStub);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            assertEquals(\"LINE#Noted. I\u0027ve removed this task.#  X task2#\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "                    + \"Now you have 1 task in the list.#LINE#\", uiStub.getOutputString());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        } catch (DukeException e) { //shouldn\u0027t throw this exception"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            assertEquals(0, 1);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    void testExecute_storageExceptionThrown() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        storageStub.setWillThrowException(true);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        TaskListStub taskListStub \u003d new TaskListStub(5);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(3);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            deleteCommand.execute(storageStub, uiStub, taskListStub);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            assertEquals(\"LINE#Noted. I\u0027ve removed this task.#  X task3#\""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "                    + \"Now you have 4 tasks in the list.#Sorry! I was unable to save \""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "                    + \"this update in storage. I\u0027ll try again next time.#LINE#\", uiStub.getOutputString());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        } catch (DukeException e) { //shouldn\u0027t throw this exception"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            assertEquals(0, 1);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    void testExecute_negativeIndex() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        storageStub.setWillThrowException(true);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        TaskListStub taskListStub \u003d new TaskListStub(5);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(-1);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            deleteCommand.execute(storageStub, uiStub, taskListStub);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            assertEquals(0, 1);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        } catch (DukeException e) { //should always throw this exception"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            assertEquals(e.getMessage(), \"That is not a valid task number.\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    void testExecute_tooLargeIndex() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        storageStub.setWillThrowException(true);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        TaskListStub taskListStub \u003d new TaskListStub(5);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(9);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            deleteCommand.execute(storageStub, uiStub, taskListStub);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            assertEquals(0, 1);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        } catch (DukeException e) { //should always throw this exception"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            assertEquals(e.getMessage(), \"That is not a valid task number.\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tanlk99": 96
    }
  },
  {
    "path": "src/test/java/duke/command/DoneCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import duke.stubs.StorageStub;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import duke.stubs.TaskListStub;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import duke.stubs.UiStub;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "class DoneCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    private StorageStub storageStub;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    private UiStub uiStub;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    void initTests() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        storageStub \u003d new StorageStub();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        uiStub \u003d new UiStub();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    void testExecute_default() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        TaskListStub taskListStub \u003d new TaskListStub(5);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        DoneCommand doneCommand \u003d new DoneCommand(3);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            doneCommand.execute(storageStub, uiStub, taskListStub);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            assertEquals(\"LINE#Nice! I\u0027ve marked this task as done:#  O task3#LINE#\","
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "                    uiStub.getOutputString());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        } catch (DukeException e) { //shouldn\u0027t throw this exception"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            assertEquals(0, 1);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    void testExecute_storageExceptionThrown() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        storageStub.setWillThrowException(true);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        TaskListStub taskListStub \u003d new TaskListStub(5);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        DoneCommand doneCommand \u003d new DoneCommand(3);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            doneCommand.execute(storageStub, uiStub, taskListStub);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            assertEquals(\"LINE#Nice! I\u0027ve marked this task as done:#  O task3#Sorry! I \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "                    + \"was unable to save this update in storage. I\u0027ll try again next time.#LINE#\","
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "                    uiStub.getOutputString());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        } catch (DukeException e) { //shouldn\u0027t throw this exception"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            assertEquals(0, 1);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    void testExecute_negativeIndex() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        storageStub.setWillThrowException(true);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        TaskListStub taskListStub \u003d new TaskListStub(5);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        DoneCommand doneCommand \u003d new DoneCommand(-4);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            doneCommand.execute(storageStub, uiStub, taskListStub);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            assertEquals(0, 1);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        } catch (DukeException e) { //should always throw this exception"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            assertEquals(\"That is not a valid task number.\", e.getMessage());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    void testExecute_tooLargeIndex() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        storageStub.setWillThrowException(true);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        TaskListStub taskListStub \u003d new TaskListStub(5);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        DoneCommand doneCommand \u003d new DoneCommand(9);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            doneCommand.execute(storageStub, uiStub, taskListStub);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            assertEquals(0, 1);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        } catch (DukeException e) { //should always throw this exception"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            assertEquals(\"That is not a valid task number.\", e.getMessage());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tanlk99": 82
    }
  },
  {
    "path": "src/test/java/duke/command/ExitCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import duke.stubs.StorageStub;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import duke.stubs.TaskListStub;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import duke.stubs.UiStub;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "class ExitCommandTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    void testExecute() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        StorageStub storageStub \u003d new StorageStub();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        UiStub uiStub \u003d new UiStub();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        TaskListStub taskListStub \u003d new TaskListStub(0);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        ExitCommand exitCommand \u003d new ExitCommand();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        exitCommand.execute(storageStub, uiStub, taskListStub);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        assertEquals(\"LINE#Bye. Hope to see you again soon!#LINE#\", uiStub.getOutputString());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tanlk99": 20
    }
  },
  {
    "path": "src/test/java/duke/command/FindCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import duke.stubs.StorageStub;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import duke.stubs.TaskListStub;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import duke.stubs.UiStub;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "class FindCommandTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    private StorageStub storageStub;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    private UiStub uiStub;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    void initTests() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        storageStub \u003d new StorageStub();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        uiStub \u003d new UiStub();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    void testExecute_taskListEmpty() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        TaskListStub taskListStub \u003d new TaskListStub(0);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        FindCommand findCommand \u003d new FindCommand(\"nullity\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        findCommand.execute(storageStub, uiStub, taskListStub);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        assertEquals(\"LINE#There were no tasks in the list that matched your search term.#\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "                + \"LINE#\", uiStub.getOutputString());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    void testExecute_allMatch() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        TaskListStub taskListStub \u003d new TaskListStub(3);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        FindCommand findCommand \u003d new FindCommand(\"nullity\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        findCommand.execute(storageStub, uiStub, taskListStub);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        assertEquals(\"LINE#Here are the matching tasks in your list:#\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "                + \"1.X task1#2.X task2#3.X task3#LINE#\", uiStub.getOutputString());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    void testExecute_noneMatch() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        TaskListStub taskListStub \u003d new TaskListStub(3);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        taskListStub.setMatchType(1);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        FindCommand findCommand \u003d new FindCommand(\"nullity\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        findCommand.execute(storageStub, uiStub, taskListStub);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        assertEquals(\"LINE#There were no tasks in the list that matched your search term.#\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "                + \"LINE#\", uiStub.getOutputString());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    void testExecute_oddMatch() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        TaskListStub taskListStub \u003d new TaskListStub(3);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        taskListStub.setMatchType(2);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        FindCommand findCommand \u003d new FindCommand(\"nullity\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        findCommand.execute(storageStub, uiStub, taskListStub);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        assertEquals(\"LINE#Here are the matching tasks in your list:#\""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "                + \"1.X task1#3.X task3#LINE#\", uiStub.getOutputString());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    void testExecute_lastMatch() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        TaskListStub taskListStub \u003d new TaskListStub(3);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        taskListStub.setMatchType(3);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        FindCommand findCommand \u003d new FindCommand(\"nullity\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        findCommand.execute(storageStub, uiStub, taskListStub);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        assertEquals(\"LINE#Here are the matching tasks in your list:#\""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "                + \"3.X task3#LINE#\", uiStub.getOutputString());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tanlk99": 72
    }
  },
  {
    "path": "src/test/java/duke/command/ListCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import duke.stubs.StorageStub;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import duke.stubs.TaskListStub;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import duke.stubs.UiStub;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "class ListCommandTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    private StorageStub storageStub;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    private UiStub uiStub;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    void initTests() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        storageStub \u003d new StorageStub();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        uiStub \u003d new UiStub();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    void testExecute_taskListEmpty() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        TaskListStub taskListStub \u003d new TaskListStub(0);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        ListCommand listCommand \u003d new ListCommand();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        listCommand.execute(storageStub, uiStub, taskListStub);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        assertEquals(\"LINE#You have no tasks right now.#LINE#\", uiStub.getOutputString());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    void testExecute_taskListSizeOne() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        TaskListStub taskListStub \u003d new TaskListStub(1);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        ListCommand listCommand \u003d new ListCommand();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        listCommand.execute(storageStub, uiStub, taskListStub);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        assertEquals(\"LINE#Here are the tasks in your list:#1.X task1#LINE#\","
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "                uiStub.getOutputString());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    void testExecute_taskListMedium() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        TaskListStub taskListStub \u003d new TaskListStub(5);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        ListCommand listCommand \u003d new ListCommand();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        listCommand.execute(storageStub, uiStub, taskListStub);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        assertEquals(\"LINE#Here are the tasks in your list:#1.X task1#\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "                + \"2.X task2#3.X task3#4.X task4#5.X task5#LINE#\", uiStub.getOutputString());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tanlk99": 48
    }
  },
  {
    "path": "src/test/java/duke/stubs/StorageStub.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "package duke.stubs;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import duke.util.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import duke.util.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tanlk99"
        },
        "content": " * Simplified version of {@link duke.util.Storage Storage} that does not do any file I/O."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tanlk99"
        },
        "content": " * Can be set whether or not to throw a exception (to simulate file I/O erros)."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tanlk99"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "public class StorageStub extends Storage {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    private boolean willThrowException \u003d false;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    public StorageStub() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        super(\"nullity\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * Sets if {@link #writeCache(TaskList) writeCache} will throw a {@link duke.exception.DukeException DukeException}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * @param willThrowException    true if {@link #writeCache(TaskList) writeCache} is to throw exception"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    public void setWillThrowException(boolean willThrowException) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        this.willThrowException \u003d willThrowException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    public void writeCache(TaskList taskList) throws DukeException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        if (willThrowException) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            throw new DukeException(\"\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tanlk99": 33
    }
  },
  {
    "path": "src/test/java/duke/stubs/TaskListStub.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "package duke.stubs;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import duke.util.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tanlk99"
        },
        "content": " * Simplified version of {@link duke.util.TaskList TaskList}. TaskListStub has fixed matching patterns"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tanlk99"
        },
        "content": " * and task names. Only one task can be marked as done."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tanlk99"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "public class TaskListStub extends TaskList {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    private int taskListSize;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    private int matchType \u003d 0; //type of task indices to match"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    private int markedDonePosition \u003d -1;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * Creates a new TaskListStub with \u003ci\u003etaskListSize\u003c/i\u003e tasks in the task list."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * @param taskListSize  number of tasks in the task list"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    public TaskListStub(int taskListSize) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        this.taskListSize \u003d taskListSize;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * Sets the match type of {@link #taskDescriptionContains(int, String) taskDescription}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * List of match types used: 0 - match all, 1 - match none, 2 - match odd indices, 3 - match last"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * @param matchType type of matching to use"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    public void setMatchType(int matchType) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        this.matchType \u003d matchType;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    public Task getTask(int index) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        assert index \u003c\u003d taskListSize \u0026\u0026 index \u003e 0;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        TaskStub taskToReturn \u003d new TaskStub(\"task\" + index);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        if (index \u003d\u003d markedDonePosition) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            taskToReturn.setDone(true);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        return taskToReturn;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    public void addNewTask(Task task) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        taskListSize +\u003d 1;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    public void deleteTask(int index) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        assert index \u003c\u003d taskListSize \u0026\u0026 index \u003e 0;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        taskListSize -\u003d 1;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    public void markTaskAsDone(int index) { //assume only called once for each test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        assert index \u003c\u003d taskListSize \u0026\u0026 index \u003e 0;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        this.markedDonePosition \u003d index;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    public boolean taskDescriptionContains(int index, String filter) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        boolean returnValue;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        switch (matchType) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        case 0: //match all"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            returnValue \u003d true;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        case 1: //match none"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            returnValue \u003d false;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        case 2: //match only odd"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            returnValue \u003d (index % 2 \u003d\u003d 1);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        default: //match only index taskListSize"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            returnValue \u003d (index \u003d\u003d taskListSize);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        return returnValue;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    public int getSize() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        return taskListSize;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tanlk99": 88
    }
  },
  {
    "path": "src/test/java/duke/stubs/TaskStub.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "package duke.stubs;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tanlk99"
        },
        "content": " * Simplified version of {@link duke.task.Task Task} with a simplified toString output."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tanlk99"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "public class TaskStub extends Task {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    public TaskStub(String description) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    public void setDone(boolean isDone) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        super.isDone \u003d isDone;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        return (super.isDone ? \"O\" : \"X\") + \" \" + super.description;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tanlk99": 21
    }
  },
  {
    "path": "src/test/java/duke/stubs/UiStub.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "package duke.stubs;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import duke.util.Ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tanlk99"
        },
        "content": " * Simplified version of UI for test purposes. Instead of printing lines to"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tanlk99"
        },
        "content": " * standard output, UiStub stores its output by appending to the end of a string."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tanlk99"
        },
        "content": " * Outputs from different method calls are separated by a \u0027#\u0027 symbol."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tanlk99"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "public class UiStub extends Ui {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    private String outputString;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    public UiStub() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        outputString \u003d \"\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    public void printHorizontalLine() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        outputString +\u003d \"LINE#\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    public void formatLine(String output) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        outputString +\u003d output + \"#\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * Returns a string containing all output passed to UiStub so far."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * @return  string containing all output"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    public String getOutputString() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        return outputString;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tanlk99": 35
    }
  },
  {
    "path": "src/test/java/duke/task/DeadlineTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import java.util.GregorianCalendar;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "class DeadlineTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    void testToString_stringConstructor() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        Deadline deadlineString \u003d new Deadline(\"do dishes\", \"tomorrow\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        assertEquals(\"[D][X] do dishes (by: tomorrow)\", deadlineString.toString());"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        deadlineString.markAsDone();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        assertEquals(\"[D][O] do dishes (by: tomorrow)\", deadlineString.toString());"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    void testToString_calendarConstructor() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        Calendar calendar \u003d new GregorianCalendar(2020, Calendar.FEBRUARY, 22, 11, 30);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        Deadline deadlineCalendar \u003d new Deadline(\"do dishes\", calendar);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        assertEquals(\"[D][X] do dishes (by: 22-02-2020 11:30)\", deadlineCalendar.toString());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        deadlineCalendar.markAsDone();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        assertEquals(\"[D][O] do dishes (by: 22-02-2020 11:30)\", deadlineCalendar.toString());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tanlk99": 25
    }
  },
  {
    "path": "src/test/java/duke/task/EventTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import java.util.GregorianCalendar;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "class EventTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    void testToString_stringConstructor() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        Event eventString \u003d new Event(\"do dishes\", \"tomorrow\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        assertEquals(\"[E][X] do dishes (at: tomorrow)\", eventString.toString());"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        eventString.markAsDone();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        assertEquals(\"[E][O] do dishes (at: tomorrow)\", eventString.toString());"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    void testToString_calendarConstructor() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        Calendar calendar \u003d new GregorianCalendar(2020, Calendar.FEBRUARY, 22, 11, 30);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        Event eventCalendar \u003d new Event(\"do dishes\", calendar);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        assertEquals(\"[E][X] do dishes (at: 22-02-2020 11:30)\", eventCalendar.toString());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        eventCalendar.markAsDone();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        assertEquals(\"[E][O] do dishes (at: 22-02-2020 11:30)\", eventCalendar.toString());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tanlk99": 25
    }
  },
  {
    "path": "src/test/java/duke/task/ToDoTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "class ToDoTest {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    void testToString() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        ToDo todo \u003d new ToDo(\"do dishes\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        assertEquals(\"[T][X] do dishes\", todo.toString());"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        todo.markAsDone();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        assertEquals(\"[T][O] do dishes\", todo.toString());"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tanlk99": 14
    }
  },
  {
    "path": "text-ui-test/runtest.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "#!/usr/bin/env bash"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "# create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "if [ ! -d \"../bin\" ]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "then"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    mkdir ../bin"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "fi"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "# compile the code into the bin folder, terminates if error occurred"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "if ! javac -cp ../src -Xlint:none -d ../bin ../src/main/java/duke/*.java \\"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    ../src/main/java/duke/command/*.java ../src/main/java/duke/exception*.java \\"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    ../src/main/java/duke/task/*.java ../src/main/java/duke/util/*.java"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "then"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    echo \"********** BUILD FAILURE **********\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "fi"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "# count the number of testcases"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "testNo\u003d$( ls testcases/input* 2\u003e/dev/null -Ubad1 -- log* | wc -l )"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "for (( i \u003d 1; i \u003c\u003d testNo; i++ ))"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "do"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    java -classpath ../bin Duke \u003c testcases/input-$i \u003e temp-$i"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    diff temp-$i testcases/output-$i"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    if [ $? -eq 0 ]"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    then"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        echo \"Test result: PASSED\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    else"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        echo \"Test result: FAILED\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    fi"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    rm temp-$i"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "done"
      }
    ],
    "authorContributionMap": {
      "tanlk99": 34
    }
  }
]
