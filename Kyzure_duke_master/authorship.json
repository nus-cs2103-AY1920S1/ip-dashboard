[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "}"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "group \u0027seedu.duke\u0027"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "run {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "}"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    // Change this to your main class."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    mainClassName \u003d \"Duke\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "test {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Kyzure": 20,
      "-": 15
    }
  },
  {
    "path": "src/main/java/duke/Action.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kyzure"
        },
        "content": " * Represents the different Actions a user can do. "
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kyzure"
        },
        "content": " * This enum is also the first word which the user inputs"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kyzure"
        },
        "content": " */"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "enum Action {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    LIST, EXIT, HELP, TODO, DEADLINE, EVENT, DONE, DELETE, FIND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kyzure": 7
    }
  },
  {
    "path": "src/main/java/duke/AddCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kyzure"
        },
        "content": " * Represents an command which adds a task to the Task List."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kyzure"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "class AddCommand implements Command {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    private Task task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    public AddCommand(Task task) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        this.task \u003d task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * Executes the Add Command, which execute the addTask method from the taskList,"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * adding the task that was given when instantiating the class."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * "
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * @param uiManager Ui System which scans and prints for the User."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * @param taskList TaskList, an ArrayList which stores Tasks."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * @param storeManager Storage to serialize the TaskList into a Tasks.sav file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * @throws DukeException When there is an error serializing."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * @see Command#execute(Ui, TaskList, Storage)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    public void execute(Ui uiManager, TaskList taskList, Storage storeManager) throws DukeException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        taskList.addTask(this.task);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        uiManager.printAddTask(task, taskList.listSize());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        storeManager.store(taskList);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        "
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kyzure": 29
    }
  },
  {
    "path": "src/main/java/duke/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kyzure"
        },
        "content": " * Represents a command created by the Parser and executed by DukeManager."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kyzure"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "interface Command {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * Executes a certain command or action that is read by the Parser and is called"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * in the DukeManager class."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * "
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * \u003cp\u003eThere is 6 different classes which implements this class."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * AddCommand, DoneCommand, DeleteCommand, ListCommand, FindCommand, HelpCommand, ExitCommand"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * Each of them have different execution to this method representative to their names."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * "
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * @param uiManager Ui System which scans and print for the User."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * @param taskList TaskList, an ArrayList which stores Tasks."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * @param storeManager Storage to serialize the TaskList into a Tasks.sav file."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * @throws DukeException When a DukeException occurs"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    public void execute(Ui uiManager, TaskList taskList, Storage storeManager) throws DukeException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kyzure": 19
    }
  },
  {
    "path": "src/main/java/duke/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kyzure"
        },
        "content": " * Represents a deadline, with a given date/time/both "
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kyzure"
        },
        "content": " * which indicates when the user needs to complete it by."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Kyzure"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "class Deadline extends Task {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    private LocalDate date;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    private LocalTime time;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * Constructor for Deadline, which converts the dateTime String into "
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * a LocalDate, LocalTime or both."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * "
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * @param task A String of the user\u0027s inputted task."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * @param dateTime A String of the user\u0027s inputted date, time, or both."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * @throws DukeException When the user inputs a illegitamate date, time, both or wrong format."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    public Deadline(String task, String dateTime) throws DukeException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        super(task);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        String[] dateTimeArr \u003d dateTime.split(\" \", 2);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        if (dateTimeArr.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "                this.date \u003d LocalDate.parse(dateTimeArr[0], DATE_FORMATTER);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "                this.time \u003d null;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            } catch (Exception e) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "                    this.time \u003d LocalTime.parse(dateTimeArr[0], TIME_FORMATTER);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "                    this.date \u003d null;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "                } catch (DateTimeParseException error) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "                    throw new DukeException(\"Please enter a legitamate date, time or both\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "                } catch (Exception error) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "                    throw new DukeException(\"The format entered is wrong. Use \\\u0027help\\\u0027 \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "                            + \"for formatting styles\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "                }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "                this.date \u003d LocalDate.parse(dateTimeArr[0], DATE_FORMATTER);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "                this.time \u003d LocalTime.parse(dateTimeArr[1], TIME_FORMATTER);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            } catch (DateTimeParseException error) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "                throw new DukeException(\"Please enter a legitamate date, time or both\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            } catch (Exception error) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "                throw new DukeException(\"The format entered is wrong. Use \\\u0027help\\\u0027 \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "                        + \"for formatting styles\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * Returns a String of the deadline, which includes the date, time or both."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * "
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * @return a String of the deadline, which includes the date, time or both."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        if (this.date \u003d\u003d null) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            return \"[D]\" + super.toString() + \" (by: \" + this.time.format(TIME_FORMATTER) + \")\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        } else if (this.time \u003d\u003d null) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            return \"[D]\" + super.toString() + \" (by: \" + this.date.format(DATE_FORMATTER) + \")\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            return \"[D]\" + super.toString() + \" (by: \" + this.date.format(DATE_FORMATTER) "
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "                    + \" \" + this.time.format(TIME_FORMATTER) + \")\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kyzure": 68
    }
  },
  {
    "path": "src/main/java/duke/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kyzure"
        },
        "content": " * Represents a command which deletes a task from the Task List."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kyzure"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "class DeleteCommand implements Command {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    private Integer taskNumber;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * Constructor for Delete Command, which instantiates an Integer of the task to be deleted."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * "
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * @param taskNumber Indicates the task number as in the Task List"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    public DeleteCommand(Integer taskNumber) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        this.taskNumber \u003d taskNumber;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * Executes the Delete Command, which deletes a task from the taskList"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * The deletion by the taskList, has to be 0 base, hence our decrement in this.taskNumber"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * "
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * @param uiManager Ui System which scans and prints for the User."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * @param taskList TaskList, an ArrayList which stores Tasks."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * @param storeManager Storage to serialize the TaskList into a Tasks.sav file."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * @see TaskList#deleteTask(int, Ui)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * @see Command#execute(Ui, TaskList, Storage)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    public void execute(Ui uiManager, TaskList taskList, Storage storeManager) throws DukeException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        Task task \u003d taskList.deleteTask(this.taskNumber - 1);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        storeManager.store(taskList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        uiManager.printDelete(task, taskList.listSize());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kyzure": 32
    }
  },
  {
    "path": "src/main/java/duke/DoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kyzure"
        },
        "content": " * Represents a command which marks a task complete from the Task List."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kyzure"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "class DoneCommand implements Command {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    private Integer taskNumber;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * Constructor for the Done Command, which instantiates an Integer of the task to be completed."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * @param taskNumber The specific task\u0027s index."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    public DoneCommand(Integer taskNumber) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        this.taskNumber \u003d taskNumber;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    "
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * Executes the Done Command, which completes a task from the taskList."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * The completion by the taskList, has to be 0 base, hence the decrement in this.taskNumber."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * "
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * \u003cp\u003eIf the task is already completed, then we use uiManager to print out the given situation"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * "
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * @param uiManager Ui System which scans and prints for the User."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * @param taskList TaskList, an ArrayList which stores Tasks."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * @param storeManager Storage to serialize the TaskList into a Tasks.sav file."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * @see TaskList#getTask(int, Ui)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * @see Command#execute(Ui, TaskList, Storage)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    public void execute(Ui uiManager, TaskList taskList, Storage storeManager) throws DukeException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        Task task \u003d taskList.getTask(this.taskNumber - 1);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        if (task.hasCompleted()) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            uiManager.printAlreadyCompleted();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            task.setCompleted(true);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            storeManager.store(taskList);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            uiManager.printDone(task);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kyzure": 38
    }
  },
  {
    "path": "src/main/java/duke/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kyzure"
        },
        "content": " * This program is Duke, which stores task for users."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kyzure"
        },
        "content": " * "
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kyzure"
        },
        "content": " * @author Timothy Yu Zhiwen"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Kyzure"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * Runs the main for the program, Duke."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * "
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * @param args For main"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * @throws DukeException Certain methods throws DukeException"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    public static void main("
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            String[] args) throws DukeException {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        DukeManager dukeManager \u003d new DukeManager();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        dukeManager.initializeDuke();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kyzure": 18
    }
  },
  {
    "path": "src/main/java/duke/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kyzure"
        },
        "content": " * Represents an Exception that is solely for this program."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kyzure"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "class DukeException extends Exception {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * Constructor for DukeException."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * "
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * @param message Message of the error."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    public DukeException(String message) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kyzure": 13
    }
  },
  {
    "path": "src/main/java/duke/DukeManager.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kyzure"
        },
        "content": " * Represents a manager to manage all of the different classes, and act\u0027s as the"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kyzure"
        },
        "content": " * initialization stage of the program."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kyzure"
        },
        "content": " */"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "class DukeManager {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    private Ui uiManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    private Storage storeManager;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    private Parser parseManager;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    private TaskList taskList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    private boolean isActive;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    "
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * Constructor for DukeManager, which instantiates several other classes as well."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * "
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * @throws DukeException If there is an error retrieving information."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    public DukeManager() throws DukeException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        this.uiManager \u003d new Ui();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        this.storeManager \u003d new Storage(\"Tasks.sav\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        this.parseManager \u003d new Parser();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        this.taskList \u003d this.storeManager.retrieve();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        this.isActive \u003d false;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * Initializes the Duke program, and recursively reads input"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * and produces and output, unless encountered with a DukeException."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * "
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * \u003cp\u003eThere are 8 different Commands the user can input:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * list, done, delete, todo, deadline, event, help, bye."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * This method will end when the user inputs \u0027bye\u0027 or anything else which causes a DukeException."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * "
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * @throws DukeException When parsing user\u0027s input and executing commands."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    public void initializeDuke() throws DukeException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        uiManager.printWelcome();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        this.isActive \u003d true;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        while (isActive) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            uiManager.printWhatToDo();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            String input \u003d uiManager.readLine();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            Command command \u003d parseManager.parseToCommand(input);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            command.execute(this.uiManager, this.taskList, this.storeManager);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            if (command instanceof ExitCommand) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "                isActive \u003d false;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            uiManager.printEmpty();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kyzure": 50
    }
  },
  {
    "path": "src/main/java/duke/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kyzure"
        },
        "content": " * Represents an Event, with a given date/time/both which indicates when the event will happen."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kyzure"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "class Event extends Task {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    private LocalDate date;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    private LocalTime time;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * Constructor for Event, which converts the dateTime String into a LocalDate, LocalTime or both."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * "
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * @param task A String of the user\u0027s inputted task."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * @param dateTime A String of the user\u0027s inputted date, time, or both."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * @throws DukeException When the user inputs a illegitamate date, time, both or wrong format."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    public Event(String task, String dateTime) throws DukeException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        super(task);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        String[] dateTimeArr \u003d dateTime.split(\" \", 2);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        if (dateTimeArr.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "                this.date \u003d LocalDate.parse(dateTimeArr[0], DATE_FORMATTER);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            } catch (Exception e) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "                    this.time \u003d LocalTime.parse(dateTimeArr[0], TIME_FORMATTER);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "                } catch (DateTimeParseException error) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "                    throw new DukeException(\"Please enter a legitamate date, time or both\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "                } catch (Exception error) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "                    throw new DukeException(\"The format entered is wrong. Use \\\u0027help\\\u0027 \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "                            + \"for formatting styles\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "                }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "                this.date \u003d LocalDate.parse(dateTimeArr[0], DATE_FORMATTER);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "                this.time \u003d LocalTime.parse(dateTimeArr[1], TIME_FORMATTER);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            } catch (DateTimeParseException error) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "                throw new DukeException(\"Please enter a legitamate date, time or both\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            } catch (Exception error) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "                throw new DukeException(\"The format entered is wrong. Use \\\u0027help\\\u0027 \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "                        + \"for formatting styles\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * Returns a String of the Event, which includes the date, time or both."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * "
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * @return a String of the Event, which includes the date, time or both."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        if (this.date \u003d\u003d null) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            return \"[E]\" + super.toString() + \" (at: \" + this.time.format(TIME_FORMATTER) + \")\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        } else if (this.time \u003d\u003d null) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            return \"[E]\" + super.toString() + \" (at: \" + this.date.format(DATE_FORMATTER) + \")\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            return \"[E]\" + super.toString() + \" (at: \" + this.date.format(DATE_FORMATTER) "
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "                    + \" \" + this.time.format(TIME_FORMATTER) + \")\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kyzure": 64
    }
  },
  {
    "path": "src/main/java/duke/ExitCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kyzure"
        },
        "content": " * Represents a command which exits the program."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kyzure"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "class ExitCommand implements Command {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * Executes the Exit Command, which exits the program."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * "
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * \u003cp\u003eIt calls uiManager to print out the exit, and the instance of this class will"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * stop the recursion in DukeManager."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * "
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * @param uiManager Ui System which scans and prints for the User."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * @param taskList TaskList, an ArrayList which stores Tasks. - Not in use."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * @param storeManager Storage to serialize the TaskList into a Tasks.sav file. - Not in use."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * @see DukeManager#initializeDuke()"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * @see Command#execute(Ui, TaskList, Storage)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    public void execute(Ui uiManager, TaskList taskList, Storage storeManager) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        uiManager.exit();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kyzure": 21
    }
  },
  {
    "path": "src/main/java/duke/FindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kyzure"
        },
        "content": " * Represents a command for finding a particular String regardless of Capitalization."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kyzure"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "class FindCommand implements Command {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    private String findString;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * Constructor for FindCommand."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * @param findString The String the user wants to find."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    public FindCommand(String findString) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        this.findString \u003d findString;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * Executes the Find command to iterate through the task list for the tasks which "
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * contain the keyword the user input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * "
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * @param uiManager Ui System which scans and prints for the User."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * @param taskList TaskList, an ArrayList which stores Tasks."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * @param storeManager Storage to serialize the TaskList into a Tasks.sav file. - Not in use"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * @throws DukeException When failing to get the task."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * @see Command#execute(Ui, TaskList, Storage)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    public void execute(Ui uiManager, TaskList taskList, Storage storeManager) throws DukeException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        int index \u003d 1;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        uiManager.printFinding(this.findString);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        for (int i \u003d 0; i \u003c taskList.listSize(); i++) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            Task currTask \u003d taskList.getTask(i);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            if (checkContainsInsensitive(currTask, this.findString)) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "                uiManager.printTask(index, currTask);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "                index++;    "
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        // Print nothing found"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        if (index \u003d\u003d 1) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            uiManager.printNotFound();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * Returns a boolean whether the current iteration of the task contain the given String."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * "
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * @param task The current iteration of a Task in the task list."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * @param findString The given String to be found by the user"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * @return a boolean whether the task contains the String."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    private boolean checkContainsInsensitive(Task task, String findString) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        return task.getTaskString().toLowerCase().contains(findString.toLowerCase());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kyzure": 53
    }
  },
  {
    "path": "src/main/java/duke/HelpCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kyzure"
        },
        "content": " * Represents a command which provides help for the user - A word user guide."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kyzure"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "class HelpCommand implements Command {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * Executes the Help Command, which provides a user help, calling uiManager to print help."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * "
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * @param uiManager Ui System which scans and prints for the User."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * @param taskList TaskList, an ArrayList which stores Tasks. - Not in use."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * @param storeManager Storage to serialize the TaskList into a Tasks.sav file. - Not in use"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * @see DukeManager#initializeDuke()"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * @see Command#execute(Ui, TaskList, Storage)"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    public void execute(Ui uiManager, TaskList taskList, Storage storeManager) throws DukeException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        uiManager.printHelp();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kyzure": 18
    }
  },
  {
    "path": "src/main/java/duke/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kyzure"
        },
        "content": " * Represents a command which lists out the tasks left for the user."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kyzure"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "class ListCommand implements Command {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * Executes the List Command, which uses uiManager to list out"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * each line of the task from the taskList."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * "
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * @param uiManager Ui System which scans and prints for the User."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * @param taskList TaskList, an ArrayList which stores Tasks."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * @param storeManager Storage to serialize the TaskList into a Tasks.sav file. - Not in use"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * @see Command#execute(Ui, TaskList, Storage)"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    public void execute(Ui uiManager, TaskList taskList, Storage storeManager) throws DukeException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        if (taskList.listSize() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            uiManager.printEmptyList();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            uiManager.printListStarter();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            for (int i \u003d 0; i \u003c taskList.listSize(); i++) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "                uiManager.printTask(i + 1, taskList.getTask(i));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kyzure": 25
    }
  },
  {
    "path": "src/main/java/duke/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kyzure"
        },
        "content": " * Represents a Parse Manager, which parses the inputs given by the user, so our other classes"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kyzure"
        },
        "content": " * are able to read it with ease."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kyzure"
        },
        "content": " */"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "class Parser {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * Returns a Command, and each command created is of a different class from the user\u0027s input."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * "
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * \u003cp\u003eThere are 2 types of commands, 1-word String command, and 2-or-more-word command."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * E.g. of 1-word String: list, bye, help."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * E.g. of 2-or-more-word String, todo, deadline, event, done, delete."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * The user\u0027s input is split into 2 parts, and if it is only 1-word String, "
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * If the user inputs something that is not of the correct Input type, a DukeException is thrown."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * "
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * @param input String inputted by the user to be parsed into a Command"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * @return A Command that is executed by DukeManager"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * @throws DukeException When the user Inputs something unreadable by the program."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * @see Command#execute(Ui, TaskList, Storage)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    public Command parseToCommand(String input) throws DukeException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        String[] inputArr \u003d input.split(\" \", 2);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        Action action \u003d getAction(inputArr[0]);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        if (inputArr.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            switch (action) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            case LIST :"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "                return new ListCommand();   "
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            case EXIT :"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "                return new ExitCommand();      "
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            case HELP :"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "                return new HelpCommand();      "
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            default :"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "                throwInputError(action);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "                return null;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        } else if (inputArr.length \u003d\u003d 2) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            switch (action) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            case TODO :"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "                return new AddCommand(new Todo(inputArr[1]));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            case DEADLINE :"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "                return new AddCommand(createDeadline(inputArr[1]));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            case EVENT :"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "                return new AddCommand(createEvent(inputArr[1]));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            case DONE :"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "                return new DoneCommand(parseToNumber(inputArr[1], \"Done\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            case DELETE :"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "                return new DeleteCommand(parseToNumber(inputArr[1], \"Delete\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            case FIND :"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "                return new FindCommand(inputArr[1]);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            default :"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "                throw new DukeException(\"Oof. I apologize, but I do not understand.\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            // Not suppose to happen"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            throw new DukeException(\"Oof. I apologize, but I do not understand.\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    } "
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * Returns an Action enum from a single word String."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * "
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * @param action The first word that is input by the user"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * @return An Action enum"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * @throws DukeException When the single word String is not of the stipulated cases"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    private Action getAction(String action) throws DukeException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        // Fallthrough are made for the Capitalized versions of the String"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        switch (action.toLowerCase()) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        case \"list\" :"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            return Action.LIST;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        case \"bye\" :"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            return Action.EXIT;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        case \"help\" :"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            return Action.HELP;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        case \"todo\" :"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            return Action.TODO;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        case \"deadline\" :"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            return Action.DEADLINE;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        case \"event\" :"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            return Action.EVENT;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        case \"done\" :"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            return Action.DONE;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        case \"delete\" :"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            return Action.DELETE;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        case \"find\" :"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            return Action.FIND;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        default :"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            throw new DukeException(\"Oof. I apologize, but no such command exists.\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    "
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * Returns the parsed task number given by the user used for some commands E.g. Done and Delete."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * "
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * @param taskNumber The number given by the user that is parsed into the respective task."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * @param action The first word that is input by the user."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * @return An Integer that is, taskNumber that is pased."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * @throws DukeException When there is no number behind the action."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    private Integer parseToNumber(String taskNumber, String action) throws DukeException {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            return Integer.parseInt(taskNumber);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            throw new DukeException(\"Oof. \" + action + \" requires a number behind.\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * Returns a Task, or specifically, a Deadline."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * "
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * \u003cp\u003eThe taskArr string is split with \u0027 /by \u0027, which the taskArr[0] is the given"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * task, while taskArr[1] is the date, time or both."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * Otherwise, it will throw a DukeException, if the format is wrong."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * "
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * @param taskString A String that contain the task including the date to be split"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * @return A Deadline Task to be added."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * @throws DukeException When the format of Deadline is wrong."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * @see Deadline#Deadline(String, String)"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    private Task createDeadline(String taskString) throws DukeException {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        String[] taskArr \u003d taskString.split(\" /by \", 2);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        if (taskArr.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            throw new DukeException(\"Oof. There seems to be an error with your deadline format. \""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "                    + \"Here\u0027s an example: \\\u0027deadline Handup Quiz /by 17/05/2019 14:05\\\u0027\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            return new Deadline(taskArr[0], taskArr[1]);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * Returns a Task, or specifically, an Event."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * "
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * \u003cp\u003eThe taskArr string is split with \u0027 /by \u0027, which the taskArr[0] is the given"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * task, while taskArr[1] is the date, time or both."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * Otherwise, it will throw a DukeException, if the format is wrong."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * "
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * @param taskString A String that contain the task including the date to be split."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * @return An Event Task to be added."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * @throws DukeException When the format of the Event is wrong."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * @see Event#Event(String, String)"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    private Task createEvent(String taskString) throws DukeException {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        String[] taskArr \u003d taskString.split(\" /at \", 2);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        if (taskArr.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            throw new DukeException(\"Oof. There seems to be an eror with your event format\" "
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "                    + \"Here\u0027s an example: \\\u0027event Go to class /at 17/05/2019 14:05\\\u0027\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            return new Event(taskArr[0], taskArr[1]);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * Throws an Input Exception when a 2-or-more-Words String has only the word itself."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * "
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * @param action The input Command/Action"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * @throws DukeException As the description of a 2-or-more-Words String is only 1-word."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    private void throwInputError(Action action) throws DukeException {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        switch (action) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        case TODO :"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            throw new DukeException(\"Oof. The description of a todo cannot be empty.\");"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        case DEADLINE :"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            throw new DukeException(\"Oof. The description of a deadline cannot be empty.\");"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        case EVENT :"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            throw new DukeException(\"Oof. The description of a event cannot be empty.\"); "
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        case DONE :"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            throw new DukeException(\"Oof. The description of a done cannot be empty.\");"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        case DELETE :"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            throw new DukeException(\"Oof. The description of a delete cannot be empty.\");"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        default :"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            throw new DukeException(\"Oof. I apologize but I don\u0027t understand.\");"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kyzure": 175
    }
  },
  {
    "path": "src/main/java/duke/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "import java.io.FileOutputStream;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "import java.io.FileInputStream;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "import java.io.ObjectOutputStream;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "import java.io.ObjectInputStream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kyzure"
        },
        "content": " * Represents a store manager which helps to serialize and deserialize a file."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kyzure"
        },
        "content": " * This class is used whenever we change an item in the TaskList, "
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kyzure"
        },
        "content": " * or when the program starts up initially."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kyzure"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "class Storage {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    private File tasks;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * Constructor for Storage. "
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * "
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * \u003cp\u003eIn the DukeManager, the filepath is given \"Tasks.sav\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * "
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * @param filePath Indicates the path of the file to be stored at."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    public Storage(String filePath) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        this.tasks \u003d new File(filePath);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * Serializes the Task List so it can be used again the file is opened."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * "
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * @param taskList TaskList, an ArrayList which stores Tasks, is being serialized"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * @throws DukeException When there is an error serializing the file."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    public void store(TaskList taskList) throws DukeException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            FileOutputStream fileOut \u003d new FileOutputStream(tasks.getPath());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            ObjectOutputStream out \u003d  new ObjectOutputStream(fileOut);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            out.writeObject(taskList);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            out.close();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            fileOut.close();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        } catch (IOException error) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            throw new DukeException(\"Oof. Unable to serialize the list to Tasks.sav. \" "
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "                    + \"If there is already a Tasks.sav, please delete it.\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * Returns a Tasklist that is deserialized from the file."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * However, if the file is corrupted, it will throw a DukeException error."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * "
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * @return a Tasklist that is deserialized from the  file."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * @throws DukeException When the file is corrupted"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    public TaskList retrieve() throws DukeException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        if (!this.tasks.exists()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            // If the Tasks file does not exist"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "                tasks.createNewFile();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            } catch (Exception e) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "                throw new DukeException(\"Oof. Unable to create new sav file.\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            TaskList taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            store(taskList);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            return taskList;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "                // If the Tasks file exist"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "                FileInputStream fileIn \u003d new FileInputStream(tasks.getPath());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "                ObjectInputStream in \u003d new ObjectInputStream(fileIn);     "
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "                Object ob;  "
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "                    ob \u003d in.readObject();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "                } catch (ClassNotFoundException error) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "                    fileIn.close();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "                    in.close();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "                    throw new DukeException(\"Oof. Unable to read the sav file.\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "                }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "                fileIn.close();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "                in.close();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "                if (ob instanceof TaskList) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "                    return (TaskList) ob;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "                    // The Tasks file has wrong type when deserializing. Hence corrupted"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "                    tasks.createNewFile();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "                    TaskList taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "                    store(taskList);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "                    throw new DukeException(\"Oof. Corrupted save file. \""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "                            + \"I have rewrote the old save file with a new one. \""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "                            + \"Please restart me again.\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "                }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            } catch (IOException error) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "                // If the Tasks file is corrupted"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "                    tasks.createNewFile();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "                } catch (IOException errorAgain) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "                    throw new DukeException(\"Oof. Unable to create new sav file.\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "                }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "                TaskList taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "                store(taskList);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "                throw new DukeException(\"Oof. Corrupted save file. \""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "                        + \"I have rewrote the old save file with a new one. \""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "                        + \"Please restart me again.\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kyzure": 105
    }
  },
  {
    "path": "src/main/java/duke/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kyzure"
        },
        "content": " * Represents a Task given by the User that is parsed by the parser to store information"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kyzure"
        },
        "content": " * that can be easily printed out in readable format. "
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Kyzure"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "class Task implements Serializable {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    protected static final DateTimeFormatter DATE_FORMATTER \u003d DateTimeFormatter.ofPattern(\"dd/MM/yyyy\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    protected static final DateTimeFormatter TIME_FORMATTER \u003d DateTimeFormatter.ofPattern(\"HH:mm\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    private static final String TICK \u003d \"✓\";     // \\u2713"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    private static final String CROSS \u003d \"✗\";    // \\u2717"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    private String task;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    private boolean isCompleted;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * Constructor for Task. "
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * "
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * @param task A String of the user\u0027s inputted task"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    public Task(String task) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        this.task \u003d task;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        this.isCompleted \u003d false;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    "
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    public boolean hasCompleted() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        return this.isCompleted;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    public void setCompleted(boolean isCompleted) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        this.isCompleted \u003d isCompleted;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    public String getTaskString() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        return this.task;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        if (this.isCompleted) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            return \"[\" + TICK + \"] \" + this.task;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            return \"[\" + CROSS + \"] \" + this.task;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kyzure": 49
    }
  },
  {
    "path": "src/main/java/duke/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kyzure"
        },
        "content": " * Represents a ArrayList which stores task and implemenets Serializable, allowing it to be"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kyzure"
        },
        "content": " * serialized by the Storage class."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Kyzure"
        },
        "content": " * "
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kyzure"
        },
        "content": " * @see Storage#Storage(String)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kyzure"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "class TaskList implements Serializable {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    private ArrayList\u003cTask\u003e taskList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * Constructor for TaskList, which instantiates a new ArrayList which stores Tasks."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * "
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * @see ArrayList#ArrayList()"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        this.taskList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * Adds task to the ArrayList."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * "
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * @param task Task to be added to the ArrayList"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * @see Task#Task(String)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    public void addTask(Task task) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        this.taskList.add(task);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * Returns a task that is deleted from the Tasklist/ArrayList."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * "
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * @param index The index of the task to be deleted"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * @return The task that is deleted"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * @throws DukeException When failing to delete a task due to out-of-bound error."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    public Task deleteTask(int index) throws DukeException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            return this.taskList.remove(index);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            throw new DukeException(\"Oof. The given task number is not found.\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * Returns the number of elements of the ArrayList."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * "
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * @return The size of the list"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    public int listSize() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        return this.taskList.size();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * Returns the task of the given index."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * "
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * @param index The index of the task to be retrieve"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * @return The task from the task list of the given index"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * @throws DukeException When the Task index is not found"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    public Task getTask(int index) throws DukeException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            return this.taskList.get(index);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            throw new DukeException(\"Oof. The given task number is not found.\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kyzure": 72
    }
  },
  {
    "path": "src/main/java/duke/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kyzure"
        },
        "content": " * Represents a to-do, but unlike other Tasks, this does not have a date/time limit."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kyzure"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "class Todo extends Task {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * Constructor for Todo."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * "
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * @param task The given task by the user."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    public Todo(String task) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        super(task);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kyzure": 18
    }
  },
  {
    "path": "src/main/java/duke/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "import java.nio.charset.StandardCharsets;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Kyzure"
        },
        "content": " * Represents the UI system of the program, which obtains inputs from the user, and displays outputs."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kyzure"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "class Ui {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    private Scanner scanner;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    private PrintStream printer;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    "
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * Constructor for Ui, which creates a Scanner and Printer."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * Printer is used to display TICK and CROSS found in Task."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * "
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * @see Task#Task(String)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    public Ui() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        this.scanner \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        this.printer \u003d new PrintStream(System.out, true, StandardCharsets.UTF_8);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * Returns a String inputted by the user."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * "
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * @return String inputted by the user"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    public String readLine() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        return scanner.nextLine();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * Prints an empty line to seperate Commands."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    public void printEmpty() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        System.out.println();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * Prints the welcome message at the initialization of the Duke program."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * "
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * @see DukeManager#initializeDuke()"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    public void printWelcome() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        String logo \u003d \" ____        _        \\n\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "                    + \"|  _ \\\\ _   _| | _____ \\n\""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "                    + \"| | | | | | | |/ / _ \\\\\\n\""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "                    + \"| |_| | |_| |   \u003c  __/\\n\""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "                    + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        System.out.println(\"Hello from\\n\" + logo);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        System.out.println(\"If you need help, type \\\u0027help\\\u0027 anytime\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        System.out.println(\"What can I do for you?\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        System.out.println();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * Prints to indicate user they have something to input."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * "
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * @see DukeManager#initializeDuke()"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    public void printWhatToDo() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        System.out.println(\"What would you like to do?\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * Prints to tells user that the list is empty."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    public void printEmptyList() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        System.out.println(\"Your list is empty. How about adding something inside first?\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * Prints to inform user of the task in the list."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    public void printListStarter() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        System.out.println(\"Here are the tasks in your list:\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * Prints to user of the task that is done and prints out the task itself and it\u0027s type."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * "
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * @param task Task that is completed"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * @see Task#toString()"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    public void printDone(Task task) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        printer.println(\"Nice! I\u0027ve marked this task as done: \");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        printer.println(\"  \" + task.toString());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * Prints to user that the task is already completed."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    public void printAlreadyCompleted() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        System.out.println(\"Task is already completed!\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * Prints to user that the specified task has been deleted."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * "
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * @param task The task that is deleted."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * @param totalTasks The number of tasks remaining in the list."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * @see DeleteCommand#execute(Ui, TaskList, Storage)"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    public void printDelete(Task task, int totalTasks) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        System.out.println(\"Noted. I\u0027ve removed this task: \");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        printer.println(\"  \" + task.toString());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        System.out.println(\"Now you have \" + totalTasks + \" tasks in the list.\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * Prints to user that Duke is currently searching the tasks for the String."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * @param findString The String the user is searching for"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    public void printFinding(String findString) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        System.out.println(\"Finding for \\\u0027\" + findString + \"\\\u0027 now...\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * Prints to user that the specified task has been added."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * "
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * @param task The task that is added"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * @param totalTasks The total number of task remaining in the list"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * @see AddCommand#execute(Ui, TaskList, Storage)"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    public void printAddTask(Task task, int totalTasks) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        printer.println(\"Got it. I\u0027ve added this task: \");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        printer.println(\"  \" + task.toString());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        printer.println(\"Now you have \" + totalTasks +  \" tasks in the list.\");"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * Prints the task and it\u0027s index to the user."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * "
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * @param index The index of the task in the list"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * @param task The task that is in the list of the specified index"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    public void printTask(int index, Task task) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        printer.println(index + \". \" + task.toString());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * Method occurs when exiting the program, and prints to user that the program is shutting down."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    public void exit() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        System.out.println(\"Alright then. See you later.\");"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * Prints to the user that nothing is found during the command for find."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * @see FindCommand#execute(Ui, TaskList, Storage)"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    public void printNotFound() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        System.out.println(\"Nope, I found nothing.\");"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * Prints to user guidance in case they do not know what to do."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * "
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * \u003cp\u003eThis is the user guide for the user. "
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * It indicates the user what to do and what is the format of the inputs."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * It takes in as many user Inputs as possible to output the indicated help required"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * E.g. User Inputs 1 | Prints out help for \u0027List\u0027 Command"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     */"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    public void printHelp() {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        System.out.println(\"Hello this is Duke\u0027s help page.\");"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        System.out.println(\"There are 8 main features excluding help\");"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        System.out.println(\"Type in the number respective to what you want to know. \");"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        System.out.println(\"Otherwise, type in any other thing to return.\");"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        System.out.println(\"1. list 2. todo 3. deadline 4. event 5. done 6. delete 7. find 8. bye\");"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        while (scanner.hasNextLine()) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            switch (scanner.nextLine()) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            case \"1\" :"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "                System.out.println(\"Type \\\u0027list\\\u0027 to print your current tasks.\");"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            case \"2\" :"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "                System.out.println(\"Type \\\u0027todo myTask\\\u0027 to keep track of a to-do.\");"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            case \"3\" :"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "                System.out.println(\"Type \\\u0027deadline myTask /by myDate\\\u0027 to record a deadline.\");"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "                System.out.println(\"Format of myDate can be either in date or time or both: \");"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "                System.out.println(\"DD/MM/YYYY HH:mm\");"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "                System.out.println(\"DD/MM/YYYY\");"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "                System.out.println(\"hh:mm\");"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            case \"4\" :"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "                System.out.println(\"Type \\\u0027event myTask /at myDate\\\u0027 to record an event.\");"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "                System.out.println(\"Format of myDate can be either in date or time or both: \");"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "                System.out.println(\"DD/MM/YYYY HH:mm\");"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "                System.out.println(\"DD/MM/YYYY\");"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "                System.out.println(\"hh:mm\");"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            case \"5\" :"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "                System.out.println(\"Type \\\u0027done number\\\u0027 to complete the task of the number.\");"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "                System.out.println(\"If unsure of the task\u0027s number, use \\\u0027list\\\u0027 to check first.\");"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            case \"6\" :"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "                System.out.println(\"Type \\\u0027delete number\\\u0027 to remove the task of the number.\");"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "                System.out.println(\"If unsure of the task\u0027s number, use \\\u0027list\\\u0027 to check first.\");"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            case \"7\" :"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "                System.out.println(\"Type \\\u0027find myWord\\\u0027 to find myWord in all of the Tasks\");"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "                System.out.println(\"Finding ignores all capitalize words as well.\");"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            case \"8\" :"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "                System.out.println(\"Exits, what more?\");"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            default :"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "                System.out.println(\"Returning back to main page.\");"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kyzure": 216
    }
  },
  {
    "path": "src/test/java/duketest/AddCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "public class AddCommandTest {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    private final Ui uiManager \u003d new Ui(); "
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    private final Storage storeManager \u003d new Storage(\"StoreTest.sav\");"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    private final TaskList taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    "
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    public void executeTest() throws DukeException {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        AddCommand addTodo;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        AddCommand addDeadline;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        AddCommand addEvent;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            addTodo \u003d new AddCommand(new Todo(\"This is a Todo\"));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            addDeadline \u003d new AddCommand(new Deadline(\"This is a Deadline\", \"02/03/2004 22:22\"));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            addEvent \u003d new AddCommand(new Event(\"This is an Event\", \"02/03/2004 22:22\"));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            throw new DukeException(\"The test itself have an error\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            addTodo.execute(uiManager, taskList, storeManager);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            addDeadline.execute(uiManager, taskList, storeManager);   "
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            addEvent.execute(uiManager, taskList, storeManager);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        } catch (DukeException e) { "
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kyzure": 34
    }
  },
  {
    "path": "src/test/java/duketest/DeadlineTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "public class DeadlineTest {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    private static final String TICK \u003d \"✓\";     // \\u2713"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    private static final String CROSS \u003d \"✗\";    // \\u2717"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    public void instanceTest() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        // Test for Date, Time and Both"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        try {   "
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            new Deadline(\"This is a Deadline.\", \"01/01/2001 19:02\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            new Deadline(\"This is a Deadline.\", \"01/01/2001\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            new Deadline(\"This is a Deadline.\", \"19:02\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        "
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        // Test for wrong time, date or both"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            new Deadline(\"This is a Deadline.\", \"99/99/9999 99:99\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            // Pass"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            new Deadline(\"This is a Deadline.\", \"99/99/9999\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            // Pass"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            new Deadline(\"This is a Deadline.\", \"99:99\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            // Pass"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            new Deadline(\"19:02.\", \"Fail\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            // Pass"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        "
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    public void toStringTest() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        Deadline deadline;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            deadline \u003d new Deadline(\"This is a Deadline.\", \"14/05/2020\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            deadline \u003d null;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        assertEquals(\"[D][\" + CROSS + \"] This is a Deadline. (by: 14/05/2020)\", "
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "                deadline.toString());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        deadline.setCompleted(true);    "
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        assertEquals(\"[D][\" + TICK + \"] This is a Deadline. (by: 14/05/2020)\", "
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "                deadline.toString());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kyzure": 80
    }
  },
  {
    "path": "src/test/java/duketest/DeleteCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "public class DeleteCommandTest {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    public void executeTest() throws DukeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        Ui uiManager \u003d new Ui(); "
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        Storage storeManager \u003d new Storage(\"StoreTest.sav\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        TaskList taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        AddCommand addTodo;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        AddCommand addDeadline;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        AddCommand addEvent;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            addTodo \u003d new AddCommand(new Todo(\"This is a Todo\"));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            addDeadline \u003d new AddCommand(new Deadline(\"This is a Deadline\", \"02/03/2004 22:22\"));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            addEvent \u003d new AddCommand(new Event(\"This is an Event\", \"02/03/2004 22:22\"));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            throw new DukeException(\"The test itself have an error\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        "
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        addTodo.execute(uiManager, taskList, storeManager);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        addDeadline.execute(uiManager, taskList, storeManager);   "
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        addEvent.execute(uiManager, taskList, storeManager);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        // Actual Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        DeleteCommand deleteThird \u003d new DeleteCommand(3);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        DeleteCommand deleteFirst \u003d new DeleteCommand(1);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        "
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            deleteThird.execute(uiManager, taskList, storeManager);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            deleteFirst.execute(uiManager, taskList, storeManager);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            // Execute again to delete Todo."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            deleteFirst.execute(uiManager, taskList, storeManager);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            deleteFirst.execute(uiManager, taskList, storeManager);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            // Pass"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kyzure": 50
    }
  },
  {
    "path": "src/test/java/duketest/DoneCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "public class DoneCommandTest {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    public void executeTest() throws DukeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        Ui uiManager \u003d new Ui(); "
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        Storage storeManager \u003d new Storage(\"StoreTest.sav\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        TaskList taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        "
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        AddCommand addTodo;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        AddCommand addDeadline;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        AddCommand addEvent;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            addTodo \u003d new AddCommand(new Todo(\"This is a Todo\"));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            addDeadline \u003d new AddCommand(new Deadline(\"This is a Deadline\", \"02/03/2004 22:22\"));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            addEvent \u003d new AddCommand(new Event(\"This is an Event\", \"02/03/2004 22:22\"));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            throw new DukeException(\"The test itself have an error\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            addTodo.execute(uiManager, taskList, storeManager);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            addDeadline.execute(uiManager, taskList, storeManager);   "
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            addEvent.execute(uiManager, taskList, storeManager);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        } catch (DukeException e) { "
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            // But fail for addCommand failure"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        DoneCommand doneThird \u003d new DoneCommand(3);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        DoneCommand doneSecond \u003d new DoneCommand(2);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        DoneCommand doneFirst \u003d new DoneCommand(1);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            doneThird.execute(uiManager, taskList, storeManager);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            doneSecond.execute(uiManager, taskList, storeManager);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            doneFirst.execute(uiManager, taskList, storeManager);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kyzure": 46
    }
  },
  {
    "path": "src/test/java/duketest/DukeManagerTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "import java.io.InputStream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "import java.io.ByteArrayInputStream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "public class DukeManagerTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    public void initializeDukeTest() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            String input \u003d \"bye\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            InputStream in \u003d new ByteArrayInputStream(input.getBytes());"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            System.setIn(in);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            DukeManager dukeManager \u003d new DukeManager();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            dukeManager.initializeDuke();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            fail(e.getMessage());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            // Not suppose to happen"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            fail(e.getMessage());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    public void failInitializeDukeTest() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            String input \u003d \"Fail\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            InputStream in \u003d new ByteArrayInputStream(input.getBytes());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            System.setIn(in);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            DukeManager dukeManager \u003d new DukeManager();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            dukeManager.initializeDuke();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            // Pass"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            // Not suppose to happen"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            fail(e.getMessage());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kyzure": 41
    }
  },
  {
    "path": "src/test/java/duketest/EventTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "public class EventTest {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    private static final String TICK \u003d \"✓\";     // \\u2713"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    private static final String CROSS \u003d \"✗\";    // \\u2717"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    public void instanceTest() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        // Test for Date, Time and Both"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        try {   "
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            new Event(\"This is a Event.\", \"01/01/2001 19:02\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            new Event(\"This is a Event.\", \"01/01/2001\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            new Event(\"This is a Event.\", \"19:02\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        "
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        // Test for wrong time, date or both"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            new Event(\"This is a Event.\", \"99/99/9999 99:99\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            // Pass"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            new Event(\"This is a Event.\", \"99/99/9999\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            // Pass"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            new Event(\"This is a Event.\", \"99:99\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            // Pass"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            new Event(\"19:02.\", \"Fail\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            // Pass"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        "
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    public void toStringTest() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        Event event;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            event \u003d new Event(\"This is a Event.\", \"14/05/2020\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            event \u003d null;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        assertEquals(\"[E][\" + CROSS + \"] This is a Event. (at: 14/05/2020)\", "
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "                event.toString());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        event.setCompleted(true);    "
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        assertEquals(\"[E][\" + TICK + \"] This is a Event. (at: 14/05/2020)\", "
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "                event.toString());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kyzure": 80
    }
  },
  {
    "path": "src/test/java/duketest/FindCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "public class FindCommandTest {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    public void executeTest() throws DukeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        Ui uiManager \u003d new Ui();"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        TaskList taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        Storage storeManager \u003d new Storage(\"StoreTest.sav\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        AddCommand addTodo;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        AddCommand addDeadline;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        AddCommand addEvent;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            addTodo \u003d new AddCommand(new Todo(\"This is a Todo\"));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            addDeadline \u003d new AddCommand(new Deadline(\"This is a Deadline\", \"02/03/2004 22:22\"));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            addEvent \u003d new AddCommand(new Event(\"This is an Event\", \"02/03/2004 22:22\"));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            throw new DukeException(\"The test itself have an error\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            addTodo.execute(uiManager, taskList, storeManager);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            addDeadline.execute(uiManager, taskList, storeManager);   "
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            addEvent.execute(uiManager, taskList, storeManager);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        } catch (DukeException e) { "
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            // But fail for addCommand failure"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        FindCommand findThis \u003d new FindCommand(\"This\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        FindCommand findTodo \u003d new FindCommand(\"Todo\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        FindCommand findEvent \u003d new FindCommand(\"Event\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        FindCommand findThat \u003d new FindCommand(\"That\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            findThis.execute(uiManager, taskList, storeManager);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            findTodo.execute(uiManager, taskList, storeManager);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            findEvent.execute(uiManager, taskList, storeManager);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            findThat.execute(uiManager, taskList, storeManager);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kyzure": 46
    }
  },
  {
    "path": "src/test/java/duketest/ListCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "public class ListCommandTest {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    public void executeTest() throws DukeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        Ui uiManager \u003d new Ui();"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        TaskList taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        Storage storeManager \u003d new Storage(\"StoreTest.sav\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        AddCommand addTodo;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        AddCommand addDeadline;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        AddCommand addEvent;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            addTodo \u003d new AddCommand(new Todo(\"This is a Todo\"));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            addDeadline \u003d new AddCommand(new Deadline(\"This is a Deadline\", \"02/03/2004 22:22\"));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            addEvent \u003d new AddCommand(new Event(\"This is an Event\", \"02/03/2004 22:22\"));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            throw new DukeException(\"The test itself have an error\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            addTodo.execute(uiManager, taskList, storeManager);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            addDeadline.execute(uiManager, taskList, storeManager);   "
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            addEvent.execute(uiManager, taskList, storeManager);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        } catch (DukeException e) { "
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            // But fail for addCommand failure"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        ListCommand listCommand \u003d new ListCommand();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            listCommand.execute(uiManager, taskList, storeManager);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kyzure": 41
    }
  },
  {
    "path": "src/test/java/duketest/ParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "public class ParserTest {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    public void parseToCommand() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        Parser parseManager \u003d new Parser();"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            Command list \u003d parseManager.parseToCommand(\"list\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            Command bye \u003d parseManager.parseToCommand(\"bye\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            Command done \u003d parseManager.parseToCommand(\"done 1\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            Command delete \u003d parseManager.parseToCommand(\"delete 1\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            Command todo \u003d parseManager.parseToCommand(\"todo This is a todo.\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            Command deadline \u003d parseManager.parseToCommand(\"deadline This is a Deadline. /by 19:19\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            Command event \u003d parseManager.parseToCommand(\"event This is an Event. /at 19/01/2021\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            Command find \u003d parseManager.parseToCommand(\"find A TaSk\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            "
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            // Check if the command is of the correct type"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            if (!(list instanceof ListCommand) "
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "                    || !(bye instanceof ExitCommand) "
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "                    || !(done instanceof DoneCommand) "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "                    || !(delete instanceof DeleteCommand) "
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "                    || !(todo instanceof AddCommand) "
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "                    || !(deadline instanceof AddCommand) "
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "                    || !(event instanceof AddCommand) "
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "                    || !(find instanceof FindCommand)) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "                fail();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    public void parseFailToCommand() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        Parser parseManager \u003d new Parser();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        String[] failTestCases \u003d {\"Fail\", \"todo\", \"deadline\", \"event\", \"done\", \"delete\","
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            \"Fail Again\", \"list list\", \"exti\", \"help me\", \"exit again\", \"Fail Fail Fail\"};"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        "
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        for (String tests : failTestCases) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "                parseManager.parseToCommand(tests);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "                fail(tests);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            } catch (DukeException e) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "                // Pass"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            } "
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kyzure": 50
    }
  },
  {
    "path": "src/test/java/duketest/StorageTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "public class StorageTest { "
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    public void storeTest() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        TaskList taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        Storage storage \u003d new Storage(\"StoreTest.sav\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            storage.store(taskList);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    public void retreiveTest() throws DukeException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        File file \u003d new File(\"RetreiveTest.sav\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        if (!file.exists()) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "                file.createNewFile();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            } catch (IOException e) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "                throw new DukeException(e.getMessage());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        Storage storage \u003d new Storage(\"RetreiveTest.sav\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            storage.retrieve();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kyzure": 39
    }
  },
  {
    "path": "src/test/java/duketest/TaskListTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "public class TaskListTest {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    public void addDeleteTest() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        TaskList taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            taskList.addTask(new Todo(\"This is a Todo.\"));"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            taskList.addTask(new Deadline(\"This is a Deadline.\", \"22/02/2020 22:22\"));"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            taskList.addTask(new Event(\"This is an Event.\", \"22/02/2020 22:22\"));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            // Fail but for other reasons"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            fail(e.getMessage());"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            taskList.deleteTask(2);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            taskList.deleteTask(0);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            taskList.deleteTask(0);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            fail(e.getMessage());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            taskList.deleteTask(3);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            // Pass"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    }    "
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kyzure": 33
    }
  },
  {
    "path": "src/test/java/duketest/TaskTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "public class TaskTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    private static final String TICK \u003d \"✓\";     // \\u2713"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    private static final String CROSS \u003d \"✗\";    // \\u2717"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    public void fieldVariableTest() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        Task task \u003d new Task(\"This is a Task.\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        assertFalse(task.hasCompleted());"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        task.setCompleted(true);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        assertTrue(task.hasCompleted());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    public void toStringTest() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        Task task \u003d new Task(\"This is a Task.\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        assertEquals(\"[\" + CROSS + \"] This is a Task.\", task.toString());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        task.setCompleted(true);    "
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        assertEquals(\"[\" + TICK + \"] This is a Task.\", task.toString());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kyzure": 29
    }
  },
  {
    "path": "src/test/java/duketest/TodoTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "public class TodoTest {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    private static final String TICK \u003d \"✓\";     // \\u2713"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    private static final String CROSS \u003d \"✗\";    // \\u2717"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    public void toStringTest() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        Todo todo \u003d new Todo(\"This is a Todo.\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        assertEquals(\"[T][\" + CROSS + \"] This is a Todo.\", todo.toString());"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        todo.setCompleted(true);    "
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        assertEquals(\"[T][\" + TICK + \"] This is a Todo.\", todo.toString());"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kyzure": 19
    }
  },
  {
    "path": "target/surefire-reports/AddCommandTest.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "-------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "Test set: AddCommandTest"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "-------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.054 s - in AddCommandTest"
      }
    ],
    "authorContributionMap": {
      "Kyzure": 4
    }
  },
  {
    "path": "target/surefire-reports/DeadlineTest.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "-------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "Test set: DeadlineTest"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "-------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.002 s - in DeadlineTest"
      }
    ],
    "authorContributionMap": {
      "Kyzure": 4
    }
  },
  {
    "path": "target/surefire-reports/DeleteCommandTest.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "-------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "Test set: DeleteCommandTest"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "-------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.047 s - in DeleteCommandTest"
      }
    ],
    "authorContributionMap": {
      "Kyzure": 4
    }
  },
  {
    "path": "target/surefire-reports/DoneCommandTest.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "-------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "Test set: DoneCommandTest"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "-------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.035 s - in DoneCommandTest"
      }
    ],
    "authorContributionMap": {
      "Kyzure": 4
    }
  },
  {
    "path": "target/surefire-reports/DukeManagerTest.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "-------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "Test set: DukeManagerTest"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "-------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.035 s - in DukeManagerTest"
      }
    ],
    "authorContributionMap": {
      "Kyzure": 4
    }
  },
  {
    "path": "target/surefire-reports/EventTest.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "-------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "Test set: EventTest"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "-------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.001 s - in EventTest"
      }
    ],
    "authorContributionMap": {
      "Kyzure": 4
    }
  },
  {
    "path": "target/surefire-reports/FindCommandTest.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "-------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "Test set: FindCommandTest"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "-------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.052 s - in FindCommandTest"
      }
    ],
    "authorContributionMap": {
      "Kyzure": 4
    }
  },
  {
    "path": "target/surefire-reports/ListCommandTest.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "-------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "Test set: ListCommandTest"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "-------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.035 s - in ListCommandTest"
      }
    ],
    "authorContributionMap": {
      "Kyzure": 4
    }
  },
  {
    "path": "target/surefire-reports/ParserTest.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "-------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "Test set: ParserTest"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "-------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.001 s - in ParserTest"
      }
    ],
    "authorContributionMap": {
      "Kyzure": 4
    }
  },
  {
    "path": "target/surefire-reports/StorageTest.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "-------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "Test set: StorageTest"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "-------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.001 s - in StorageTest"
      }
    ],
    "authorContributionMap": {
      "Kyzure": 4
    }
  },
  {
    "path": "target/surefire-reports/TaskListTest.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "-------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "Test set: TaskListTest"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "-------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.001 s - in TaskListTest"
      }
    ],
    "authorContributionMap": {
      "Kyzure": 4
    }
  },
  {
    "path": "target/surefire-reports/TaskTest.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "-------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "Test set: TaskTest"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "-------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.001 s - in TaskTest"
      }
    ],
    "authorContributionMap": {
      "Kyzure": 4
    }
  },
  {
    "path": "target/surefire-reports/TodoTest.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "-------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "Test set: TodoTest"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "-------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.001 s - in TodoTest"
      }
    ],
    "authorContributionMap": {
      "Kyzure": 4
    }
  }
]
