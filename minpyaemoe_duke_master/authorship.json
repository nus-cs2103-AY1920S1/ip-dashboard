[
  {
    "path": "data/Duke.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "D | 1 | return book | 20/11/2019 1600"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "E | 1 | meeting | 12/12/2020 1800"
      }
    ],
    "authorContributionMap": {
      "minpyaemoe": 2
    }
  },
  {
    "path": "src/main/java/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import duke.command.ExitCommand;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import duke.component.Parser;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import duke.component.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import duke.component.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import duke.component.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    private TaskList taskList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * Constructor for Duke Object."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * @param filePath path to the text file located on the hard disk."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * @throws FileNotFoundException while input text file cannot be found."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    public Duke(String filePath) throws FileNotFoundException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        storage \u003d new Storage(filePath);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        ui.showWelcomeScreen();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        taskList \u003d new TaskList(storage.load());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * Runs Duke Program."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        Scanner sc \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        while (sc.hasNext()) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "                Command newCommand \u003d Parser.retrieveCommandFromString(sc.nextLine());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "                newCommand.executeCommand(taskList, storage, ui);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "                if (newCommand instanceof ExitCommand) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "                    return;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "                }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            } catch (Exception e) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "                ui.printErrorMessage(e);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * Runs the created Duke object by appending location of text file inside the constructor."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * @param args arguments passing to main method"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            new Duke(System.getProperty(\"user.dir\") + \"\\\\data\\\\Duke.txt\").run();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            Ui.printErrorMessage(e);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "minpyaemoe": 61,
      "-": 3
    }
  },
  {
    "path": "src/main/java/duke/command/AddCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import duke.component.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import duke.component.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import duke.component.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import duke.component.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": " * Command Class for adding tasks."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    private Task newTask;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * Constructor for AddCommand Object."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * @param task task to be added."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    public AddCommand(Task task) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        this.newTask \u003d task;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * Executes the operation of adding task into the task list."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * @param taskList the list of tasks to be added to."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * @param storage the storage to store inside hard disk."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * @param ui the ui for user interaction."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * @return boolean indication of successful or unsuccessful running of command."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * @throws IOException when error occurs while writing to hard disk."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    public boolean executeCommand(TaskList taskList, Storage storage, Ui ui)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            throws IOException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        taskList.add(newTask);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        ui.printAddedAcknowledgement(newTask, taskList.getSize());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        storage.save(taskList);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "minpyaemoe": 46
    }
  },
  {
    "path": "src/main/java/duke/command/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import duke.component.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import duke.component.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import duke.component.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import duke.component.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": " * Abstract Command Class."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * Abstract method to execute respective command."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * @param taskList list of tasks."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * @param storage storage to store inside hard disk."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * @param ui ui for user interaction."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * @return boolean indication of successful or unsuccessful running of command."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * @throws DukeException when Duke error occurs."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * @throws IOException when IO error occurs."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    public abstract boolean executeCommand(TaskList taskList, Storage storage, Ui ui)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            throws DukeException, IOException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "minpyaemoe": 25
    }
  },
  {
    "path": "src/main/java/duke/command/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import duke.component.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import duke.component.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import duke.component.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import duke.component.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": " * Command Class for delete tasks."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * Constructor for DeleteCommand Object."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * @param index the index of the task to be deleted."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    public DeleteCommand(int index) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * Executes deletion of task from task list."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * @param taskList list of tasks."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * @param storage storage to store inside hard disk."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * @param ui ui for user interaction."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * @return boolean indication of successful or unsuccessful running of command."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * @throws DukeException when index is invalid."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * @throws IOException when error occurs while writing to hard disk."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    public boolean executeCommand(TaskList taskList, Storage storage, Ui ui)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            throws DukeException, IOException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        Task deletedTask \u003d taskList.deleteAt(index);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        ui.printRemovedAcknowledgement(deletedTask, taskList.getSize());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        storage.save(taskList);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "minpyaemoe": 46
    }
  },
  {
    "path": "src/main/java/duke/command/DoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import duke.component.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import duke.component.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import duke.component.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import duke.component.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": " * Command Class for changing status of task to completed."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "public class DoneCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * Constructor for DoneCommand Object."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * @param index index of the task whose status will be changed."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    public DoneCommand(int index) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * Executes the operation of changing the status of task to be completed."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * @param taskList list of tasks."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * @param storage storage to store inside hard disk."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * @param ui ui for user interaction."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * @return boolean indication of successful or unsuccessful running of command."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * @throws DukeException when index is invalid."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * @throws IOException when error occurs while writing to hard disk."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    public boolean executeCommand(TaskList taskList, Storage storage, Ui ui)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            throws DukeException, IOException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        if (index \u003e\u003d taskList.getSize() || index \u003c 0) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            throw new DukeException(\"Invalid task number!\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        taskList.replace(index, taskList.getAtIndex(index).changeToCompletedStatus());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        ui.printDoneAcknowledgement(taskList.getAtIndex(index));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        storage.save(taskList);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "minpyaemoe": 52
    }
  },
  {
    "path": "src/main/java/duke/command/ExitCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import duke.component.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import duke.component.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import duke.component.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": " * Command Class for exiting the program."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * Executing the operation of exiting Duke program."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * @param taskList list of tasks."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * @param storage storage to store inside hard disk."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * @param ui ui for user interaction."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * @return boolean indication of successful or unsuccessful running of command."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * @throws IOException when error occurs while writing to hard disk."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    public boolean executeCommand(TaskList taskList, Storage storage, Ui ui) throws IOException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        storage.save(taskList);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        ui.showGoodByeScreen();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "minpyaemoe": 30
    }
  },
  {
    "path": "src/main/java/duke/command/FindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import duke.component.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import duke.component.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import duke.component.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": " * Command Class for looking for match cases in the task list."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    private String keyword;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * Constructor for FindCommand Object."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * @param keyword to search for inside the task list later on."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    public FindCommand(String keyword) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        this.keyword \u003d keyword;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * @param taskList list of tasks."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * @param storage storage to store inside hard disk."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * @param ui ui for user interaction."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * @return boolean indication of successful or unsuccessful running of command."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    public boolean executeCommand(TaskList taskList, Storage storage, Ui ui) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        TaskList tempTaskList \u003d new TaskList();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        for(int i \u003d 0; i \u003c taskList.getSize(); i++) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            Task t \u003d taskList.getAtIndex(i);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            if(t.getDescription().contains(keyword)) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "                tempTaskList.add(t);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        ui.printFoundTaskList(tempTaskList);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "minpyaemoe": 46
    }
  },
  {
    "path": "src/main/java/duke/command/ViewListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import duke.component.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import duke.component.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import duke.component.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": " * Command Class for view the task list."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "public class ViewListCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * Executes the operation of displaying task list."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * @param taskList list of tasks."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * @param storage storage to store inside hard disk."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * @param ui ui for user interaction."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * @return boolean indication of successful or unsuccessful running of command."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    public boolean executeCommand(TaskList taskList, Storage storage, Ui ui) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        ui.printTaskList(taskList);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "minpyaemoe": 24
    }
  },
  {
    "path": "src/main/java/duke/component/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "package duke.component;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": " * Exception Class for Duke error."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * Constructor for DukeException Object."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * @param message Message of the error."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    public DukeException(String message) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * Returns formatted and user-readable form of error."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * @return formatted and user-readable form of error in String format."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        return \"☹ OOPS!!! \" + getMessage();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "minpyaemoe": 24
    }
  },
  {
    "path": "src/main/java/duke/component/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "package duke.component;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import duke.command.*;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import duke.task.Todo;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": " * Class for translating and interpreting the user input."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * Returns data and time form input String."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * @param inputs input string"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * @return date and time from input String"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    public static LocalDateTime getDateAndTimeFromString(String inputs) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        String[] time \u003d inputs.split(\" \");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        String[] dateInString \u003d time[0].split(\"\\\\/\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        LocalDateTime dateAndTime \u003d LocalDateTime.of(Integer.parseInt(dateInString[2]),"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "                Integer.parseInt(dateInString[1]),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "                Integer.parseInt(dateInString[0]),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "                Integer.parseInt(time[1]) / 100,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "                Integer.parseInt(time[1]) % 100);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        return dateAndTime;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * Return array of string containing name as first element and"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * time as second element retrieved from unknown array of strings."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * @param inputs input string"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * @return array of string containing name as first element and time as second element"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    public static String[] breakDownIntoNameAndTime(String[] inputs) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        String[] result \u003d {\"\", \"\"};"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        int index \u003d 1;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        while (index \u003c inputs.length \u0026\u0026 !(inputs[index].charAt(0) \u003d\u003d \u0027/\u0027)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            result[0] \u003d result[0] + inputs[index] + \" \";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            index++;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        //Skip the /at or /by"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        index++;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        while (index \u003c inputs.length) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            result[1] \u003d result[1] + inputs[index] + \" \";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            index++;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * Returns an array of sub-strings separated by certain string."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * @param input input string"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * @param separator to be used for separating string into array of sub-strings"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * @return array of sub-strings separated by separator"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    public static String[] breakDownString(String input, String separator) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        return input.split(separator);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * Returns respective command from user input after translating and interpretation."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * @param input input string."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * @return respective duke command."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * @throws DukeException when encounters invalid inputs."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    public static Command retrieveCommandFromString(String input) throws DukeException {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        String[] inputs \u003d Parser.breakDownString(input, \" \");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        String name \u003d \"\";"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        String[] time;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        if (inputs[0].equals(\"bye\")) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        } else if (inputs[0].equals(\"list\")) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            return new ViewListCommand();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        } else if (inputs[0].equals(\"done\")) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            if (inputs.length \u003c 2) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "                throw new DukeException(\"The task Number cannot be empty.\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            int index \u003d Integer.parseInt(inputs[1]) - 1;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            return new DoneCommand(index);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        } else if (inputs[0].equals(\"todo\")) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            if (inputs.length \u003c 2) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "                throw new DukeException(\"The description of a todo cannot be empty.\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            for (int i \u003d 1; i \u003c inputs.length; i++) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "                name \u003d name + inputs[i] + \" \";"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            name \u003d name.substring(0, name.length() - 1);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            Todo newTask \u003d new Todo(name);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            return new AddCommand(newTask);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        } else if (inputs[0].equals(\"deadline\") || inputs[0].equals(\"event\")) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            String inputType \u003d inputs[0];"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            if (inputs.length \u003c 2) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "                if (inputType.equals(\"deadline\")) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "                    throw new DukeException(\"The description of a deadline cannot be empty.\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "                    throw new DukeException(\"The description of an event cannot be empty.\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "                }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            inputs \u003d Parser.breakDownIntoNameAndTime(inputs);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            if (inputs[1].equals(\"\")) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "                if (inputType.equals(\"deadline\")) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "                    throw new DukeException(\"The end time of a deadline cannot be empty.\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "                    throw new DukeException(\"The time of an event cannot be empty.\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "                }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            name \u003d inputs[0].substring(0, inputs[0].length() - 1);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            LocalDateTime dateAndTime \u003d Parser.getDateAndTimeFromString("
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "                                            inputs[1].substring(0, inputs[1].length() - 1));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            Task newTask;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            if (inputType.equals(\"deadline\")) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "                newTask \u003d new Deadline(name, dateAndTime);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "                newTask \u003d new Event(name, dateAndTime);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            return new AddCommand(newTask);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        } else if (inputs[0].equals(\"delete\")) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            if (inputs.length \u003c 2) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "                throw new DukeException(\"The task Number cannot be empty.\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            int index \u003d Integer.parseInt(inputs[1]) - 1;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            return new DeleteCommand(index);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        } else if (inputs[0].equals(\"find\")) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            if (inputs.length \u003c 2) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "                throw new DukeException(\"The keyword cannot be empty.\");"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            return new FindCommand(inputs[1]);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            throw new DukeException(\"I\u0027m sorry, but I don\u0027t know what that means :-(\");"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "minpyaemoe": 157
    }
  },
  {
    "path": "src/main/java/duke/component/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "package duke.component;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import duke.task.Todo;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import java.io.PrintWriter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import java.io.UnsupportedEncodingException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": " * Class for storing and retrieving tasks from hard disk."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    private String filePath;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    private File inputFile;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * Constructor for storage object."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * @param filePath path to the location of the file in hard disk."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    public Storage(String filePath) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        this.inputFile \u003d new File(filePath);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * Loads tasks from storage at hard disk into the program."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * @return list of tasks loaded with task from hard disk."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * @throws FileNotFoundException when input file cannot be found."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    public List\u003cTask\u003e load() throws FileNotFoundException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        List\u003cTask\u003e taskList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        Scanner txtSC \u003d new Scanner(inputFile);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        while (txtSC.hasNext()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            String[] historicalInputs \u003d Parser.breakDownString(txtSC.nextLine(), \"\\\\|\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            boolean taskIsCompleted;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            Task oldTask \u003d null;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            if (historicalInputs[1].charAt(1) \u003d\u003d \u00271\u0027) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "                taskIsCompleted \u003d true;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "                taskIsCompleted \u003d false;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            switch (historicalInputs[0].charAt(0)) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            case \u0027T\u0027:"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "                oldTask \u003d new Todo(historicalInputs[2].substring(1), taskIsCompleted);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            case \u0027D\u0027:"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "                String[] time \u003d historicalInputs[3].substring(1).split(\" \");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "                oldTask \u003d new Deadline("
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "                        historicalInputs[2].substring(1, historicalInputs[2].length() - 1),"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "                        Parser.getDateAndTimeFromString(historicalInputs[3].substring(1)),"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "                        taskIsCompleted);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            case \u0027E\u0027:"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "                oldTask \u003d new Event("
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "                        historicalInputs[2].substring(1, historicalInputs[2].length() - 1),"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "                        Parser.getDateAndTimeFromString(historicalInputs[3].substring(1)),"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "                        taskIsCompleted);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            taskList.add(oldTask);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        txtSC.close();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        return taskList;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * Saves tasks from the program into hard disk."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * @param taskList list of tasks to be stored into hard disk."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * @throws FileNotFoundException when input file cannot be found."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * @throws UnsupportedEncodingException when encoding error occurs."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    public void save(TaskList taskList) throws FileNotFoundException, UnsupportedEncodingException {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        PrintWriter fileWriter \u003d new PrintWriter(filePath, \"UTF-8\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        for (int i \u003d 0; i \u003c taskList.getSize(); i++) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            fileWriter.println(taskList.getAtIndex(i).toIndicationInsideFile());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        fileWriter.close();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "minpyaemoe": 97
    }
  },
  {
    "path": "src/main/java/duke/component/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "package duke.component;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": " * Class for temporary storage of tasks in the program."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    private List\u003cTask\u003e taskList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * Constructor for empty TaskList object."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    public TaskList() { this.taskList \u003d new ArrayList\u003c\u003e(); }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * Constructor for TaskList object loaded with tasks from hard disk."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    public TaskList(List\u003cTask\u003e taskList) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        this.taskList \u003d taskList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * Adds new task into the current task list."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * @param t t is the new task."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    public void add(Task t) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        this.taskList.add(t);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * Deletes task located at the certain index."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * @param index index of the task to be deleted."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * @return the deleted task."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * @throws DukeException when index is invalid"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    public Task deleteAt(int index) throws DukeException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        if (index \u003e\u003d taskList.size() || index \u003c 0) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            throw new DukeException(\"Invalid task number!\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        return this.taskList.remove(index);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * Fetches task located at the certain index without deleting it."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * @param index index of the task to be fetched."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * @return the fetched task."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    public Task getAtIndex(int index) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        return taskList.get(index);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * Returns the size of the task list."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * @return the size of the teas list."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    public int getSize() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        return taskList.size();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * Replaces the task located at certain index with new task."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * @param index index of the task to be replaced."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * @param newTask new task which replaces."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    public void replace(int index, Task newTask) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        this.taskList.set(index, newTask.changeToCompletedStatus());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * Returns formatted and user-readable form of task list."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * @return formatted and user-readable form of task list in String."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        String result \u003d \"\";"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        for (int i \u003d 0; i \u003c taskList.size(); i++) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            result \u003d result + \"\\n\\t\" + \" \" + (i + 1) + \". \" + taskList.get(i);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "minpyaemoe": 86
    }
  },
  {
    "path": "src/main/java/duke/component/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "package duke.component;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import java.io.UnsupportedEncodingException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": " * Class for User interaction."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * Displays initial welcome screen of the program."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    public static void showWelcomeScreen() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        String logo \u003d \"____        _        \\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "                + \"\\t |  _ \\\\ _   _| | _____ \\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "                + \"\\t | | | | | | | |/ / _ \\\\\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "                + \"\\t | |_| | |_| |   \u003c  __/\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "                + \"\\t |____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        displayWithFormat(\" \" + logo + \"\\n\\t Hello! I\u0027m Duke\" + \"\\n\" + \"\\t What can I do for you?\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * Displays (terminating/Good bye)ending screen of the program."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    public static void showGoodByeScreen() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        displayWithFormat(\"Bye. Hope to see you again soon!\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * Prints acknowledgement of certain task is changed to status of \u0027completed\u0027 to task list."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * @param task task whose status is being changed."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    public static void printDoneAcknowledgement(Task task) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        displayWithFormat(\"Nice! I\u0027ve marked this task as done:\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "                + \"\\n\\t   \" + task.toString());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * Prints acknowledgement of certain task is added to the task list and"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * number of items in the task list."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * @param task being added."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * @param taskCount number of tasks in the task list."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    public static void printAddedAcknowledgement(Task task, int taskCount) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        displayWithFormat(\"Got it. I\u0027ve added this task: \""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "                + \"\\n\\t   \" + task.toString()"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "                + \"\\n\\t Now you have \" + taskCount + \" tasks in the list.\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * Prints acknowledgement of certain task is deleted from the task list and"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * number of items in the task list."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * @param task task to be printed."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * @param taskCount number of tasks in the task list."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    public static void printRemovedAcknowledgement(Task task, int taskCount) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        displayWithFormat(\"Noted. I\u0027ve removed this task:\""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "                + \"\\n\\t   \" + task.toString()"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "                + \"\\n\\t Now you have \""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "                + taskCount"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "                + \" tasks in the list.\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * Prints message of the certain exceptions."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * @param e exceptions to be printed."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    public static void printErrorMessage(Exception e) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        if (e instanceof FileNotFoundException) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            printErrorWithFormat(\"Error: Input Text File not Found! Program Exiting...\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        } else if (e instanceof UnsupportedEncodingException) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            printErrorWithFormat(\"Error: Unable to write to file! Program Exiting...\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            printErrorWithFormat(e.toString());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * Prints a certain message with Duke format."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * @param message message to be printed."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    public static void displayWithFormat(String message) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        System.out.println(\"\\t____________________________________________________________\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        System.out.println(\"\\t \" + message);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        System.out.println(\"\\t____________________________________________________________\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        System.out.println();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * Prints a certain error message with Duke format."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * @param errorMessage error message to be printed."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    public static void printErrorWithFormat(String errorMessage) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        System.err.println(\"\\t____________________________________________________________\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        System.err.println(\"\\t \" + errorMessage);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        System.err.println(\"\\t____________________________________________________________\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        System.err.println();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * Prints a certain task list with Duke format."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * @param taskList to be printed on display."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    public static void printTaskList(TaskList taskList) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        System.out.print(\"\\t____________________________________________________________\""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "                + \"\\n\\t Here are the tasks in your list:\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        System.out.println(taskList.toString());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        System.out.println(\"\\t____________________________________________________________\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        System.out.println();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * Printst a certain task list with match cases in Duke format."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * @param taskList to be printed on display."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    public static void printFoundTaskList(TaskList taskList) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        System.out.print(\"\\t____________________________________________________________\""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "                + \"\\n\\t Here are the matching tasks in your list:\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        System.out.println(taskList.toString());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        System.out.println(\"\\t____________________________________________________________\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        System.out.println();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "minpyaemoe": 129
    }
  },
  {
    "path": "src/main/java/duke/task/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    private LocalDateTime deadLine;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * Constructor for Deadline object with default done status."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * @param description the description of the task."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * @param deadLine the deadline in date and time format."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    public Deadline(String description, LocalDateTime deadLine) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        super(description, false);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        this.deadLine \u003d deadLine;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * Constructor for Deadline object with certain done status."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * @param description the description of the task."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * @param deadLine the deadline in date and time format."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    public Deadline(String description, LocalDateTime deadLine, boolean done) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        super(description, done);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        this.deadLine \u003d deadLine;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * Changes the status of the deadline to \u0027completed\u0027."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * @return a new deadline object with \u0027completed\u0027 status."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    public Deadline changeToCompletedStatus() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        return new Deadline(super.description, this.deadLine, true);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * Returns formatted and user readable form of the task."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * @return formatted and user readable form of the task in String."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"dd/MM/yyyy, E, h:mm a\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        String s \u003d \"\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        if (done) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            s \u003d s + \"[D][✓]\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            s \u003d s + \"[D][✗]\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        return s + \" \" + description + \" (by: \" + deadLine.format(formatter) + \")\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * Returns formatted form of the task to be stored in inside a text file."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * @return formatted form of the task to be stored in inside a text file."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    public String toIndicationInsideFile() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"dd/MM/yyyy\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        String s \u003d \"D | \";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        if (done) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            s \u003d s + \"1 | \";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            s \u003d s + \"0 | \";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        return s + description + \" | \" + deadLine.format(formatter) + \" \""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "                + (deadLine.getHour() * 100 + deadLine.getMinute());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "minpyaemoe": 74
    }
  },
  {
    "path": "src/main/java/duke/task/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    private LocalDateTime time;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * Constructor for Event Object with default done status."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * @param description the description of the event."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * @param time the time of the event."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    public Event(String description, LocalDateTime time) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        super(description, false);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * Constructor for Event Object with certain done status."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * @param description the description of the event."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * @param time  the time of the event."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * @param done the status of the event."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    public Event(String description, LocalDateTime time, boolean done) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        super(description, done);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * Changes the status of the event to \u0027completed\u0027."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * @return a new event object with \u0027completed\u0027 status."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    public Event changeToCompletedStatus() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        return new Event(super.description, this.time, true);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * Returns formatted and user readable form of the task."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * @return formatted and user readable form of the task in String."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"dd/MM/yyyy, E, h:mm a\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        String s \u003d \"\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        if (done) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            s \u003d s + \"[E][✓]\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            s \u003d s + \"[E][✗]\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        return s + \" \" + description + \" (at: \" + time.format(formatter) + \")\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * Returns formatted form of the task to be stored in inside a text file."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * @return formatted form of the task to be stored in inside a text file."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    public String toIndicationInsideFile() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"dd/MM/yyyy\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        String s \u003d \"E | \";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        if (done) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            s \u003d s + \"1 | \";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            s \u003d s + \"0 | \";"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        return s + description + \" | \" + time.format(formatter)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "                + \" \" + (time.getHour() * 100 + time.getMinute());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "minpyaemoe": 77
    }
  },
  {
    "path": "src/main/java/duke/task/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    protected boolean done;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * Constructor for Task object with default done status."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * @param description description of the task."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        this.done \u003d false;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * Constructor for Task object with certain done status."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * @param description description of the task."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * @param done status of the task."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    protected Task(String description, boolean done) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        this.done \u003d done;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * Returns the boolean status of a task if it is completed."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * @return the boolean status of a task if it is completed."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    public boolean isCompleted() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        return done;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * Changes the status of a task to \u0027completed\u0027 by returning new object."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * @return a new task with \u0027completed\u0027 status."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    public Task changeToCompletedStatus() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        return new Task(this.description, true);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * Returns the description of the task."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * @return the description of the task."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * Returns formatted form of the task to be stored in inside a text file."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * @return formatted form of the task to be stored in inside a text file."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    public String toIndicationInsideFile() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        String s \u003d \"T | \";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        if (done) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            s \u003d s + \"1 | \";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            s \u003d s + \"0 | \";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        return s + description;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "minpyaemoe": 65
    }
  },
  {
    "path": "src/main/java/duke/task/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "public class Todo extends Task {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * Constructor for Todo object with default done status."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * @param description the description of the task."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    public Todo(String description) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        super(description, false);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * Constructor for Todo object with certain done status."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * @param description the description of the task."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    public Todo(String description, boolean done) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        super(description, done);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * Changes the status of the Todo to \u0027completed\u0027."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * @return a new Todo object with \u0027completed\u0027 status."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    public Todo changeToCompletedStatus() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        return new Todo(super.description, true);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * Returns formatted and user readable form of the task."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * @return formatted and user readable form of the task in String."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        String s \u003d \"\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        if (done) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            s \u003d s + \"[T][✓]\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            s \u003d s + \"[T][✗]\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        return s + \" \" + description;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * Returns formatted form of the task to be stored in inside a text file."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * @return formatted form of the task to be stored in inside a text file."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    public String toIndicationInsideFile() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        String s \u003d \"T | \";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        if (done) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            s \u003d s + \"1 | \";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "            s \u003d s + \"0 | \";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        return s + description;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "minpyaemoe": 61
    }
  },
  {
    "path": "src/test/java/DukeTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import static org.junit.jupiter.api.Assertions.*;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": " * Test Class for Duke Class"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "public class DukeTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    public void dummyTest(){"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        assertEquals(2, 2);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "minpyaemoe": 13
    }
  },
  {
    "path": "src/test/java/duke/component/TaskListTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "package duke.component;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import duke.task.Todo;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": " * Test Class for testing TaskList class."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "class TaskListTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    private  TaskList taskList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * Tests add method of TaskList class."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    void addTest() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        taskList.add(new Todo(\"read book\"));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        assertEquals(1, taskList.getSize());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * Tests deleteAt method of TaskList class."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * @throws DukeException if index is out of bound"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    void deleteAtTest() throws DukeException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        taskList.add(new Todo(\"read book\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        Task deletedTask \u003d taskList.deleteAt(0);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        assertEquals(\"read book\", deletedTask.getDescription());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * Tests getAtIndex method of TaskList class."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    void getAtIndexTest() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        taskList.add(new Todo(\"read book\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        assertEquals(\"read book\", taskList.getAtIndex(0).getDescription());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * Tests getSize method of TaskList class."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    void getSizeTest() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        taskList.add(new Todo(\"read book\"));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        taskList.add(new Deadline(\"return book\", LocalDateTime.now()));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        assertEquals(2, taskList.getSize());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * Tests replace method of TaskList class."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    void replaceTest() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        taskList.add(new Todo(\"read book\"));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        taskList.replace(0, new Todo(\"buy break\"));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        assertEquals(\"buy break\", taskList.getAtIndex(0).getDescription());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * Test ToString method of TaskList class."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    void toStringTest() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        taskList.add(new Todo(\"read book\"));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        String expected \u003d \"\";"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        expected \u003d expected + \"\\n\\t 1. \" + taskList.getAtIndex(0).toString();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        assertEquals(expected, taskList.toString());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "minpyaemoe": 86
    }
  },
  {
    "path": "src/test/java/duke/task/TaskTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": " * Test class for testing Task class."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "class TaskTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    Task task;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * Tests getCompletedStatus method of Task class."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    void getCompletedStatusTest() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        this.task \u003d new Task(\"read book\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        assertEquals(false, task.isCompleted());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        this.task \u003d new Task(\"read book\", true);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        assertEquals(true, task.isCompleted());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * Tests changeToCompletedStatus method of Task class."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    void changeToCompletedStatusTest() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        this.task \u003d (new Task(\"read book\")).changeToCompletedStatus();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        assertEquals(true, task.isCompleted());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * Tests getDescription method of Task class."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    void getDescriptionTest() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        this.task \u003d new Task(\"buy bread\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        assertEquals(\"buy bread\", task.getDescription());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     * Tests toIndicationInsideFile method of Task class."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    void toIndicationInsideFileTest() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        this.task \u003d new Task(\"buy bread\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        String expected \u003d \"T | 0 | buy bread\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "        assertEquals(expected, task.toIndicationInsideFile());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "minpyaemoe": 52
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "if not exist ..\\bin mkdir ..\\bin"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "REM delete output from previous run"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "del ACTUAL.TXT"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "REM compile the code into the bin folder"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "javac  -cp ..\\src -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "    exit /b 1"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ")"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "java -classpath ..\\bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "minpyaemoe"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT"
      }
    ],
    "authorContributionMap": {
      "minpyaemoe": 21
    }
  }
]
