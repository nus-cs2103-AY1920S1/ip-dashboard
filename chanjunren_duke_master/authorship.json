[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    id \u0027org.openjfx.javafxplugin\u0027 version \u00270.0.7\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "group \u0027seedu.duke\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    // Change this to your main class."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    mainClassName \u003d \"Launcher\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "}"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "run {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "}"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "test {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    archiveVersion \u003d \"0.1.3\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "javafx {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    version \u003d \"11.0.2\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    modules \u003d [ \u0027javafx.controls\u0027, \u0027javafx.fxml\u0027 ]"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chanjunren": 32,
      "-": 15
    }
  },
  {
    "path": "data/duke.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "T | 1 | read book"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "T | 1 | borrow book"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "E | 1 | 1v1 u | 20/12/2019 1700"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "D | 1 | return book | 2/12/2019 1800"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "T | 0 | ur mum"
      }
    ],
    "authorContributionMap": {
      "chanjunren": 5
    }
  },
  {
    "path": "src/main/java/DialogBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "import javafx.scene.shape.Circle;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    private final Circle CLIP \u003d new Circle(50,50,50);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    public DialogBox(String  text, Image img) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        displayPicture.setImage(img);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        displayPicture.setClip(CLIP);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        Collections.reverse(tmp);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    public static DialogBox getUserDialog(String input, Image img) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        var db \u003d new DialogBox(input, img);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    public static DialogBox getDukeDialog(String response, Image img) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        var db \u003d new DialogBox(response, img);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chanjunren": 55
    }
  },
  {
    "path": "src/main/java/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "import commands.Command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "import exceptions.DukeException;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "import parser.Parser;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "import tasks.TaskList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "public class Duke extends Application {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    private static final String FILE_PATH \u003d \"data/duke.txt\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    private Scene scene;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    private Image userIv, dukeIv;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    public Duke() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    public void start(Stage primaryStage) throws Exception {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        scrollPane \u003d new ScrollPane();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        dialogContainer \u003d new VBox();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        scrollPane.setContent(dialogContainer);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        userInput \u003d new TextField();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        sendButton \u003d new Button(\"Send\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        AnchorPane mainLayout \u003d new AnchorPane();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        mainLayout.getChildren().addAll(scrollPane, userInput, sendButton);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        scene \u003d new Scene(mainLayout);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        primaryStage.setScene(scene);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        primaryStage.setResizable(false);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        primaryStage.setMinHeight(600.0);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        primaryStage.setMinWidth(400.0);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        scrollPane.setPrefSize(385, 535);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        scrollPane.setHbarPolicy(ScrollPane.ScrollBarPolicy.NEVER);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        scrollPane.setVbarPolicy(ScrollPane.ScrollBarPolicy.ALWAYS);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        scrollPane.setVvalue(1.0);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        scrollPane.setFitToWidth(true);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        dialogContainer.setPrefHeight(Region.USE_COMPUTED_SIZE);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        userInput.setPrefWidth(325.0);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        sendButton.setPrefWidth(55.0);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        AnchorPane.setTopAnchor(scrollPane, 1.0);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        AnchorPane.setBottomAnchor(sendButton, 1.0);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        AnchorPane.setRightAnchor(sendButton, 1.0);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        AnchorPane.setLeftAnchor(userInput, 1.0);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        AnchorPane.setBottomAnchor(userInput, 1.0);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        sendButton.setOnMouseClicked((event) -\u003e {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "            dialogContainer.getChildren().add(getDialogLabel(userInput.getText()));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "            userInput.clear();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        });"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        userInput.setOnAction((event) -\u003e {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "            dialogContainer.getChildren().add(getDialogLabel(userInput.getText()));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "            userInput.clear();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        });"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        dialogContainer.heightProperty().addListener((observable) -\u003e scrollPane.setVvalue(1.0));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        sendButton.setOnMouseClicked((event) -\u003e {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "            handleUserInput();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        });"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        userInput.setOnAction((event) -\u003e {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "            handleUserInput();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        });"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        userIv \u003d new Image(this.getClass().getResourceAsStream(\"images/DaUser.png\"));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        dukeIv \u003d new Image(this.getClass().getResourceAsStream(\"images/DaDuke.png\"));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        storage \u003d new Storage(FILE_PATH);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "            tasks \u003d new TaskList(storage.load());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        } catch (Exception e) { // Supposed to be Exceptions.DukeException"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "            ui.showLoadingError();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "            tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "     * Iteration 1:"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "     * Creates a label with the specified text and adds it to the dialog container."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "     * @param text String containing text to add"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "     * @return a label with the specified text that has word wrap enabled."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    private Label getDialogLabel(String text) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        // You will need to import `javafx.scene.control.Label`."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        Label textToAdd \u003d new Label(text);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        textToAdd.setWrapText(true);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        return textToAdd;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "     * Iteration 2:"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "     * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        String userText \u003d userInput.getText();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        String dukeText \u003d getResponse(userText);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "                DialogBox.getUserDialog(userText, userIv),"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "                DialogBox.getDukeDialog(dukeText, dukeIv)"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        );"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "     * You should have your own function to generate a response to user input."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "     * Replace this stub with your completed method."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    public String getResponse(String fullCommand) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "//        ui.showWelcome();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        boolean isExit \u003d false;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "            Command c \u003d Parser.parse(fullCommand);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "            isExit \u003d c.isExit();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "            if (isExit) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "                return c.execute(tasks, ui, storage);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "                return c.execute(tasks, ui, storage);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "            }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        } catch(DukeException e) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "            return e.getMessage();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chanjunren": 158,
      "-": 1
    }
  },
  {
    "path": "src/main/java/Launcher.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chanjunren"
        },
        "content": " * A launcher class to workaround classpath issues."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chanjunren"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        Application.launch(Duke.class, args);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chanjunren": 10
    }
  },
  {
    "path": "src/main/java/Main.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "public class Main extends Application {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    private Duke duke \u003d new Duke();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    public void start(Stage primaryStage) throws Exception {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "            AnchorPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "            Scene scene \u003d new Scene(ap);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "            primaryStage.setScene(scene);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "            primaryStage.show();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chanjunren": 26
    }
  },
  {
    "path": "src/main/java/MainWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "public class MainWindow extends AnchorPane {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    private Duke duke;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    public void setDuke(Duke d) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        duke \u003d d;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "     * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        String response \u003d duke.getResponse(input);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "                DialogBox.getUserDialog(input, userImage),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "                DialogBox.getDukeDialog(response, dukeImage)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        );"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chanjunren": 47
    }
  },
  {
    "path": "src/main/java/commands/AddCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "import exceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "import tasks.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "import tasks.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    private Task task;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    public AddCommand(Task task) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        this.task \u003d task;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    public String execute(TaskList taskList, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "            taskList.addNewTask(task);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "            storage.uploadTasksToFile(taskList.getTasks());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "            return ui.showAddTaskMsg(taskList.getListSize(), task.toString());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "            return e.getMessage();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chanjunren": 29
    }
  },
  {
    "path": "src/main/java/commands/ByeCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "import tasks.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "public class ByeCommand extends Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    public String execute(TaskList taskList, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        return ui.byeMessage();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chanjunren": 17
    }
  },
  {
    "path": "src/main/java/commands/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "import tasks.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "     * Updates the task list, text document file and displays the relevant relevant messages"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "     * according to the user\u0027s command"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "     * @param taskList consolidated list of tasks"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "     * @param ui prints the relevant messages according the user\u0027s commands"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "     * @param storage updates the text document file"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    public abstract String execute(TaskList taskList, Ui ui, Storage storage);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chanjunren": 21
    }
  },
  {
    "path": "src/main/java/commands/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "import exceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "import tasks.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "import tasks.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    private int taskIndex;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    public DeleteCommand(int taskIndex) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        this.taskIndex \u003d taskIndex;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    public String execute(TaskList taskList, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "            Task deleted \u003d taskList.deleteTask(taskIndex);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "            storage.uploadTasksToFile(taskList.getTasks());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "            return ui.showDelTaskMsg(deleted.toString(), taskList.getListSize());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "            return \"Enter a valid task index u pepega :)\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chanjunren": 28
    }
  },
  {
    "path": "src/main/java/commands/DoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "import tasks.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "public class DoneCommand extends Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    private int taskIndex;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    public DoneCommand(int taskIndex) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        this.taskIndex \u003d taskIndex;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    public String execute(TaskList taskList, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "            taskList.markAsDone(taskIndex);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "            storage.uploadTasksToFile(taskList.getTasks());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "            return ui.doneMessage(taskList.getTasks().get(taskIndex));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "            return \"Enter a valid task index u pepega :)\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chanjunren": 27
    }
  },
  {
    "path": "src/main/java/commands/FindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "import exceptions.TaskNotFoundException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "import tasks.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    private String key;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    public FindCommand(String key) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        this.key \u003d key;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    public String execute(TaskList taskList, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "            String res \u003d ui.findMessage(taskList.findTasks(key));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "            return res;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        } catch (TaskNotFoundException e) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "            return e.getMessage();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chanjunren": 24
    }
  },
  {
    "path": "src/main/java/commands/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "import tasks.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    public String execute(TaskList taskList, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        return ui.printTaskListMessage(taskList.getTasks());"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chanjunren": 12
    }
  },
  {
    "path": "src/main/java/exceptions/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "package exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    public DukeException(String message) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chanjunren": 7
    }
  },
  {
    "path": "src/main/java/exceptions/InvalidCommandException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "package exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "public class InvalidCommandException extends DukeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    public InvalidCommandException(String message) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chanjunren": 7
    }
  },
  {
    "path": "src/main/java/exceptions/InvalidDescriptionException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "package exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "public class InvalidDescriptionException extends DukeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    public InvalidDescriptionException(String message) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chanjunren": 7
    }
  },
  {
    "path": "src/main/java/exceptions/TaskNotFoundException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "package exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "public class TaskNotFoundException extends DukeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    public TaskNotFoundException(String message) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chanjunren": 7
    }
  },
  {
    "path": "src/main/java/parser/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "package parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "import commands.*;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "import exceptions.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "import exceptions.InvalidCommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "import exceptions.InvalidDescriptionException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "import tasks.Deadline;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "import tasks.Event;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "import tasks.Todo;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "     * Interprets the user\u0027s input and returns the respective command."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "     * @param command user\u0027s input string"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "     * @return command according to user\u0027s input"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "     * @throws InvalidDescriptionException empty description of task"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "     * @throws InvalidCommandException unknown command"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    public static Command parse(String command) throws DukeException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        String[] splitString \u003d command.split(\" \");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        String taskType \u003d splitString[0];"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        if (command.equals(\"list\")) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        } else if (splitString[0].equals(\"done\")) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "            int taskIndex \u003d Integer.valueOf(splitString[1]) - 1;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "            return new DoneCommand(taskIndex);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        } else if (command.equals(\"bye\")) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "            return new ByeCommand();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        } else if (taskType.equals(\"todo\")) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "            String[] todoSplit \u003d command.split(\"todo \");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "            if (todoSplit.length \u003d\u003d 1 || todoSplit[1].isEmpty()) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "                throw new InvalidDescriptionException(\"\\u2639 OOPS!!! The description of a todo cannot be empty.\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "            }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "            return new AddCommand(new Todo(todoSplit[1].trim()));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        } else if (taskType.equals(\"deadline\")) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "            //branch lvl 8 test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "            DateTimeFormatter dtf \u003d DateTimeFormatter.ofPattern(\"d/MM/yyyy HHmm\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "            String[] deadlineSplit \u003d command.split(\"/by \");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "            String[] temp \u003d deadlineSplit[0].split(\"deadline \");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "            if (temp.length \u003d\u003d 1 || temp[1].isEmpty()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "                throw new InvalidDescriptionException(\"\\u2639 OOPS!!! The description of a deadline cannot be empty.\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "            }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "            if (deadlineSplit.length \u003c 2) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "                throw new InvalidDescriptionException(\"\\u2639 OOPS!!! The date of a deadline cannot be empty.\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "            }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "                LocalDateTime ldt \u003d LocalDateTime.parse(deadlineSplit[1].trim(), dtf);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "                return new AddCommand(new Deadline(temp[1].trim(), ldt, deadlineSplit[1].trim()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "            } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "                throw new DukeException(\"Please enter a valid date in the format DD/MM/YYYY\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "            }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        } else if (taskType.equals(\"event\")) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "                String[] eventSplit \u003d command.split(\"/at \");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "                String[] temp \u003d eventSplit[0].split(\"event \");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "                DateTimeFormatter dtf \u003d DateTimeFormatter.ofPattern(\"d/MM/yyyy HHmm\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "                if (temp.length \u003d\u003d 1 || temp[1].isEmpty()) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "                    throw new InvalidDescriptionException(\"\\u2639 OOPS!!! The description of a event cannot be empty.\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "                }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "                if (eventSplit.length \u003c 2) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "                    throw new InvalidDescriptionException(\"\\u2639 OOPS!!! The date of a event cannot be empty.\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "                }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "                LocalDateTime ldt \u003d LocalDateTime.parse(eventSplit[1].trim(), dtf);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "                return new AddCommand(new Event(temp[1].trim(), ldt, eventSplit[1].trim()));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "            } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "                throw new DukeException(\"Please enter a valid date in the format DD/MM/YYYY\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "            }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        } else if (taskType.equals(\"delete\")) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "            int taskIndex \u003d Integer.valueOf(splitString[1]) - 1;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "            return new DeleteCommand(taskIndex);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        } else if (taskType.equals(\"find\")) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "            StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "            for (int i \u003d 1; i \u003c splitString.length; i++) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "                builder.append(splitString[i] + \" \");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "            }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "            return new FindCommand(builder.toString().trim());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "            throw new InvalidCommandException(\"\\u2639 OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "}"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "chanjunren": 88
    }
  },
  {
    "path": "src/main/java/storage/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "package storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "import exceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "import tasks.Deadline;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "import tasks.Event;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "import tasks.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "import tasks.Todo;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    private String filePath;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    public Storage(String filePath) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "     * Loads the tasks stored in the file and returns them as a list of tasks."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "     * @return list of tasks stored in the text document"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "     * @throws DukeException err i not v sure"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    public ArrayList\u003cTask\u003e load() throws DukeException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "            String content \u003d new String(Files.readAllBytes(Paths.get(filePath)), \"UTF-8\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "            String[] storedTasks \u003d content.split(\"\\n\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "            // Adding tasks stored in the text file"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "            for (String s: storedTasks) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "                if (s.charAt(0) \u003d\u003d \u0027T\u0027) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "                    Todo todo \u003d new Todo(s.substring(8));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "                    if (s.charAt(4) !\u003d \u00270\u0027) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "                        todo.markAsDone();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "                    tasks.add(todo);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "                } else if (s.charAt(0) \u003d\u003d \u0027E\u0027) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "                    String[] tempSplit \u003d s.substring(8).split(\"\\\\u007C \");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "                    DateTimeFormatter dtf \u003d DateTimeFormatter.ofPattern(\"d/MM/yyyy HHmm\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "                    LocalDateTime ldt \u003d LocalDateTime.parse(tempSplit[1].trim(), dtf);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "                    Event event \u003d new Event(tempSplit[0].trim(), ldt, tempSplit[1].trim());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "                    if (s.charAt(4) !\u003d \u00270\u0027) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "                        event.markAsDone();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "                    tasks.add(event);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "                } else if (s.charAt(0) \u003d\u003d \u0027D\u0027) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "                    String[] tempSplit \u003d s.substring(8).split(\"\\\\u007C \");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "                    DateTimeFormatter dtf \u003d DateTimeFormatter.ofPattern(\"d/MM/yyyy HHmm\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "                    LocalDateTime ldt \u003d LocalDateTime.parse(tempSplit[1].trim(), dtf);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "                    Deadline deadline \u003d new Deadline(tempSplit[0].trim(), ldt, tempSplit[1].trim());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "                    if (s.charAt(4) !\u003d \u00270\u0027) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "                        deadline.markAsDone();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "                    tasks.add(deadline);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "                    throw new DukeException(\"Invalid Duke File\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "                }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "            }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        } finally {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "            return tasks;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "     * Writes the tasks into the text document."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "     * @param tasks list of tasks"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    public void uploadTasksToFile(ArrayList\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "            FileWriter fw \u003d new FileWriter(new File(\"data/duke.txt\"));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "            for (int i \u003d 0; i \u003c tasks.size(); i++) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "                String type \u003d tasks.get(i) instanceof Event ? \"E\""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "                        : tasks.get(i) instanceof Todo ? \"T\""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "                        : tasks.get(i) instanceof Deadline ? \"D\""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "                        : \"INVALID CLASS\";"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "                String isDone \u003d tasks.get(i).isDone() ? \"1\" : \"0\";"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "                if (tasks.get(i) instanceof Todo) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "                    fw.append(type + \" | \" + isDone + \" | \" + tasks.get(i).getDescription());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "                } else if (tasks.get(i) instanceof Event) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "                    fw.append(type + \" | \" + isDone + \" | \" + tasks.get(i).getDescription() + \" | \""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "                            + ((Event) tasks.get(i)).getEventDateString());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "                } else if (tasks.get(i) instanceof  Deadline) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "                    fw.append(type + \" | \" + isDone + \" | \" + tasks.get(i).getDescription() + \" | \""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "                            + ((Deadline) tasks.get(i)).getTaskDeadlineString());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "                }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "                if (i !\u003d tasks.size() - 1) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "                    fw.append(\"\\n\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "                }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "            }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "            fw.close();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chanjunren": 104
    }
  },
  {
    "path": "src/main/java/tasks/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "package tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    protected LocalDateTime taskDeadline;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    protected String taskDeadlineString;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    public Deadline(String description, LocalDateTime taskDeadline, String taskDeadlineString) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        this.taskDeadline \u003d taskDeadline;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        this.taskDeadlineString \u003d taskDeadlineString;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "     * Returns the deadline date as a String as per user input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "     * @return dateline date as a string"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    public String getTaskDeadlineString() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        return taskDeadlineString;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        return \"[D]\" + super.toString() + \" (by: \" + taskDeadlineString + \")\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chanjunren": 28
    }
  },
  {
    "path": "src/main/java/tasks/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "package tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "public class Event extends Task{"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    protected LocalDateTime eventDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    protected String eventDateString;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    public Event(String description, LocalDateTime eventDate, String eventDateString) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        this.eventDate \u003d eventDate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        this.eventDateString \u003d eventDateString;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "     * Returns the event date as a String as per user input."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "     * @return event date as a string"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    public String getEventDateString() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        return eventDateString;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        return \"[E]\" + super.toString() + \" (at: \" + eventDateString + \")\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chanjunren": 27
    }
  },
  {
    "path": "src/main/java/tasks/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "package tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "     * Returns a tick or a cross as a string depending on whether task is completed."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "     * @return string or cross as a string"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        return (isDone ? \"\\u2713\" : \"\\u2718\"); //return tick or X symbols"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "     * Returns a boolean indicating whether task is completed."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "     * @return boolean if task is completed or not"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    public boolean isDone() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        return isDone;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "     * Returns description of task as a String."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "     * @return task description"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "     * Sets the boolean isDone as true."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    public void markAsDone() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        return \"[\" + getStatusIcon() + \"] \" + description;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    //..."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chanjunren": 49
    }
  },
  {
    "path": "src/main/java/tasks/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "package tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "import exceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "import exceptions.TaskNotFoundException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    private ArrayList\u003cTask\u003e tasks;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    public TaskList(ArrayList\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        this.tasks \u003d tasks;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        this.tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "     * Returns the total number of lists."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "     * @return size of list as an integer"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    public int getListSize() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        return tasks.size();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    public String getTaskString(int index) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        return tasks.get(index).toString();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "     * Finds the task of which description contains the key string."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "     * @param key keyword inputted by user"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "     * @return list of tasks that contains the keyword"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    public ArrayList\u003cTask\u003e findTasks (String key) throws TaskNotFoundException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        ArrayList\u003cTask\u003e temp \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        for (Task t: tasks) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "            if (t.getDescription().contains(key)) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "                temp.add(t);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "            }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        if (temp.isEmpty()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "            throw new TaskNotFoundException(\"There are no tasks with the inputted key :(\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        return temp;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "     * Adds a new task to the list of tasks"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "     * @param task task to be added"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "     * @throws DukeException"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    public void addNewTask(Task task) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        tasks.add(task);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "     * Removes a task from the list of tasks and returns it."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "     * @param index index of file to be deleted"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "     * @return deleted task"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    public Task deleteTask(int index) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        return tasks.remove(index);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "     * Marks the indicated task as done."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "     * @param taskIndex task to be marked as done"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    public void markAsDone(int taskIndex) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        tasks.get(taskIndex).markAsDone();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "     * Returns the list of tasks as an array list."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    public ArrayList\u003cTask\u003e getTasks() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        return tasks;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chanjunren": 82
    }
  },
  {
    "path": "src/main/java/tasks/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "package tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "public class Todo extends Task {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    public Todo(String description) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chanjunren": 12
    }
  },
  {
    "path": "src/main/java/ui/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "package ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "import tasks.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    private static final String LOGO \u003d \" ____        _        \\n\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "            + \"|  _ \\\\ _   _| | _____ \\n\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "            + \"| | | | | | | |/ / _ \\\\\\n\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "            + \"| |_| | |_| |   \u003c  __/\\n\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "            + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    private static final String WELCOME_MESSAGE \u003d \"Hello from\\n\" + LOGO;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    private static final String DIVIDER_LINE \u003d \"_______\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "     * Prints the welcome message."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    public String showWelcome() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        return WELCOME_MESSAGE;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "     * Prints a message once a task has been added."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "     * @param numOfTasks total number of tasks after a task has been added"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "     * @param taskDescription description of the newly added task"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    public String showAddTaskMsg(int numOfTasks, String taskDescription) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        builder.append(\"Got it. I\u0027ve added this task:\\n  \" + taskDescription + \"\\n\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        if (numOfTasks \u003d\u003d 1) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "            builder.append(\"Now you have \" + numOfTasks + \" task in the list.\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "            builder.append(\"Now you have \" + numOfTasks + \" tasks in the list.\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "     * Prints a message once a task has been deleted"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "     * @param removedTask description of removed task"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "     * @param numOfTasks total number of tasks that are left in the list"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    public String showDelTaskMsg(String removedTask, int numOfTasks) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        sb.append(\"Noted. I\u0027ve removed this task:\\n  \" + removedTask + \"\\n\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        if (numOfTasks \u003d\u003d 1) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "            sb.append(\"Now you have \" + numOfTasks + \" task in the list.\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "            sb.append(\"Now you have \" + numOfTasks + \" tasks in the list.\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "     * Prints the tasks stored in a list."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "     * @param tasks arraylist of tasks stored."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    public String printTaskListMessage(ArrayList\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        sb.append(\"Here are the tasks in your list:\\n\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        sb.append(getTaskListStringOf(tasks));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    public String getTaskListStringOf(ArrayList\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        for (int i \u003d 0; i \u003c tasks.size(); i++) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "            sb.append(i + 1 + \".\" + tasks.get(i).toString() + \"\\n\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "     * Prints a message once the command find has been entered."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    public String findMessage(ArrayList\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        sb.append(\"Here are the matching tasks in your list:\\n\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        sb.append(getTaskListStringOf(tasks));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "     * Displays a message once command \u0027Bye\u0027 has been entered."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    public String byeMessage() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        return \"Bye! Hope to see you again!\";"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "     * Displays a message once task is done."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "     * @param task task that is done"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    public String doneMessage(Task task) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        sb.append(\"Nice! I\u0027ve marked this task as done:\\n\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        sb.append(\"    [\" + task.getStatusIcon() + \"] \" +"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "                task.getDescription());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "     * Prints an error message if there is a loading error."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    public void showLoadingError() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "     * Prints an error message."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "     * @param errorMessage description of error message"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    public void showError(String errorMessage) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        System.out.println(errorMessage);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "     * Prints a line divider."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    public String showLine() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "        return DIVIDER_LINE;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chanjunren": 125
    }
  },
  {
    "path": "src/main/resources/view/DialogBox.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "      \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "      \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "   \u003cpadding\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "      \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "   \u003c/padding\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "chanjunren": 16
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"MainWindow\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "      \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "      \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "      \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "         \u003ccontent\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "            \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "         \u003c/content\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "      \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "chanjunren": 19
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "if not exist ..\\bin mkdir ..\\bin"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "REM delete output from previous run"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "del ACTUAL.TXT"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "REM compile the code into the bin folder"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "javac  -cp ..\\src -Xlint:none -d ..\\bin ..\\src\\main\\java\\Duke.java"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "    exit /b 1"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ")"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "java -classpath ..\\bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chanjunren"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT"
      }
    ],
    "authorContributionMap": {
      "chanjunren": 21
    }
  },
  {
    "path": "tutorials/gradleTutorial.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# Gradle Tutorial"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "Gradle is a _build automation tool_ used to automate build processes. There are many ways of integrating Gradle into a project. In this guide, we will be using the _Gradle wrapper_."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "* [Introduction](#introduction)"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "* [Adding Gradle Support to Your Project](#adding-gradle-support-to-your-project)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "* [Adding Plugins](#adding-plugins)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "  * [CheckStyle](#checkstyle)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "  * [Shadow](#shadow)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "* [Adding Dependencies](#adding-dependencies)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "  * [JUnit](#junit)"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "* [Further Reading](#further-reading)"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "## Introduction"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "As a developer, you write a _build file_ that describes the project. A build file mainly consists of _plugins_, _tasks_ and _properties_. "
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "* **Plugins** extend the functionality of Gradle. For example, the `java` plugin adds support for `Java` projects."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chanjunren"
        },
        "content": "* **tasks** are reusable blocks of logic.  For example, the task `clean` simply deletes the project build directory. tasks can be composed of other tasks or be dependent on another task. "
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "* **Properties** change the behavior of tasks. For instance, `mainClassName` of the `application` plugin is a compulsory property which tells Gradle which class is the entrypoint to your application."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "  As Gradle favors [_convention over configuration_](https://en.wikipedia.org/wiki/Convention_over_configuration), there is not much to you need to configure if you follow the recommended directory structure."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "## Adding Gradle Support to Your Project "
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "1. Pull the branch named `gradle`. Merge it to the `master` branch. This will add the Gradle wrapper to your project."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "   git checkout --track origin/gradle"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "   git checkout master"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "   git merge gradle"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "1. Open the `build.gradle` file in an editor. Update the following code block to point to the main class (i.e., the one containing the `main` method) of your application. The code below assumes your main class is `seedu.duke.Duke`"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "   ```groovy"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "   application {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "       mainClassName \u003d \"seedu.duke.Duke\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "   }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "1. To check if Gradle has been added to the project correctly, open a terminal window, navigate to the root directory of your project and run the command `gradlew run`. This should result in Gradle running the main method of your project."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ":bulb: Simply run the command `gradlew {taskName}` in the terminal and Gradle will run the task! Here are some example commands:"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "* `gradlew tasks` (or `gradlew tasks --all`): shows a list of tasks available"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "* `gradlew run`: runs the main class of your project"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ":bulb: Some plugins may add more helpful tasks so be sure to check their documentation!"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "#### Using Gradle from within Intellij"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "1. After adding support for Gradle, Intellij might automatically ask you (via a pop-up at the bottom right corner of the Window) whether to import the project as a Gradle project. In that case, go ahead and say yes."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "1. If the above didn\u0027t happen, import the Gradle project by `Help \u003e Find Action \u003e Import Gradle Project`."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "   ![Import Gradle](assets/ImportGradle.png)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "1. If the above didn\u0027t work either, close Intellij, delete the Intellij project files (i.e., `.idea` folder and `*.iml` files), and set up the project again, but instead of choosing `Create project from existing sources`, choose `Import project from external model` -\u003e `Gradle`."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "After this, IntelliJ IDEA will identify your project as a Gradle project and you will gain access to the `Gradle Toolbar`. Through the toolbar, you run Gradle tasks and view your project\u0027s dependencies."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "You can click on the Gradle icon in the Gradle toolbar and create a new run configuration for running Gradle tasks without needing to type a `gradlew` command."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "![Gradle icon](assets/GradleIcon.png)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "## Adding Plugins"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "Gradle plugins are reusable units of build logic. Most common build tasks are provided as core plugins by Gradle. Given below are instructions on how to use some useful plugins:"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "### CheckStyle"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "To add support for _Checkstyle_ (a tool to check if your code complies with a set of style rules), which comes as a core plugin, simply add the line `id \u0027checkstyle\u0027` into the `plugins` block."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "Your build file should look something like this now:"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "```groovy"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "// ..."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "Checkstyle expects configuration files for checkstyle to be in `./config/checkstyle/` by convention."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "A sample checkstyle rule configuration is provided in the branch."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "The plugin adds a few _tasks_ to your project. Run `gradlew checkstyleMain checkstyleTest` to verify that you have set up Checkstyle properly (the command will check your main code and test code against the style rules)."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "**Resources**:"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "* [Gradle documentation for CheckStyle plugin](https://docs.gradle.org/current/userguide/checkstyle_plugin.html)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "### Shadow"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "Shadow is a plugin that packages an application into an executable jar file. To use it, first add the following line to your Gradle build file:"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "```groovy"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    //..."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    //..."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "The plugin can be configured by setting some properties. Let\u0027s try to produce a jar file with the name in format of `{baseName}-{version}.jar`."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "Add the following block to your build file:"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "```groovy"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveVersion \u003d \"0.1.3\""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "Now you can run the command `gradlew shadowJar`.It publishes an executable jar to `./build/libs/`. You should be able to able to execute the created jar file by double-clicking it or using the command `java -jar {jarName}`?"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "**Resources**:"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "* [Gradle documentation for Shadow plugin](https://plugins.gradle.org/plugin/com.github.johnrengelman.shadow)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "* [Gradle documentation for JUnit](https://docs.gradle.org/current/userguide/java_testing.html#using_junit5)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "* [More about the Shadow plugin](https://imperceptiblethoughts.com/shadow/introduction/)"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "## Adding Dependencies"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "Gradle can automate the management of dependencies to third-party libraries. Given below are some examples."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "### JUnit"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "JUnit is a testing framework for Java. It allows developers to write tests and run them. To manage JUnit dependency via Gradle, add the following to your build file:"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "```groovy"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "Then, configure Gradle to use JUnit by adding the following block to your build file:"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "```groovy"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "By convention, java tests belong in `src/test/java` folder. Create a new `test/java` folder in under `src`."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "src"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "├─main"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "│  └─java"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "│     └─seedu/duke/Duke.java"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "└─test"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    └─java"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        └─seedu/duke/DukeTest.java"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "If you have imported your Gradle project into IntelliJ IDEA, you will notice that IDEA is able to mark the test directory as the _Test root_ (colored in green by default) automatically."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "You can now write a test (e.g., `test/java/seedu/duke/DukeTest.java`) and run it with `gradlew test`."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "**Resources**:"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "* [Gradle documentation for JUnit](https://docs.gradle.org/current/userguide/java_testing.html#using_junit5)"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "## Further Reading"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "Now that you have a general idea of how to accomplish basic tasks with Gradle, here\u0027s a list of material you can read to further your understanding."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": " "
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "* [Official Gradle Documentation](https://docs.gradle.org/current/userguide/userguide.html)"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "----------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "**Authors:**"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "* Initial Version: Jeffry Lum"
      }
    ],
    "authorContributionMap": {
      "chanjunren": 1,
      "-": 169
    }
  }
]
