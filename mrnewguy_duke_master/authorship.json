[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "group \u0027duke\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    // Change this to your main class."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    mainClassName \u003d \"duke.Launcher\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    archiveVersion \u003d \"0.1.3\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-media\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-media\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-media\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-web\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-web\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-web\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "test {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mrnewguy": 45,
      "-": 13
    }
  },
  {
    "path": "docs/README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "## Introduction"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "This is a user guide for the Individual Project segment of the CS2103T module."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "While lacking in serious functionality, this segment provides "
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "a strong base for the understanding of the addressbook code. "
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "The duke program is a task-tracker that allows its user to add 3 "
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "types of tasks - To do tasks, Deadline task and Event tasks. The "
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "specifics of each task will be elaborated below. "
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "In addition, the user can view all the tasks, mark the status of each task,"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "delete each task, find a keyword, tag a task and find a tag. "
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "The specifics of each feature will be elaborated "
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "below."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "## What the app looks like"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "![Screenshot of the app](Ui.png)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "## Tasks "
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "### 1  - Todo tasks"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "The user can add a simple to do task to the program."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "#### Command"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "To add a todo task, type the following into the program."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "For example, a user would like to \"eat an apple\". Thus, the user "
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "can input the following command:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "```"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "todo eat an apple"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "```"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "The task will be displayed as: "
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "```"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "[T][X] eat an apple"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "```"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "### 2  - Deadline tasks"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "The user can add a simple task with a pre-determined "
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "deadline to the program."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "#### Command"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "To add a deadline task, type the following into the program."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "For example, a user would like to \"return a book by 31st October"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "2019 6.30pm\". Thus, the user can input the following command:"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "```"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "deadline return book /by 2019-10-31T18:30:00"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "```"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "The task will be displayed as: "
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "```"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "[D][X] return book (by: 31 OCTOBER 1830 hours)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "```"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "### 3  - Event tasks"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "The user can add an event task with a pre-determined "
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "starting time and ending time to the program."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "#### Command"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "To add a event task, type the following into the program."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "For example, a user has a \"project meeting on the 20th October from"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "6.30am to 7.30am\". Thus, the user can input the following command:"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "```"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "event project meeting /at 2019-10-20T06:30:00 2019-10-20T07:30:00"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "```"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "The task will be displayed as: "
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "```"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "[E][X] project meeting (at: 20 OCTOBER 0630 hours to 20 OCTOBER 0730 hours)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "```"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "## Features "
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "### 1 - List tasks"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "The user can list all the tasks in the tasklist by typing the"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "following command:"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "#### Command"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "```"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "list"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "```"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "The tasks will be displayed in this style: "
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "```"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "1 [T][X] eat an apple"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "2.[D][X] return book (by: 31 OCTOBER 1830 hours)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "3.[E][X] project meeting (at: 20 OCTOBER 0630 hours to 20 OCTOBER 0730 hours)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "```"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "### 2 - Mark status of task"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "The user can mark a task as \"Done\" using this command:"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "#### Command"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "For example, if he wants to mark the 1st task as done:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "```"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "done 1"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "```"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "The task will be displayed as: "
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "```"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "1 [T][✓] eat an apple"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "```"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "### 3 - Delete a task"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "The user can delete a task by its index."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "#### Command"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "```"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "delete 1"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "```"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "The task will be removed and not be displayed when a user types"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "the \u0027list\u0027 command."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "### 4 - Find a keyword"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "The user can search for a task using a keyword."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "#### Command"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "For example, the user wants to find all the tasks that mention"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "the word \u0027book\u0027. Thus, the user can input the following command:"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "```"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "find book"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "```"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "Tasks containing the keyword book will be displayed:"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "```"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "1.[T][X] return a book"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "2.[E][X] book a meeting room (at: 20 OCTOBER 0630 hours to 20 OCTOBER 0730 hours)"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "```"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "### 5 - Tag a task"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "The user can tag a task with a keyword."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "#### Command"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "For example, the user wants to tag a task a #homework: "
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "```"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "tag 1 #homework"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "```"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "### 6 - Find a #tag"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "The user can find tasks categorised according to their tags."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "#### Command"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "To find all tasks with the tag #homework, the user can input the following command:"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "```"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "find #homework"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "```"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "Tasks tagged with #homework will be displayed as: "
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "```"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "1. [E][X] project meeting (at: 20 OCTOBER 0630 hours to 20 OCTOBER 0730 hours)"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "2. [T][X] buy a textbook"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "```"
      }
    ],
    "authorContributionMap": {
      "mrnewguy": 130,
      "-": 11
    }
  },
  {
    "path": "duke.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "D|1|return book |2019-10-31T18:30"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "E|1|project meeting |2019-10-20T06:30|2019-10-20T07:30"
      }
    ],
    "authorContributionMap": {
      "mrnewguy": 2
    }
  },
  {
    "path": "src/main/java/duke/DialogBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": " * An example of a custom control using FXML."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": " * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": " * containing text from the speaker."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * The DialogBox constructor takes in a text and an image, and creates a new dialog box."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * "
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * @param text"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * @param img"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    private DialogBox(String text, Image img) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        displayPicture.setImage(img);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        this.setHeight(Region.USE_COMPUTED_SIZE);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        Collections.reverse(tmp);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    public static DialogBox getUserDialog(String text, Image img) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        return new DialogBox(text, img);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    public static DialogBox getDukeDialog(String text, Image img) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        DialogBox db \u003d new DialogBox(text, img);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mrnewguy": 67
    }
  },
  {
    "path": "src/main/java/duke/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "import duke.parser.Parser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "import duke.storage.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "import duke.ui.UI;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": " * This class is where the main classes of the class are instantiated."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke  {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    private String filepath;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    private TaskList taskList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    private Parser parser;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    private UI ui;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * The constructor initiates the storage, tasklist and parser objects."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    public Duke() throws DukeException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        this.filepath \u003d \"./duke.txt\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        this.storage \u003d new Storage(filepath);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        this.taskList \u003d storage.loadStorage();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        this.ui \u003d new UI();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        this.parser \u003d new Parser(storage, taskList, ui);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * @return the parser used for \u0027cleaning\u0027 and executing commands"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    public Parser getParser(){"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        return parser;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mrnewguy": 35,
      "-": 3
    }
  },
  {
    "path": "src/main/java/duke/Launcher.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": " * A launcher class to workaround classpath issues."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        Application.launch(Main.class, args);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mrnewguy": 11
    }
  },
  {
    "path": "src/main/java/duke/Main.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": " * A GUI for Duke using FXML."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "public class Main extends Application {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    private Duke duke;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "            AnchorPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "            Scene scene \u003d new Scene(ap);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "            stage.setTitle(\"Cool Duke\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "            duke \u003d new Duke();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "             e.printStackTrace();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        } catch(DukeException e){"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "            System.out.println(e);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mrnewguy": 36
    }
  },
  {
    "path": "src/main/java/duke/MainWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "import duke.ui.UI;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": " * Controller for MainWindow. Provides the layout for the other controls."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "public class MainWindow extends AnchorPane {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    private Duke duke;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    private Image userImage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    private Image dukeImage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * A workaround for getResourceAsStream()."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * Uses FileInputStream rather than the above method."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * "
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * @param input"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * @return a new Image which can be added to the dialog box control"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    public Image getImages(String input){"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        return new Image(this.getClass().getResourceAsStream(input));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "            userImage \u003d getImages(\"/images/DaUser.png\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        }catch(Exception e){"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "            System.out.println(e);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "            dukeImage \u003d getImages(\"/images/DaDuke.png\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        }catch(Exception e){"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "            System.out.println(e);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        dialogContainer.getChildren().addAll(DialogBox.getDukeDialog(new UI().returnWelcomeMessage(), dukeImage));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    public void setDuke(Duke duke) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        this.duke \u003d duke;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        String response;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "            response \u003d duke.getParser().parse(input);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        }catch(DukeException e){"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "            response \u003d e.toString();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        if(response.equals(\"Bye. Hope to see you again soon!\")){"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "            dialogContainer.getChildren().addAll(DialogBox.getDukeDialog(response, dukeImage));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "            Platform.exit();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        }else{"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "            dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "                    DialogBox.getUserDialog(input, userImage),"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "                    DialogBox.getDukeDialog(response, dukeImage)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "            );"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "            userInput.clear();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mrnewguy": 85
    }
  },
  {
    "path": "src/main/java/duke/commands/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "import duke.storage.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": " * The parent class of other command classes."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "public class Command{"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    protected String rawCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    protected TaskList taskList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * Constructor for command class."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     *  "
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * @param rawCommand takes in the raw commmand"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * @param taskList taskList is used to store tasks"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    public Command (String rawCommand, TaskList taskList){"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        this.rawCommand \u003d rawCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        this.taskList \u003d taskList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    "
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * Processes the raw command. "
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * "
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * @return a cleaned command"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    public String processCommand() throws DukeException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * Executes the instructions as per the processedCommand."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * "
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * @param processedCommand"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * @return a String detailing the process (e.g. task deleted)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    public String execute(String processedCommand){"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mrnewguy": 43
    }
  },
  {
    "path": "src/main/java/duke/commands/DeadLineCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "import duke.storage.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "import duke.tasks.DeadlinesTask;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": " * Deadline command is used to create DeadLine tasks."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "public class DeadLineCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * Constructor for DeadLineCommand class."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * "
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * @param rawCommand takes in the raw commmand"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * @param taskList taskList is used to store tasks"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    public DeadLineCommand(String rawCommand, TaskList taskList ){"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        super(rawCommand, taskList);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * Takes in \u0027dirty\u0027 string and cleans it."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * Also creates the deadline task and executes it."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * "
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * @return a string containing the procesedCommand"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    public String processCommand() throws DukeException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        if (rawCommand.split(\" \").length \u003c 2){"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "            throw new DukeException(\"OOPS!!! I\u0027m sorry, but the description of a task cannot be empty.\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        String taskName \u003d rawCommand.split(\" \", 2) [1];"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        String [] deadlineArray \u003d super.rawCommand.split(\"/by \");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        "
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        if(deadlineArray.length \u003c 2){"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "            throw new DukeException(\"OOPS!!! The date of a deadline cannot be empty.\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        String deadLineTime \u003d deadlineArray[deadlineArray.length - 1];"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "            LocalDateTime deadlineDateTime \u003d LocalDateTime.parse(deadLineTime);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "            String newTaskName \u003d taskName.split(\"/\")[0];        "
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "            DeadlinesTask newTask1 \u003d new DeadlinesTask(false, newTaskName, deadlineDateTime);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "            String toPrint1 \u003d taskList.add(newTask1);    "
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "            return toPrint1;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        }catch(DateTimeParseException e){"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "            throw new DukeException(\"OOPS!!! Date time format is wrong!\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * Returns the process."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * "
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * @return a String detailing the process (i.e. task added)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    public String execute(String processedCommand){"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        return processedCommand;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    "
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mrnewguy": 63
    }
  },
  {
    "path": "src/main/java/duke/commands/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "import duke.storage.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": " * Delete command is used to create Delete tasks."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * Constructor for DeleteCommand class."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * "
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * @param rawCommand takes in the raw commmand"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * @param taskList taskList is used to store tasks"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    public DeleteCommand(String rawCommand, TaskList taskList ){"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        super(rawCommand, taskList);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * Takes in \u0027dirty\u0027 string and cleans it."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * "
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * @return a string containing the procesedCommand"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    public String processCommand() throws DukeException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        if (rawCommand.split(\" \").length \u003c 2){"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "            throw new DukeException(\"OOPS!!! I\u0027m sorry, but the description of a task cannot be empty.\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        String taskName \u003d rawCommand.split(\" \", 2) [1];"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        if(containsNonNumber(taskName)){"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "            throw new DukeException(\"OOPS!!! You have chosen an invalid task number!\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        }else{"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "            int offset \u003d Integer.parseInt(taskName) - 1;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "            if(offset \u003e taskList.size() - 1){"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "                throw new DukeException(\"OOPS!!! There aren\u0027t so many tasks!\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "            }else{"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "                return Integer.toString(offset);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * Calls the deleteTask method of the tasklist"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * "
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * @return a String detailing the process (i.e. task deleted)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    public String execute(String processedCommand){"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        return taskList.deleteTask(Integer.parseInt(processedCommand));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    public boolean containsNonNumber(String taskName){"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        return taskName.matches(\".*[a-zA-Z]+.*\") || taskName.contains(\"-\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "} "
      }
    ],
    "authorContributionMap": {
      "mrnewguy": 59
    }
  },
  {
    "path": "src/main/java/duke/commands/DoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "import duke.storage.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": " * Done command is used to create Done tasks."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "public class DoneCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * Constructor for DoneCommand class."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * "
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * @param rawCommand takes in the raw commmand"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * @param taskList taskList is used to store tasks"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    public DoneCommand(String rawCommand, TaskList taskList ){"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        super(rawCommand, taskList);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * Takes in \u0027dirty\u0027 string and cleans it."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * "
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * @return a string containing the procesedCommand"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    public String processCommand() throws DukeException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        if (rawCommand.split(\" \").length \u003c 2){"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "            throw new DukeException(\"OOPS!!! I\u0027m sorry, but the description of a task cannot be empty.\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        String userIndex \u003d super.rawCommand.split(\" \", 2)[1];"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        "
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        if (containsNonNumber(userIndex)){"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "            throw new DukeException(\"OOPS!!! You have chosen an invalid task number!\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        }else {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "            String stringFromUser \u003d super.rawCommand.replaceAll(\"\\\\D+\",\"\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "            Integer indexFromUser \u003d Integer.parseInt(stringFromUser);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "            if(indexFromUser \u003e taskList.size() || indexFromUser \u003c 1 ){"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "                String taskListMaxIndex \u003d Integer.toString(taskList.size()) ;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "                throw new DukeException(\"OOPS!!! Please choose a number from 1 to \" +taskListMaxIndex );"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "            }else{"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "                return Integer.toString(indexFromUser);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * Method to check whether user input contains any invalid string for donecommand."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * "
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * @param userIndex"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * @return boolean depending on whether it contains an invalid done string."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    public boolean containsNonNumber(String userIndex){"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        return userIndex.matches(\".*[a-zA-Z]+.*\") || userIndex.contains(\"-\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * Calls the deleteTask method of the tasklist"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * "
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * @return a String detailing the process (i.e. task done)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    public String execute(String processedCommand){"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        Integer indexFromUser \u003d Integer.parseInt(processedCommand); "
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        return taskList.doneTask(indexFromUser - 1);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    "
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mrnewguy": 70
    }
  },
  {
    "path": "src/main/java/duke/commands/EventCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "import duke.storage.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "import duke.tasks.EventsTask;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": " * Event command is used to create Event tasks."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "public class EventCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * Constructor for EventCommand class."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * "
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * @param rawCommand takes in the raw commmand"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * @param taskList taskList is used to store tasks"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    public EventCommand(String rawCommand, TaskList taskList ){"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        super(rawCommand, taskList);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * Takes in \u0027dirty\u0027 string and cleans it."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * Also creates a new event task."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * "
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * @return a string containing the procesedCommand"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    public String processCommand() throws DukeException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        if (rawCommand.split(\" \").length \u003c 2){"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "            throw new DukeException(\"OOPS!!! I\u0027m sorry, but the description of a task cannot be empty.\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        String taskName \u003d rawCommand.split(\" \", 2) [1];"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        String [] deadlineArray1 \u003d super.rawCommand.split(\"/\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        if(deadlineArray1.length \u003c 2){"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "            throw new DukeException(\"OOPS!!! The date of an event cannot be empty.\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        String newTaskName1 \u003d taskName.split(\"/\")[0];"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        String [] timeArray \u003d taskName.split(\" \");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        String startingDateTimeString \u003d timeArray[timeArray.length - 2];"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        String endingDateTimeString \u003d timeArray[timeArray.length - 1];"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "            LocalDateTime startingDateTime \u003d LocalDateTime.parse(startingDateTimeString);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "            LocalDateTime endingDateTime \u003d LocalDateTime.parse(endingDateTimeString);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "            EventsTask newTask2 \u003d new EventsTask (false, newTaskName1, startingDateTime, endingDateTime);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "            String toPrint2 \u003d taskList.add(newTask2);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "            return toPrint2;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        }catch(DateTimeParseException e){"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "            throw new DukeException(\"OOPS!!! Date time format is wrong!\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * "
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * @return a String detailing the process."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    public String execute(String processedCommand){"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        return processedCommand;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    "
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mrnewguy": 65
    }
  },
  {
    "path": "src/main/java/duke/commands/FindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "import duke.storage.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "import duke.tasks.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": " * Find command is used to create find tasks."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * Constructor for FindCommand class."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * "
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * @param rawCommand takes in the raw commmand"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * @param taskList taskList is used to store tasks"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    public FindCommand(String rawCommand, TaskList taskList ){"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        super(rawCommand, taskList);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * Takes in \u0027dirty\u0027 string and cleans it."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * "
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * @return a string containing the procesedCommand"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    public String processCommand() throws DukeException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        if (rawCommand.split(\" \").length \u003c 2){"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "            throw new DukeException(\"OOPS!!! I\u0027m sorry, but the description of a task cannot be empty.\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        String taskName \u003d rawCommand.split(\" \", 2) [1];"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        return taskName;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * Calls the getTask method of the tasklist."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * Adds the task to a new taskList if the task contains the keyword"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * "
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * @return a String detailing the process (i.e. task deleted)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    public String execute(String processedCommand){"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        if(processedCommand.contains(\"#\")){"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "            return executeTagCommand(processedCommand);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        }else{"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "            return executeNormalFindCommand(processedCommand);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * Abstraction of finding a tag. "
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * "
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * @param tagName"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * @return string containing the tasks that contain this tag."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    public String executeTagCommand(String tagName){"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        TaskList taskListsWithKeyWords \u003d new TaskList();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        int length \u003d super.taskList.size();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        for(int i \u003d 0; i \u003c length; i++){"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "            Task currentTask \u003d taskList.getTask(i);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "            ArrayList \u003cString\u003e tagList \u003d currentTask.getTagList();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "            for (int j\u003d 0; j \u003c tagList.size(); j ++){"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "                if(tagList.get(j).equals(tagName)){"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "                    taskListsWithKeyWords.add(currentTask);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "                }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        if(taskListsWithKeyWords.size() \u003c 1){"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "            return \"Cannot find any tasks with that tag! \";"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        }else{"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "            return taskListsWithKeyWords.toString();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * Abstraction of finding a string. "
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * "
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * @param tagName"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * @return string containing the tasks that contain this string."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    public String executeNormalFindCommand(String tagName){"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        TaskList taskListsWithKeyWords \u003d new TaskList();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        int length \u003d super.taskList.size();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        for(int i \u003d 0; i \u003c length; i++){"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "            Task currentTask \u003d taskList.getTask(i);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "            if(currentTask.getMessage().contains(tagName)){"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "                taskListsWithKeyWords.add(currentTask);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        if(taskListsWithKeyWords.size() \u003c 1){"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "            return \"Cannot find any tasks with that keyword! \";"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        }else{"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "            return taskListsWithKeyWords.toString();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    "
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mrnewguy": 106
    }
  },
  {
    "path": "src/main/java/duke/commands/TagCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "import duke.storage.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": " * Tag command is used tag the task."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "public class TagCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * Constructor for TagCommand class."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * "
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * @param rawCommand takes in the raw commmand"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * @param taskList taskList is used to store tasks"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    public TagCommand(String rawCommand, TaskList taskList ){"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        super(rawCommand, taskList);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * Takes in \u0027dirty\u0027 string and cleans it."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * @return a string containing the procesedCommand"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    public String processCommand() throws DukeException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        if (rawCommand.split(\" \").length \u003c 2){"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "            throw new DukeException(\"OOPS!!! I\u0027m sorry, but the description of a task cannot be empty.\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        String taskName \u003d rawCommand.split(\" \", 2) [1];"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        String [] tagCommandArray \u003d taskName.split(\" \");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        String userInputIndex \u003d tagCommandArray[0] ;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        Integer tagIndex \u003d Integer.parseInt(userInputIndex) - 1;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        String tagName \u003d tagCommandArray[1];"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        if(! tagName.contains(\"#\")){"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "            throw new DukeException(\"Tag should contain the # at the start!\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        }else{"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "            String message \u003d taskList.addTag(tagIndex, tagName);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "            return message;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * Creates a new Todo task and adds that task to the tasklist"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * "
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * @return a String detailing the process (i.e. task added)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    public String execute(String processedCommand){"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        return processedCommand;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "} "
      }
    ],
    "authorContributionMap": {
      "mrnewguy": 54
    }
  },
  {
    "path": "src/main/java/duke/commands/ToDoCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "import duke.storage.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "import duke.tasks.ToDoTask;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": " * ToDo command is used to create ToDo tasks."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "public class ToDoCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * Constructor for ToDoCommand class."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * "
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * @param rawCommand takes in the raw commmand"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * @param taskList taskList is used to store tasks"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    public ToDoCommand(String rawCommand, TaskList taskList ){"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        super(rawCommand, taskList);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * Takes in \u0027dirty\u0027 string and cleans it."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * "
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * @return a string containing the procesedCommand"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    public String processCommand() throws DukeException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        if (rawCommand.split(\" \").length \u003c 2){"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "            throw new DukeException(\"OOPS!!! I\u0027m sorry, but the description of a task cannot be empty.\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        String taskName \u003d rawCommand.split(\" \", 2) [1];"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        return taskName;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * Creates a new Todo task and adds that task to the tasklist"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * "
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * @return a String detailing the process (i.e. task added)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    public String execute(String processedCommand){"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        ToDoTask newTask \u003d new ToDoTask (false, processedCommand);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        String toPrint \u003d taskList.add(newTask);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        return toPrint;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "} "
      }
    ],
    "authorContributionMap": {
      "mrnewguy": 47
    }
  },
  {
    "path": "src/main/java/duke/exceptions/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "package duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": " * A custom exception class detailing the error messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "@SuppressWarnings(\"serial\")"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "public class DukeException extends Exception{"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    "
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * "
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * @param errorMessage takes in the error message and instantiates its parent class"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    public DukeException(String errorMessage){"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        super(errorMessage);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mrnewguy": 16
    }
  },
  {
    "path": "src/main/java/duke/parser/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "package duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "import duke.commands.*;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "import duke.storage.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "import duke.ui.UI;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": " * Parser class takes in the command passes the command to the correct "
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": " * command class."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "public class Parser{"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    "
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    private TaskList taskList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    private UI ui;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    public Parser(Storage storage, TaskList taskList, UI ui){"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        this.taskList \u003d taskList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        this.ui \u003d ui;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * The parse method is the \u0027main\u0027 method of the parser class and basically"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * a switch case statement that calls the right command based on the "
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * first word of the command (e.g. \u0027done\u0027/\u0027bye\u0027/\u0027list\u0027)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * "
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * @param userInput takes in the command that the user types"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * @return a string that corresponds to the command given"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * @throws DukeException "
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    public String parse (String userInput) throws DukeException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        String inputKeyWord \u003d userInput.split(\" \")[0];"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        "
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        switch (inputKeyWord){"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "            case \"bye\":"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "                return ui.returnReponse(\"Bye. Hope to see you again soon!\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "            "
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "            case \"list\":"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "                return ui.returnReponse(taskList.toString()); "
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "            case \"done\" :"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "                Command doneCommand \u003d new DoneCommand(userInput, taskList);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "                String processedDoneCommand \u003d doneCommand.processCommand();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "                String doneResponse \u003d doneCommand.execute(processedDoneCommand);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "                storage.save();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "                return ui.returnReponse(doneResponse);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "            case \"todo\" :"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "                Command toDoCommand \u003d new ToDoCommand(userInput, taskList);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "                String processedtoDoCommand \u003d toDoCommand.processCommand();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "                String toDoResponse \u003d toDoCommand.execute(processedtoDoCommand);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "                storage.save();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "                return ui.returnReponse(toDoResponse);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "            case \"deadline\" :"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "                Command deadLineCommand \u003d new DeadLineCommand(userInput, taskList);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "                String processeddeadLineCommand \u003d deadLineCommand.processCommand();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "                String deadlineResponse \u003d deadLineCommand.execute(processeddeadLineCommand);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "                storage.save();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "                return ui.returnReponse(deadlineResponse);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "                "
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "            case \"event\" :"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "                Command eventCommand \u003d new EventCommand(userInput, taskList);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "                String processedeventCommand \u003d eventCommand.processCommand();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "                String eventResponse \u003d eventCommand.execute(processedeventCommand);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "                storage.save();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "                return ui.returnReponse(eventResponse);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    "
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "            case \"find\" :"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "                Command findCommand \u003d new FindCommand(userInput, taskList);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "                String processedCommand \u003d findCommand.processCommand();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "                String response \u003d findCommand.execute(processedCommand);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "                return ui.returnReponse(response);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "                "
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "            case \"delete\" :"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "                Command deleteCommand \u003d new DeleteCommand(userInput, taskList);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "                String processedDeleteCommand \u003d deleteCommand.processCommand();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "                String deleteResponse \u003d deleteCommand.execute(processedDeleteCommand);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "                storage.save();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "                return ui.returnReponse(deleteResponse);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "                "
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "            case \"tag\":"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "                Command TagCommand \u003d new TagCommand(userInput, taskList);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "                String processedTagCommand \u003d TagCommand.processCommand();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "                String tagResponse \u003d TagCommand.execute(processedTagCommand);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "                return ui.returnReponse(tagResponse);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "                throw new DukeException(\"OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "            "
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mrnewguy": 96
    }
  },
  {
    "path": "src/main/java/duke/storage/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "package duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "import duke.tasks.DeadlinesTask;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "import duke.tasks.EventsTask;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "import duke.tasks.ToDoTask;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "import java.io.*;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": " * Storage class deals with the storing of the tasks in memory."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    private String filepath;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    private TaskList taskList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    public Storage(String filepath) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        this.filepath \u003d filepath;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * The loadStorage method reads the txt file for information about the tasks."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * It then processes the tasks and stores it in the taskList class."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * @return a taslist contaning the stored information."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    public TaskList loadStorage() throws DukeException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        File data \u003d new File(filepath);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "            if(data.createNewFile()){"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "                throw new DukeException(\"Couldn\u0027t find file, so created new one\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "            }else{"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "                BufferedReader br \u003d new BufferedReader(new FileReader(data));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "                String line;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "                while ((line \u003d br.readLine()) !\u003d null) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "                    String[] currentTaskArray \u003d line.split(\"\\\\|\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "                    String taskCategory \u003d currentTaskArray[0].replace(\" \", \"\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "                    String currentStatus \u003d currentTaskArray[1];"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "                    Boolean currentstatusBoolean;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "                    currentstatusBoolean \u003d !currentStatus.equals(\"0\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "                    String taskName \u003d currentTaskArray[2];"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "                    if (taskCategory.equals(\"T\")) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "                        ToDoTask newTask \u003d new ToDoTask(currentstatusBoolean, taskName);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "                        taskList.fileAdd(newTask);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "                    } else if (taskCategory.equals(\"D\")) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "                        String deadline \u003d currentTaskArray[3];"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "                        LocalDateTime endingDateTime \u003d LocalDateTime.parse(deadline);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "                        DeadlinesTask newTask \u003d new DeadlinesTask(currentstatusBoolean, taskName, endingDateTime);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "                        taskList.fileAdd(newTask);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "                        String startingDateTimesString \u003d currentTaskArray[3];"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "                        String endingDateTimesString \u003d currentTaskArray[4];"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "                        LocalDateTime startingDateTime \u003d LocalDateTime.parse(startingDateTimesString);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "                        LocalDateTime endingDateTime \u003d LocalDateTime.parse(endingDateTimesString);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "                        EventsTask newTask \u003d new EventsTask(currentstatusBoolean, taskName, startingDateTime, endingDateTime);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "                        taskList.fileAdd(newTask);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "                }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "            System.out.println(e.toString());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        return taskList;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * Saves the current tasklist to a txt file."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    public void save() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "            BufferedWriter writer \u003d new BufferedWriter(new FileWriter(filepath));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "                for (int i \u003d 0; i \u003c taskList.size(); i++) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "                    writer.write(taskList.getTask(i).toFileFormat());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "                }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "                writer.close();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "            } catch (IOException ex) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "            ex.printStackTrace();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    private File getFileFromResources(String fileName) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        ClassLoader classLoader \u003d this.getClass().getClassLoader();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        URL resource \u003d classLoader.getResource(fileName);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        if (resource \u003d\u003d null) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "            throw new IllegalArgumentException(\"file is not found!\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "            return new File(resource.getFile());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mrnewguy": 101
    }
  },
  {
    "path": "src/main/java/duke/storage/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "package duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "import duke.tasks.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": " * This task represents all the tasks stored by the user."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "public class TaskList{"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    private ArrayList \u003cTask\u003e taskList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    "
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    public TaskList (){"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        taskList \u003d new ArrayList \u003cTask\u003e ();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * "
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * @return Returns an integer representing the number of tasks in the tasklist."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    public int size(){"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        return taskList.size();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * Adds a new task to the tasklist."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * Called by the storage class. "
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * Differs from the add() method by not providing a print statements."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * "
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * @param newTask "
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    public void fileAdd(Task newTask){"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        taskList.add(newTask);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * Adds a new task to the tasklist."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * "
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * @param newTask"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * @return Returns a string detailing the process."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    public String add(Task newTask){"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        taskList.add(newTask);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        sb.append(\"Got it. I\u0027ve added this task:\" +\"\\n\" );"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        sb.append(newTask.toString() +\"\\n\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        sb.append(String.format(\"Now you have %d tasks in the list.\", taskList.size()));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        "
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * Deletes a task from the tasklist."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * "
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * @param index This index represents the index in which the task is placed in the arraylist."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * @return Returns a string detailing the process."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    public String deleteTask(int index){"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        sb.append(\"Noted. I\u0027ve removed this task:\" +\"\\n\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        sb.append(taskList.get(index) +\"\\n\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        taskList.remove(index);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        sb.append(String.format(\"Now you have %d tasks in the list.\", taskList.size() ));        "
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * Gets the task from the arraylist of taks."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * "
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * @param index This index represents the index in which the task is placed in the arraylist."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * @return Returns the task from the arraylist."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    public Task getTask(int index){"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        return taskList.get(index);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * Marks the chosen task as done."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * "
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * @param index This index represents the index in which the task is placed in the arraylist."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * @return Returns a string detailing the process."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    public String doneTask(int index){"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        Task currentTask \u003d taskList.get(index);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        currentTask.setStatus(true);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        String message \u003d \"Nice! I\u0027ve marked this task as done:\\n\" + currentTask;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        return message;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * Adds a tag to a specified task. Provides funcitonality for the tagging of "
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * an event."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * "
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * @param index"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * @param tagName"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * @return "
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    public String addTag(int index, String tagName){"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        taskList.get(index).addTag(tagName);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        String message \u003d \"Nice! I\u0027ve tagged this task as \" +tagName;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        return message;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * Returns a string representation of a taglist "
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * "
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    public String toString(){"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        int size \u003d taskList.size();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        for(int i \u003d 0; i \u003c size; i ++){"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "            Integer number \u003d i + 1;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "            String message \u003d number + \". \" + taskList.get(i);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "            if(i \u003c size - 1){"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "                sb.append(message + \"\\n\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "            }else{"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "                sb.append(message);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "} "
      }
    ],
    "authorContributionMap": {
      "mrnewguy": 125
    }
  },
  {
    "path": "src/main/java/duke/tasks/DeadlinesTask.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "package duke.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": " * Represents a specific type of task - Tasks with deadlines."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": " *"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "public class DeadlinesTask extends Task{"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    "
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    LocalDateTime endingDateTime;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * Constructor for DeadlinesTask class."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * @param status indicates whether task is complete"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * @param message indicates what to do for the task"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * @param endingDateTime deadline of the task"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    public DeadlinesTask (Boolean status, String message, LocalDateTime endingDateTime){"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        super(status, message, \"[D]\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        this.endingDateTime \u003d endingDateTime;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * String representation of the DeadlineTask."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * @return string representation"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    public String toString() { "
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        String doneString;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        if(super.status){"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "            doneString \u003d \"[\\u2713]\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        }else{"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "            doneString \u003d \"[X]\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        String formattedEndingDateTime \u003d endingDateTime.getDayOfMonth() + \" \" +"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "                endingDateTime.getMonth() + \" \" +"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "                endingDateTime.getHour() +"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "                endingDateTime.getMinute() +"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        \" hours\" ;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        return  super.type + doneString + \" \" + super.message + \" (by: \" +formattedEndingDateTime + \")\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * Returns the string representation needed for storage."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * @return string format needed for storage"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    public String toFileFormat(){"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        String doneString;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        if(super.status){"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "            doneString \u003d \"1\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "            return \"D|\" +doneString + \"|\"+ super.message+ \"|\" + endingDateTime.toString() + \"\\n\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        }else if (! super.status ){"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "            doneString \u003d \"0\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "            return \"D|\" +doneString + \"|\"+ super.message+ \"|\" + endingDateTime.toString() + \"\\n\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        }else{"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "            assert false : \"Status of a event must be a boolean!\" ;  "
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "            return \"Status is not a boolean!\";         "
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mrnewguy": 64
    }
  },
  {
    "path": "src/main/java/duke/tasks/EventsTask.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "package duke.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": " * Represents a specific type of task - Tasks that are events"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": " *"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "public class EventsTask extends Task{"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    LocalDateTime startingDateTime ; "
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    LocalDateTime endingDateTime;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * Constructor for EventsTask class"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * @param status indicates whether task is complete"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * @param message indicates what to do for the task"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * @param startingDateTime starting date of the task"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * @param endingDateTime ending date of the task"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    public EventsTask (Boolean status, String message, "
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    LocalDateTime startingDateTime, LocalDateTime endingDateTime){"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        super(status, message, \"[E]\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        this.startingDateTime \u003d startingDateTime;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        this.endingDateTime \u003d endingDateTime;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * String representation of the EventTask"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * @return string representation"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    public String toString() { "
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        String doneString;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        if(super.status){"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "            doneString \u003d \"[\\u2713]\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        }else{"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "            doneString \u003d \"[X]\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        String formattedStartingDateTime \u003d startingDateTime.getDayOfMonth() + \" \" +"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "                startingDateTime.getMonth() + \" \" +"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "                startingDateTime.getHour() +"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "                startingDateTime.getMinute() +"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        \" hours\" ;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        "
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        String formattedEndingDateTime \u003d endingDateTime.getDayOfMonth() + \" \" +"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "                endingDateTime.getMonth() + \" \" +"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "                endingDateTime.getHour() +"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "                endingDateTime.getMinute() +"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        \" hours\" ;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        return super.type + doneString + \" \" + super.message +\" (at: \" + formattedStartingDateTime + \" to \" + formattedEndingDateTime + \")\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * Returns the string representation needed for storage"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * @return string format needed for storage"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    public String toFileFormat(){"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        String doneString;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        if(super.status){"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "            doneString \u003d \"1\";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "            return \"E|\" +doneString + \"|\"+ super.message+ \"|\" + startingDateTime.toString() +\"|\"+ endingDateTime.toString() + \"\\n\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        }else if (! super.status){"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "            doneString \u003d \"0\";"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "            return \"E|\" +doneString + \"|\"+ super.message+ \"|\" + startingDateTime.toString() +\"|\"+ endingDateTime.toString() + \"\\n\";"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        }else{"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "            assert false : \"Status of a event must be a boolean!\" ;  "
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "            return \"Status is not a boolean!\";         "
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mrnewguy": 78
    }
  },
  {
    "path": "src/main/java/duke/tasks/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "package duke.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": " * Represents a specific type of task - Tasks that are events"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": " *"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "public class Task{"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    protected boolean status;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    protected String message;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    protected String type;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    protected ArrayList \u003cString\u003e tagList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * Constructor for EventsTask class"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * @param status indicates whether task is complete"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * @param message indicates what to do for the task"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * @param type indicates the type of the task (e.g. Events/ToDo/Deadlines)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    public Task (Boolean status, String message, String type){"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        this.status \u003d status;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        this.message \u003d message;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        this.type \u003d type;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        tagList \u003d new ArrayList\u003cString\u003e();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * Sets the status of the task"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * "
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * @param status"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    public void setStatus(boolean status){"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        this.status \u003d status;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * A getter function to get the message of the task"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     *  "
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * @return the message"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    public String getMessage(){"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        return message;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    public ArrayList\u003cString\u003e getTagList(){"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        return tagList;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     *Adds a new tag to the arraylist containing all the tags."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * "
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * @param tag"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    public void addTag(String tag){"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        tagList.add(tag);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * String representation of the Task"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * @return string representation"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    public String toString() { "
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        String doneString;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        if(status){"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "            doneString \u003d \"[✓]\";"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        }else{"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "            doneString \u003d \"[X]\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        return type + doneString + \" \" + message;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * Returns the string representation needed for storage"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * @return string format needed for storage"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    public String toFileFormat(){"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        return \"dummy\";"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mrnewguy": 86
    }
  },
  {
    "path": "src/main/java/duke/tasks/ToDoTask.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "package duke.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": " * Represents a specific type of task - Tasks that are to-do"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": " *"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "public class ToDoTask extends Task{"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    "
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * Constructor for ToDoTask class"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * @param status indicates whether task is complete"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * @param message indicates what to do for the task"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    public ToDoTask (Boolean status, String message){"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        super(status, message, \"[T]\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * String representation of the ToDoTask"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * @return string representation"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    public String toString() { "
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        String doneString;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        if(super.status){"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "            doneString \u003d \"[\\u2713]\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        }else{"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "            doneString \u003d \"[X]\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        return super.type + doneString + \" \" + super.message;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * Returns the string representation needed for storage"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * @return string format needed for storage"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    public String toFileFormat(){"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        String doneString;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        if(super.status){"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "            doneString \u003d \"1\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "            return \"T|\" +doneString +\"|\" + super.message + \"\\n\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        }else if (! super.status){"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "            doneString \u003d \"0\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "            return \"T|\" +doneString +\"|\" + super.message + \"\\n\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        }else{"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "            assert false : \"Status of a event must be a boolean!\" ;  "
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "            return \"Status is not a boolean!\";   "
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mrnewguy": 53
    }
  },
  {
    "path": "src/main/java/duke/ui/UI.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": " * A class to handle all the user interface. This serves as an abstraction"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": " * for all the print statements."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "public class UI {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * A wrapper method to send the message to the UI. This method is then used to pass the response to the dialogBOx."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * "
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * @param message"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    public String returnReponse(String message){"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        return message;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    public String returnWelcomeMessage(){"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        return \"Hello, I\u0027m Duke! What can I do for you?\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mrnewguy": 23
    }
  },
  {
    "path": "src/main/resources/examples.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "deadline return book /by 6/apr/2020/20/33"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "event project meeting /at 3/oct/2019/18/00/3/oct/2019/19/00"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "todo borrow book"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "T|1|read book"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "D|0|return book|6 June 2019 14 00"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "E|0|project meeting|6 Aug 2019 14 00 16 00"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "T|1|join sports club"
      }
    ],
    "authorContributionMap": {
      "mrnewguy": 8
    }
  },
  {
    "path": "src/main/resources/newExamples.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "** INPUT FORMAT **"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "deadline return book /by 2019-03-21T20:50:00"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "event project meeting /at 2019-01-20T06:30:00 2019-01-20T07:30:00"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "todo borrow book"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "** STORAGE FORMAT **"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "T|1|read book"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "D|0|return book|2019-03-21T20:50:00"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "E|0|project meeting|2019-01-20T06:30:00|2019-01-20T07:30:00"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "T|1|join sports club"
      }
    ],
    "authorContributionMap": {
      "mrnewguy": 11
    }
  },
  {
    "path": "src/main/resources/view/DialogBox.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" styleClass\u003d\"list-view\" stylesheets\u003d\"@DarkTheme.css\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "      \u003cLabel fx:id\u003d\"dialog\" styleClass\u003d\"result-display\" stylesheets\u003d\"@DarkTheme.css\" text\u003d\"Label\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "      \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "   \u003cpadding\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "      \u003cInsets bottom\u003d\"30.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"30.0\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "   \u003c/padding\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "mrnewguy": 16
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"duke.MainWindow\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "      \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" styleClass\u003d\"text-field\" stylesheets\u003d\"\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "      \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" stylesheets\u003d\"@DarkTheme.css\" text\u003d\"Send\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "      \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" styleClass\u003d\"scroll-bar\" stylesheets\u003d\"@DarkTheme.css\" vvalue\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "         \u003ccontent\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "            \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" styleClass\u003d\"background\" stylesheets\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "         \u003c/content\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "      \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "mrnewguy": 19
    }
  },
  {
    "path": "src/test/java/DeadlinesTaskTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "import duke.tasks.DeadlinesTask;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": " * A test used to test the deadline task class."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "public class DeadlinesTaskTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * Tests the ToStringFormat of the deadlinetask class. This ensures that the task is output "
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * per the specified formats."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * "
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    public void testToStringFormat() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        LocalDateTime endingTimeStub \u003d LocalDateTime.parse(\"2019-03-21T20:50:00\");  "
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        assertEquals(\"[D][✓] return book (by: 21 MARCH 2050 hours)\", "
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        new DeadlinesTask(true, \"return book\", endingTimeStub).toString());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     *  Tests the toFileFormat method of the deadlinestask class. This ensures that the task is"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     *  saved in a proper format when being stored."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * "
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    public void testToFileFormat() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        LocalDateTime endingTimeStub \u003d LocalDateTime.parse(\"2019-03-21T20:50:00\");  "
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        assertEquals(\"D|1|return book|2019-03-21T20:50\\n\", "
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        new DeadlinesTask(true, \"return book\", endingTimeStub).toFileFormat());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mrnewguy": 36
    }
  },
  {
    "path": "src/test/java/EventsTaskTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "import duke.tasks.EventsTask;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": " *  * A test used to test the events task class."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "public class EventsTaskTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * Tests the ToStringFormat of the eventstask class. This ensures that the task is output "
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * per the specified formats."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    public void testToStringFormat() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        LocalDateTime startingTimeStub \u003d LocalDateTime.parse(\"2019-01-20T06:30:00\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        LocalDateTime endingTimeStub \u003d LocalDateTime.parse(\"2019-01-20T07:30:00\");  "
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        assertEquals(\"[E][✓] project meeting (at: 20 JANUARY 630 hours to 20 JANUARY 730 hours)\", "
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        new EventsTask(true, \"project meeting\",startingTimeStub, endingTimeStub).toString());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     *  Tests the toFileFormat method of the eventstask class. This ensures that the task is"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     *  saved in a proper format when being stored."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * "
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    public void testToFileFormat() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        LocalDateTime startingTimeStub \u003d LocalDateTime.parse(\"2019-01-20T06:30:01\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        LocalDateTime endingTimeStub \u003d LocalDateTime.parse(\"2019-01-20T07:30:01\");  "
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        assertEquals(\"E|1|project meeting|2019-01-20T06:30:01|2019-01-20T07:30:01\\n\", "
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        new EventsTask(true, \"project meeting\",startingTimeStub, endingTimeStub).toFileFormat());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mrnewguy": 37
    }
  },
  {
    "path": "src/test/java/ToDoTaskTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "import duke.tasks.ToDoTask;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": " * A test used to test the todo task class."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "public class ToDoTaskTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    "
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * Tests the ToStringFormat of the todotask class. This ensures that the task is output "
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * per the specified formats."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    public void testToStringFormat() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        assertEquals(\"[T][✓] join sports club\", "
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        new ToDoTask(true, \"join sports club\").toString());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     *  Tests the toFileFormat method of the todotask class. This ensures that the task is"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     *  saved in a proper format when being stored."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     * "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    public void testToFileFormat() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        assertEquals(\"T|1|join sports club\\n\", "
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "        new ToDoTask(true, \"join sports club\").toFileFormat());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mrnewguy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mrnewguy": 29
    }
  }
]
