[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    id \u0027org.openjfx.javafxplugin\u0027 version \u00270.0.7\u0027"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    compile \u0027com.fasterxml.jackson.core:jackson-annotations:2.7.0\u0027"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    compile \u0027com.fasterxml.jackson.core:jackson-core:2.7.0\u0027"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    compile \u0027com.fasterxml.jackson.core:jackson-databind:2.7.0\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "group \u0027seedu.duke\u0027"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    // Change this to your main class."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    mainClassName \u003d \"duke.application.Launcher\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    archiveVersion \u003d \"0.1.3\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "}"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "javafx {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    version \u003d \"11.0.2\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    modules \u003d [ \u0027javafx.controls\u0027, \u0027javafx.fxml\u0027 ]"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "task runTests(type:Exec) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    workingDir \u003d \"text-ui-test\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    commandLine \u003d \"./runtest.sh\""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "}"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "test {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "}"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "run {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tanlk99": 36,
      "-": 19
    }
  },
  {
    "path": "duke-config.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "  \"cachePath\" : \"data/duke-cache.txt\","
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "  \"archivePath\" : \"archive/duke-archive.txt\""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tanlk99": 4
    }
  },
  {
    "path": "gradlew.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "@rem Copyright 2015 the original author or authors."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "@rem Licensed under the Apache License, Version 2.0 (the \"License\");"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "@rem you may not use this file except in compliance with the License."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "@rem You may obtain a copy of the License at"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "@rem      https://www.apache.org/licenses/LICENSE-2.0"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "@rem Unless required by applicable law or agreed to in writing, software"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "@rem distributed under the License is distributed on an \"AS IS\" BASIS,"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "@rem WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "@rem See the License for the specific language governing permissions and"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "@rem limitations under the License."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "@if \"%DEBUG%\" \u003d\u003d \"\" @echo off"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "@rem ##########################################################################"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "@rem  Gradle startup script for Windows"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "@rem ##########################################################################"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Set local scope for the variables with windows NT shell"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%OS%\"\u003d\u003d\"Windows_NT\" setlocal"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "set DIRNAME\u003d%~dp0"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%DIRNAME%\" \u003d\u003d \"\" set DIRNAME\u003d."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "set APP_BASE_NAME\u003d%~n0"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "set APP_HOME\u003d%DIRNAME%"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "set DEFAULT_JVM_OPTS\u003d\"-Xmx64m\" \"-Xms64m\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Find java.exe"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "if defined JAVA_HOME goto findJavaFromJavaHome"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "set JAVA_EXE\u003djava.exe"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "%JAVA_EXE% -version \u003eNUL 2\u003e\u00261"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%ERRORLEVEL%\" \u003d\u003d \"0\" goto init"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "echo."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "echo ERROR: JAVA_HOME is not set and no \u0027java\u0027 command could be found in your PATH."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "echo."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "echo Please set the JAVA_HOME variable in your environment to match the"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "echo location of your Java installation."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "goto fail"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ":findJavaFromJavaHome"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "set JAVA_HOME\u003d%JAVA_HOME:\"\u003d%"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "set JAVA_EXE\u003d%JAVA_HOME%/bin/java.exe"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "if exist \"%JAVA_EXE%\" goto init"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "echo."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "echo."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "echo Please set the JAVA_HOME variable in your environment to match the"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "echo location of your Java installation."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "goto fail"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ":init"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Get command-line arguments, handling Windows variants"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "if not \"%OS%\" \u003d\u003d \"Windows_NT\" goto win9xME_args"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ":win9xME_args"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Slurp the command line arguments."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "set CMD_LINE_ARGS\u003d"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "set _SKIP\u003d2"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ":win9xME_args_slurp"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "if \"x%~1\" \u003d\u003d \"x\" goto execute"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "set CMD_LINE_ARGS\u003d%*"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ":execute"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Setup the command line"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "set CLASSPATH\u003d%APP_HOME%\\gradle\\wrapper\\gradle-wrapper.jar"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Execute Gradle"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "\"%JAVA_EXE%\" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% \"-Dorg.gradle.appname\u003d%APP_BASE_NAME%\" -classpath \"%CLASSPATH%\" org.gradle.wrapper.GradleWrapperMain %CMD_LINE_ARGS%"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ":end"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "@rem End local scope for the variables with windows NT shell"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%ERRORLEVEL%\"\u003d\u003d\"0\" goto mainEnd"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ":fail"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "rem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "rem the _cmd.exe /c_ return code!"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "if  not \"\" \u003d\u003d \"%GRADLE_EXIT_CONSOLE%\" exit 1"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "exit /b 1"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ":mainEnd"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%OS%\"\u003d\u003d\"Windows_NT\" endlocal"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ":omega"
      }
    ],
    "authorContributionMap": {
      "tanlk99": 17,
      "-": 83
    }
  },
  {
    "path": "src/main/java/duke/application/DialogBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "package duke.application;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import javafx.animation.FadeTransition;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import javafx.geometry.Insets;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import javafx.scene.layout.Background;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import javafx.scene.layout.BackgroundFill;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import javafx.scene.layout.CornerRadii;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import javafx.scene.paint.Color;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import javafx.scene.shape.Circle;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import javafx.util.Duration;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tanlk99"
        },
        "content": " * A dialog box to display chat messages. Consists of an image element"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tanlk99"
        },
        "content": " * and the chat message."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tanlk99"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "class DialogBox extends HBox {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    private FadeTransition fadeTransition;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * Creates a new DialogBox."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * The image is aligned to the right by default."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * @param text  Text to place in the dialog box"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * @param img   Image to place in the dialog box"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    private DialogBox(String text, Image img) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        displayPicture.setImage(img);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        displayPicture.setClip(new Circle(50, 50, 50));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        prepareAnimation();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * Prepares the fade-in transition of the dialog box."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    private void prepareAnimation() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        fadeTransition \u003d new FadeTransition();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        fadeTransition.setDuration(Duration.seconds(0.5));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        fadeTransition.setFromValue(0.4);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        fadeTransition.setToValue(1.0);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        fadeTransition.setNode(this);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(getChildren());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        Collections.reverse(tmp);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * Creates a dialog box for messages from the user."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * The image is aligned to the right of the window."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * @param text  Text to place in the dialog box"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * @param img   Image to place in the dialog box"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * @return      A DialogBox object for the message"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    static DialogBox getUserDialog(String text, Image img) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        DialogBox db \u003d new DialogBox(text, img);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        db.setBackground(new Background("
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "                new BackgroundFill(Color.gray(0.9), CornerRadii.EMPTY, Insets.EMPTY)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        ));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        db.fadeTransition.play();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * Creates a dialog box for messages from Duke."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * The image is aligned to the left of the window."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * @param text  Text to place in the dialog box"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * @param img   Image to place in the dialog box"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * @return      A DialogBox object for the message"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    static DialogBox getDukeDialog(String text, Image img) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        DialogBox db \u003d new DialogBox(text, img);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        db.setBackground(new Background("
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "                new BackgroundFill(Color.gray(0.8), CornerRadii.EMPTY, Insets.EMPTY)"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        ));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        db.fadeTransition.play();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tanlk99": 117
    }
  },
  {
    "path": "src/main/java/duke/application/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "package duke.application;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import duke.util.Buffer;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import duke.util.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import duke.util.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import duke.util.config.ConfigLoader;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import duke.util.parser.InputParser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tanlk99"
        },
        "content": " * Duke is an interactive task scheduler. Users can interact with Duke through its command-line interface."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tanlk99"
        },
        "content": " * Duke can add tasks, delete tasks and mark tasks as complete. Duke caches its task list at default location"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tanlk99"
        },
        "content": " * \"[project root]/data/duke-cache.txt\"."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tanlk99"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    private static final String DEFAULT_CONFIG_PATH \u003d \"duke-config.txt\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    private Scene scene;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    private Image user \u003d new Image(getClass().getResourceAsStream(\"/images/DaUser.png\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    private Image duke \u003d new Image(getClass().getResourceAsStream(\"/images/DaDuke.png\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    private ConfigLoader configLoader;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    private InputParser parser;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    private Buffer buffer;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    private TaskList taskList;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * Creates a new Duke instance and initializes Duke\u0027s utility classes."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * Uses the default filepath \"data/duke-cache.txt\"."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    Duke() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        this(\"data/duke-cache.txt\", \"archive/duke-archive.txt\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * Creates a new Duke instance and initializes Duke\u0027s utility classes."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * @param   cachePath    Location of the cache file"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    private Duke(String cachePath, String archivePath) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        buffer \u003d new Buffer();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        parser \u003d new InputParser();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        configLoader \u003d new ConfigLoader(DEFAULT_CONFIG_PATH);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            configLoader.loadConfig();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            storage \u003d new Storage(configLoader.getCachePath(), configLoader.getArchivePath());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            storage.initializeCacheIfNotExists();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            taskList \u003d new TaskList(storage.readCache());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            buffer.addLoadingError();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * Returns Duke\u0027s greeting message."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * @return Duke\u0027s greeting message"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    String getGreetings() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        buffer.addGreetings();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        return buffer.getOutput();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * Returns Duke\u0027s response to a single line of user input, assumed to be non-empty."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * @param rawInput Input from the user"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    String getResponse(String rawInput) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            Command parsedCommand \u003d parser.parseInput(rawInput);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            parsedCommand.execute(storage, buffer, taskList);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            if (parsedCommand.shouldTerminate()) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "                Platform.exit();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            buffer.formatLine(\"Sorry! \" + e);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        return buffer.getOutput();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tanlk99": 99
    }
  },
  {
    "path": "src/main/java/duke/application/Launcher.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "package duke.application;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tanlk99"
        },
        "content": " * A launcher class to workaround classpath issues."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tanlk99"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        Application.launch(Main.class, args);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tanlk99": 12
    }
  },
  {
    "path": "src/main/java/duke/application/Main.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "package duke.application;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tanlk99"
        },
        "content": " * A GUI for Duke using FXML."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tanlk99"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "public class Main extends Application {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    private Duke duke \u003d new Duke();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * Starts the Duke application."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * @param stage Stage object to run Duke"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            fxmlLoader.setRoot(stage);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().displayGreetings();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tanlk99": 33
    }
  },
  {
    "path": "src/main/java/duke/application/MainWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "package duke.application;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tanlk99"
        },
        "content": " * Controller for MainWindow. Provides the layout for the other controls."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tanlk99"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "public class MainWindow extends Stage {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    private Duke duke;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    private Image userImage \u003d new Image(getClass().getResourceAsStream(\"/images/DaUser.png\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    private Image dukeImage \u003d new Image(getClass().getResourceAsStream(\"/images/DaDuke.png\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * Initializes the main window."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    private void initialize() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * Sets the Duke to bind the MainWindow to."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * @param d Duke object to bind"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    void setDuke(Duke d) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        duke \u003d d;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * Displays Duke\u0027s greeting message."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * Should only be called after {@link #setDuke}."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    void displayGreetings() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        String greetings \u003d duke.getGreetings();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "                DialogBox.getDukeDialog(greetings, dukeImage)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        );"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        if (input.length() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            return; //ignore empty input"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        String response \u003d duke.getResponse(input);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "                DialogBox.getUserDialog(input, userImage),"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "                DialogBox.getDukeDialog(response, dukeImage)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        );"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tanlk99": 71
    }
  },
  {
    "path": "src/main/java/duke/command/AddCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import duke.util.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import duke.util.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import duke.util.Buffer;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tanlk99"
        },
        "content": " * Represents a command to add a task to the task list."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tanlk99"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    private static final String ADD_COMMAND_SUCCESS_1 \u003d \"Got it. I\u0027ve added this task:\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    private static final String ADD_COMMAND_SUCCESS_2 \u003d \"  %1$s\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    private static final String ADD_COMMAND_SUCCESS_3 \u003d \"Now you have %1$d task%2$s in the list.\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    private static final String STORAGE_UPDATE_SAVE_FAILED \u003d \"Sorry! I was unable to save this update \""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            + \"in storage. I\u0027ll try again next time.\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    private Task toAdd;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * Creates a new AddCommand with a task to add."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * @param   toAdd   Task object to add to task list"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    public AddCommand(Task toAdd) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        this.toAdd \u003d toAdd;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * Returns the task to add to the task list."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * @return  Task object to add to task list"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    public Task getTaskToAdd() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        return toAdd;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * Adds the task to the task list."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * @param   storage     A {@link Storage} object to cache task list"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * @param   buffer      A {@link Buffer} object to buffer Duke\u0027s output"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * @param   taskList    A {@link TaskList} object which stores the task list"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    public void execute(Storage storage, Buffer buffer, TaskList taskList) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        taskList.addNewTask(toAdd);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        buffer.formatLine(ADD_COMMAND_SUCCESS_1);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        buffer.formatLine(String.format(ADD_COMMAND_SUCCESS_2, toAdd.toString()));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        buffer.formatLine(String.format(ADD_COMMAND_SUCCESS_3,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "                taskList.getSize(),"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "                taskList.getSize() \u003d\u003d 1 ? \"\" : \"s\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            storage.writeCache(taskList);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            buffer.formatLine(\"\"); //Insert empty line for readability"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            buffer.formatLine(STORAGE_UPDATE_SAVE_FAILED);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tanlk99": 62
    }
  },
  {
    "path": "src/main/java/duke/command/ArchiveAllCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import duke.util.Buffer;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import duke.util.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import duke.util.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tanlk99"
        },
        "content": " * Represents a command to archive all tasks in the task list."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tanlk99"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "public class ArchiveAllCommand extends ArchiveCommand {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    private static final String ARCHIVE_ALL_COMMAND_EMPTY_TASK_LIST \u003d \"You have no tasks in your task list right now.\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * Archives all tasks. If Duke is unable to write to the archive file,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * the tasks are not deleted from the task list (to prevent loss of data)."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * Archive location is [project-root]/archive/duke-archive.txt by default."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * @param   storage     A {@link Storage} object to cache task list"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * @param   buffer      A {@link Buffer} object to buffer Duke\u0027s output"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * @param   taskList    A {@link TaskList} object which stores the task list"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    public void execute(Storage storage, Buffer buffer, TaskList taskList) throws DukeException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        int size \u003d taskList.getSize();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        if (size \u003d\u003d 0) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            buffer.formatLine(ARCHIVE_ALL_COMMAND_EMPTY_TASK_LIST);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        for (int i \u003d 1; i \u003c\u003d size; i++) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            super.indexesToArchive.add(i);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        super.execute(storage, buffer, taskList);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tanlk99": 35
    }
  },
  {
    "path": "src/main/java/duke/command/ArchiveCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import duke.util.Buffer;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import duke.util.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import duke.util.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tanlk99"
        },
        "content": " * Represents a command to archive a list of tasks in the task list."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tanlk99"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "public class ArchiveCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    private static final String ARCHIVE_COMMAND_INVALID_INDEX \u003d \"%1$d is not a valid task number.\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    private static final String ARCHIVE_COMMAND_SUCCESS \u003d \"I saved the following tasks to the archive file:\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    private static final String ARCHIVE_COMMAND_LIST \u003d \"  %1$s\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    private static final String ARCHIVE_COMMAND_FAILED \u003d \"I was unable to save your task(s) \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            + \"to the archive location. Your task(s) will not be deleted.\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    private static final String STORAGE_UPDATE_SAVE_FAILED \u003d \"Sorry! I was unable to save this update \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            + \"in storage. I\u0027ll try again next time.\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    protected ArrayList\u003cInteger\u003e indexesToArchive \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * Protected constructor for ArchiveAllCommand."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    protected ArchiveCommand() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * Creates an new ArchiveCommand with a list of indexes to archive."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * @param indexesToArchive  List of indexes to archive"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    public ArchiveCommand(ArrayList\u003cInteger\u003e indexesToArchive) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        this.indexesToArchive \u003d indexesToArchive;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * Archives a list of tasks given by index. If Duke is unable to write to the archive file,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * the tasks are not deleted from the task list (to prevent loss of data)."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * Archive location is [project-root]/archive/duke-archive.txt by default."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * @param   storage     A {@link Storage} object to cache task list"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * @param   buffer      A {@link Buffer} object to buffer Duke\u0027s output"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * @param   taskList    A {@link TaskList} object which stores the task list"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    public void execute(Storage storage, Buffer buffer, TaskList taskList) throws DukeException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        //Validate indexes"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        for (int index : indexesToArchive) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            if (index \u003c\u003d 0 || index \u003e taskList.getSize()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "                throw new DukeException(String.format(ARCHIVE_COMMAND_INVALID_INDEX, index));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            ArrayList\u003cTask\u003e tasksToArchive \u003d taskList.getTasks(indexesToArchive);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            storage.writeArchive(tasksToArchive);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            buffer.formatLine(ARCHIVE_COMMAND_SUCCESS);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            for (Task task : tasksToArchive) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "                buffer.formatLine(String.format(ARCHIVE_COMMAND_LIST, task.toString()));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            throw new DukeException(ARCHIVE_COMMAND_FAILED);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        taskList.deleteTasks(indexesToArchive);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            storage.writeCache(taskList);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            buffer.formatLine(\"\"); //Insert empty line for readability"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            buffer.formatLine(STORAGE_UPDATE_SAVE_FAILED);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tanlk99": 77
    }
  },
  {
    "path": "src/main/java/duke/command/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import duke.util.Buffer;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import duke.util.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import duke.util.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tanlk99"
        },
        "content": " * Represents a command given by the user. Can have a variety of functions,"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tanlk99"
        },
        "content": " * including exiting, adding tasks and deleting tasks."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tanlk99"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * Indicates whether Duke needs to exit after this command."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * This method should only return true for {@link duke.command.ExitCommand ExitCommand} instances."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * @return True if Duke needs to terminate"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    public boolean shouldTerminate() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * Executes the command."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * @param   storage     A {@link Storage} object to cache task list"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * @param   buffer      A {@link Buffer} object to buffer Duke\u0027s output"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * @param   taskList    A {@link TaskList} object which stores the task list"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    public abstract void execute(Storage storage, Buffer buffer, TaskList taskList) throws DukeException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tanlk99": 31
    }
  },
  {
    "path": "src/main/java/duke/command/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import duke.util.Buffer;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import duke.util.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import duke.util.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tanlk99"
        },
        "content": " * Represents a command to delete a task in the task list."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tanlk99"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    private static final String DELETE_COMMAND_INVALID_INDEX \u003d \"That is not a valid task number.\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    private static final String DELETE_COMMAND_SUCCESS_1 \u003d \"Noted. I\u0027ve removed this task.\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    private static final String DELETE_COMMAND_SUCCESS_2 \u003d \"  %1$s\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    private static final String DELETE_COMMAND_SUCCESS_3 \u003d \"Now you have %1$d task%2$s in the list.\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    private static final String STORAGE_UPDATE_SAVE_FAILED \u003d \"Sorry! I was unable to save this update \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            + \"in storage. I\u0027ll try again next time.\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * Creates a new DeleteCommand."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * @param   index   Index of the task to delete"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    public DeleteCommand(int index) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * Returns the index of the task to delete."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * @return  Index of task to delete"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    public int getIndex() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        return index;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * Deletes the task given by \u003ci\u003eindex\u003c/i\u003e."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * @param   storage     A {@link Storage} object to cache task list"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * @param   buffer      A {@link Buffer} object to buffer Duke\u0027s output"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * @param   taskList    A {@link TaskList} object which stores the task list"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * @throws  DukeException   If index is invalid"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    public void execute(Storage storage, Buffer buffer, TaskList taskList) throws DukeException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        if (index \u003c\u003d 0 || index \u003e taskList.getSize()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            throw new DukeException(DELETE_COMMAND_INVALID_INDEX);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        buffer.formatLine(DELETE_COMMAND_SUCCESS_1);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        Task toRemove \u003d taskList.getTask(index);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        taskList.deleteTask(index);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        buffer.formatLine(String.format(DELETE_COMMAND_SUCCESS_2, toRemove.toString()));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        buffer.formatLine(String.format(DELETE_COMMAND_SUCCESS_3,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "                taskList.getSize(),"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "                taskList.getSize() \u003d\u003d 1 ? \"\" : \"s\"));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            storage.writeCache(taskList);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            buffer.formatLine(\"\"); //Insert empty line for readability"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            buffer.formatLine(STORAGE_UPDATE_SAVE_FAILED);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tanlk99": 70
    }
  },
  {
    "path": "src/main/java/duke/command/DoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import duke.util.Buffer;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import duke.util.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import duke.util.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tanlk99"
        },
        "content": " * Represents a command to mark a task in the task list as done."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tanlk99"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "public class DoneCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    private static final String DONE_COMMAND_INVALID_INDEX \u003d \"That is not a valid task number.\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    private static final String DONE_COMMAND_SUCCESS_1 \u003d \"Nice! I\u0027ve marked this task as done:\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    private static final String DONE_COMMAND_SUCCESS_2 \u003d \"  %1$s\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    private static final String STORAGE_UPDATE_SAVE_FAILED \u003d \"Sorry! I was unable to save this update \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            + \"in storage. I\u0027ll try again next time.\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * Creates a new DoneCommand."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * @param   index   Index of task to mark as done"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    public DoneCommand(int index) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * Returns the index of the task to mark as done."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * @return  Index of task to mark as done"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    public int getIndex() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        return index;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * Marks the task given by \u003ci\u003eindex\u003c/i\u003e as done."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * @param   storage     A {@link Storage} object to cache task list"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * @param   buffer      A {@link Buffer} object to buffer Duke\u0027s output"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * @param   taskList    A {@link TaskList} object which stores the task list"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * @throws  DukeException   If index is invalid"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    public void execute(Storage storage, Buffer buffer, TaskList taskList) throws DukeException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        if (index \u003c\u003d 0 || index \u003e taskList.getSize()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            throw new DukeException(DONE_COMMAND_INVALID_INDEX);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        taskList.markTaskAsDone(index);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        buffer.formatLine(DONE_COMMAND_SUCCESS_1);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        buffer.formatLine(String.format(DONE_COMMAND_SUCCESS_2, taskList.getTask(index)));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            storage.writeCache(taskList);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            buffer.formatLine(\"\"); //Insert empty line for readability"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            buffer.formatLine(STORAGE_UPDATE_SAVE_FAILED);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tanlk99": 63
    }
  },
  {
    "path": "src/main/java/duke/command/ExitCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import duke.util.Buffer;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import duke.util.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import duke.util.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tanlk99"
        },
        "content": " * Represents a command to quit the system."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tanlk99"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * Indicates whether Duke needs to exit after this command."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * ExitCommand instances will always return true."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * @return True if Duke needs to terminate"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    public boolean shouldTerminate() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * Does nothing. Command occurs by checking terminate()."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * @param   storage     A {@link Storage} object to cache task list"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * @param   buffer      A {@link Buffer} object to buffer Duke\u0027s output"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * @param   taskList    A {@link TaskList} object which stores the task list"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    public void execute(Storage storage, Buffer buffer, TaskList taskList) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tanlk99": 30
    }
  },
  {
    "path": "src/main/java/duke/command/FindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import duke.util.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import duke.util.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import duke.util.Buffer;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tanlk99"
        },
        "content": " * Represents a command to search for all tasks in the task list with descriptions containing a string."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tanlk99"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    private static final String FIND_COMMAND_NO_MATCH \u003d \"There were no tasks in the list \""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            + \"that matched your search term.\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    private static final String FIND_COMMAND_SUCCESS \u003d \"Here are the matching tasks in your list:\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    private static final String FIND_COMMAND_LIST \u003d \"%1$d.%2$s\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    private String filter;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * Creates a new FindCommand."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * @param filter    String to search for"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    public FindCommand(String filter) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        this.filter \u003d filter;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * Returns the string to search for."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * @return  String to search for"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    public String getFilter() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        return filter;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * Finds all tasks with descriptions containing the filter and lists them."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * @param   storage     A {@link Storage} object to cache task list"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * @param   buffer      A {@link Buffer} object to buffer Duke\u0027s output"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * @param   taskList    A {@link TaskList} object which stores the task list"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    public void execute(Storage storage, Buffer buffer, TaskList taskList) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        ArrayList\u003cInteger\u003e matchIndices \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        for (int index \u003d 1; index \u003c\u003d taskList.getSize(); index++) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            if (taskList.taskDescriptionContains(index, filter)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "                matchIndices.add(index);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        if (matchIndices.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            buffer.formatLine(FIND_COMMAND_NO_MATCH);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            buffer.formatLine(FIND_COMMAND_SUCCESS);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            for (int index : matchIndices) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "                buffer.formatLine(String.format(FIND_COMMAND_LIST,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "                        index, taskList.getTask(index).toString()));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tanlk99": 63
    }
  },
  {
    "path": "src/main/java/duke/command/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import duke.util.Buffer;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import duke.util.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import duke.util.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tanlk99"
        },
        "content": " * Represents a command to list all tasks in the task list."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tanlk99"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    private static final String LIST_COMMAND_NO_TASKS \u003d \"You have no tasks right now.\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    private static final String LIST_COMMAND_SUCCESS \u003d \"Here are the tasks in your list:\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    private static final String LIST_COMMAND_LIST \u003d \"%1$d.%2$s\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * Lists all tasks in the task list."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * @param   storage     A {@link Storage} object to cache task list"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * @param   buffer      A {@link Buffer} object to buffer Duke\u0027s output"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * @param   taskList    A {@link TaskList} object which stores the task list"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    public void execute(Storage storage, Buffer buffer, TaskList taskList) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        if (taskList.getSize() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            buffer.formatLine(LIST_COMMAND_NO_TASKS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            buffer.formatLine(LIST_COMMAND_SUCCESS);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            for (int i \u003d 1; i \u003c\u003d taskList.getSize(); i++) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "                buffer.formatLine(String.format(LIST_COMMAND_LIST,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "                        i, taskList.getTask(i).toString()));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tanlk99": 33
    }
  },
  {
    "path": "src/main/java/duke/exception/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tanlk99"
        },
        "content": " * Exception class for Duke. Meant to be thrown as an internal exception and"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tanlk99"
        },
        "content": " * must be caught to be thrown in a method."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tanlk99"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    private String message;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * Creates a new DukeException."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * @param   message The error message to display"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    public DukeException(String message) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        this.message \u003d message;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        return message;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tanlk99": 24
    }
  },
  {
    "path": "src/main/java/duke/task/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import java.text.DateFormat;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tanlk99"
        },
        "content": " * Represents a deadline."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tanlk99"
        },
        "content": " * Deadline have a date associated with them, and can be marked as done."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tanlk99"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    protected String timeString;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    protected Calendar time;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    protected boolean hasCalendar;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * No-argument constructor for Jackson."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    public Deadline() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * Creates a new Deadline instance using a string to represent time."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * @param   description Description of the deadline"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * @param   timeString  A String describing the due date"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    public Deadline(String description, String timeString) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        this.timeString \u003d timeString;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        hasCalendar \u003d false;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * Creates a new Deadline instance using a {@link Calendar} to represent time."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * @param   description Description of the deadline"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * @param   time  A {@link Calendar} describing the due date"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    public Deadline(String description, Calendar time) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        hasCalendar \u003d true;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * Returns a string representing the due date."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * @return A string representing the due date"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    private String getTime() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        if (hasCalendar) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            assert time !\u003d null;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            DateFormat dateFormat \u003d new SimpleDateFormat(\"dd-MM-yyyy HH:mm\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            return dateFormat.format(time.getTime());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            assert timeString !\u003d null;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            return timeString;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        return \"[D]\" + super.toString() + \" (by: \" + getTime() + \")\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tanlk99": 66
    }
  },
  {
    "path": "src/main/java/duke/task/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import java.text.DateFormat;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tanlk99"
        },
        "content": " * Represents a future event."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tanlk99"
        },
        "content": " * Events have a date associated with them, and can be marked as complete."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tanlk99"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    protected String timeString;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    protected Calendar time;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    protected boolean hasCalendar;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * No-argument constructor for Jackson."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    public Event() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * Creates a new Event instance using a string to represent time."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * @param   description Description of the event"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * @param   timeString  A String describing the time of the event"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    public Event(String description, String timeString) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        this.timeString \u003d timeString;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        hasCalendar \u003d false;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * Creates a new Event instance using a {@link Calendar} to represent time."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * @param   description Description of the event"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * @param   time  A {@link Calendar} describing the time of the event"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    public Event(String description, Calendar time) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        hasCalendar \u003d true;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * Returns a string describing the time of the event."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * @return  A string describing the time of the event"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    private String getTime() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        if (hasCalendar) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            assert time !\u003d null;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            DateFormat dateFormat \u003d new SimpleDateFormat(\"dd-MM-yyyy HH:mm\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            return dateFormat.format(time.getTime());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            assert timeString !\u003d null;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            return timeString;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        return \"[E]\" + super.toString() + \" (at: \" + getTime() + \")\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tanlk99": 66
    }
  },
  {
    "path": "src/main/java/duke/task/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonAutoDetect;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonSubTypes;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonSubTypes.Type;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonTypeInfo;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonTypeInfo.As;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonTypeInfo.Id;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tanlk99"
        },
        "content": " * Represents a task in the task list."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tanlk99"
        },
        "content": " * Can be marked as done."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tanlk99"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "@JsonTypeInfo("
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        use \u003d Id.NAME,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        include \u003d As.PROPERTY,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        property \u003d \"@class\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ")"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "@JsonSubTypes({"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        @Type(value \u003d ToDo.class, name \u003d \"Todo\"),"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        @Type(value \u003d Deadline.class, name \u003d \"Deadline\"),"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        @Type(value \u003d Event.class, name \u003d \"Event\")"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "})"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "@JsonAutoDetect(fieldVisibility \u003d JsonAutoDetect.Visibility.ANY)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "public abstract class Task {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    protected boolean isDone \u003d false;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * No-argument constructor for Jackson."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    public Task() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * Creates a new Task."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * New tasks are created as incomplete."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * @param   description A description of the task"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * Creates a new Task, which has already been completed."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * @param   description A description of the task"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    public Task(String description, boolean isDone) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        this.isDone \u003d isDone;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * Marks the task as done."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    public void markAsDone() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        isDone \u003d true;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * Returns the description of the task."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * @return  Description of the task"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    private String getStatusIcon() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        return (isDone ? \"[O]\" : \"[X]\"); //can\u0027t display unicode"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        return getStatusIcon() + \" \" + description;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tanlk99": 79
    }
  },
  {
    "path": "src/main/java/duke/task/ToDo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tanlk99"
        },
        "content": " * Represents a to-do task."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tanlk99"
        },
        "content": " * Todos can be marked as done."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tanlk99"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "public class ToDo extends Task {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * No-argument constructor for Jackson."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    public ToDo() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * Creates a new ToDo instance."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * @param   description     Description of the to-do task"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    public ToDo(String description) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tanlk99": 27
    }
  },
  {
    "path": "src/main/java/duke/util/Buffer.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "package duke.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tanlk99"
        },
        "content": " * Buffers Duke\u0027s text output."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tanlk99"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "public class Buffer {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    private static final String[] DUKE_GREETING \u003d {\"Hello! I\u0027m Duke.\","
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "                                                   \"What can I do for you?\"};"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    private static final String[] DUKE_APOLOGY \u003d {\"Sorry! Duke could not load up your previous task list from storage.\","
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "                                                  \"Starting Duke with a blank task list...\"};"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    private StringBuilder output \u003d new StringBuilder();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * Appends a string to the buffer."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * @param   output  Output string to append"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    public void formatLine(String output) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        this.output.append(output).append(\"\\n\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * Adds Duke\u0027s standard welcome on startup to the buffer."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    public void addGreetings() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        for (String line : DUKE_GREETING) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            formatLine(line);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * Adds the error message for cache load failure to the buffer."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    public void addLoadingError() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        for (String line : DUKE_APOLOGY) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            formatLine(line);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * Returns the entire buffer, and then empties it."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * @return Current buffer string"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    public String getOutput() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        String toReturn \u003d output.toString();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        output.setLength(0);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        return toReturn;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tanlk99": 51
    }
  },
  {
    "path": "src/main/java/duke/util/FileLoader.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "package duke.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tanlk99"
        },
        "content": " * Handles the creation of new files used by Duke."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tanlk99"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "public class FileLoader {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * Checks if a file at a given path exists."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * @param filePath Relative path to file to check"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * @return True if file already exists"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    public static boolean isFilePresent(String filePath) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        File file \u003d new File(filePath);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        return file.exists();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * Creates an empty file at the specified location if it does not exist."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * @param filePath      Relative path to file to create"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * @throws IOException  If file creation failed"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    public static void createFileIfNotExists(String filePath) throws IOException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        File file \u003d new File(filePath);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        if (file.exists()) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        String dirPath \u003d getDirectoryPath(filePath);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        createDirectoryIfNotExists(dirPath);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        file.createNewFile();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * Creates a directory (and all parent directories) if it does not exist."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * @param dirPath  Relative path to directory"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    private static void createDirectoryIfNotExists(String dirPath) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        File dir \u003d new File(dirPath);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        if (dir.exists()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        dir.mkdirs();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * Gets the directory location of a file path."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * @param filePath  Relative path to the file"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * @return  Parent directory of the file"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    static String getDirectoryPath(String filePath) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        int lastSlash \u003d filePath.lastIndexOf(\"/\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        if (lastSlash \u003d\u003d -1) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            return \".\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        return filePath.substring(0, lastSlash);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tanlk99": 66
    }
  },
  {
    "path": "src/main/java/duke/util/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "package duke.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import com.fasterxml.jackson.core.type.TypeReference;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import com.fasterxml.jackson.databind.ObjectMapper;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import com.fasterxml.jackson.databind.SequenceWriter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tanlk99"
        },
        "content": " * Handles I/O between Duke and an external cache file. Storage instances can load the"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tanlk99"
        },
        "content": " * task list from the cache file, or write the task list to the cache file."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tanlk99"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    private static final String CACHE_INITIALIZE_FAILED \u003d \"Could not initialize cache file.\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    private static final String CACHE_READ_FAILED \u003d \"Could not read from cache file.\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    private static final String CACHE_WRITE_FAILED \u003d \"Could not write to cache file.\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    private static final String ARCHIVE_WRITE_FAILED \u003d \"Could not write to archive file.\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    private String cachePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    private String archivePath;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * Creates a Storage object."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * @param  cachePath    Relative path to cache file"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * @param  archiveAddr  Relative path to archive file"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    public Storage(String cachePath, String archiveAddr) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        this.cachePath \u003d cachePath;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        this.archivePath \u003d archiveAddr;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * Creates and initializes the cache file if it does not exist."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * @throws  DukeException  If creation or initialization of the cache file failed."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    public void initializeCacheIfNotExists() throws DukeException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        if (FileLoader.isFilePresent(cachePath)) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            FileLoader.createFileIfNotExists(cachePath);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            initializeNewCache(cachePath);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            throw new DukeException(CACHE_INITIALIZE_FAILED);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * Initializes a newly created cache file with an empty task list."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * @param filePath  Path to cache file to initialize"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * @throws IOException  If initalization of file failed"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    private void initializeNewCache(String filePath) throws IOException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        File file \u003d new File(filePath);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        List\u003cTask\u003e emptyList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        ObjectMapper objectMapper \u003d new ObjectMapper();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        objectMapper.writeValue(file, emptyList);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * Retrieves the saved task list from the cache file."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * @return  ArrayList containing the retrieved task list"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * @throws  DukeException  If unable to read from cache file or the cache file is corrupted"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    public ArrayList\u003cTask\u003e readCache() throws DukeException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        ArrayList\u003cTask\u003e result;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            File file \u003d new File(cachePath);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            ObjectMapper objectMapper \u003d new ObjectMapper();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            result \u003d objectMapper.readValue(file, new TypeReference\u003cArrayList\u003cTask\u003e\u003e(){});"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            throw new DukeException(CACHE_READ_FAILED);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * Writes the contents of a task list to the cache file."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * @param   taskList    TaskList to write to cache file"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * @throws  DukeException   If unable to write to cache file"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    public void writeCache(TaskList taskList) throws DukeException {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            File file \u003d new File(cachePath);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            ObjectMapper objectMapper \u003d new ObjectMapper();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            objectMapper.writerFor(new TypeReference\u003cArrayList\u003cTask\u003e\u003e(){})"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "                    .withDefaultPrettyPrinter()"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "                    .writeValue(file, taskList.getAllTasks());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            throw new DukeException(CACHE_WRITE_FAILED);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * Appends the contents of a list of tasks to the archive file."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * @param taskArrayList    List of task objects to write to archive file"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * @throws DukeException    If unable to write to archive file"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    public void writeArchive(ArrayList\u003cTask\u003e taskArrayList) throws DukeException {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            FileLoader.createFileIfNotExists(archivePath);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            File file \u003d new File(archivePath);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            FileWriter fileWriter \u003d new FileWriter(file, true);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            ObjectMapper objectMapper \u003d new ObjectMapper();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            SequenceWriter sequenceWriter \u003d objectMapper.writerFor(Task.class)"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "                    .withDefaultPrettyPrinter()"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "                    .writeValues(fileWriter);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            for (Task task : taskArrayList) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "                sequenceWriter.write(task);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            sequenceWriter.close();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            throw new DukeException(ARCHIVE_WRITE_FAILED);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tanlk99": 135
    }
  },
  {
    "path": "src/main/java/duke/util/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "package duke.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tanlk99"
        },
        "content": " * Handles all operations on the task list and tasks in the task list."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tanlk99"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    protected ArrayList\u003cTask\u003e taskList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * Initializes an empty TaskList."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        taskList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * Initializes a new TaskList with some pre-existing tasks."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * @param from      An ArrayList containing some Task objects"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    public TaskList(ArrayList\u003cTask\u003e from) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        taskList \u003d from;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * Returns the size of the task list."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * @return  Size of current task list"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    public int getSize() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        return taskList.size();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * Returns a Task object from the task list by index. If the index is invalid, this"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * method will throw an assertion error."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * @param index     1-indexed value indicating position in the task list to return"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * @return          Task object at position index"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    public Task getTask(int index) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        assert index \u003e 0 \u0026\u0026 index \u003c\u003d taskList.size();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        return taskList.get(index - 1);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * Returns a list of Task objects given by a list of indexes. If any index is invalid,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * this method will throw an assertion error."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * @param indexes   List of 1-indexed values indicating position in the task list to return"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * @return          A list of Task objects at the specified positions"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    public ArrayList\u003cTask\u003e getTasks(ArrayList\u003cInteger\u003e indexes) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        ArrayList\u003cTask\u003e result \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        for (int index : indexes) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            assert index \u003e 0 \u0026\u0026 index \u003c\u003d taskList.size();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            result.add(taskList.get(index - 1));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * Adds a new Task to the back of the task list."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * @param toAdd     The Task object to add"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    public void addNewTask(Task toAdd) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        taskList.add(toAdd);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * Deletes the task given by index. If the index is invalid, this method will throw"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * an assertion error."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * @param index     1-indexed value indicating position of the task to delete"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    public void deleteTask(int index) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        assert index \u003e 0 \u0026\u0026 index \u003c\u003d taskList.size();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        taskList.remove(index - 1);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * Deletes the tasks given by a list of indexes. If any index is invalid, this method will throw"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * an assertion error."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * @param indexes   List of 1-indexed values indicating position of the task to delete"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    public void deleteTasks(ArrayList\u003cInteger\u003e indexes) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        Collections.sort(indexes);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        assert indexes.get(0) \u003e 0 \u0026\u0026 indexes.get(0) \u003c\u003d taskList.size();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        assert indexes.get(indexes.size() - 1) \u003e 0 \u0026\u0026 indexes.get(indexes.size() - 1) \u003c\u003d taskList.size();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        for (int i \u003d indexes.size() - 1; i \u003e\u003d 0; i--) { //remove from the back"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            taskList.remove(indexes.get(i) - 1);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * Marks the task given by index as done. If the index is invalid, this method will throw"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * an assertion error."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * @param index     1-indexed value indicating position of the task to mark"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    public void markTaskAsDone(int index) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        assert index \u003e 0 \u0026\u0026 index \u003c\u003d taskList.size();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        taskList.get(index - 1).markAsDone();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * Checks if the description of a task given by index contains a given filter string."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * If the index is invalid, this method will throw an assertion error. This search is"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * case-insensitive."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * @param index     1-indexed value indicating position of the task to check"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * @param filter    The string to check"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * @return          True if task description contains filter string"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    public boolean taskDescriptionContains(int index, String filter) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        assert index \u003e 0 \u0026\u0026 index \u003c\u003d taskList.size();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        String taskDescriptionLower \u003d taskList.get(index - 1).getDescription().toLowerCase();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        return taskDescriptionLower.contains(filter.toLowerCase());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * Returns the entire task list. This method is intended for file storage purposes only."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * @return      An ArrayList containing the current task list"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    ArrayList\u003cTask\u003e getAllTasks() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        return taskList;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tanlk99": 138
    }
  },
  {
    "path": "src/main/java/duke/util/config/Config.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "package duke.util.config;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "class Config {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    private static final String DEFAULT_CACHE_PATH \u003d \"data/duke-cache.txt\";"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    private static final String DEFAULT_ARCHIVE_PATH \u003d \"archive/duke-archive.txt\";"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    private String cachePath;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    private String archivePath;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * Returns a Config object containing Duke\u0027s default configuration."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * @return Config object with default configuration"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    static Config getDefaultConfig() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        Config defaultConfig \u003d new Config();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        defaultConfig.setCachePath(DEFAULT_CACHE_PATH);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        defaultConfig.setArchivePath(DEFAULT_ARCHIVE_PATH);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        return defaultConfig;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * Returns the configured cache path."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * @return Relative path to cache file"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    String getCachePath() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        return cachePath;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * Returns the configured archive path."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * @return Relative path to archive file"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    String getArchivePath() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        return archivePath;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * Sets the configured cache path."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * @param cachePath Relative path to cache file"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    void setCachePath(String cachePath) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        this.cachePath \u003d cachePath;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * Sets the configured archive path."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * @param archivePath Relative path to archive file"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    void setArchivePath(String archivePath) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        this.archivePath \u003d archivePath;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tanlk99": 57
    }
  },
  {
    "path": "src/main/java/duke/util/config/ConfigLoader.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "package duke.util.config;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import duke.util.FileLoader;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import com.fasterxml.jackson.databind.ObjectMapper;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "public class ConfigLoader {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    private static final String CONFIG_INITIALIZE_FAILED \u003d \"Could not initialize config file.\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    private static final String CONFIG_READ_FAILED \u003d \"Could not read config file.\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    private static final String CONFIG_WRITE_FAILED \u003d \"Could not write config file.\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    private String configPath;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    private Config config;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * Creates a new ConfigLoader."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * @param configPath Relative path to config file"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    public ConfigLoader(String configPath) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        config \u003d Config.getDefaultConfig();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        this.configPath \u003d configPath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * Loads Duke\u0027s configurations from the config file."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * If the config file does not exist, creates a new config file and saves the default config."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * @throws DukeException If load failed"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    public void loadConfig() throws DukeException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        if (FileLoader.isFilePresent(configPath)) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            readConfig();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            FileLoader.createFileIfNotExists(configPath);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            config \u003d Config.getDefaultConfig(); //set to default"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            writeConfig();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        } catch (IOException | DukeException e) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            throw new DukeException(CONFIG_INITIALIZE_FAILED);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * Reads a Config object from the config file."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * @throws DukeException If read failed"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    private void readConfig() throws DukeException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            File file \u003d new File(configPath);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            ObjectMapper mapper \u003d new ObjectMapper();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            config \u003d mapper.readValue(file, Config.class);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            throw new DukeException(CONFIG_READ_FAILED);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * Writes the Config object to the config file."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * @throws DukeException If write failed"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    private void writeConfig() throws DukeException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            File file \u003d new File(configPath);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            ObjectMapper mapper \u003d new ObjectMapper();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            mapper.writerWithDefaultPrettyPrinter().writeValue(file, config);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            throw new DukeException(CONFIG_WRITE_FAILED);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * Sets the cache path and saves the new path in the config file."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * @param cachePath Relative path to cache file"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * @throws DukeException If write failed"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    public void saveCachePath(String cachePath) throws DukeException {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        config.setCachePath(cachePath);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        writeConfig();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * Sets the archive path and saves the new path in the config file."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * @param archivePath Relative path to archive file"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * @throws DukeException If write failed"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    public void saveArchivePath(String archivePath) throws DukeException {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        config.setArchivePath(archivePath);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        writeConfig();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * Gets the cache path."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * @return Relative path to config file"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    public String getCachePath() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        return config.getCachePath();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * Gets the archive path."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * @return Relative path to archive file"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    public String getArchivePath() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        return config.getArchivePath();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tanlk99": 117
    }
  },
  {
    "path": "src/main/java/duke/util/parser/AddCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "package duke.util.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import duke.command.AddCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "class AddCommandParser implements CommandParser\u003cAddCommand\u003e {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    private static final String ADD_COMMAND_EMPTY_DESCRIPTION \u003d \"The description of %1$s %2$s cannot be empty.\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * Parses a command to add a new task."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * @param rawInput Raw input passed to Duke with whitespaces trimmed"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * @return An AddCommand instance to execute the command"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * @throws DukeException If input format is invalid"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    public AddCommand parseCommand(String rawInput) throws DukeException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        String commandPhrase \u003d rawInput.split(\" \", 2)[0];"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        if (!rawInput.contains(\" \")) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            throw new DukeException(String.format(ADD_COMMAND_EMPTY_DESCRIPTION,"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "                    ParserUtil.getArticle(commandPhrase),"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "                    commandPhrase));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        String rawTaskDescription \u003d rawInput.split(\" \", 2)[1];"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        return new AddCommand(new TaskParser().parseTask(rawTaskDescription, commandPhrase));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tanlk99": 28
    }
  },
  {
    "path": "src/main/java/duke/util/parser/ArchiveCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "package duke.util.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import duke.command.ArchiveAllCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import duke.command.ArchiveCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "public class ArchiveCommandParser implements CommandParser\u003cArchiveCommand\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    private static final String ARCHIVE_COMMAND_EMPTY_INPUT \u003d \"The list of tasks to archive cannot be empty.\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    private static final String ARCHIVE_COMMAND_HELP \u003d \"Use \u0027archive\u0027 followed by a list \""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            + \"of whitespace-separated indexes to archive a list of tasks given by the indexes.\\n\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            + \"Alternatively, use \u0027archive all\u0027 or \u0027archive *\u0027 to archive all tasks in the task list.\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    private static final String[] ARCHIVE_ALL_STRINGS \u003d {\"all\", \"*\"};"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * Parses a command to archive one or more tasks."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * Duplicate indexes are ignored."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * @param rawInput Raw input passed to Duke with whitespaces trimmed"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * @return An ArchiveCommand instance to execute the command"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * @throws DukeException If input format is invalid"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    public ArchiveCommand parseCommand(String rawInput) throws DukeException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        if (!rawInput.contains(\" \")) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            throw new DukeException(ARCHIVE_COMMAND_EMPTY_INPUT);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        String indexesString \u003d rawInput.split(\" \", 2)[1].trim(); //remove command phrase"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        for (String archiveAllString : ARCHIVE_ALL_STRINGS) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            if (indexesString.compareTo(archiveAllString) \u003d\u003d 0) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "                return new ArchiveAllCommand();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        String[] indexesArray \u003d indexesString.split(\" \");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        Set\u003cInteger\u003e indexesToArchiveSet \u003d new HashSet\u003c\u003e(); //to filter duplicates"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        for (String untrimmedIndexString : indexesArray) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            String indexString \u003d untrimmedIndexString.trim();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            if (indexString.length() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "                indexesToArchiveSet.add(Integer.parseInt(indexString));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "                throw new DukeException(ARCHIVE_COMMAND_HELP);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        ArrayList\u003cInteger\u003e indexesToArchive \u003d new ArrayList\u003c\u003e(indexesToArchiveSet);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        return new ArchiveCommand(indexesToArchive);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tanlk99": 58
    }
  },
  {
    "path": "src/main/java/duke/util/parser/CommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "package duke.util.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "interface CommandParser\u003cT extends Command\u003e {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * Parses a command of a certain type."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * @param rawInput Raw input passed to Duke with whitespaces trimmed"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * @return A Command instance to execute the command"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * @throws DukeException If input format is invalid"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    T parseCommand(String rawInput) throws DukeException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tanlk99": 15
    }
  },
  {
    "path": "src/main/java/duke/util/parser/DateParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "package duke.util.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import java.text.DateFormat;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tanlk99"
        },
        "content": " * Parses dates in Duke\u0027s commands."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tanlk99"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "class DateParser {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    private static final String INTERNAL_DATE_FORMAT_NOT_FOUND \u003d \"Internal exception: no date format found\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    private static final List\u003cString\u003e DATE_FORMAT_STRINGS \u003d Arrays.asList("
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            \"dd/MM/yyyy HH:mm\", \"dd-MM-yyyy HH:mm\", \"yyyy/MM/dd HH:mm\", \"yyyy-MM-dd HH:mm\","
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            \"dd/MM/yyyy\", \"dd-MM-yyyy\", \"yyyy/MM/dd\", \"yyyy-MM-dd\","
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            \"dd/MM HH:mm\", \"dd-MM HH:mm\", \"dd/MM\", \"dd-MM\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * Attempts to interpret a string representing time using a list of date formats."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * If there was no suitable format, throws a {@link DukeException}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * @param   rawTime Substring of command representing a time"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * @return  A {@link Calendar} object if the command can be parsed"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * @throws  DukeException   If command cannot be parsed"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    Calendar parseTime(String rawTime) throws DukeException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        DateFormat dateFormat;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        for (String dateFormatString : DATE_FORMAT_STRINGS) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            dateFormat \u003d new SimpleDateFormat(dateFormatString);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            dateFormat.setLenient(false);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "                Date dateTime \u003d dateFormat.parse(rawTime);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "                Calendar calendarTime \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "                calendarTime.setTime(dateTime);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "                if (!dateFormatString.contains(\"yyyy\")) { //set year of calendar"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "                    Calendar currentTime \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "                    int currentYear \u003d currentTime.get(Calendar.YEAR);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "                    calendarTime.set(Calendar.YEAR, currentYear);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "                    if (calendarTime.before(currentTime)) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "                        calendarTime.set(Calendar.YEAR, currentYear + 1);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "                }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "                return calendarTime;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            } catch (ParseException ignored) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "                continue; //try next date format string"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        //no date format worked"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        throw new DukeException(INTERNAL_DATE_FORMAT_NOT_FOUND);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tanlk99": 60
    }
  },
  {
    "path": "src/main/java/duke/util/parser/DeleteCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "package duke.util.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import duke.command.DeleteCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "class DeleteCommandParser implements CommandParser\u003cDeleteCommand\u003e {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    private static final String DELETE_COMMAND_HELP \u003d \"Please use \u0027delete i\u0027 to delete the i-th task in the list.\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * Parses a \"delete\" command."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * @param rawInput Raw input passed to Duke with whitespaces trimmed"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * @return A DeleteCommand instance to execute the command"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * @throws DukeException  If input format is invalid"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    public DeleteCommand parseCommand(String rawInput) throws DukeException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            int index \u003d Integer.parseInt(rawInput.split(\" \", 2)[1].trim());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            return new DeleteCommand(index);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        } catch (NumberFormatException | ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            throw new DukeException(DELETE_COMMAND_HELP);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tanlk99": 24
    }
  },
  {
    "path": "src/main/java/duke/util/parser/DoneCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "package duke.util.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import duke.command.DoneCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "class DoneCommandParser implements CommandParser\u003cDoneCommand\u003e {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    private static final String DONE_COMMAND_HELP \u003d \"Please use \u0027done i\u0027 to mark completion \""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            + \"of the i-th task in the list.\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * Parses a \"done\" command."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * @param rawInput Raw input passed to Duke with whitespaces trimmed"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * @return A DoneCommand instance to execute the command"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * @throws DukeException  If input format is invalid"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    public DoneCommand parseCommand(String rawInput) throws DukeException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            int index \u003d Integer.parseInt(rawInput.split(\" \", 2)[1].trim());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            return new DoneCommand(index);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        } catch (NumberFormatException | ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            throw new DukeException(DONE_COMMAND_HELP);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tanlk99": 25
    }
  },
  {
    "path": "src/main/java/duke/util/parser/FindCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "package duke.util.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import duke.command.FindCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "class FindCommandParser implements CommandParser\u003cFindCommand\u003e {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    private static final String FIND_COMMAND_EMPTY \u003d \"Your search string cannot be empty. To see all \""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            + \"tasks, use \\\"list\\\" instead.\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * Parses a \"find\" command."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * @param rawInput Raw input passed to Duke with whitespaces trimmed"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * @return A FindCommand instance to execute the command"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * @throws DukeException  If input format is invalid"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    public FindCommand parseCommand(String rawInput) throws DukeException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        if (!rawInput.contains(\" \")) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            throw new DukeException(FIND_COMMAND_EMPTY);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        return new FindCommand(rawInput.split(\" \", 2)[1].trim());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tanlk99": 24
    }
  },
  {
    "path": "src/main/java/duke/util/parser/InputParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "package duke.util.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import duke.command.ExitCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import duke.command.ListCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tanlk99"
        },
        "content": " * Parses Duke\u0027s commands."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tanlk99"
        },
        "content": " *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tanlk99"
        },
        "content": " * \u003cp\u003eInterprets and converts raw input from the command line to instances of"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tanlk99"
        },
        "content": " * {@link Command} to be executed by Duke.\u003c/p\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tanlk99"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "public class InputParser {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    private static final String INVALID_COMMAND \u003d \"I don\u0027t understand that command.\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * Interprets a command input string to create a {@link Command} object."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * Leading and trailing spaces are ignored. Below is a table of all accepted commands:"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * \u003ctable border\u003d\"1\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     *   \u003ctr\u003e\u003ctd\u003eCommand\u003c/td\u003e\u003ctd\u003eFunction\u003c/td\u003e\u003c/tr\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     *   \u003ctr\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     *     \u003ctd\u003etodo \u003ci\u003ename\u003c/i\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     *     \u003ctd\u003eAdd a new to-do with description \u003ci\u003ename\u003c/i\u003e to the task list.\u003c/td\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     *   \u003c/tr\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     *   \u003ctr\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     *     \u003ctd\u003edeadline \u003ci\u003ename\u003c/i\u003e /by \u003ci\u003etime\u003c/i\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     *     \u003ctd\u003eAdd a new deadline with description \u003ci\u003ename\u003c/i\u003e and due date \u003ci\u003etime\u003c/i\u003e to the task list.\u003c/td\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     *   \u003c/tr\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     *   \u003ctr\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     *     \u003ctd\u003eevent \u003ci\u003ename\u003c/i\u003e /at \u003ci\u003etime\u003c/i\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     *     \u003ctd\u003eAdd a new event with description \u003ci\u003ename\u003c/i\u003e which occurs at time \u003ci\u003etime\u003c/i\u003e to the task list.\u003c/td\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     *   \u003c/tr\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     *   \u003ctr\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     *     \u003ctd\u003elist\u003c/td\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     *     \u003ctd\u003eList all the events in order indicating their completion status, type, and time (if applicable).\u003c/td\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     *   \u003c/tr\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     *   \u003ctr\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     *     \u003ctd\u003edone \u003ci\u003eindex\u003c/i\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     *     \u003ctd\u003eMark the \u003ci\u003eindex\u003c/i\u003e-th task in the task list as complete (\u003ci\u003eindex\u003c/i\u003e must be a valid integer).\u003c/td\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     *   \u003c/tr\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     *   \u003ctr\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     *     \u003ctd\u003edelete \u003ci\u003eindex\u003c/i\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     *     \u003ctd\u003eDelete the \u003ci\u003eindex\u003c/i\u003e-th task in the task list (\u003ci\u003eindex\u003c/i\u003e must be a valid integer).\u003c/td\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     *   \u003c/tr\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     *   \u003ctr\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     *     \u003ctd\u003efind \u003ci\u003esubstring\u003c/i\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     *     \u003ctd\u003eFinds and lists all tasks with description containing \u003ci\u003esubstring\u003c/i\u003e.\u003c/td\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     *   \u003c/tr\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     *   \u003ctr\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     *     \u003ctd\u003earchive \u003ci\u003eindex\u003c/i\u003e \u003ci\u003eindex\u003c/i\u003e ...\u003c/td\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     *     \u003ctd\u003eTransfers all tasks given by its \u003ci\u003eindex\u003c/i\u003e to an archive file and deletes them.\u003c/td\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     *   \u003c/tr\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     *   \u003ctr\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     *     \u003ctd\u003earchive *\u003c/td\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     *     \u003ctd\u003eTransfers ALL tasks to an archive file (task list will be cleared).\u003c/td\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     *   \u003c/tr\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     *   \u003ctr\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     *     \u003ctd\u003earchive all\u003c/td\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     *     \u003ctd\u003eSame as previous.\u003c/td\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     *   \u003c/tr\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     *   \u003ctr\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     *     \u003ctd\u003ebye\u003c/td\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     *     \u003ctd\u003eExit Duke.\u003c/td\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     *   \u003c/tr\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * \u003c/table\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * @param   untrimmedRawInput    Raw input passed into command line"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * @return  A {@link Command} object representing the command"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * @throws  DukeException   If input is invalid (see above)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    public Command parseInput(String untrimmedRawInput) throws DukeException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        String rawInput \u003d untrimmedRawInput.trim();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        String commandPhrase \u003d rawInput.split(\" \", 2)[0];"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        switch (commandPhrase) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        case \"bye\":"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        case \"list\":"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        case \"done\":"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            return new DoneCommandParser().parseCommand(rawInput);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        case \"delete\":"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            return new DeleteCommandParser().parseCommand(rawInput);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        case \"find\":"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            return new FindCommandParser().parseCommand(rawInput);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        case \"todo\": //Fallthrough"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        case \"event\": //Fallthrough"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        case \"deadline\":"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            return new AddCommandParser().parseCommand(rawInput);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        case \"archive\":"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            return new ArchiveCommandParser().parseCommand(rawInput);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            throw new DukeException(INVALID_COMMAND);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tanlk99": 98
    }
  },
  {
    "path": "src/main/java/duke/util/parser/ParserUtil.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "package duke.util.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tanlk99"
        },
        "content": " * Utility class for duke.util.parser package."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tanlk99"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "class ParserUtil {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * Returns true if \u003ci\u003estring\u003c/i\u003e begins with a vowel (i.e. \u0027a\u0027, \u0027e\u0027, \u0027i\u0027, \u0027o\u0027, or \u0027u\u0027)."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * @param string    The String to check"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * @return  True if string begins with a vowel"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    static boolean isBeginWithVowel(String string) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        if (string.length() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        char[] vowels \u003d {\u0027a\u0027, \u0027e\u0027, \u0027i\u0027, \u0027o\u0027, \u0027u\u0027};"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        for (char vowel : vowels) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            if (string.charAt(0) \u003d\u003d vowel) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * Returns the singular article (\"a\" or \"an\") to use for a string."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * Does not handle special exceptions to the vowel rule, e.g. \"hour\", \"universe\")."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * @param string A String object"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * @return Article to use for the string"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    static String getArticle(String string) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        return isBeginWithVowel(string) ? \"an\" : \"a\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tanlk99": 39
    }
  },
  {
    "path": "src/main/java/duke/util/parser/TaskParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "package duke.util.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import duke.task.ToDo;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tanlk99"
        },
        "content": " * Parses tasks in Duke\u0027s commands."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tanlk99"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "class TaskParser {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    private static final String TASK_EMPTY_DESCRIPTION \u003d \"The description of %1$s %2$s cannot be empty.\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    private static final String TASK_EMPTY_TIME \u003d \"Please specify the %1$s time using %2$s \""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            + \"(with spaces preceding and following).\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    private static final String INTERNAL_DATE_FORMAT_NOT_FOUND \u003d \"Internal exception: no date format found\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    private static final String PARSER_FATAL_ERROR \u003d \"My parser encountered a fatal error.\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * Enumerates all task types known to the parser."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    private enum TaskType {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        TODO(\"todo\", null),"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        DEADLINE(\"deadline\", \"/by\"),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        EVENT(\"event\", \"/at\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        public final String commandPhrase;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        public final String timeDivider;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        TaskType(String commandPhrase, String timeDivider) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            this.commandPhrase \u003d commandPhrase;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            this.timeDivider \u003d timeDivider;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "         * Gets the corresponding TaskType using its command phrase."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "         *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "         * @param   commandPhrase   Command phrase passed to command line"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "         * @return  A TaskType object corresponding to the command phrase"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "         */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        static TaskType getTaskType(String commandPhrase) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            Optional\u003cTaskType\u003e result \u003d Arrays.stream(TaskType.values())"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "                    .filter(t -\u003e t.commandPhrase.equals(commandPhrase))"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "                    .findFirst();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            if (result.isEmpty()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "                throw new RuntimeException(PARSER_FATAL_ERROR);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            return result.get();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * Interprets a command to add a task and creates the corresponding {@link Task} object."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * @param   rawTaskDescription    Raw description of task passed to command line"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * @param   commandPhrase         Command phrase passed to command line (to indicate task type)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * @return  A Task object to add to the task list"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * @throws  DukeException   If task description or time is invalid"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    Task parseTask(String rawTaskDescription, String commandPhrase) throws DukeException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        TaskType taskType \u003d TaskType.getTaskType(commandPhrase);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        if (taskType.timeDivider !\u003d null) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            return parseTimedTask(rawTaskDescription, taskType);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            return parseUntimedTask(rawTaskDescription, taskType);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * Interprets a command to add a timed task and creates the corresponding {@link Task} object."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * Timed tasks include {@link Event} and {@link Deadline}."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * @param   rawTaskDescription    Raw description of task passed to command line"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * @return  A Task object to add to the task list"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * @throws  DukeException   If task description or time is invalid"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    private Task parseTimedTask(String rawTaskDescription, TaskType taskType) throws DukeException {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        assert taskType.timeDivider !\u003d null;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        String divider \u003d taskType.timeDivider;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        String command \u003d taskType.commandPhrase;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        if (!rawTaskDescription.contains(\" \" + divider + \" \")) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            throw new DukeException(String.format(TASK_EMPTY_TIME, command, divider));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        String taskDescription \u003d rawTaskDescription.split(\" \" + divider + \" \", 2)[0].trim();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        String rawTaskTime \u003d rawTaskDescription.split(\" \" + divider + \" \", 2)[1].trim();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        if (taskDescription.length() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            throw new DukeException(String.format(TASK_EMPTY_DESCRIPTION,"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "                    ParserUtil.getArticle(command), command));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        if (rawTaskTime.length() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            throw new DukeException(String.format(TASK_EMPTY_TIME, command, divider));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        switch (taskType) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        case DEADLINE:"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "                return new Deadline(taskDescription, new DateParser().parseTime(rawTaskTime));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            } catch (DukeException e) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "                assert e.getMessage().equals(INTERNAL_DATE_FORMAT_NOT_FOUND);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "                return new Deadline(taskDescription, rawTaskTime);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        case EVENT:"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "                return new Event(taskDescription, new DateParser().parseTime(rawTaskTime));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            } catch (DukeException e) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "                assert e.getMessage().equals(INTERNAL_DATE_FORMAT_NOT_FOUND);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "                return new Event(taskDescription, rawTaskTime);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            throw new RuntimeException(PARSER_FATAL_ERROR); //should not continue"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * Interprets a command to add an untimed task and creates the corresponding {@link Task} object."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * Untimed tasks include {@link ToDo}."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * @param   rawTaskDescription    Raw description of task passed to command line"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * @return  A Task object to add to the task list"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * @throws  DukeException   If task description is invalid"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    private Task parseUntimedTask(String rawTaskDescription, TaskType taskType) throws DukeException {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        assert taskType.timeDivider \u003d\u003d null;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        String taskDescription \u003d rawTaskDescription.trim();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        String command \u003d taskType.commandPhrase;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        if (taskDescription.length() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            throw new DukeException(String.format(TASK_EMPTY_DESCRIPTION,"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "                    ParserUtil.getArticle(command), command));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        switch (taskType) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        case TODO:"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            return new ToDo(taskDescription);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            throw new RuntimeException(PARSER_FATAL_ERROR); //should not continue"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tanlk99": 147
    }
  },
  {
    "path": "src/main/resources/view/DialogBox.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "\u003cfx:root alignment\u003d\"TOP_RIGHT\" spacing\u003d\"15.0\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" stylesheets\u003d\"@../stylesheets/styles.css\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\" id\u003d\"message-content\" /\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"100.0\" fitWidth\u003d\"100.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    \u003cpadding\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        \u003cInsets bottom\u003d\"15.0\" left\u003d\"10.0\" right\u003d\"10.0\" top\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    \u003c/padding\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "tanlk99": 16
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "\u003c!-- Stage FXML solution adapted from https://stackoverflow.com/questions/38791933/how-to-define-stage-in-fxml --\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "\u003cfx:root type\u003d\"javafx.stage.Stage\" title\u003d\"Duke\" minHeight\u003d\"600.0\" minWidth\u003d\"400.0\" resizable\u003d\"false\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"duke.application.MainWindow\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    \u003cscene\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        \u003cScene\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            \u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "                \u003cchildren\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "                    \u003cTextField fx:id\u003d\"userInput\" promptText\u003d\"Enter a command\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "                    \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "                    \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "                        \u003ccontent\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "                            \u003cVBox fx:id\u003d\"dialogContainer\" prefWidth\u003d\"388.0\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "                        \u003c/content\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "                    \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "                \u003c/children\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        \u003c/Scene\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    \u003c/scene\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "tanlk99": 28
    }
  },
  {
    "path": "src/test/java/DummyTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "class DummyTest {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    void testArithmetic() {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        int a \u003d 2;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        int b \u003d 5;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        assertEquals(7, a + b);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        assertEquals(10, a * b);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        assertEquals(-3, a - b);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tanlk99": 14
    }
  },
  {
    "path": "src/test/java/duke/command/AddCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import duke.stubs.BufferStub;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import duke.stubs.StorageStub;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import duke.stubs.TaskListStub;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import duke.stubs.TaskStub;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "class AddCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    private StorageStub storageStub;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    private BufferStub bufferStub;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    void initTests() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        storageStub \u003d new StorageStub();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        bufferStub \u003d new BufferStub();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    void execute_taskListNotEmpty_successful() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        TaskListStub taskListStub \u003d new TaskListStub(5);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        TaskStub dummyTask \u003d new TaskStub(\"do dishes\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        AddCommand addCommand \u003d new AddCommand(dummyTask);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        addCommand.execute(storageStub, bufferStub, taskListStub);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        assertEquals(\"Got it. I\u0027ve added this task:#  X do dishes#\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "                + \"Now you have 6 tasks in the list.#\", bufferStub.getOutputString());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    void execute_taskListEmpty_successful() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        TaskListStub taskListStub \u003d new TaskListStub(0);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        TaskStub dummyTask \u003d new TaskStub(\"do dishes\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        AddCommand addCommand \u003d new AddCommand(dummyTask);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        addCommand.execute(storageStub, bufferStub, taskListStub);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        assertEquals(\"Got it. I\u0027ve added this task:#  X do dishes#\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "                + \"Now you have 1 task in the list.#\", bufferStub.getOutputString());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    void execute_taskListNotEmpty_storageErrorPrinted() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        storageStub.setWillThrowStorageException(true);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        TaskListStub taskListStub \u003d new TaskListStub(5);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        TaskStub dummyTask \u003d new TaskStub(\"do dishes\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        AddCommand addCommand \u003d new AddCommand(dummyTask);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        addCommand.execute(storageStub, bufferStub, taskListStub);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        assertEquals(\"Got it. I\u0027ve added this task:#  X do dishes#\""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "                + \"Now you have 6 tasks in the list.##Sorry! I was unable to save \""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "                + \"this update in storage. I\u0027ll try again next time.#\", bufferStub.getOutputString());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    void execute_taskListEmpty_storageErrorPrinted() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        storageStub.setWillThrowStorageException(true);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        TaskListStub taskListStub \u003d new TaskListStub(0);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        TaskStub dummyTask \u003d new TaskStub(\"do dishes\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        AddCommand addCommand \u003d new AddCommand(dummyTask);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        addCommand.execute(storageStub, bufferStub, taskListStub);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        assertEquals(\"Got it. I\u0027ve added this task:#  X do dishes#\""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "                + \"Now you have 1 task in the list.##Sorry! I was unable to save \""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "                + \"this update in storage. I\u0027ll try again next time.#\", bufferStub.getOutputString());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tanlk99": 70
    }
  },
  {
    "path": "src/test/java/duke/command/ArchiveCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import duke.stubs.BufferStub;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import duke.stubs.StorageStub;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import duke.stubs.TaskListStub;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "class ArchiveCommandTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    private StorageStub storageStub;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    private BufferStub bufferStub;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    void initTests() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        storageStub \u003d new StorageStub();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        bufferStub \u003d new BufferStub();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    void execute_indexesValid_successful() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        TaskListStub taskListStub \u003d new TaskListStub(5);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        ArrayList\u003cInteger\u003e indexesToArchive \u003d new ArrayList\u003c\u003e(Arrays.asList(1, 3));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        ArchiveCommand archiveCommand \u003d new ArchiveCommand(indexesToArchive);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            archiveCommand.execute(storageStub, bufferStub, taskListStub);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            assertEquals(\"I saved the following tasks to the archive file:#  X task1#\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "                    + \"  X task3#\", bufferStub.getOutputString());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            assertEquals(1, 0);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    void execute_indexInvalid_exceptionThrown() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        TaskListStub taskListStub \u003d new TaskListStub(5);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        ArrayList\u003cInteger\u003e indexesToArchive \u003d new ArrayList\u003c\u003e(Arrays.asList(1, -1, 2));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        ArchiveCommand archiveCommand \u003d new ArchiveCommand(indexesToArchive);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            archiveCommand.execute(storageStub, bufferStub, taskListStub);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            assertEquals(1, 0);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            assertEquals(\"-1 is not a valid task number.\", e.getMessage());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    void execute_archiveFailed_exceptionThrown() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        storageStub.setWillThrowArchiveException(true);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        TaskListStub taskListStub \u003d new TaskListStub(5);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        ArrayList\u003cInteger\u003e indexesToArchive \u003d new ArrayList\u003c\u003e(Arrays.asList(1, 3));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        ArchiveCommand archiveCommand \u003d new ArchiveCommand(indexesToArchive);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            archiveCommand.execute(storageStub, bufferStub, taskListStub);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            assertEquals(1, 0);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            assertEquals(\"I was unable to save your task(s) to the archive location. \""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "                    + \"Your task(s) will not be deleted.\", e.getMessage());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    void execute_storageErrorPrinted() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        storageStub.setWillThrowStorageException(true);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        TaskListStub taskListStub \u003d new TaskListStub(5);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        ArrayList\u003cInteger\u003e indexesToArchive \u003d new ArrayList\u003c\u003e(Arrays.asList(1, 3));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        ArchiveCommand archiveCommand \u003d new ArchiveCommand(indexesToArchive);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            archiveCommand.execute(storageStub, bufferStub, taskListStub);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            assertEquals(\"I saved the following tasks to the archive file:#  X task1#\""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "                    + \"  X task3##Sorry! I was unable to save this update \""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "                    + \"in storage. I\u0027ll try again next time.#\", bufferStub.getOutputString());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            assertEquals(1, 0);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    void executeArchiveAll_taskListEmpty_exceptionThrown() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        TaskListStub taskListStub \u003d new TaskListStub(0);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        ArchiveAllCommand archiveCommand \u003d new ArchiveAllCommand();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            archiveCommand.execute(storageStub, bufferStub, taskListStub);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            assertEquals(\"You have no tasks in your task list right now.#\", bufferStub.getOutputString());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            assertEquals(1, 0);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tanlk99": 97
    }
  },
  {
    "path": "src/test/java/duke/command/DeleteCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import duke.stubs.BufferStub;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import duke.stubs.StorageStub;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import duke.stubs.TaskListStub;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "class DeleteCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    private StorageStub storageStub;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    private BufferStub bufferStub;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    void initTests() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        storageStub \u003d new StorageStub();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        bufferStub \u003d new BufferStub();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    void execute_taskListMedium_successful() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        TaskListStub taskListStub \u003d new TaskListStub(5);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(3);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            deleteCommand.execute(storageStub, bufferStub, taskListStub);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            assertEquals(\"Noted. I\u0027ve removed this task.#  X task3#\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "                    + \"Now you have 4 tasks in the list.#\", bufferStub.getOutputString());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        } catch (DukeException e) { //shouldn\u0027t throw this exception"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            assertEquals(1, 0);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    void execute_taskListSmall_successful() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        TaskListStub taskListStub \u003d new TaskListStub(2);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(2);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            deleteCommand.execute(storageStub, bufferStub, taskListStub);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            assertEquals(\"Noted. I\u0027ve removed this task.#  X task2#\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "                    + \"Now you have 1 task in the list.#\", bufferStub.getOutputString());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        } catch (DukeException e) { //shouldn\u0027t throw this exception"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            assertEquals(1, 0);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    void execute_storageErrorPrinted() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        storageStub.setWillThrowStorageException(true);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        TaskListStub taskListStub \u003d new TaskListStub(5);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(3);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            deleteCommand.execute(storageStub, bufferStub, taskListStub);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            assertEquals(\"Noted. I\u0027ve removed this task.#  X task3#\""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "                    + \"Now you have 4 tasks in the list.##Sorry! I was unable to save \""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "                    + \"this update in storage. I\u0027ll try again next time.#\", bufferStub.getOutputString());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        } catch (DukeException e) { //shouldn\u0027t throw this exception"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            assertEquals(1, 0);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    void execute_negativeIndex_exceptionThrown() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        storageStub.setWillThrowStorageException(true);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        TaskListStub taskListStub \u003d new TaskListStub(5);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(-1);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            deleteCommand.execute(storageStub, bufferStub, taskListStub);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            assertEquals(1, 0);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        } catch (DukeException e) { //should always throw this exception"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            assertEquals(\"\", bufferStub.getOutputString());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            assertEquals(e.getMessage(), \"That is not a valid task number.\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    void execute_tooLargeIndex_exceptionThrown() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        storageStub.setWillThrowStorageException(true);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        TaskListStub taskListStub \u003d new TaskListStub(5);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(9);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            deleteCommand.execute(storageStub, bufferStub, taskListStub);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            assertEquals(1, 0);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        } catch (DukeException e) { //should always throw this exception"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            assertEquals(\"\", bufferStub.getOutputString());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            assertEquals(e.getMessage(), \"That is not a valid task number.\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tanlk99": 98
    }
  },
  {
    "path": "src/test/java/duke/command/DoneCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import duke.stubs.StorageStub;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import duke.stubs.TaskListStub;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import duke.stubs.BufferStub;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "class DoneCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    private StorageStub storageStub;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    private BufferStub bufferStub;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    void initTests() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        storageStub \u003d new StorageStub();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        bufferStub \u003d new BufferStub();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    void execute_validIndex_successful() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        TaskListStub taskListStub \u003d new TaskListStub(5);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        DoneCommand doneCommand \u003d new DoneCommand(3);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            doneCommand.execute(storageStub, bufferStub, taskListStub);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            assertEquals(\"Nice! I\u0027ve marked this task as done:#  O task3#\","
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "                    bufferStub.getOutputString());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        } catch (DukeException e) { //shouldn\u0027t throw this exception"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            assertEquals(1, 0);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    void execute_validIndex_storageErrorPrinted() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        storageStub.setWillThrowStorageException(true);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        TaskListStub taskListStub \u003d new TaskListStub(5);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        DoneCommand doneCommand \u003d new DoneCommand(3);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            doneCommand.execute(storageStub, bufferStub, taskListStub);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            assertEquals(\"Nice! I\u0027ve marked this task as done:#  O task3##Sorry! I \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "                    + \"was unable to save this update in storage. I\u0027ll try again next time.#\","
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "                    bufferStub.getOutputString());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        } catch (DukeException e) { //shouldn\u0027t throw this exception"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            assertEquals(1, 0);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    void execute_negativeIndex_exceptionThrown() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        storageStub.setWillThrowStorageException(true); //should not interact with storage"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        TaskListStub taskListStub \u003d new TaskListStub(5);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        DoneCommand doneCommand \u003d new DoneCommand(-4);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            doneCommand.execute(storageStub, bufferStub, taskListStub);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            assertEquals(1, 0);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        } catch (DukeException e) { //should always throw this exception"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            assertEquals(\"\", bufferStub.getOutputString());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            assertEquals(\"That is not a valid task number.\", e.getMessage());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    void execute_tooLargeIndex_exceptionThrown() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        storageStub.setWillThrowStorageException(true); //should not interact with storage"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        TaskListStub taskListStub \u003d new TaskListStub(5);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        DoneCommand doneCommand \u003d new DoneCommand(9);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            doneCommand.execute(storageStub, bufferStub, taskListStub);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            assertEquals(1, 0);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        } catch (DukeException e) { //should always throw this exception"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            assertEquals(\"\", bufferStub.getOutputString());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            assertEquals(\"That is not a valid task number.\", e.getMessage());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tanlk99": 84
    }
  },
  {
    "path": "src/test/java/duke/command/ExitCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import duke.stubs.StorageStub;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import duke.stubs.TaskListStub;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import duke.stubs.BufferStub;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "class ExitCommandTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    void execute() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        StorageStub storageStub \u003d new StorageStub();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        BufferStub bufferStub \u003d new BufferStub();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        TaskListStub taskListStub \u003d new TaskListStub(0);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        ExitCommand exitCommand \u003d new ExitCommand();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        exitCommand.execute(storageStub, bufferStub, taskListStub);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        assertEquals(\"\", bufferStub.getOutputString());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tanlk99": 20
    }
  },
  {
    "path": "src/test/java/duke/command/FindCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import duke.stubs.BufferStub;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import duke.stubs.StorageStub;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import duke.stubs.TaskListStub;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "class FindCommandTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    private StorageStub storageStub;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    private BufferStub bufferStub;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    void initTests() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        storageStub \u003d new StorageStub();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        bufferStub \u003d new BufferStub();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    void execute_taskListEmpty() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        TaskListStub taskListStub \u003d new TaskListStub(0);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        FindCommand findCommand \u003d new FindCommand(\"nullity\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        findCommand.execute(storageStub, bufferStub, taskListStub);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        assertEquals(\"There were no tasks in the list that matched your search term.#\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "                + \"\", bufferStub.getOutputString());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    void execute_allMatch() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        TaskListStub taskListStub \u003d new TaskListStub(3);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        FindCommand findCommand \u003d new FindCommand(\"nullity\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        findCommand.execute(storageStub, bufferStub, taskListStub);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        assertEquals(\"Here are the matching tasks in your list:#\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "                + \"1.X task1#2.X task2#3.X task3#\", bufferStub.getOutputString());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    void execute_noneMatch() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        TaskListStub taskListStub \u003d new TaskListStub(3);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        taskListStub.setMatchType(1);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        FindCommand findCommand \u003d new FindCommand(\"nullity\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        findCommand.execute(storageStub, bufferStub, taskListStub);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        assertEquals(\"There were no tasks in the list that matched your search term.#\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "                + \"\", bufferStub.getOutputString());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    void testExecute_oddMatch() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        TaskListStub taskListStub \u003d new TaskListStub(3);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        taskListStub.setMatchType(2);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        FindCommand findCommand \u003d new FindCommand(\"nullity\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        findCommand.execute(storageStub, bufferStub, taskListStub);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        assertEquals(\"Here are the matching tasks in your list:#\""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "                + \"1.X task1#3.X task3#\", bufferStub.getOutputString());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    void testExecute_lastMatch() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        TaskListStub taskListStub \u003d new TaskListStub(3);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        taskListStub.setMatchType(3);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        FindCommand findCommand \u003d new FindCommand(\"nullity\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        findCommand.execute(storageStub, bufferStub, taskListStub);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        assertEquals(\"Here are the matching tasks in your list:#\""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "                + \"3.X task3#\", bufferStub.getOutputString());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tanlk99": 72
    }
  },
  {
    "path": "src/test/java/duke/command/ListCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import duke.stubs.StorageStub;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import duke.stubs.TaskListStub;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import duke.stubs.BufferStub;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "class ListCommandTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    private StorageStub storageStub;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    private BufferStub bufferStub;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    void initTests() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        storageStub \u003d new StorageStub();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        bufferStub \u003d new BufferStub();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    void execute_taskListEmpty() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        TaskListStub taskListStub \u003d new TaskListStub(0);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        ListCommand listCommand \u003d new ListCommand();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        listCommand.execute(storageStub, bufferStub, taskListStub);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        assertEquals(\"You have no tasks right now.#\", bufferStub.getOutputString());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    void execute_taskListSizeOne() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        TaskListStub taskListStub \u003d new TaskListStub(1);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        ListCommand listCommand \u003d new ListCommand();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        listCommand.execute(storageStub, bufferStub, taskListStub);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        assertEquals(\"Here are the tasks in your list:#1.X task1#\","
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "                bufferStub.getOutputString());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    void execute_taskListMedium() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        TaskListStub taskListStub \u003d new TaskListStub(5);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        ListCommand listCommand \u003d new ListCommand();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        listCommand.execute(storageStub, bufferStub, taskListStub);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        assertEquals(\"Here are the tasks in your list:#1.X task1#\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "                + \"2.X task2#3.X task3#4.X task4#5.X task5#\", bufferStub.getOutputString());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tanlk99": 48
    }
  },
  {
    "path": "src/test/java/duke/stubs/BufferStub.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "package duke.stubs;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import duke.util.Buffer;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tanlk99"
        },
        "content": " * Simplified version of Buffer for test purposes."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tanlk99"
        },
        "content": " * Outputs from different method calls are separated by a \u0027#\u0027 symbol."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tanlk99"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "public class BufferStub extends Buffer {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    private String outputString;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    public BufferStub() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        outputString \u003d \"\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    public void formatLine(String output) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        outputString +\u003d output + \"#\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * Returns a string containing all output passed to BufferStub so far."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * @return  String containing all output"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    public String getOutputString() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        return outputString;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tanlk99": 29
    }
  },
  {
    "path": "src/test/java/duke/stubs/StorageStub.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "package duke.stubs;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import duke.util.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import duke.util.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tanlk99"
        },
        "content": " * Simplified version of {@link duke.util.Storage Storage} that does not do any file I/O."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tanlk99"
        },
        "content": " * Can be set whether or not to throw a exception (to simulate file I/O erros)."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tanlk99"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "public class StorageStub extends Storage {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    private boolean willThrowStorageException \u003d false;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    private boolean willThrowArchiveException \u003d false;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    public StorageStub() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        super(\"nullity\", \"nullity\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * Sets if {@link #writeCache} will throw a {@link DukeException}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * @param willThrowStorageException    True if {@link #writeCache} is to throw exception"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    public void setWillThrowStorageException(boolean willThrowStorageException) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        this.willThrowStorageException \u003d willThrowStorageException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * Sets if {@link #writeArchive} will throw a {@link DukeException}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * @param willThrowArchiveException    True if {@link #writeArchive} is to throw exception"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    public void setWillThrowArchiveException(boolean willThrowArchiveException) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        this.willThrowArchiveException \u003d willThrowArchiveException;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    public void writeCache(TaskList taskList) throws DukeException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        if (willThrowStorageException) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            throw new DukeException(\"\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    public void writeArchive(ArrayList\u003cTask\u003e taskList) throws DukeException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        if (willThrowArchiveException) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            throw new DukeException(\"\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tanlk99": 52
    }
  },
  {
    "path": "src/test/java/duke/stubs/TaskListStub.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "package duke.stubs;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import duke.util.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tanlk99"
        },
        "content": " * Simplified version of {@link duke.util.TaskList TaskList}. TaskListStub has fixed matching patterns"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tanlk99"
        },
        "content": " * and task names. Only one task can be marked as done."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tanlk99"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "public class TaskListStub extends TaskList {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    private int taskListSize;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    private int matchType \u003d 0; //type of task indices to match"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    private int markedDonePosition \u003d -1;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * Creates a new TaskListStub with \u003ci\u003etaskListSize\u003c/i\u003e tasks in the task list."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * @param taskListSize  Number of tasks in the task list"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    public TaskListStub(int taskListSize) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        this.taskListSize \u003d taskListSize;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * Sets the match type of {@link #taskDescriptionContains(int, String) taskDescription}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * List of match types used: 0 - match all, 1 - match none, 2 - match odd indices, 3 - match last"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     * @param matchType Type of matching to use"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    public void setMatchType(int matchType) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        this.matchType \u003d matchType;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    public Task getTask(int index) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        assert index \u003c\u003d taskListSize \u0026\u0026 index \u003e 0;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        TaskStub taskToReturn \u003d new TaskStub(\"task\" + index);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        if (index \u003d\u003d markedDonePosition) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            taskToReturn.setDone(true);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        return taskToReturn;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    public ArrayList\u003cTask\u003e getTasks(ArrayList\u003cInteger\u003e indexes) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        for (int index : indexes) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            assert index \u003c\u003d taskListSize \u0026\u0026 index \u003e 0;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            TaskStub taskToReturn \u003d new TaskStub(\"task\" + index);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            if (index \u003d\u003d markedDonePosition) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "                taskToReturn.setDone(true);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            tasks.add(taskToReturn);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        return tasks;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    public void addNewTask(Task task) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        taskListSize +\u003d 1;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    public void deleteTask(int index) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        assert index \u003c\u003d taskListSize \u0026\u0026 index \u003e 0;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        taskListSize -\u003d 1;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    public void deleteTasks(ArrayList\u003cInteger\u003e indexes) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        assert taskListSize \u003e\u003d indexes.size(); //indexes array assumed unique"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        taskListSize -\u003d indexes.size();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    public void markTaskAsDone(int index) { //assume only called once for each test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        assert index \u003c\u003d taskListSize \u0026\u0026 index \u003e 0;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        markedDonePosition \u003d index;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    public boolean taskDescriptionContains(int index, String filter) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        boolean isMatch;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        switch (matchType) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        case 0: //match all"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            isMatch \u003d true;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        case 1: //match none"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            isMatch \u003d false;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        case 2: //match only odd"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            isMatch \u003d (index % 2 \u003d\u003d 1);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        default: //match only index taskListSize"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            isMatch \u003d (index \u003d\u003d taskListSize);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        return isMatch;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    public int getSize() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        return taskListSize;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    ArrayList\u003cTask\u003e getAllTasks() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        for (int index \u003d 1; index \u003c\u003d taskListSize; index++) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            TaskStub taskToReturn \u003d new TaskStub(\"task\" + index);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            if (index \u003d\u003d markedDonePosition) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "                taskToReturn.setDone(true);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            tasks.add(taskToReturn);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        return tasks;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tanlk99": 123
    }
  },
  {
    "path": "src/test/java/duke/stubs/TaskStub.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "package duke.stubs;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tanlk99"
        },
        "content": " * Simplified version of {@link duke.task.Task Task} with a simplified toString output."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tanlk99"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "public class TaskStub extends Task {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    public TaskStub(String description) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    public void setDone(boolean isDone) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        super.isDone \u003d isDone;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        return (super.isDone ? \"O\" : \"X\") + \" \" + super.description;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tanlk99": 21
    }
  },
  {
    "path": "src/test/java/duke/task/DeadlineTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import java.util.GregorianCalendar;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "class DeadlineTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    void toString_stringConstructor() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        Deadline deadlineString \u003d new Deadline(\"do dishes\", \"tomorrow\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        assertEquals(\"[D][X] do dishes (by: tomorrow)\", deadlineString.toString());"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        deadlineString.markAsDone();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        assertEquals(\"[D][O] do dishes (by: tomorrow)\", deadlineString.toString());"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    void toString_calendarConstructor() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        Calendar calendar \u003d new GregorianCalendar(2020, Calendar.FEBRUARY, 22, 11, 30);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        Deadline deadlineCalendar \u003d new Deadline(\"do dishes\", calendar);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        assertEquals(\"[D][X] do dishes (by: 22-02-2020 11:30)\", deadlineCalendar.toString());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        deadlineCalendar.markAsDone();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        assertEquals(\"[D][O] do dishes (by: 22-02-2020 11:30)\", deadlineCalendar.toString());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tanlk99": 25
    }
  },
  {
    "path": "src/test/java/duke/task/EventTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import java.util.GregorianCalendar;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "class EventTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    void toString_stringConstructor() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        Event eventString \u003d new Event(\"do dishes\", \"tomorrow\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        assertEquals(\"[E][X] do dishes (at: tomorrow)\", eventString.toString());"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        eventString.markAsDone();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        assertEquals(\"[E][O] do dishes (at: tomorrow)\", eventString.toString());"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    void toString_calendarConstructor() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        Calendar calendar \u003d new GregorianCalendar(2020, Calendar.FEBRUARY, 22, 11, 30);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        Event eventCalendar \u003d new Event(\"do dishes\", calendar);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        assertEquals(\"[E][X] do dishes (at: 22-02-2020 11:30)\", eventCalendar.toString());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        eventCalendar.markAsDone();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        assertEquals(\"[E][O] do dishes (at: 22-02-2020 11:30)\", eventCalendar.toString());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tanlk99": 25
    }
  },
  {
    "path": "src/test/java/duke/task/ToDoTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "class ToDoTest {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    void toString_default() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        ToDo todo \u003d new ToDo(\"do dishes\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        assertEquals(\"[T][X] do dishes\", todo.toString());"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        todo.markAsDone();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        assertEquals(\"[T][O] do dishes\", todo.toString());"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tanlk99": 14
    }
  },
  {
    "path": "src/test/java/duke/util/BufferTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "package duke.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "class BufferTest {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    private Buffer buffer \u003d new Buffer();"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    void testFormatLine() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        buffer.formatLine(\"a\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        buffer.formatLine(\"b\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        buffer.formatLine(\"c\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        assertEquals(\"a\\nb\\nc\\n\", buffer.getOutput());"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        buffer.formatLine(\"d\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        buffer.formatLine(\"e\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        buffer.formatLine(\"f\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        assertEquals(\"d\\ne\\nf\\n\", buffer.getOutput());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tanlk99": 20
    }
  },
  {
    "path": "src/test/java/duke/util/FileLoaderTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "package duke.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "class FileLoaderTest {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    void testGetDirectoryPath() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        assertEquals(\".\", FileLoader.getDirectoryPath(\"a.txt\"));"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        assertEquals(\"f\", FileLoader.getDirectoryPath(\"f/a.txt\"));"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        assertEquals(\"f/g\", FileLoader.getDirectoryPath(\"f/g/a.txt\"));"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tanlk99": 13
    }
  },
  {
    "path": "src/test/java/duke/util/parser/AddCommandParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "package duke.util.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import duke.command.AddCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "class AddCommandParserTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    private AddCommandParser parser;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    void initTests() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        parser \u003d new AddCommandParser();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    private void parseCommand_successful(String input, String expectedTaskString) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            AddCommand command \u003d parser.parseCommand(input);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            Task task \u003d command.getTaskToAdd();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            assertEquals(expectedTaskString, task.toString());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            assertEquals(1, 0);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    private void parseCommand_exceptionThrown(String input, String expectedExceptionMessage) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            AddCommand command \u003d parser.parseCommand(input);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            assertEquals(1, 0);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            assertEquals(expectedExceptionMessage, e.getMessage());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    void parseCommandTodoCommand_defaultInput_successful() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        parseCommand_successful(\"todo abc\", \"[T][X] abc\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    void parseCommandTodoCommand_spacedInput_successful() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        parseCommand_successful(\"todo      ab c\", \"[T][X] ab c\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    void parseCommandTodoCommand_emptyInput_exceptionThrown() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        parseCommand_exceptionThrown(\"todo\", \"The description of a todo cannot be empty.\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    void parseCommandDeadlineCommand_defaultInput_successful() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        parseCommand_successful(\"deadline abc /by def\", \"[D][X] abc (by: def)\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    void parseCommandDeadlineCommand_spacedInput_successful() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        parseCommand_successful(\"deadline      a bc     /by     de f\", \"[D][X] a bc (by: de f)\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    void parseCommandDeadlineCommand_validDate_successful() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        parseCommand_successful(\"deadline abc /by 13/2/2019\", \"[D][X] abc (by: 13-02-2019 00:00)\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        parseCommand_successful(\"deadline abc /by 13-2-2019\", \"[D][X] abc (by: 13-02-2019 00:00)\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        parseCommand_successful(\"deadline abc /by 2019/2/13\", \"[D][X] abc (by: 13-02-2019 00:00)\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        parseCommand_successful(\"deadline abc /by 2019/2/13 23:59\", \"[D][X] abc (by: 13-02-2019 23:59)\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    void parseCommandDeadlineCommand_invalidDate_successful() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        parseCommand_successful(\"deadline abc /by 33/2/2019\", \"[D][X] abc (by: 33/2/2019)\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        parseCommand_successful(\"deadline abc /by 13-13-2019\", \"[D][X] abc (by: 13-13-2019)\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        parseCommand_successful(\"deadline abc /by 1\", \"[D][X] abc (by: 1)\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        //partial success"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        parseCommand_successful(\"deadline abc /by 2019/2/13 26:59\", \"[D][X] abc (by: 13-02-2019 00:00)\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    void parseCommandDeadlineCommand_emptyInput_exceptionThrown() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        parseCommand_exceptionThrown(\"deadline\","
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "                \"The description of a deadline cannot be empty.\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    void parseCommandDeadlineCommand_emptyDescription_exceptionThrown() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        parseCommand_exceptionThrown(\"deadline   /by 2\","
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "                \"The description of a deadline cannot be empty.\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    void parseCommandDeadlineCommand_noDivider_exceptionThrown() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        parseCommand_exceptionThrown(\"deadline a\","
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "                \"Please specify the deadline time using /by (with spaces preceding and following).\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    void parseCommandDeadlineCommand_emptyTime_exceptionThrown() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        parseCommand_exceptionThrown(\"deadline a /by\","
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "                \"Please specify the deadline time using /by (with spaces preceding and following).\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    void parseCommandEventCommand_defaultInput_successful() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        parseCommand_successful(\"event abc /at def\", \"[E][X] abc (at: def)\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    void parseCommandEventCommand_emptyInput_exceptionThrown() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        parseCommand_exceptionThrown(\"event\","
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "                \"The description of an event cannot be empty.\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    void parseCommandEventCommand_emptyDescription_exceptionThrown() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        parseCommand_exceptionThrown(\"event  /at 2\","
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "                \"The description of an event cannot be empty.\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    void parseCommandEventCommand_emptyTime_exceptionThrown() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        parseCommand_exceptionThrown(\"event a /at\","
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "                \"Please specify the event time using /at (with spaces preceding and following).\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tanlk99": 126
    }
  },
  {
    "path": "src/test/java/duke/util/parser/DeleteCommandParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "package duke.util.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import duke.command.DeleteCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "class DeleteCommandParserTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    private DeleteCommandParser parser;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    void initTests() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        parser \u003d new DeleteCommandParser();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    void parseCommand_validInput_successful() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        String input \u003d \"delete 1\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            DeleteCommand command \u003d parser.parseCommand(input);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            int index \u003d command.getIndex();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            assertEquals(1, index);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            assertEquals(1, 0);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    void parseCommand_spacedInput_successful() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        String input \u003d \"delete    1\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            DeleteCommand command \u003d parser.parseCommand(input);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            int index \u003d command.getIndex();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            assertEquals(1, index);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            assertEquals(1, 0);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    void parseCommand_invalidInput_exceptionThrown() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        String input \u003d \"delete aaaaa\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            DeleteCommand command \u003d parser.parseCommand(input);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            assertEquals(1, 0);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            assertEquals(\"Please use \u0027delete i\u0027 to delete the i-th task in the list.\", e.getMessage());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    void parseCommand_emptyInput_exceptionThrown() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        String input \u003d \"delete\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            Command command \u003d parser.parseCommand(input);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            assertEquals(1, 0);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            assertEquals(\"Please use \u0027delete i\u0027 to delete the i-th task in the list.\", e.getMessage());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "}"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "tanlk99": 68
    }
  },
  {
    "path": "src/test/java/duke/util/parser/DoneCommandParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "package duke.util.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import duke.command.DoneCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "class DoneCommandParserTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    private DoneCommandParser parser;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    void initTests() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        parser \u003d new DoneCommandParser();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    void parseCommand_validInput_successful() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        String input \u003d \"done 1\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            DoneCommand command \u003d parser.parseCommand(input);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            int index \u003d command.getIndex();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            assertEquals(1, index);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            assertEquals(1, 0);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    void parseCommand_spacedInput_successful() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        String input \u003d \"done    1\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            DoneCommand command \u003d parser.parseCommand(input);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            int index \u003d command.getIndex();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            assertEquals(1, index);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            assertEquals(1, 0);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    void parseCommand_invalidInput_exceptionThrown() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        String input \u003d \"done aaaaa\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            DoneCommand command \u003d parser.parseCommand(input);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            assertEquals(1, 0);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            assertEquals(\"Please use \u0027done i\u0027 to mark completion of the i-th task in the list.\", e.getMessage());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    void parseCommand_emptyInput_exceptionThrown() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        String input \u003d \"done\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            DoneCommand command \u003d parser.parseCommand(input);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            assertEquals(1, 0);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            assertEquals(\"Please use \u0027done i\u0027 to mark completion of the i-th task in the list.\", e.getMessage());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tanlk99": 66
    }
  },
  {
    "path": "src/test/java/duke/util/parser/FindCommandParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "package duke.util.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import duke.command.FindCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "class FindCommandParserTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    private FindCommandParser parser;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    void initTests() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        parser \u003d new FindCommandParser();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    void parseCommand_validInput_successful() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        String input \u003d \"find aabbcc\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            FindCommand command \u003d parser.parseCommand(input);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            String filter \u003d command.getFilter();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            assertEquals(\"aabbcc\", filter);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            assertEquals(1, 0);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    void parseCommand_spacedInput_successful() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        String input \u003d \"find    aab bcc\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            FindCommand command \u003d parser.parseCommand(input);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            String filter \u003d command.getFilter();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            assertEquals(\"aab bcc\", filter);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            assertEquals(1, 0);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    void parseCommand_emptyInput_exceptionThrown() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        String input \u003d \"find\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            FindCommand command \u003d parser.parseCommand(input);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            assertEquals(1, 0);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            assertEquals(\"Your search string cannot be empty. To see all tasks, use \\\"list\\\" instead.\", e.getMessage());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tanlk99": 54
    }
  },
  {
    "path": "src/test/java/duke/util/parser/InputParserExitCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "package duke.util.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import duke.command.ExitCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "class InputParserExitCommandTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    private InputParser parser;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    void initTests() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        parser \u003d new InputParser();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    void parseInputExitCommand_commandOnly_successful() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        String input \u003d \"bye\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            Command command \u003d parser.parseInput(input);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            assert command instanceof ExitCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            assertEquals(1, 0);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    void parseInputExitCommand_spacedInput_successful() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        String input \u003d \"    bye       \";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            Command command \u003d parser.parseInput(input);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            assert command instanceof ExitCommand;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            assertEquals(1, 0);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tanlk99": 41
    }
  },
  {
    "path": "src/test/java/duke/util/parser/InputParserInvalidCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "package duke.util.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import duke.util.parser.InputParser;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "class InputParserInvalidCommandTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    private InputParser parser;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    void initTests() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        parser \u003d new InputParser();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    void parseInputInvalidCommand_exceptionThrown() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        String input \u003d \"badcommand\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            Command command \u003d parser.parseInput(input);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            assertEquals(\"I don\u0027t understand that command.\", e.getMessage());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tanlk99": 28
    }
  },
  {
    "path": "src/test/java/duke/util/parser/InputParserListCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "package duke.util.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import duke.command.ListCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "class InputParserListCommandTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    private InputParser parser;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    void initTests() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        parser \u003d new InputParser();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    void parseInputListCommand_commandOnly_successful() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        String input \u003d \"list\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            Command command \u003d parser.parseInput(input);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            assert command instanceof ListCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            assertEquals(1, 0);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    void parseInputListCommand_spacedInput_successful() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        String input \u003d \"    list   \";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            Command command \u003d parser.parseInput(input);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            assert command instanceof ListCommand;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "            assertEquals(1, 0);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tanlk99": 41
    }
  },
  {
    "path": "text-ui-test/runtest.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "#!/usr/bin/env bash"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "# create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "if [ ! -d \"../bin\" ]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "then"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    mkdir ../bin"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "fi"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "# compile the code into the bin folder, terminates if error occurred"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "if ! javac -cp ../src -Xlint:none -d ../bin ../src/main/java/duke/*.java \\"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    ../src/main/java/duke/command/*.java ../src/main/java/duke/exception*.java \\"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    ../src/main/java/duke/task/*.java ../src/main/java/duke/util/*.java"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "then"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    echo \"********** BUILD FAILURE **********\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "fi"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "# count the number of testcases"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "testNo\u003d$( ls testcases/input* 2\u003e/dev/null -Ubad1 -- log* | wc -l )"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "for (( i \u003d 1; i \u003c\u003d testNo; i++ ))"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "do"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    java -classpath ../bin Duke \u003c testcases/input-$i \u003e temp-$i"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    diff temp-$i testcases/output-$i"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    if [ $? -eq 0 ]"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    then"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        echo \"Test result: PASSED\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    else"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "        echo \"Test result: FAILED\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    fi"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tanlk99"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "    rm temp-$i"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tanlk99"
        },
        "content": "done"
      }
    ],
    "authorContributionMap": {
      "tanlk99": 34
    }
  }
]
