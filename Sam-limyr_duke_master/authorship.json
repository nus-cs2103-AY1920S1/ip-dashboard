[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "group \u0027seedu.duke\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    // Change this to your main class."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    mainClassName \u003d \"Duke\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    archiveVersion \u003d \"0.1.3\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "test {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "}"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "run { // use \"gradlew --console plain run\" to remove ugly prompt"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 15,
      "Sam-limyr": 26
    }
  },
  {
    "path": "src/main/java/DeadlineTask.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": " * Represents a deadline to meet that contains both a description and deadline time."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "public class DeadlineTask extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * The time of the DeadlineTask, as inputted by the user."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    protected LocalDateTime time;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    "
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * Creates a DeadlineTask."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * @param description The description of the DeadlineTask, as inputted by the user."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * @param time The time of the DeadlineTask, as inputted by the user."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public DeadlineTask(String description, LocalDateTime time) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * Returns a default formatted String for writing data to the user\u0027s hard drive."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * DeadlineTask String includes tag identifying this as a DeadlineTask, in addition to the Task default"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * formatted String."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * Also includes the value of the deadline\u0027s time, formatted as a String."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * @return Returns a String."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public String formattedString() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        return \"D | \" + super.formattedString() + \" | \" + time.getDayOfMonth() + \"/\" + time.getMonthValue() + \"/\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "                + String.format(\"%04d\", time.getYear()) + \" \" + String.format(\"%02d\", time.getHour())"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "                + String.format(\"%02d\", time.getMinute()) + \"\\n\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    "
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * Returns a default String for printing to the user\u0027s console."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * DeadlineTask String includes tag identifying this as a DeadlineTask, in addition to the Task default String."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * Also includes the value of the deadline\u0027s time, formatted as a String."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * @return Returns a String."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        return \"[D]\" + super.toString() + \" (by: \" + time.getDayOfMonth() + \" of \" + time.getMonth() + \", \""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "                + time.getYear() + \", at \" + String.format(\"%02d\", time.getHour())"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "                + String.format(\"%02d\", time.getMinute()) + \" hrs)\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sam-limyr": 51
    }
  },
  {
    "path": "src/main/java/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": " * A task list that supports several basic features:"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": " * 1) Addition and deletion of three types of task."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": " * 2) Ability to mark tasks as done."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": " * 3) Ability to search for expressions in given tasks."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": " * 4) Ability to print current list of tasks."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * The TaskList object which abstracts out a list of tasks."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    private TaskList taskList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    "
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * The Storage object which loads and writes data to the hard drive."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    "
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * The Ui object which scans input and prints feedback to the user."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    "
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * Initializes the Ui, Storage, and TaskList objects."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * @param filePath The file path to write data to."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public Duke(String filePath) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        storage \u003d new Storage(filePath);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "            taskList \u003d new TaskList(storage.loadSavedList());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "            ui.showError(e);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "            taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    "
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * Scans and parses commands given by the user."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * Modifies the Tasks in the TaskList object based on the commands received by the user."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        ui.printHello();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        boolean isExit \u003d false;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        while (!isExit) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "                String input \u003d ui.getNextLine();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "                String instruction \u003d Parser.parseInstruction(input);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "                if (instruction.equals(\"bye\")) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "                    ui.printBye();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "                    isExit \u003d true;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "                } else if (instruction.equals(\"list\")) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "                    taskList.printList();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "                } else if (instruction.equals(\"done\")) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "                    int index \u003d Parser.parseIndex(input);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "                    taskList.markTask(index);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "                    storage.writeSavedList(taskList.getList());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "                } else if (instruction.equals(\"delete\")) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "                    int index \u003d Parser.parseIndex(input);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "                    taskList.deleteTask(index);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "                    storage.writeSavedList(taskList.getList());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "                } else if (instruction.equals(\"find\")) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "                    String searchPhrase \u003d Parser.parseSearchPhrase(input);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "                    ui.printFoundTasks(taskList.findTasks(searchPhrase));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "                } else if (instruction.equals(\"todo\") || instruction.equals(\"deadline\")"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "                        || instruction.equals(\"event\")) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "                    try {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "                        if (instruction.equals(\"todo\")) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "                            String taskDescription \u003d Parser.parseDescription(input, true);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "                            ui.testEmptyDescription(taskDescription);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "                            taskList.createToDo(taskDescription);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "                            storage.writeSavedList(taskList.getList());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "                        } else {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "                            String taskDescription \u003d Parser.parseDescription(input, false);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "                            ui.testTimeFormat(taskDescription);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "                            String taskContent \u003d Parser.parseContent(taskDescription);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "                            LocalDateTime taskTime \u003d Parser.parseTime(taskDescription);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "                            ui.testEmptyDescription(taskContent);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "                            if (instruction.equals(\"deadline\")) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "                                taskList.createDeadline(taskContent, taskTime);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "                            } else {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "                                taskList.createEvent(taskContent, taskTime);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "                            }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "                            storage.writeSavedList(taskList.getList());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "                    } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "                        throw new EmptyTaskDescriptionException(\"OOPS!!! The description of a task cannot be empty.\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "                    ui.printSize(taskList.getSize());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "                    throw new InvalidInstructionException(\"OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "                }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "            } catch (IOException | DukeException e) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "                ui.showError(e);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "            }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    "
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        new Duke(\"CurrentTaskList.txt\").run();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 5,
      "Sam-limyr": 102
    }
  },
  {
    "path": "src/main/java/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": " * DukeException is the super class of all custom exceptions in Duke."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * Creates a DukeException exception."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * @param message Message to be printed."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public DukeException(String message) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sam-limyr": 13
    }
  },
  {
    "path": "src/main/java/EmptyTaskDescriptionException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": " * Thrown if the user attempts to add a Task with an empty description."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "public class EmptyTaskDescriptionException extends DukeException {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * Creates an EmptyTaskDescriptionException exception."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * @param message Message to be printed."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public EmptyTaskDescriptionException(String message) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sam-limyr": 13
    }
  },
  {
    "path": "src/main/java/EmptyTaskListException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": " * Thrown if the user attempts to view the current task list if the list is empty."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "public class EmptyTaskListException extends DukeException {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * Creates an EmptyTaskListException exception."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * @param message Message to be printed."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public EmptyTaskListException(String message) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sam-limyr": 13
    }
  },
  {
    "path": "src/main/java/EventTask.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": " * Represents an event to attend that contains both a description and event time."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "public class EventTask extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * The time of the EventTask, as inputted by the user."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    protected LocalDateTime time;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    "
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * Creates an EventTask."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * @param description The description of the EventTask, as inputted by the user."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * @param time The time of the EventTask, as inputted by the user."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public EventTask(String description, LocalDateTime time) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * Returns a default formatted String for writing data to the user\u0027s hard drive."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * EventTask String includes tag identifying this as an EventTask, in addition to the Task default"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * formatted String."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * Also includes the value of the deadline\u0027s time, formatted as a String."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * @return Returns a String."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public String formattedString() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        return \"E | \" + super.formattedString() + \" | \" + time.getDayOfMonth() + \"/\" + time.getMonthValue() + \"/\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "                + String.format(\"%04d\", time.getYear()) + \" \" + String.format(\"%02d\", time.getHour())"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "                + String.format(\"%02d\", time.getMinute()) + \"\\n\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    "
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * Returns a default String for printing to the user\u0027s console."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * EventTask String includes tag identifying this as an EventTask, in addition to the Task default String."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * Also includes the value of the event\u0027s time, formatted as a String."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * @return Returns a String."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        return \"[E]\" + super.toString() + \" (at: \" + time.getDayOfMonth() + \" of \" + time.getMonth() + \", \""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "                + time.getYear() + \", at \" + String.format(\"%02d\", time.getHour())"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "                + String.format(\"%02d\", time.getMinute()) + \" hrs)\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sam-limyr": 51
    }
  },
  {
    "path": "src/main/java/IncorrectTaskTimeFormatException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": " * Thrown if the user enters a DeadlineTask or EventTask with an incorrect time format."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "public class IncorrectTaskTimeFormatException extends DukeException {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * Creates an IncorrectTaskTimeFormatException exception."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * @param message Message to be printed."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public IncorrectTaskTimeFormatException(String message) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sam-limyr": 13
    }
  },
  {
    "path": "src/main/java/InvalidInstructionException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": " * Thrown if the user enters an unsupported command name."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "public class InvalidInstructionException extends DukeException {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * Creates an InvalidInstructionException exception."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * @param message Message to be printed."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public InvalidInstructionException(String message) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sam-limyr": 13
    }
  },
  {
    "path": "src/main/java/InvalidIntegerTaskListException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": " * Thrown if the user attempts to refer to a task item integer not in the list."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "public class InvalidIntegerTaskListException extends DukeException {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * Creates an InvalidIntegerTaskListException exception."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * @param message Message to be printed."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public InvalidIntegerTaskListException(String message) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sam-limyr": 13
    }
  },
  {
    "path": "src/main/java/NotAnIntegerTaskListException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": " * Thrown if the user attempts to access a task item using a value that is not a number."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "public class NotAnIntegerTaskListException extends DukeException {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * Creates a NotAnIntegerTaskListException exception."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * @param message Message to be printed."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public NotAnIntegerTaskListException(String message) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sam-limyr": 13
    }
  },
  {
    "path": "src/main/java/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": " * Parses Strings to identify different sub-commands in a given input command."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * Parses the instruction given in an input String."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * @param input The inputted String given by the user."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * @return Returns the instruction in the given String."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    static String parseInstruction(String input) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        return input.split(\" \", 2)[0];"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    "
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * Parses the index given in an input String."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * @param input The inputted String given by the user."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * @return Returns the index integer value in the given String."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    static int parseIndex(String input) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        return Integer.parseInt(input.split(\" \", 2)[1]);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    "
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * Parses the inputted String for the regular expression to search for."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * @param input The inputted String that the user searches for."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * @return Returns the expression searched for by the user, as a String."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    static String parseSearchPhrase(String input) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        return input.split(\" \", 2)[1];"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    "
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * Parses the description given in an input String."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * @param input The inputted String given by the user."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * @param isToDo A boolean with value true if the Task is a ToDoTask, and false otherwise."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * @return Returns the description in the given String."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    static String parseDescription(String input, boolean isToDo) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        return isToDo"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "                ? input.split(\" \", 2)[1]"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "                : input.split(\"deadline|event\", 2)[1];"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    "
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * Parses the content in the description of an input String."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * @param input The inputted String given by the user."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * @return Returns the content in the description of a given String."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    static String parseContent(String input) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        return input.split(\"/by|/at\", 2)[0].strip();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    "
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * Parses the time in the description of an input String."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * Time is parsed as a LocalDateTime, and is assumed to be formatted correctly."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * @param input The inputted String given by the user."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * @return Returns a LocalDateTime object representing the time of the Task."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    static LocalDateTime parseTime(String input) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        String taskTimeBeforeParse \u003d input.split(\"/by|/at\", 2)[1].strip();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        String[] taskTimeParsed \u003d taskTimeBeforeParse.split(\"[ /]\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        return LocalDateTime.of(Integer.parseInt(taskTimeParsed[2]), Integer.parseInt(taskTimeParsed[1]),"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "                Integer.parseInt(taskTimeParsed[0]), Integer.parseInt(taskTimeParsed[3].substring(0, 2)),"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "                Integer.parseInt(taskTimeParsed[3].substring(2, 4)));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    "
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * Parses the data stored in the file saved on the hard drive."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * Data is assumed to be formatted correctly."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * @param input The inputted String given by the user."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * @return Returns a String array containing the values stored in the given formatted String."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    static String[] parseStoredLine(String input) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        return input.split(\" \\\\| \");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    "
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * Parses the instruction in the String array of values."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * @param inputElements The inputted String array containing the stored values of the formatted String."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * @return Returns the instruction value, as a String."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    static String parseStoredInstruction(String[] inputElements) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        return inputElements[0];"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    "
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * Parses a Task to determine if it should be marked as done."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * @param inputElements The inputted String array containing the stored values of the formatted String."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * @param task The given Task to be marked as done."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    static void parseTaskForMarking(String[] inputElements, Task task) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        if (inputElements[1].equals(\"+\")) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "            task.markAsDone();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    "
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * Parses the time of a given Task."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * The Task is assumed to be correctly formatted."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * @param inputElements The inputted String array containing the stored values of the formatted String."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * @return Returns a LocalDateTime object representing the date of the Task."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    static LocalDateTime parseStoredTime(String[] inputElements) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        String[] taskTimeParsed \u003d inputElements[3].split(\"[ /]\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        return LocalDateTime.of(Integer.parseInt(taskTimeParsed[2]),"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "                Integer.parseInt(taskTimeParsed[1]), Integer.parseInt(taskTimeParsed[0]),"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "                Integer.parseInt(taskTimeParsed[3].substring(0, 2)),"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "                Integer.parseInt(taskTimeParsed[3].substring(2, 4)));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sam-limyr": 122
    }
  },
  {
    "path": "src/main/java/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": " * Writes and loads Task data to the hard drive."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * The file path of the stored data."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    private String filePath;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    "
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * Creates a Storage object."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * @param filePath The file path of the stored data."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public Storage(String filePath) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    "
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * Loads saved data from a given file path."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * Saved data must be written in a specific format to be successfully loaded, as specified in this documentation."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * If no file is detected in the given file path, creates a file at that location."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * @return Returns the list of Tasks stored in the specified file path location."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * @throws IOException An Exception thrown to indicate an invalid file path."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    ArrayList\u003cTask\u003e loadSavedList() throws IOException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        ArrayList\u003cTask\u003e returnTaskList \u003d new ArrayList\u003c\u003e(100);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        File file \u003d new File(filePath);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        file.createNewFile();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        List\u003cString\u003e savedList \u003d Files.readAllLines(file.toPath());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        for (String line : savedList) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "            String[] lineElements \u003d Parser.parseStoredLine(line);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "            String lineType \u003d Parser.parseStoredInstruction(lineElements);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "            Task currentTask;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "            switch (lineType) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "            case \"T\":"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "                currentTask \u003d new ToDoTask(lineElements[2]);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "                Parser.parseTaskForMarking(lineElements, currentTask);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "                returnTaskList.add(currentTask);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "            case \"D\":"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "                currentTask \u003d new DeadlineTask(lineElements[2], Parser.parseStoredTime(lineElements));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "                Parser.parseTaskForMarking(lineElements, currentTask);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "                returnTaskList.add(currentTask);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "            case \"E\":"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "                currentTask \u003d new EventTask(lineElements[2], Parser.parseStoredTime(lineElements));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "                Parser.parseTaskForMarking(lineElements, currentTask);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "                returnTaskList.add(currentTask);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "            }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        return returnTaskList;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    "
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * Writes data to a file in the given file path location."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * Data is pre-formatted to be parsable by the method loadSavedList()."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * @param workingTaskList The inputted list of Tasks to be written to the hard drive."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * @throws IOException An Exception thrown to indicate an invalid file path."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    void writeSavedList(ArrayList\u003cTask\u003e workingTaskList) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        FileWriter fileWriter \u003d new FileWriter(this.filePath);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        for (Task task : workingTaskList) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "            fileWriter.write(task.formattedString());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        fileWriter.close();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sam-limyr": 79
    }
  },
  {
    "path": "src/main/java/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": " * The super-class of all Task objects."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * The description of the Task, as inputted by the user."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * The completion status of the Task."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    "
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * Creates a Task object."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * The default completion status of the Task is \u0027not done\u0027."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * @param description The description of the Task, as inputted by the user."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    "
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * Gets the description of this Task object."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * @return Returns the description of this Task object, as a String."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        return this.description;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * Returns a cosmetic symbol to indicate completion status of the Task."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * Symbol is \u0027+\u0027 for completed Tasks and \u0027-\u0027 for incomplete Tasks."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * @return Returns a String symbol."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        return (isDone ? \"+\" : \"-\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    "
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * Marks this Task as done."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * Completion status of this Task is always set to done, even if this method is executed multiple times."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public void markAsDone() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    "
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * Returns a default formatted String for writing data to the user\u0027s hard drive."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * Default String contains completion status and description of this Task."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * @return Returns a String."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public String formattedString() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        return this.getStatusIcon() + \" | \" + this.description;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    "
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * Returns a default String for printing to the user\u0027s console."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * Default String contains completion status and description of this Task."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * @return Returns a String."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        return \"[\" + this.getStatusIcon() + \"] \" + this.description;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sam-limyr": 72
    }
  },
  {
    "path": "src/main/java/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": " * An abstraction of the list of Task objects."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * The list of Tasks."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    private ArrayList\u003cTask\u003e taskList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    "
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * Creates a TaskList object."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * The list is initialized with a capacity of 100."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        this.taskList \u003d new ArrayList\u003c\u003e(100);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    "
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * Creates a TaskList object."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * The list is initialized as the input list."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * @param taskList The inputted list of Tasks."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public TaskList(ArrayList\u003cTask\u003e taskList) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        this.taskList \u003d taskList;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    "
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * Gets the list of Tasks stored in this TaskList object."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * @return Returns this list of Tasks."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    ArrayList\u003cTask\u003e getList() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        return this.taskList;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    "
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * Gets the number of Tasks in this TaskList object."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * @return Returns the number of Tasks in this list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    int getSize() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        return this.taskList.size();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    "
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * Prints the items in this TaskList."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * @throws EmptyTaskListException A DukeException indicating an empty TaskList."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    void printList() throws EmptyTaskListException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        if (taskList.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "            throw new EmptyTaskListException(\"OOPS!!! You have no tasks currently stored in your list!\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        System.out.println(\"Here are the tasks in your list:\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        for (int i \u003d 0; i \u003c taskList.size(); i++) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "            System.out.println((i + 1) + \". \" + taskList.get(i));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    "
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * Marks a Task in this TaskList as done."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * @param index The index of the Task to be marked as done."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * @throws DukeException An Exception thrown to indicate an incorrect index input."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    void markTask(int index) throws DukeException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        if (taskList.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "            throw new EmptyTaskListException(\"OOPS!!! You have no tasks currently stored in your list!\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "            taskList.get(index - 1).markAsDone();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "            System.out.println(\"Nice! I\u0027ve marked this task as done:\\n  \" + taskList.get(index - 1));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "            throw new NotAnIntegerTaskListException(\"OOPS!!! Please enter an integer after \u0027done\u0027!\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "            throw new InvalidIntegerTaskListException(\"OOPS!!! Please enter a valid task number!\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    "
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * Deletes a Task from this TaskList."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * @param index The index of the Task to be deleted."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * @throws DukeException An Exception thrown to indicate an incorrect index input."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    void deleteTask(int index) throws DukeException {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        if (taskList.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "            throw new EmptyTaskListException(\"OOPS!!! You have no tasks currently stored in your list!\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "            Task currentTask \u003d taskList.remove(index - 1);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "            System.out.println(\"Noted. I\u0027ve removed this task:\\n  \" + currentTask);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "            System.out.println(\"Now you have \" + taskList.size() + \" tasks in the list.\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "            throw new NotAnIntegerTaskListException(\"OOPS!!! Please enter an integer after \u0027delete\u0027!\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "            throw new InvalidIntegerTaskListException(\"OOPS!!! Please enter a valid task number!\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "   "
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * Adds a Task to this TaskList."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * @param currentTask The Task object to be added."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    void addTask(Task currentTask) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        taskList.add(currentTask);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        System.out.println(\"Got it. I\u0027ve added this task:\\n  \" + currentTask);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    "
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * Creates a ToDoTask and adds it to this TaskList."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * @param taskContent The description content of the Task to be added."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    void createToDo(String taskContent) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        Task currentTask \u003d new ToDoTask((taskContent));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        this.addTask(currentTask);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    "
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * Creates a DeadlineTask and adds it to this TaskList."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * @param taskContent The description content of the Task to be added."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * @param taskTime The time of the Task to be added, as a LocalDateTime object."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    void createDeadline(String taskContent, LocalDateTime taskTime) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        Task currentTask \u003d new DeadlineTask(taskContent, taskTime);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        this.addTask(currentTask);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    "
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * Creates an EventTask and adds it to this TaskList."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * @param taskContent The description content of the Task to be added."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * @param taskTime The time of the Task to be added, as a LocalDateTime object."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    void createEvent(String taskContent, LocalDateTime taskTime) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        Task currentTask \u003d new EventTask(taskContent, taskTime);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        this.addTask(currentTask);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    "
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * Searches through the list of tasks for Task objects whose descriptions contain the input search phrase."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * @param searchPhrase The inputted search phrase."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * @return Returns a list of tasks containing all the Task objects with descriptions containing the input search"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * phrase."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    ArrayList\u003cTask\u003e findTasks(String searchPhrase) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        ArrayList\u003cTask\u003e listOfFoundTasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        for (Task task : taskList) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "            if (task.getDescription().contains(searchPhrase)) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "                listOfFoundTasks.add(task);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "            }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        return listOfFoundTasks;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sam-limyr": 163
    }
  },
  {
    "path": "src/main/java/ToDoTask.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": " * Represents a Task to do that contains only a description."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "public class ToDoTask extends Task {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * Creates a ToDoTask."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * @param description The description of the Task, as inputted by the user."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public ToDoTask(String description) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    "
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * Returns a default formatted String for writing data to the user\u0027s hard drive."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * ToDoTask String includes tag identifying this as a ToDoTask, in addition to the Task default formatted String."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * @return Returns a String."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public String formattedString() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        return \"T | \" + super.formattedString() + \"\\n\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    "
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * Returns a default String for printing to the user\u0027s console."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * Default String contains completion status and description of this Task."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * @return Returns a String."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sam-limyr": 35
    }
  },
  {
    "path": "src/main/java/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": " * Scans input from the user and prints feedback to the user."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * Scanner object used for reading user input."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    private Scanner scanner;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    "
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * Creates a Ui object."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public Ui() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        scanner \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    "
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * Scans the next input line by the user."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * @return Returns the entire input line as a String."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    String getNextLine() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        return scanner.nextLine();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    "
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * Displays the error message of an Exception."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * @param exception The Exception to display the error message of."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    void showError(Exception exception) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        System.out.println(exception.getMessage());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    "
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * Prints a welcome message for the user."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    void printHello() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        System.out.println(\"Hello! I\u0027m Duke\\nWhat can I do for you?\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    "
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * Prints a goodbye message for the user."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    void printBye() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        System.out.println(\"Bye. Hope to see you again soon!\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    "
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * Prints the current number of Tasks stored by the user."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * @param size The number of Tasks currently stored."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    void printSize(int size) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        System.out.println(\"Now you have \" + size + \" tasks in the list.\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    "
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * Prints the list of Task objects whose descriptions contain the search phrase."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * @param listOfFoundTasks The given list of Task objects."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    void printFoundTasks(ArrayList\u003cTask\u003e listOfFoundTasks) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        System.out.println(\"Here are the matching tasks in your list:\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        for (Task task : listOfFoundTasks) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "            System.out.println(task);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    "
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * Tests for whether the description of a given Task is empty."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * If empty, displays an exception message."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * A description consisting only of whitespace is considered empty."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * @param taskDescription The description of the given Task."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * @throws EmptyTaskDescriptionException A DukeException thrown to indicate an empty Task description."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    void testEmptyDescription(String taskDescription) throws EmptyTaskDescriptionException {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        if (taskDescription.matches(\"\\\\s*\")) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "            throw new EmptyTaskDescriptionException(\"OOPS!!! The description of a task cannot be empty.\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    "
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * Tests for whether the time in a given task is correctly formatted."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * Valid time formats require a \u0027 /by \u0027 or \u0027 /at \u0027 to be present in the String."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * @param taskDescription The description of the given Task."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     * @throws IncorrectTaskTimeFormatException A DukeException thrown to indicate an incorrect format."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    void testTimeFormat(String taskDescription) throws IncorrectTaskTimeFormatException {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        if (!(taskDescription.contains(\" /by \") || taskDescription.contains(\" /at \"))) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "            throw new IncorrectTaskTimeFormatException(\"OOPS!!! No \u0027 /by \u0027 or \u0027 /at \u0027 detected!\""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "                    + \"Please use the correct format!\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sam-limyr": 100
    }
  },
  {
    "path": "src/test/java/DeadlineTaskTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "public class DeadlineTaskTest {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public void toString_markAsDone_success() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        Task testTask \u003d new DeadlineTask(\"This is a test task.\","
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "                LocalDateTime.of(1999, 1, 20, 01, 00));"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        assertEquals(\"[D][-] This is a test task. (by: 20 of JANUARY, 1999, at 0100 hrs)\", testTask.toString());"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        testTask.markAsDone();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        assertEquals(\"[D][+] This is a test task. (by: 20 of JANUARY, 1999, at 0100 hrs)\", testTask.toString());"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    "
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public void formattedString_markAsDone_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        Task testTask \u003d new DeadlineTask(\"This is a test task.\","
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "                LocalDateTime.of(100, 11, 30, 12, 59));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        assertEquals(\"D | - | This is a test task. | 30/11/0100 1259\\n\", testTask.formattedString());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        testTask.markAsDone();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        assertEquals(\"D | + | This is a test task. | 30/11/0100 1259\\n\", testTask.formattedString());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sam-limyr": 23
    }
  },
  {
    "path": "src/test/java/ParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "public class ParserTest {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    public void parseStoredTime_unusualTimeFormat_success() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "        assertEquals(LocalDateTime.of(1999, 1, 20, 01, 00),"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "                Parser.parseStoredTime(new String[]{\"D\", \"-\", \"test case\", \"20/01/1999 0100\"}));"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Sam-limyr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sam-limyr": 11
    }
  }
]
