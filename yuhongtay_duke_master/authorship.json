[
  {
    "path": "src/main/java/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import command.Command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import exception.DukeException;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import filewriter.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import parser.Parser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public Duke(String filePath) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            storage \u003d new Storage(filePath);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            tasks \u003d new TaskList(storage.load());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            ui.showLoadingError();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        ui.showWelcome();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        boolean isExit \u003d false;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        while (!isExit) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                String fullCommand \u003d ui.readCommand();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                ui.showLine(); // show the divider line (\"_______\")"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                Command c \u003d Parser.parse(fullCommand);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                c.execute(tasks, ui, storage);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                isExit \u003d c.isExit();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            } catch (DukeException e) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                ui.showError(e.getMessage());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        ui.showGoodbye();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        new Duke(\"data/tasks.txt\").run();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuhongtay": 42,
      "-": 4
    }
  },
  {
    "path": "src/main/java/command/AddCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import filewriter.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import task.*;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    String specifics;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public AddCommand(FullCommand taskType, String specifics){"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        super.type \u003d taskType;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        this.specifics \u003d specifics;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public boolean isExit(){"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        Task newTask;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        switch(type){"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            case TODO:"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            newTask \u003d new Todo(specifics);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            case DEADLINE:"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            newTask \u003d new Deadline(specifics);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            newTask \u003d new Event(specifics);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        tasks.addTask(newTask);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        ui.readTask(newTask, tasks.task_Num);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        if (tasks.isFirst){"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            tasks.isFirst \u003d !tasks.isFirst;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            storage.writeToFile(System.lineSeparator());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        storage.writeToFile(newTask.toString());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    };"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuhongtay": 41
    }
  },
  {
    "path": "src/main/java/command/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import filewriter.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    FullCommand type;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public boolean isExit(){"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        return type.getName().equals(\"bye\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public abstract void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuhongtay": 16
    }
  },
  {
    "path": "src/main/java/command/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import filewriter.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import task.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    int index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public DeleteCommand(int index){"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public boolean isExit(){"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            Task removed_Task \u003d tasks.remove(index);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            ui.readDelete(removed_Task, tasks.task_Num);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            storage.editFile(tasks);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        } catch (NullPointerException | IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            throw new DukeException(\"Index out of bounds.\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            throw new DukeException(\"Please enter a single integer for index of task to delete.\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuhongtay": 31
    }
  },
  {
    "path": "src/main/java/command/EditCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import filewriter.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import task.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "public class EditCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    int index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public boolean isExit(){"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public EditCommand(int index){"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            if (index \u003d\u003d -1){"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                throw new IndexOutOfBoundsException();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            Task completedTask \u003d tasks.complete(index);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            ui.readDone(completedTask);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            storage.editFile(tasks);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        } catch (NullPointerException | IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            throw new DukeException(\"Index out of bounds.\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            throw new DukeException(\"Please enter a single integer index of task to delete.\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuhongtay": 34
    }
  },
  {
    "path": "src/main/java/command/ExitCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import filewriter.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public boolean isExit(){"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        storage.closeWriter();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    };"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuhongtay": 16
    }
  },
  {
    "path": "src/main/java/command/FullCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "public enum FullCommand {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    LIST(\"list\"), DONE(\"done\"), DELETE(\"delete\"), TODO(\"todo\"), DEADLINE(\"deadline\")"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        , EVENT(\"event\"), BYE(\"bye\");"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    private FullCommand(String name) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public static FullCommand getByName(String keyword) throws DukeException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        for(FullCommand command : values()){"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            if(command.getName().equals(keyword)){"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                return command;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        throw new DukeException(\"no such command\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "yuhongtay": 29
    }
  },
  {
    "path": "src/main/java/command/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import filewriter.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public boolean isExit(){"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        ui.readList(tasks);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    };"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuhongtay": 16
    }
  },
  {
    "path": "src/main/java/datetime/DateTime.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "package datetime;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "public class DateTime{"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    private LocalDateTime start;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    private LocalTime endTime;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    private String display;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    private static DateTimeFormatter getStart \u003d DateTimeFormatter.ofPattern(\"d/M/yyyy HHmm\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    private static DateTimeFormatter getTime \u003d DateTimeFormatter.ofPattern(\"HHmm\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public static DateTime setDeadline(String date_time) throws DukeException{"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            DateTime deadline \u003d new DateTime();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            deadline.start \u003d LocalDateTime.parse(date_time, getStart);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            deadline.display \u003d deadline.start.format(getStart);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            return deadline;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        } catch (DateTimeParseException e){"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            throw new DukeException(\"Incorrect Deadline date/time format.\" + System.lineSeparator() +"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                    \"    Please key in date(d/MM/yyyy) time(HHmm)\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public static DateTime readDeadLine(String date_time){"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        DateTime deadline \u003d new DateTime();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        deadline.start \u003d LocalDateTime.parse(date_time, getStart);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        deadline.display \u003d deadline.start.format(getStart);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        return deadline;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public static DateTime setEventTime (String date_time) throws DukeException{"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            DateTime event \u003d new DateTime();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            int divider \u003d date_time.indexOf(\"-\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            if (divider \u003d\u003d -1 || (divider \u003d\u003d date_time.length() - 1)) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                throw new DukeException(\"Need to have end time.\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            String end \u003d date_time.substring(divider + 1, date_time.length());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            event.start \u003d LocalDateTime.parse(date_time.substring(0, divider), getStart);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            event.endTime \u003d LocalTime.parse(end, DateTimeFormatter.ofPattern(\"HHmm\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            event.display \u003d event.start.format(getStart) + \"-\" + event.endTime.format(getTime);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            return event;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        } catch (DateTimeParseException e){"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            throw new DukeException(\"Incorrect Event date/time format.\" + System.lineSeparator() +"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                    \"    Please key in date(d/MM/yyyy) start_time(HHmm)-end_time(HHmm)\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public static DateTime readEventTime(String date_time) throws DukeException{"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        DateTime event \u003d new DateTime();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        int divider \u003d date_time.indexOf(\"-\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        if (divider \u003d\u003d -1 || (divider \u003d\u003d date_time.length() -1)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            || date_time.substring(divider + 1).replace(\" \", \"\").equals(\"\")){"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            throw new DukeException(\"Need to have end time.\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        String end \u003d date_time.substring(divider + 1, date_time.length());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        event.start \u003d LocalDateTime.parse(date_time.substring(0, divider), getStart);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        event.endTime \u003d LocalTime.parse(end, DateTimeFormatter.ofPattern(\"HHmm\"));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        event.display \u003d event.start.format(getStart) + \"-\" + event.endTime.format(getTime);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        return event;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    private static String getDayOfMonth(String dd) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        if (dd.substring(0,1).equals(\"0\")){"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            dd \u003d dd.substring(1,dd.length());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        int day \u003d Integer.parseInt(dd);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        if (day \u003e\u003d 11 \u0026\u0026 day \u003c\u003d 13) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            return day + \"th\";"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        switch (day % 10) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            case 1:  return day + \"st\";"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            case 2:  return day + \"nd\";"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            case 3:  return day + \"rd\";"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            default: return day + \"th\";"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public String toString(){"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        return display;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuhongtay": 87
    }
  },
  {
    "path": "src/main/java/exception/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "package exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public DukeException(String message) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public DukeException(String message, Throwable cause){"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuhongtay": 11
    }
  },
  {
    "path": "src/main/java/filewriter/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "package filewriter;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import datetime.DateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import exception.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import task.*;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    String filePath;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    FileWriter fw;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    ArrayList\u003cTask\u003e taskList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    boolean willAppend \u003d true;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public Storage(String filepath) throws DukeException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        this.filePath \u003d filepath;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        this.createWriter();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    private void createWriter() throws DukeException{"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            fw \u003d new FileWriter(filePath, willAppend);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            throw new DukeException(\"invalid filepath\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public void closeWriter() throws DukeException{"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            fw.close();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            throw new DukeException(\"invalid filepath\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public void writeToFile(String textToAdd) throws DukeException{"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            checkAppend(true);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            fw.write(textToAdd + \"\\n\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            //System.out.println(textToAdd);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            throw new DukeException(\"failed to write to file\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public void editFile(TaskList schedule) throws DukeException{"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            checkAppend(false);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            for (Task task: schedule.getList()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                fw.write(task.toString() + \"\\n\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            throw new DukeException(\"failed to write to file\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    private void checkAppend(boolean toAppend) throws DukeException{"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        closeWriter();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        willAppend \u003d toAppend;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        createWriter();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    private Task read(String line) throws DukeException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        Task output;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        switch (line.charAt(line.indexOf(\"[\") + 1)) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            case \u0027T\u0027:"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                output \u003d new Todo(line.substring(7, line.length()));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                return output;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            case \u0027D\u0027:"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                    int divider \u003d line.indexOf(\"(by:\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                    String input \u003d line.substring(7, divider);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                    input +\u003d \"/by \" + DateTime.readDeadLine(line.substring(divider + 5, line.length() - 1)).toString();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                    output \u003d new Deadline(input);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                    return output;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                } catch (Exception e) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                    throw new DukeException(\"Deadline task not stored properly.\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                    int divider \u003d line.indexOf(\"(at:\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                    String input \u003d line.substring(7, divider);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                    input +\u003d \"/at \" + DateTime.readEventTime(line.substring(divider + 5, line.length() - 1)).toString();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                    output \u003d new Event(input);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                    return output;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                } catch (Exception e) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                    throw new DukeException(\"Event task not stored properly.\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public Storage load() throws DukeException {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            taskList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            File f \u003d new File(filePath); // create a File for the given file path"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            Scanner s \u003d new Scanner(f); // create a Scanner using the File as the source"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            while (s.hasNextLine()) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                String line \u003d s.nextLine();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                if (! line.equals(\"\")) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                    Task newTask \u003d read(line.replace(\"\\n\", \"\"));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                    if (line.substring(4,5).equals(\"\\u2713\")){"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                        newTask.markAsDone();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                    taskList.add(newTask);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            return this;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        } catch (FileNotFoundException e){"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            throw new DukeException(\"File not found!\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        } catch (Exception e){"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            throw new DukeException(\"Unforseen load errors: \" + e.getMessage());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public ArrayList\u003cTask\u003e getSchedule(){"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        return taskList;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuhongtay": 125
    }
  },
  {
    "path": "src/main/java/parser/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "package parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import command.*;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import exception.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public static Command parse(String instruction) throws DukeException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        String[] word_Arr \u003d instruction.split(\" \", 2);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        FullCommand command \u003d FullCommand.getByName(word_Arr[0]);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            switch (command) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                case LIST:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                    return new ListCommand();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                case BYE:"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                    return new ExitCommand();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                case DONE:"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                    return new EditCommand(Integer.parseInt(word_Arr[1]) - 1);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                case DELETE:"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                    return new DeleteCommand(Integer.parseInt(word_Arr[1]) - 1);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                default:"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                    if (word_Arr[1].equals(\"\")){"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                        throw new DukeException(\"\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                    return new AddCommand(command, word_Arr[1]);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        } catch (IndexOutOfBoundsException | DukeException e) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            throw new DukeException(\"Give instructions in the format: (instruction type) (details)\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuhongtay": 31
    }
  },
  {
    "path": "src/main/java/task/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "package task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import datetime.DateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import exception.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "public class Deadline extends Task{"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    DateTime date_Time;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public Deadline(String description) throws DukeException{"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        int divider \u003d description.indexOf(\"/by\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        if (divider \u003d\u003d -1 || (divider \u003d\u003d description.length() - 3)"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                ||description.substring(divider + 4).replace(\" \", \"\").equals(\"\")){"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            throw new DukeException(\"Incorrect Deadline format.\" + System.lineSeparator()"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                    + \"    Please key in Deadline (taskname) /by date(d/MM/yyyy) time(HHmm)\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        date_Time \u003d DateTime.setDeadline(description.substring(divider + 4, description.length()));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        super.description \u003d super.description.substring(0, divider);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public Deadline(String description, DateTime date_Time){"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        System.out.println(date_Time);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        this.date_Time \u003d date_Time;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public String toString(){"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        String output \u003d \"[D][\" + super.getStatusIcon() + \"]\" + \" \" + super.description"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                + \"(by: \" + date_Time.toString() + \")\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuhongtay": 31
    }
  },
  {
    "path": "src/main/java/task/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "package task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import datetime.DateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import exception.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "public class Event extends Task{"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    DateTime date_Time;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public Event(String description) throws DukeException{"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        int divider \u003d description.indexOf(\"/at\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        if (divider \u003d\u003d -1 || (divider \u003d\u003d description.length() - 3)"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                ||description.substring(divider + 4).replace(\" \", \"\").equals(\"\")){"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            throw new DukeException(\"Incorrect Event format\" + System.lineSeparator()"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                    + \"    Please key in Event (taskname) /by date(d/MM/yyyy) start_time(HHmm)-end_time(HHmm)\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        date_Time \u003d DateTime.setEventTime(description.substring(divider + 4, description.length()));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        super.description \u003d super.description.substring(0, divider);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public String toString(){"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        String output \u003d \"[E][\" + super.getStatusIcon() + \"]\" + \" \" + super.description + \"(at: \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                + date_Time.toString() + \")\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuhongtay": 26
    }
  },
  {
    "path": "src/main/java/task/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "package task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "public abstract class Task {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    protected boolean deleted;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        this.deleted \u003d false;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        return (isDone ? \"\\u2713\" : \"\\u2718\"); //return tick or X symbols"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public void markAsDone(){"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public abstract String toString();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuhongtay": 23
    }
  },
  {
    "path": "src/main/java/task/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "package task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import filewriter.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    ArrayList \u003cTask\u003e schedule \u003d new ArrayList\u003c\u003e ();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public int task_Num;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public boolean isFirst ;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public TaskList(Storage storage){"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            this.schedule \u003d storage.getSchedule();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            task_Num \u003d schedule.size();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            if (task_Num \u003d\u003d 0){"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                isFirst \u003d true;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                isFirst \u003d false;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        } catch (Exception e){"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public TaskList(){"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        this.schedule \u003d schedule;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        task_Num \u003d schedule.size();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        if (task_Num \u003d\u003d 0){"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            isFirst \u003d true;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            isFirst \u003d false;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        System.out.println(task_Num);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public Task getTask(int index){"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        return schedule.get(index);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public Task complete(int index)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            throws NullPointerException, IndexOutOfBoundsException, NumberFormatException, DukeException{"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        Task completedTask \u003d schedule.get(index);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        completedTask.markAsDone();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        return completedTask;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public void addTask(Task task) throws DukeException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        schedule.add(task);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        task_Num++;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public Task remove(int index)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            throws NullPointerException, IndexOutOfBoundsException, NumberFormatException, DukeException{"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        Task removed_Task \u003d schedule.get(index);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        schedule.remove(index);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        task_Num --;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        return removed_Task;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public ArrayList\u003cTask\u003e getList(){"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        return schedule;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public String toString(){"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        String output \u003d \"\";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        if (task_Num !\u003d 0){"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            for (int index \u003d 0; index \u003c task_Num; index ++){"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                Task task \u003d schedule.get(index);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                output +\u003d (\"     \" + (index + 1) + \".\" + task.toString() + \"\\n\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            return output.substring(0, output.length() - 1);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            return output;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuhongtay": 81
    }
  },
  {
    "path": "src/main/java/task/TaskStub.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "package task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "public class TaskStub extends Task{"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public TaskStub(String description) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        super.isDone \u003d true;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        return (isDone ? \"\\u2713\" : \"\\u2718\"); //return tick or X symbols"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public void markAsDone(){"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public String toString(){ return description; }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuhongtay": 16
    }
  },
  {
    "path": "src/main/java/task/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "package task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "public class Todo extends Task{"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public Todo(String description) throws DukeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public String toString(){"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        String output \u003d \"[T][\" + super.getStatusIcon() + \"]\" + \" \" + super.description;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuhongtay": 16
    }
  },
  {
    "path": "src/main/java/ui/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "package ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import task.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    Scanner sc \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public  void showWelcome() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        String logo \u003d \"     ____        _        \\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                + \"    |  _ \\\\ _   _| | _____ \\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                + \"    | | | | | | | |/ / _ \\\\\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                + \"    | |_| | |_| |   \u003c  __/\\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                + \"    |____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        showLine();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        System.out.println(\"    Hello! I\u0027m \\n\" + logo + \"\\n    What can I do for you?\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        showLine();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public void showGoodbye(){"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        System.out.println(\"    Bye. Hope to see you again soon!\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        showLine();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public void showLine(){"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        String output \u003d \"    \";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        for (int n \u003d 0; n \u003c 80; n++) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            output +\u003d \"_\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        System.out.println(output);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public String readCommand() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        return sc.nextLine();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public void readTask(Task new_task, int task_Num){"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        System.out.println(\"     Got it. I\u0027ve added this task:\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        System.out.println(\"       \" + new_task.toString());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        System.out.println(\"     Now you have \" + task_Num + \" tasks in the list.\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        showLine();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public void readDelete(Task removed_Task, int task_Num){"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        System.out.println(\"     Noted. I\u0027ve removed this task:\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        System.out.println(\"       \" + removed_Task.toString());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        System.out.println(\"     Now you have \" + task_Num + \" tasks in the list.\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        showLine();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public void readDone(Task completed_Task){"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        System.out.println(\"     Nice! I\u0027ve marked this task as done:\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        System.out.println(\"       \" + completed_Task.toString());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        showLine();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public void readList(TaskList tasks){"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        System.out.println(\"     Here are the task(s) in your list: \");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        System.out.println(tasks);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        showLine();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public void showError(String error_msg) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        System.out.println(\"     ☹ OOPS!!! \" + error_msg);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        showLine();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public void showLoadingError(){"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        System.out.println(\"     ☹ OOPS!!! Loading Error\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        showLine();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     /*   try {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            Task_List schedule \u003d new Task_List(new Storage(\"data/duke.txt\").load());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            Parser parser \u003d new Parser(schedule);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            Scanner sc \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            System.out.println(new Border());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            System.out.println(\"    Hello! I\u0027m \\n\" + logo + \"\\n    What can I do for you?\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            System.out.println(new Border() + \"\\n\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            String input \u003d sc.nextLine();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            while (!input.equals(\"bye\")) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                parser.parse(input);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                input \u003d sc.nextLine();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            parser.parse(input);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            System.out.println((new Border()) + \"\\n     Bye. Hope to see you again soon! \\n\" + (new Border()));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuhongtay": 95
    }
  },
  {
    "path": "src/test/java/DukeTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "public class DukeTest {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public void dummyTest() {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        assertEquals(2, 2);"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "yuhongtay": 10
    }
  },
  {
    "path": "src/test/java/Ui/UiTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "package Ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import task.TaskStub;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "public class UiTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public void readTaskTest(){"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        Task test \u003d new TaskStub(\"Task Message\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        ByteArrayOutputStream outContent \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        System.setOut(new PrintStream(outContent));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        new Ui().readTask(test, 1);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        String expectedMessage \u003d \"     Got it. I\u0027ve added this task:\" + System.lineSeparator()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                               + \"       Task Message\" + System.lineSeparator()"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                               + \"     Now you have 1 tasks in the list.\" + System.lineSeparator()"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                               + \"    ________________________________________________________________________________\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                               + System.lineSeparator();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        assertEquals(expectedMessage, outContent.toString());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public void readDeleteTest(){"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        Task test \u003d new TaskStub(\"Task Message\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        ByteArrayOutputStream outContent \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        System.setOut(new PrintStream(outContent));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        new Ui().readDelete(test, 0);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        String expectedMessage \u003d \"     Noted. I\u0027ve removed this task:\" + System.lineSeparator()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                + \"       Task Message\" + System.lineSeparator()"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                + \"     Now you have 0 tasks in the list.\" + System.lineSeparator()"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                + \"    ________________________________________________________________________________\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                + System.lineSeparator();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        assertEquals(expectedMessage, outContent.toString());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public void readDone(){"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        Task test \u003d new TaskStub(\"Completed Task Message\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        ByteArrayOutputStream outContent \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        System.setOut(new PrintStream(outContent));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        new Ui().readDone(test);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        String expectedMessage \u003d \"     Nice! I\u0027ve marked this task as done:\" + System.lineSeparator()"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                + \"       Completed Task Message\" + System.lineSeparator()"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                + \"    ________________________________________________________________________________\""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                + System.lineSeparator();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        assertEquals(expectedMessage, outContent.toString());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "}"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "yuhongtay": 53
    }
  },
  {
    "path": "src/test/java/datetime/DateTimeTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "package datetime;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "public class DateTimeTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public void setDeadLine_incorrectFormat_exceptionThrown(){"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            DateTime.setDeadline(\"30.11.2019 05:00\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        } catch (DukeException e){"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            assertEquals(\"Incorrect Deadline date/time format.\" + System.lineSeparator() +"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                    \"    Please key in date(d/MM/yyyy) time(HHmm)\", e.getMessage());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public void readDeadLineTest(){"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        DateTime deadline \u003d DateTime.readDeadLine(\"30/11/2019 0500\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        assertEquals(\"30/11/2019 0500\", deadline.toString());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public void setEventTime_noEndTime_exceptionThrown(){"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            DateTime.setEventTime(\"30/11/2019 0500-\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        } catch (DukeException e){"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            assertEquals(\"Need to have end time.\", e.getMessage());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public void setEventTime_incorrectFormat_exceptionThrown(){"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            DateTime.setEventTime(\"30.11.2019 05:00-05:30\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        } catch (DukeException e){"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            assertEquals(\"Incorrect Event date/time format.\" + System.lineSeparator() +"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                    \"    Please key in date(d/MM/yyyy) start_time(HHmm)-end_time(HHmm)\", e.getMessage());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public void readEventTimeTest(){"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            DateTime eventTime \u003d DateTime.readEventTime(\"30/11/2019 0500-0600\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            assertEquals(\"30/11/2019 0500-0600\", eventTime.toString());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        } catch (DukeException e){"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public void readEventTime_noEndTime_exceptionThrown(){"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            DateTime eventTime \u003d DateTime.readEventTime(\"30/11/2019 0500-\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        } catch (DukeException e){"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            assertEquals(\"Need to have end time.\", e.getMessage());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "}"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "yuhongtay": 62
    }
  },
  {
    "path": "src/test/java/task/DeadlineTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "package task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import exception.DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "public class DeadlineTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    void constructor_noDate_exceptionThrown(){"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            Deadline deadline \u003d new Deadline(\"Generate Exception /by    \");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        }catch (DukeException e){"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            String expectedOutput \u003d \"Incorrect Deadline format.\" + System.lineSeparator()"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                    + \"    Please key in Deadline (taskname) /by date(d/MM/yyyy) time(HHmm)\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            assertEquals(expectedOutput, e.getMessage());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuhongtay": 24
    }
  },
  {
    "path": "src/test/java/task/EventTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "package task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "public class EventTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    void constructor_noDate_exceptionThrown(){"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            Event event \u003d new Event(\"Generate Exception\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        }catch (DukeException e){"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            String expectedOutput \u003d \"Incorrect Event format\" + System.lineSeparator()"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                    + \"    Please key in Event (taskname) /by date(d/MM/yyyy) start_time(HHmm)-end_time(HHmm)\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            assertEquals(expectedOutput, e.getMessage());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuhongtay": 20
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "todo borrow book"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "list"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "deadline return book /by Sunday"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "event project meeting /at Mon 2-4pm"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "yuhongtay": 5
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "if not exist ..\\bin mkdir ..\\bin"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "REM delete output from previous run"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "del ACTUAL.TXT"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "REM compile the code into the bin folder"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "javac  -cp ..\\src -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    exit /b 1"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ")"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "java -classpath ..\\bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT"
      }
    ],
    "authorContributionMap": {
      "yuhongtay": 21
    }
  }
]
