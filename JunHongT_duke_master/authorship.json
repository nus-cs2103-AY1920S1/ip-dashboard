[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "test {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    archiveVersion \u003d \"0.1.3\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "group \u0027seedu.duke\u0027"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    // Change this to your main class."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    mainClassName \u003d \"Duke\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JunHongT": 21,
      "-": 15
    }
  },
  {
    "path": "savedList.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "[T][✘] b     0"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "[T][✘] a  0"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "[T][✘] book  0"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "[T][✘] a  0"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "[T][✘] back  0"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "[T][✘] dead  0"
      }
    ],
    "authorContributionMap": {
      "JunHongT": 6
    }
  },
  {
    "path": "src/main/java/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    protected Date by;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "     * Constructor for Deadline."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "     *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "     * @param description title of Deadline"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "     * @param by datetime for deadline"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    public Deadline(String description, Date by) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        this.by \u003d by;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        SimpleDateFormat formatter \u003d new SimpleDateFormat(\"dd/MM/yyyy HH:mm\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        return \"[D]\" + super.toString() + \" (by: \" + formatter.format(by) + \")\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JunHongT": 24
    }
  },
  {
    "path": "src/main/java/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "import java.io.FileReader;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "import java.io.PrintWriter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    private static String border \u003d \"-------------------------------------\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    private static ArrayList\u003cTask\u003e items;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    private Ui user;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "     * Constructor for Duke class."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    public Duke() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        user \u003d new Ui();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        items \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "     * Main method for Duke."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "      * @param args user input"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        Duke execute \u003d new Duke();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "            execute.run();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "            System.out.println(\"Stored file not found!!!\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "     * Runnable method containing main process."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "     * @throws FileNotFoundException retrieving file that stored existing tasks"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    public void run() throws FileNotFoundException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        //Start of program"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        user.greeting();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        //Loading stored task into current list"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        Scanner pastScan \u003d new Scanner(new FileReader(\"/Users/teojunhong/JavaProject/2103T/duke/savedList.txt\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        loadExisting(pastScan);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        //Scanner obj for input"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        Scanner sc \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        //Loop till user input \u0027bye\u0027"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        String input \u003d sc.nextLine();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        while (!input.toLowerCase().equals(\"bye\")) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "            //adding items to arraylist for listing purpose"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "            if (input.toLowerCase().contains(\"done\")) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                    //mark task as done, change cross to tick"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                    int itemNum \u003d Integer.parseInt(input.substring(input.length() - 1));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                    Task curr \u003d items.get(itemNum - 1);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                    curr.markAsDone();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                    //forming the message"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                    user.doneMessage(curr);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                    sb.setLength(0);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                    input \u003d sc.nextLine();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                    user.indexError();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                    input \u003d sc.nextLine();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                    user.emptyError();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                    input \u003d sc.nextLine();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "            } else if (input.toLowerCase().contains(\"delete\")) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                    //delete task"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                    int itemNum \u003d Integer.parseInt(input.substring(input.length() - 1));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                    deleteTask(itemNum);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                    input \u003d sc.nextLine();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                    user.indexError();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                    input \u003d sc.nextLine();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                    user.emptyError();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                    input \u003d sc.nextLine();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "            } else if (input.toLowerCase().equals(\"list\")) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                //listing all task in current list"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                user.listTask(items);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                input \u003d sc.nextLine();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "            } else if (input.toLowerCase().contains(\"find\")) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                String searchTerm \u003d input.substring(5);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                user.findTask(items, searchTerm);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                input \u003d sc.nextLine();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                    //generate task and store into list"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                    generateTask(input);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                    input \u003d sc.nextLine();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "            }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        //store current tasks into local file for future reference"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        storeCurrent(items);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        //Concluding Message"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        user.conclusion();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "     * Generation of task - Todo, Event, Deadline and store in ArrayList."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "     * @param input String input from user input"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "     * @return output message for different task"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    public String generateTask(String input) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        String message \u003d \"\";"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        if (input.toLowerCase().contains(\"todo\")) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "            //adding an item"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                Todo newTask \u003d new Todo(input.substring(5));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                items.add(newTask);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                message \u003d user.generateMessage(newTask, items.size());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                System.out.println(message);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "            } catch (StringIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                sb.append(border + \"\\n\");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                sb.append(\"Todo must have valid description\\n\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                sb.append(border + \"\\n\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                message \u003d sb.toString();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                System.out.println(message);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                sb.setLength(0);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "            }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        } else if (input.toLowerCase().contains(\"deadline\")) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                int date \u003d input.indexOf(\"/by\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                //split input into [deadline] [description] [date]"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                Date deadLineDate \u003d convertStringToDeadline(input.substring(date + 3));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                Deadline newTask \u003d new Deadline(input.substring(9, date), deadLineDate);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                items.add(newTask);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                message \u003d user.generateMessage(newTask, items.size());"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                System.out.println(message);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "            } catch (StringIndexOutOfBoundsException | ParseException e) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                sb.append(border + \"\\n\");"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                sb.append(\"Invalid Deadline\u0027s arguments \\n\");"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                sb.append(border + \"\\n\");"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                message \u003d sb.toString();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                System.out.println(message);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                sb.setLength(0);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "            }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        } else if (input.toLowerCase().contains(\"event\")) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                int time \u003d input.indexOf(\"/at\");"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                int timeRange \u003d input.indexOf(\"-\");"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                //split input into [event] [description] [timing]"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                Date eventDate \u003d convertStringToEventStart(input.substring(time + 3, timeRange));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                Date eventEnd \u003d convertStringToEventEnd(input.substring(timeRange + 1));"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                Event newTask \u003d new Event(input.substring(6, time), eventDate, eventEnd);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                items.add(newTask);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                message \u003d user.generateMessage(newTask, items.size());"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                System.out.println(message);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "            } catch (StringIndexOutOfBoundsException | ParseException e) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                sb.append(border + \"\\n\");"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                sb.append(\"Invalid Event\u0027s arguments \\n\");"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                sb.append(border + \"\\n\");"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                message \u003d sb.toString();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                System.out.println(message);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                sb.setLength(0);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "            }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "            sb.append(border + \"\\n\");"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "            sb.append(\"Unable to understand. Invalid Input. \\n\");"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "            sb.append(border + \"\\n\");"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "            message \u003d sb.toString();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "            System.out.println(message);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "            sb.setLength(0);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        return message;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "     * Load past tasks to current ArrayList."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "     * @param stored Scanner obj scanning local text file containing past tasks"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    private static void loadExisting(Scanner stored) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        while (stored.hasNextLine()) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "            String input \u003d stored.nextLine();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "            if (input.toLowerCase().contains(\"[t]\")) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                //adding an item"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                    Todo newTask \u003d new Todo(input.substring(7, input.length() - 1));"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                    if (Integer.parseInt(input.substring(input.length() - 1)) \u003d\u003d 1) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                        newTask.markAsDone();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                    items.add(newTask);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                } catch (StringIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                    sb.append(border + \"\\n\");"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                    sb.append(\"Todo must have valid description\\n\");"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                    sb.append(border + \"\\n\");"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                    System.out.println(sb.toString());"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                    sb.setLength(0);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "            } else if (input.toLowerCase().contains(\"[d]\")) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                    int date \u003d input.indexOf(\"(by\");"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                    Date deadLineDate \u003d convertStringToDeadline(input.substring(date + 4));"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                    Deadline newTask \u003d new Deadline(input.substring(7, date), deadLineDate);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                    if (Integer.parseInt(input.substring(input.length() - 1)) \u003d\u003d 1) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                        newTask.markAsDone();"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                    items.add(newTask);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                } catch (StringIndexOutOfBoundsException | ParseException e) {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                    sb.append(border + \"\\n\");"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                    sb.append(\"Invalid Deadline\u0027s arguments \\n\");"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                    sb.append(border + \"\\n\");"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                    System.out.println(sb.toString());"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                    sb.setLength(0);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "            } else if (input.toLowerCase().contains(\"[e]\")) {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                    int time \u003d input.indexOf(\"(at\");"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                    int timeRange \u003d input.indexOf(\"-\");"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                    Date eventDate \u003d convertStringToEventStart(input.substring(time + 4, timeRange));"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                    Date eventEnd \u003d convertStringToEventEnd(input.substring(timeRange + 1));"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                    //split input into [event] [description] [timing]"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                    Event newTask \u003d new Event(input.substring(7, time), eventDate, eventEnd);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                    if (Integer.parseInt(input.substring(input.length() - 1)) \u003d\u003d 1) {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                        newTask.markAsDone();"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                    items.add(newTask);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                } catch (StringIndexOutOfBoundsException | ParseException e) {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                    sb.append(border + \"\\n\");"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                    sb.append(\"Invalid Event\u0027s arguments \\n\");"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                    sb.append(border + \"\\n\");"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                    System.out.println(sb.toString());"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                    sb.setLength(0);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "            }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "     * Store current tasks into text file."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "     * @param inputs Arraylist containing current tasks"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    private static void storeCurrent(ArrayList\u003cTask\u003e inputs) {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "            File file \u003d new File(\"/Users/teojunhong/JavaProject/2103T/duke/savedList.txt\");"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "            FileWriter fw \u003d new FileWriter(file);"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "            PrintWriter pw \u003d new PrintWriter(fw);"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "            for (Task input : inputs) {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                int status \u003d 0;"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                if (input.isDone) {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                    status \u003d 1;"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                pw.println(input + \" \" + status);"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "            }"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "            fw.flush();"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "            fw.close();"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "     * Deleting of task from ArrayList."
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "     * @param num index of task in list"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "     * @return output message notifying user of deletion"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "     * @throws IndexOutOfBoundsException index of task not found in list"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    public String deleteTask(int num) throws IndexOutOfBoundsException {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        Task curr \u003d items.get(num - 1);"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        items.remove(num - 1);"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        String delete \u003d user.deleteMessage(curr, items.size());"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        return delete;"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "     * Converting String to datetime for storage."
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "     * @param input String from user input containing datetime for deadline"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "     * @return Date containing dd/MM/yyyy HH:mm"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "     * @throws ParseException when input does not matched date format"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    private static Date convertStringToDeadline(String input) throws ParseException {"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        Date result \u003d new SimpleDateFormat(\"dd/MM/yyyy HH:mm\").parse(input);"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "     * Converting String to datetime for storage."
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "     * @param input String from user input from date to start time for event"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "     * @return Date containing dd/MM/yyy HH:mm"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "     * @throws ParseException input does not matched date format"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    private static Date convertStringToEventStart(String input) throws ParseException {"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        Date result \u003d new SimpleDateFormat(\"dd/MM/yyyy HH:mm\").parse(input);"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "     * Converting String to datetime for storage."
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "     * @param input String from user input containing end time for event"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "     * @return Date containing HH:mm"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "     * @throws ParseException input does not matched date format"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    private static Date convertStringToEventEnd(String input) throws ParseException {"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        Date result \u003d new SimpleDateFormat(\"HH:mm\").parse(input);"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "JunHongT": 317,
      "-": 6
    }
  },
  {
    "path": "src/main/java/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    protected Date start;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    protected Date end;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "     * Constructor for event class."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "     *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "     * @param description content of event"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "     * @param start date and start time of event"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "     * @param end end time of event"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    public Event(String description, Date start, Date end) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        this.start \u003d start;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        this.end \u003d end;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        SimpleDateFormat startFormat \u003d new SimpleDateFormat(\"dd/MM/yyyy HH:mm\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        SimpleDateFormat endFormat \u003d new SimpleDateFormat(\" - HH:mm\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        return \"[E]\" + super.toString() + \" (at: \" + startFormat.format(start) + endFormat.format(end) + \")\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JunHongT": 28
    }
  },
  {
    "path": "src/main/java/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "     * constructor for Task."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "     * @param description title of task"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "     * Retrieved description of task."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "     * @return String description of task"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        return this.description;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "     * Retrieve a tick or cross symbol depending on isDone."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "      * @return String which is either a tick or cross"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        return (isDone ? \"\\u2713\" : \"\\u2718\"); //return tick or X symbols"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "     * Change isDone from false to true."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    public void markAsDone() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        return \"[\" + getStatusIcon() + \"] \" + this.description;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JunHongT": 42
    }
  },
  {
    "path": "src/main/java/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "public class Todo extends Task {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    public Todo(String description) {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JunHongT": 13
    }
  },
  {
    "path": "src/main/java/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "import java.sql.SQLOutput;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    private String border \u003d \"-------------------------------------\";"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "     * Welcome message when program is executed."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    public void welcome() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        String logo \u003d \" ____        _        \\n\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                + \"|  _ \\\\ _   _| | _____ \\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                + \"| | | | | | | |/ / _ \\\\\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                + \"| |_| | |_| |   \u003c  __/\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        System.out.println(\"Hello from\\n\" + logo);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "     * Greeting message before user input is required."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    public void greeting() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        //Greetings before program"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        sb.append(border + \"\\n\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        sb.append(\"Hello! I\u0027m Duke\\n\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        sb.append(\"What can I do for you?\\n\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        sb.append(border + \"\\n\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        String greetings \u003d sb.toString();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        System.out.println(greetings);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "     * Message when index given is out of range."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "     * @return String message generated"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    public String indexError() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        //error message for indexOutOfBound"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        sb.append(border + \"\\n\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        sb.append(\"Invalid number. Number not listed. \\n\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        sb.append(border + \"\\n\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        String indexError \u003d sb.toString();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        System.out.println(indexError);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        return indexError;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "     * Message when no index is provided."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "     * @return String message generated"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    public String emptyError() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        //error message for empty input"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        sb.append(border + \"\\n\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        sb.append(\"No input detected. Please enter a number. \\n\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        sb.append(border + \"\\n\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        String emptyError \u003d sb.toString();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        System.out.println(emptyError);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        return emptyError;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "     * Ending message when user input bye."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    public void conclusion() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        sb.append(border + \"\\n\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        sb.append(\"Bye. Hope to see you again soon!\\n\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        sb.append(border + \"\\n\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        String conclude \u003d sb.toString();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        System.out.println(conclude);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "     * Message notifying user when a task is marked done."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "     * @param curr task that user wish to mark as done"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "     * @return String message notifying user"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    public String doneMessage(Task curr) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        sb.append(border + \"\\n\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        sb.append(\"Nice! I\u0027ve marked this task as done:\\n\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        sb.append(curr + \"\\n\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        sb.append(border + \"\\n\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        String done \u003d sb.toString();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        System.out.println(done);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        return done;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "     * Message notifying user when a task is deleted."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "     * @param curr Task that user wished to delete"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "     * @param size size of list after deletion"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "     * @return String message notifying user"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    public String deleteMessage(Task curr, int size) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        sb.append(border + \"\\n\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        sb.append(\"Noted! I\u0027ve removed this task:\\n\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        sb.append(curr + \"\\n\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        sb.append(\"Now you have \" + size + \" tasks in the list.\\n\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        sb.append(border + \"\\n\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        String delete \u003d sb.toString();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        System.out.println(delete);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        return delete;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "     * Listing all tasks stored in list."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "     * @param items ArrayList containing current tasks"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    public void listTask(ArrayList\u003cTask\u003e items) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        sb.append(border + \"\\n\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        //list out all items in arraylist items"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        for (int i \u003d 1; i \u003c\u003d items.size(); i++) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "            Task curr \u003d items.get(i - 1);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "            sb.append(i + \".\" + curr + \"\\n\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        sb.append(border + \"\\n\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        System.out.println(sb.toString());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "     * Listing all tasks stored in list that matched with search term."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "     * @param items ArrayList containing current tasks"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "     * @param key search term provided by user"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    public void findTask(ArrayList\u003cTask\u003e items, String key) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        sb.append(border + \"\\n\");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        sb.append(\"Here are the matching tasks in your list: \\n\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        //list out all items in arraylist items that matched with user input"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        for (int i \u003d 1; i \u003c\u003d items.size(); i++) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "            Task curr \u003d items.get(i - 1);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "            if (curr.getDescription().contains(key)) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "                sb.append(i + \".\" + curr + \"\\n\");"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "            }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        sb.append(border + \"\\n\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        System.out.println(sb.toString());"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "     * generating message for individual task with border and indentation."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "     * @param current current task"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "     * @param size size of list"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "     * @return message generated for selected task"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    public String generateMessage(Task current, int size) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        sb.append(border + \"\\n\");"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        sb.append(\"Got it. I\u0027ve added this task: \\n\");"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        sb.append(current + \"\\n\");"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        sb.append(\"Now you have \" + size + \" tasks in the list.\\n\");"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        sb.append(border + \"\\n\");"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JunHongT": 160
    }
  },
  {
    "path": "src/test/java/DeadlineTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "public class DeadlineTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    public void testDeadline() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        String border \u003d \"-------------------------------------\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        final Duke d \u003d new Duke();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        Task t \u003d new Task(\"test\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        sb.append(border + \"\\n\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        sb.append(\"Got it. I\u0027ve added this task: \\n\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        sb.append(\"[D][\" + t.getStatusIcon() + \"] test  (by: 12/12/1212 18:00)\\n\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        sb.append(\"Now you have 1 tasks in the list.\\n\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        sb.append(border + \"\\n\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        String correct \u003d sb.toString();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        sb.setLength(0);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        assertEquals(correct, d.generateTask(\"deadline test /by 12/12/1212 18:00\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        sb.append(border + \"\\n\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        sb.append(\"Invalid Deadline\u0027s arguments \\n\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        sb.append(border + \"\\n\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        String wrong \u003d sb.toString();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        assertEquals(wrong, d.generateTask(\"deadline test /by 12/12/1212 1800\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        assertEquals(wrong, d.generateTask(\"deadline test /by 12/12/1212 18/00\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        assertEquals(wrong, d.generateTask(\"deadline test /by 12-1-212 25:00\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        assertEquals(wrong, d.generateTask(\"deadline test /by 12/12/1212 2pm\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        assertEquals(wrong, d.generateTask(\"deadline test /by 18:00 12/12/1212\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JunHongT": 39
    }
  },
  {
    "path": "src/test/java/EventTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "public class EventTest {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    public void testEvent() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        final Duke d \u003d new Duke();"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        String border \u003d \"-------------------------------------\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        Task t \u003d new Task(\"test\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        sb.append(border + \"\\n\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        sb.append(\"Got it. I\u0027ve added this task: \\n\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        sb.append(\"[E][\" + t.getStatusIcon() + \"] test  (at: 12/12/1212 18:00 - 19:00)\\n\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        sb.append(\"Now you have \" + 1 + \" tasks in the list.\\n\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        sb.append(border + \"\\n\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        String correct \u003d sb.toString();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        sb.setLength(0);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        assertEquals(correct, d.generateTask(\"event test /at 12/12/1212 18:00 - 19:00\"));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        sb.append(border + \"\\n\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        sb.append(\"Invalid Event\u0027s arguments \\n\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        sb.append(border + \"\\n\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        String wrong \u003d sb.toString();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        assertEquals(wrong, d.generateTask(\"event test /at 12/12/1212 1800 - 1900\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        assertEquals(wrong, d.generateTask(\"event test /at 12/12/212 25:00\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        assertEquals(wrong, d.generateTask(\"event test /at 12/12/1212 2pm\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        assertEquals(wrong, d.generateTask(\"event test /at 18:00 12/12/1212\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JunHongT": 35
    }
  },
  {
    "path": "src/test/java/TodoTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "public class TodoTest {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    public void testTodo() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        final Duke d \u003d new Duke();"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        String border \u003d \"-------------------------------------\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        Task t \u003d new Task(\"test\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        sb.append(border + \"\\n\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        sb.append(\"Got it. I\u0027ve added this task: \\n\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        sb.append(\"[T][\" + t.getStatusIcon() + \"] test\\n\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        sb.append(\"Now you have \" + 1 + \" tasks in the list.\\n\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        sb.append(border + \"\\n\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        String correct \u003d sb.toString();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        sb.setLength(0);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        assertEquals(correct, d.generateTask(\"todo test\"));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        sb.append(border + \"\\n\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        sb.append(\"Todo must have valid description\\n\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        sb.append(border + \"\\n\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        String wrong \u003d sb.toString();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JunHongT"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "        assertEquals(wrong, d.generateTask(\"todo\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JunHongT": 31
    }
  },
  {
    "path": "tutorials/textUiTestingTutorial.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# Text UI Testing Tutorial"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JunHongT"
        },
        "content": "1. Create a folder `[project root]\\text-Ui-test`"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "1. Add a `runtest.bat` (if you are on Windows) or `runtest.sh` (if you are on a *nix OS) into the folder, containing the script below.\u003cbr\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "  `runtest.bat`:"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "   @ECHO OFF"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "   "
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "   REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "   if not exist ..\\bin mkdir ..\\bin"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "   "
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "   REM delete output from previous run"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "   del ACTUAL.TXT"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "   "
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "   REM compile the code into the bin folder"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "   javac  -cp ..\\src -Xlint:none -d ..\\bin ..\\src\\main\\java\\Duke.java"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "   IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "       echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "       exit /b 1"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "   )"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "   REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "   "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "   REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "   java -classpath ..\\bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "   "
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "   REM compare the output to the expected output"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "   FC ACTUAL.TXT EXPECTED.TXT"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "   "
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "   `runtest.sh`:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "   ```shell"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "   #!/usr/bin/env bash"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "   "
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "   # create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "   if [ ! -d \"../bin\" ]"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "   then"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "       mkdir ../bin"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "   fi"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "   "
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "   # delete output from previous run"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "   if [ -e \"./ACTUAL.TXT\" ]"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "   then"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "       rm ACTUAL.TXT"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "   fi"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "   "
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "   # compile the code into the bin folder, terminates if error occurred"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "   if ! javac -cp ../src -Xlint:none -d ../bin ../src/main/java/Duke.java"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "   then"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "       echo \"********** BUILD FAILURE **********\""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "       exit 1"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "   fi"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "   "
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "   # run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "   java -classpath ../bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "   "
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "   # compare the output to the expected output"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "   diff ACTUAL.TXT EXPECTED.TXT"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "   if [ $? -eq 0 ]"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "   then"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "       echo \"Test result: PASSED\""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "       exit 0"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "   else"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "       echo \"Test result: FAILED\""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "       exit 1"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "   fi"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "1. Update the `javac` and `java` commands in the script to match the name/location of your main class."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "1. Add an `EXPECTED.txt` to the same folder, containing the expected output."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "1. Add an `input.txt` containing the input commands."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "1. Run the `.bat`/`.sh` file to execute the test."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "**Authors:**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "* Initial Version: based on se-edu/addressbook-level2, adapted by Jeffry Lum"
      }
    ],
    "authorContributionMap": {
      "JunHongT": 1,
      "-": 73
    }
  }
]
