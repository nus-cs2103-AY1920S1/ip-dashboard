[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    id \u0027org.openjfx.javafxplugin\u0027 version \u00270.0.7\u0027"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "javafx {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    version \u003d \"11.0.2\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    modules \u003d [ \u0027javafx.controls\u0027, \u0027javafx.fxml\u0027]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "}"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    archiveVersion \u003d \"0.1\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "}"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "}"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "test {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "group \u0027seedu.duke\u0027"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    // Change this to your main class."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    mainClassName \u003d \"duke.Duke\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 15,
      "ang-zeyu": 28
    }
  },
  {
    "path": "data/taskData.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "{ type: deadline, done: false, description: 2103ip, time: 01/12/1997 0000 }"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "{ type: deadline, done: true, description: yet another ip, time: 1/12/1997 2359 }"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "{ type: event, done: false, description: yet another event, time: 09/2/2010 1200 to 09/2/2010 1400 }"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "{ type: event, done: true, description: yet another event, time: 09/2/2010 1200 to 1400 }"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "{ type: deadline, done: true, description: a deadline, time: 30/8/2019 2359 }"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "{ type: deadline, done: true, description: another deadline, time: 1/1/1111 1000 }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "{ type: todo, done: false, description: a todo }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "{ type: event, done: false, description: team meeting, time: 01/1/2000 1800 to 19/2/2010 2000 }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "{ type: deadline, done: true, description: 2103, time: 10/10/2015 2015 }"
      }
    ],
    "authorContributionMap": {
      "ang-zeyu": 9
    }
  },
  {
    "path": "src/main/java/duke/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import duke.command.CommandParser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import duke.command.Commands;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import duke.ui.DukeApplication;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import duke.ui.MainWindow;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import javafx.animation.PauseTransition;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import javafx.util.Duration;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " * Main class of the Duke app."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " * Launches the JavaFX DukeApplication."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " * Provides an abstraction of a running duke instance, with a method"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " * to process input."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    /** The directory name to use in construction of the storage object. */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    private static final String RECURSIVE_PARENT_DIR_NAME \u003d \"data\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    /** The greeting message to show on application launch. */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    private static final String GREETING_MSG \u003d \" Hello! I\u0027m Duke\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            + \" What can I do for you?\\n\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    /** The storage object to use for task-disk storage. */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    /** The MainWindow object to use for displaying output to the user. */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    private MainWindow ui;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    /** The TaskList object to use for in-memory task storage. */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * Launches the DukeApplication JavaFX user interface."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * Does not use any command line arguments currently."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * @param args Array of command line string arguments."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        Application.launch(DukeApplication.class);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * Constructor of the Duke instance."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * Initializes the various instance properties."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * @param ui The MainWindow with which to initialise this duke instance."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public Duke(MainWindow ui) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        this.ui \u003d ui;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        ui.showMessage(GREETING_MSG);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        this.storage \u003d new Storage(RECURSIVE_PARENT_DIR_NAME, ui);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        this.tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        this.storage.loadTasksToList(tasks);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * Response processor of Duke."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * Takes a string input and creates a command, and then executes it."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * Also prints any error messages resulting from Duke to the ui."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * @param input String input from the user."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public void processInput(String input) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            Command command \u003d CommandParser.parseCommand(input);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            command.execute(tasks, ui, storage);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            if (command.commandType \u003d\u003d Commands.BYE) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                PauseTransition exitDelay \u003d new PauseTransition(new Duration(1000));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                exitDelay.setOnFinished(ui.exitHandler);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                exitDelay.play();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        } catch (DukeExceptions ex) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            ui.showMessage(ex.getDisplayMsg());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 1,
      "ang-zeyu": 78
    }
  },
  {
    "path": "src/main/java/duke/DukeExceptions.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " * Generic abstraction for exceptions related to duke operations."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "public class DukeExceptions extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    /** Message to display to the user interface. */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    private String displayMsg;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * Private constructor that calls Exception\u0027s constructor."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * Passes the provided message as the error message"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * to Exception\u0027s constructor."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * @param message The error message string."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    private DukeExceptions(String message) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        this.displayMsg \u003d message;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * Default constructor that sets the error and display message."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * @param message The informative error message string."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * @param displayMsg The display message string."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    protected DukeExceptions(String message, String displayMsg) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        this(message);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        this.displayMsg \u003d displayMsg;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * Gets the display message."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * @return The string display message."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public String getDisplayMsg() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        return this.displayMsg;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ang-zeyu": 41
    }
  },
  {
    "path": "src/main/java/duke/DukeUtil.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " * A class providing several common utility functions."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "public abstract class DukeUtil {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * Concatenates an array of strings with a specified delimiter."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * @param strings Array of strings to concatenate."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * @param delimiter Delimiter to use to join strings together."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * @return Concatenated String."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public static String concatStrings(String[] strings, String delimiter) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        if (strings.length \u003d\u003d 0) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            return \"\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        StringBuilder output \u003d new StringBuilder();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        for (int i \u003d 0; i \u003c strings.length - 1; i++) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            output.append(strings[i]);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            output.append(delimiter);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        output.append(strings[strings.length - 1]);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        return output.toString();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * Returns in the first index of a pattern in an array of strings."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * Returns -1 if it is not found."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * @param strings Array of strings to search."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * @param pattern Pattern string to search for."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * @return Index of pattern in array, or -1 if not found."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public static int getIndexOfPattern(String[] strings, String pattern) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        for (int i \u003d 0; i \u003c strings.length; i++) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            if (strings[i].equals(pattern)) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                return i;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        return -1;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ang-zeyu": 47
    }
  },
  {
    "path": "src/main/java/duke/command/AddTaskCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import duke.ui.MainWindow;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " * Abstraction of command that adds a task to the list."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "abstract class AddTaskCommand extends WritableCommand {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    /** The task to add to the list. */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    Task taskToAdd;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * Generic constructor of the command from its arguments."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * @param commandArgs String array of arguments."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    AddTaskCommand(String[] commandArgs) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        super(commandArgs);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * Adds the task to the task list then displays the verification."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * Generic implementation of run for any (for now) type of tasks."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * @param tasks TaskList of tasks to use."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * @param ui MainWindow to use for displaying command output."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * @param storage Storage for WritableCommands to execute write-to-disk operations."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    void run(TaskList tasks, MainWindow ui, Storage storage) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        tasks.addTask(taskToAdd);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        ui.showMessage(\"Got it. I\u0027ve added this task:\\n\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                + String.format(\"   %s\\n\", taskToAdd.getStatusText())"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                + String.format(\"Now you have %d tasks in the list.\", tasks.getSize()));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ang-zeyu": 40
    }
  },
  {
    "path": "src/main/java/duke/command/ByeCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import duke.ui.MainWindow;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " * Abstraction of the bye command for exiting the program."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "class ByeCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * Constructor of the List command."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * Calls its parent constructor then sets its commandType enum."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * @param args String array of arguments."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public ByeCommand(String[] args) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        super(args);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        commandType \u003d Commands.BYE;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * Displays the program exit message."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * @param tasks TaskList of tasks to use."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * @param ui MainWindow to use for displaying command output."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * @param storage Storage for WritableCommands to execute write-to-disk operations."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    void run(TaskList tasks, MainWindow ui, Storage storage) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        ui.showMessage(\"Bye. Hope to see you again soon!\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * Checks that there are no other arguments provided."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * @param tasks TaskList of tasks to use."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * @param ui MainWindow to use for displaying command output."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * @param storage Storage for WritableCommands to execute write-to-disk operations."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * @throws DukeInvalidArgumentException If there are other arguments."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    void validate(TaskList tasks, MainWindow ui, Storage storage) throws DukeInvalidArgumentException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        if (commandArgs.length \u003e\u003d 1) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            throw new DukeInvalidArgumentException("
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                    \"Encountered extraneous arguments after bye command\","
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                    \" \u003dX  OOPS!!! There shouldn\u0027t be anything following \u0027bye\u0027,\\n\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                            + \" are you sure you wanted to exit?\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ang-zeyu": 51
    }
  },
  {
    "path": "src/main/java/duke/command/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import duke.ui.MainWindow;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import duke.storage.DukeFileWriteException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " * Abstraction of an executable command."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " * Validates the inputs provided then runs it."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    /** Commands enum type of the command. */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public Commands commandType;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    /** String array of arguments provided to the command. */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    String[] commandArgs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * Generic constructor of a command from its arguments."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * @param commandArgs String array of arguments."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    Command(String[] commandArgs) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        this.commandArgs \u003d commandArgs;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * Method for running the processing logic of the command."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * @param tasks TaskList of tasks to use."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * @param ui MainWindow to use for displaying command output."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * @param storage Storage for WritableCommands to execute write-to-disk operations."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    abstract void run(TaskList tasks, MainWindow ui, Storage storage);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * Method for running the validating logic of the command."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * @param tasks TaskList of tasks to use."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * @param ui MainWindow to use for displaying command output."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * @param storage Storage for WritableCommands to execute write-to-disk operations."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * @throws DukeInvalidArgumentException If an argument is invalid for the command."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    abstract void validate(TaskList tasks, MainWindow ui, Storage storage)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            throws DukeInvalidArgumentException;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * Public method for executing the command."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * Validates the inputs first, then runs the processing logic."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * @param tasks TaskList of tasks to use."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * @param ui MainWindow to use for displaying command output."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * @param storage Storage for WritableCommands to execute write-to-disk operations."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * @throws DukeInvalidArgumentException If an argument is invalid for the command."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * @throws DukeFileWriteException If a file write operation of a command fails."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public void execute(TaskList tasks, MainWindow ui, Storage storage)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            throws DukeInvalidArgumentException, DukeFileWriteException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        validate(tasks, ui, storage);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        run(tasks, ui, storage);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ang-zeyu": 63
    }
  },
  {
    "path": "src/main/java/duke/command/CommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " * Abstraction of a command parser responsible for resolving user input."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "public abstract class CommandParser {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * Method for parsing an input string an returning a command."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * @param commandString The input command string to parse."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * @return The executable command."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * @throws DukeInvalidCommandException If parsed command type is invalid."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public static Command parseCommand(String commandString)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            throws DukeInvalidCommandException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        String[] inputs \u003d commandString.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        Commands commandType;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        Command command;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            commandType \u003d Commands.valueOf(inputs[0].toUpperCase());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            inputs \u003d Arrays.copyOfRange(inputs, 1, inputs.length);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        } catch (IllegalArgumentException | IndexOutOfBoundsException ex) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            throw new DukeInvalidCommandException("
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                    \" \u003dX  OOPS!!! I\u0027m sorry, but I don\u0027t know what that means \u003d(\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        switch (commandType) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        case BYE:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            command \u003d new ByeCommand(inputs);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        case LIST:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            command \u003d new ListCommand(inputs);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        case FIND:"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            command \u003d new FindCommand(commandString, inputs);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        case DONE:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            command \u003d new DoneCommand(inputs);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        case DELETE:"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            command \u003d new DeleteCommand(inputs);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        case TODO:"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            command \u003d new TodoCommand(inputs);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        case DEADLINE:"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            command \u003d new DeadlineCommand(inputs);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        case EVENT:"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            command \u003d new EventCommand(inputs);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            //covered in try catch above with enums, only cause will be no implementation"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            throw new DukeInvalidCommandException("
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                    String.format("
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                            \"Encountered unimplemented or uncovered command type %s\","
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                            commandType.toString()),"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                    \" \u003dX  OOPS!!! I\u0027m sorry, but I haven\u0027t implemented it \u003d(\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        return command;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ang-zeyu": 68
    }
  },
  {
    "path": "src/main/java/duke/command/Commands.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " * Set of available command types."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "public enum Commands {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    LIST,"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    BYE,"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    FIND,"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    DONE,"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    DELETE,"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    TODO,"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    DEADLINE,"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    EVENT"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ang-zeyu": 15
    }
  },
  {
    "path": "src/main/java/duke/command/DeadlineCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import duke.DukeUtil;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import duke.ui.MainWindow;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import duke.task.DeadlineTask;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " * Deadline command that adds a deadline task to the task list."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "class DeadlineCommand extends AddTaskCommand {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * Constructor of the Deadline command."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * Calls its parent constructor then sets its commandType enum."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * @param commandArgs String array of arguments."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public DeadlineCommand(String[] commandArgs) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        super(commandArgs);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        commandType \u003d Commands.DEADLINE;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * Checks whether the provided command arguments are valid."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * Validates that the task description should not be empty,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * and the timing is of the required format."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * If valid, it then sets the taskToAdd instance variable,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * for use in run."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * @param tasks TaskList of tasks to use."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * @param ui MainWindow to use for displaying command output."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * @param storage Storage for WritableCommands to execute write-to-disk operations."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * @throws DukeInvalidArgumentException If the arguments are invalid as described."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    void validate(TaskList tasks, MainWindow ui, Storage storage) throws DukeInvalidArgumentException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        int byIndex \u003d DukeUtil.getIndexOfPattern(commandArgs, \"/by\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        if (byIndex \u003d\u003d -1) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            throw new DukeInvalidArgumentException("
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                    \"Missing /by delimiter for deadline command\","
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                    \" \u003dX  OOPS!!! I dont know what is your deadline!\\n\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                            + \" You should add a deadline with\\n\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                            + \" \\\u0027deadline \u003cdescription\u003e /by \u003ctiming\u003e\\\u0027\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        String description \u003d DukeUtil.concatStrings("
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                Arrays.copyOfRange(commandArgs, 0, byIndex),"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                \" \");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        String timing \u003d DukeUtil.concatStrings("
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                Arrays.copyOfRange(commandArgs, byIndex + 1, commandArgs.length),"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                \" \");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        taskToAdd \u003d new DeadlineTask(description, timing);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ang-zeyu": 59
    }
  },
  {
    "path": "src/main/java/duke/command/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import duke.ui.MainWindow;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " * Abstraction of the delete command for deleting a task from the task list."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "class DeleteCommand extends WritableCommand {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    /** Index of the task in the list as checked by validate. */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    private int taskIndex;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * Constructor of the Delete command."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * Calls its parent constructor then sets its commandType enum."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * @param commandArgs String array of arguments."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public DeleteCommand(String[] commandArgs) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        super(commandArgs);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        commandType \u003d Commands.DELETE;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * Deletes the task from the task list, then saves to disk."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * @param tasks TaskList of tasks to use."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * @param ui MainWindow to use for displaying command output."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * @param storage Storage for WritableCommands to execute write-to-disk operations."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    void run(TaskList tasks, MainWindow ui, Storage storage) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        Task taskDeleted \u003d tasks.deleteTaskByIndex(taskIndex);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        ui.showMessage(\"Noted. I\u0027ve removed this task:\\n\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                + String.format(\"   %s\", taskDeleted.getStatusText())"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                + String.format(\"Now you have %d tasks in the list.\", tasks.getSize()));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * Checks whether the provided arguments for deleting the task are valid."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * Verifies the number of arguments and if the task index"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * is valid number within the size of the task list."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * @param tasks TaskList of tasks to use."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * @param ui MainWindow to use for displaying command output."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * @param storage Storage for WritableCommands to execute write-to-disk operations."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * @throws DukeInvalidArgumentException If the arguments are invalid as described."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    void validate(TaskList tasks, MainWindow ui, Storage storage) throws DukeInvalidArgumentException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        if (commandArgs.length \u003e 1) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            throw new DukeInvalidArgumentException("
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                    \"Encountered extraneous arguments after delete command\","
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                    \" \u003dX  OOPS!!! There shouldn\u0027t be so many arguments!\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            taskIndex \u003d Integer.parseInt(commandArgs[0]);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            tasks.getTaskByIndex(--taskIndex);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            throw new DukeInvalidArgumentException("
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                    \"Could not parse argument supplied into a list index\","
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                    \" \u003dX  OOPS!!! The task number you gave me wasn\u0027t a valid number,\\n\""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                            + \" or you didn\u0027t give me one at all!\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        } catch (IndexOutOfBoundsException | NullPointerException ex) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            throw new DukeInvalidArgumentException("
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                    \"User number supplied was out of list bounds\","
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                    \" \u003dX  OOPS!!! The task number you gave me wasn\u0027t within your current list!\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ang-zeyu": 74
    }
  },
  {
    "path": "src/main/java/duke/command/DoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import duke.ui.MainWindow;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " * Abstraction of the Done command to mark a task as done in the task list."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "class DoneCommand extends WritableCommand {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    /** The task to mark as done as checked by validate. */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    private Task task;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * Constructor of the List command."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * Calls its parent constructor then sets its commandType enum."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * @param commandArgs String array of arguments."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public DoneCommand(String[] commandArgs) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        super(commandArgs);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        commandType \u003d Commands.DONE;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * Marks the task as done, then displays the confirmation."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * @param tasks TaskList of tasks to use."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * @param ui MainWindow to use for displaying command output."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * @param storage Storage for WritableCommands to execute write-to-disk operations."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    void run(TaskList tasks, MainWindow ui, Storage storage) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        task.setDone(true);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        ui.showMessage(\" Nice! I\u0027ve marked this task as done:\\n\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                + String.format(\"   %s\", task.getStatusText()));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * Checks the validity of the arguments provided to the done command."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * Validates that there is only one argument,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * and it is a valid index within the range of"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * the task list size."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * @param tasks TaskList of tasks to use."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * @param ui MainWindow to use for displaying command output."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * @param storage Storage for WritableCommands to execute write-to-disk operations."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * @throws DukeInvalidArgumentException If the arguments are invalid as described."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    void validate(TaskList tasks, MainWindow ui, Storage storage) throws DukeInvalidArgumentException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        if (commandArgs.length \u003e 1) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            throw new DukeInvalidArgumentException("
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                    \"Encountered extraneous arguments after done command\","
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                    \" \u003dX  OOPS!!! There shouldn\u0027t be so many arguments!\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            int taskIndex \u003d Integer.parseInt(commandArgs[0]);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            task \u003d tasks.getTaskByIndex(--taskIndex);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            if (task.isDone()) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                throw new DukeInvalidArgumentException("
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                        \"User specified task is already marked as done\","
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                        \" \u003dX  OOPS!!! The task you gave me was already marked as done!\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            throw new DukeInvalidArgumentException("
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                    \"Could not parse argument supplied into a list index\","
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                    \" \u003dX  OOPS!!! The task number you gave me wasn\u0027t a valid number,\\n\""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                            + \" or you didn\u0027t give me one at all!\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        } catch (IndexOutOfBoundsException | NullPointerException ex) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            throw new DukeInvalidArgumentException("
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                    \"User number supplied was out of list bounds\","
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                    \" \u003dX  OOPS!!! The task number you gave me wasn\u0027t within your\\n\""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                            + \" current list!\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ang-zeyu": 80
    }
  },
  {
    "path": "src/main/java/duke/command/DukeInvalidArgumentException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import duke.DukeExceptions;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " * Abstraction of exceptions occuring due to invalid command arguments."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "public class DukeInvalidArgumentException extends DukeExceptions {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * Constructor that sets only the display message."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * Defaults to a pre defined error message."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * @param displayMsg The display message string."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public DukeInvalidArgumentException(String displayMsg) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        super(\"Invalid user arguments to command inputted\", displayMsg);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * Constructor allowing setting the error and display message."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * @param errorMsg The informative error message string."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * @param displayMsg The display message string."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public DukeInvalidArgumentException(String errorMsg, String displayMsg) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        super(errorMsg, displayMsg);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ang-zeyu": 28
    }
  },
  {
    "path": "src/main/java/duke/command/DukeInvalidCommandException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import duke.DukeExceptions;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " * Abstraction of exceptions caused by invalid inputted command types."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "class DukeInvalidCommandException extends DukeExceptions {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * Constructor that sets only the display message."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * Defaults to a pre defined error message."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * @param displayMsg The display message string."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    DukeInvalidCommandException(String displayMsg) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        super(\"Invalid user command inputted\", displayMsg);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    DukeInvalidCommandException(String errorMsg, String displayMsg) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        super(errorMsg, displayMsg);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ang-zeyu": 22
    }
  },
  {
    "path": "src/main/java/duke/command/EventCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import duke.DukeUtil;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import duke.ui.MainWindow;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import duke.task.EventTask;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " * Event command that adds a event task to the task list."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "class EventCommand extends AddTaskCommand {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * Constructor of the Event command."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * Calls its parent constructor then sets its commandType enum."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * @param commandArgs String array of arguments."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public EventCommand(String[] commandArgs) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        super(commandArgs);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        commandType \u003d Commands.EVENT;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * Checks whether the provided command arguments are valid."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * Validates that the task description should not be empty,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * and the timing is of the required format."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * If valid, it then sets the taskToAdd instance variable,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * for use in run."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * @param tasks TaskList of tasks to use."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * @param ui MainWindow to use for displaying command output."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * @param storage Storage for WritableCommands to execute write-to-disk operations."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * @throws DukeInvalidArgumentException If the arguments are invalid as described."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    void validate(TaskList tasks, MainWindow ui, Storage storage) throws DukeInvalidArgumentException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        int atIndex \u003d DukeUtil.getIndexOfPattern(commandArgs, \"/at\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        if (atIndex \u003d\u003d -1) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            throw new DukeInvalidArgumentException("
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                    \"Missing /at delimiter for event command\","
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                    \" \u003dX  OOPS!!! I dont know what is your event timing!\\n\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                            + \" You should add a time with\\n\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                            + \" \\\u0027event \u003cdescription\u003e /at \u003ctime\u003e\\\u0027\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        String description \u003d DukeUtil.concatStrings("
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                Arrays.copyOfRange(commandArgs, 0, atIndex),"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                \" \");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        String timing \u003d DukeUtil.concatStrings("
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                Arrays.copyOfRange(commandArgs, atIndex + 1, commandArgs.length),"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                \" \");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        taskToAdd \u003d new EventTask(description, timing);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ang-zeyu": 59
    }
  },
  {
    "path": "src/main/java/duke/command/FindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import duke.ui.MainWindow;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " * Abstraction of find command that extends the generic command class."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "class FindCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    /** Search pattern of this find command. */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    private String searchPattern;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * Private constructor of find command to set up command arguments."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * @param commandArgs Array of string arguments for the command."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    private FindCommand(String[] commandArgs) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        super(commandArgs);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        commandType \u003d Commands.FIND;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * Package private constructor to initialise search pattern."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * Also initialises command arguments for extensibility."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * @param commandString Original input command string."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * @param commandArgs Array of string arguments for the command."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    FindCommand(String commandString, String[] commandArgs) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        this(commandArgs);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        searchPattern \u003d commandString.replaceFirst(\"find\\\\s?\", \"\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * Displays all tasks matching the search pattern in the task list."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * @param tasks TaskList of tasks to use."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * @param ui MainWindow to use for displaying command output."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * @param storage Storage for WritableCommands to execute write-to-disk operations."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    void run(TaskList tasks, MainWindow ui, Storage storage) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        StringBuilder displayMessage \u003d new StringBuilder("
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                \"Here are the matching tasks in your list:\\n\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        int taskIndex \u003d 1;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        for (Task task : tasks.getAllTasks()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            if (task.getDescription().contains(searchPattern)) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                displayMessage.append(String.format(\"%d.%s\\n\", taskIndex, task.getStatusText()));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                taskIndex++;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        ui.showMessage(displayMessage.toString());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * There is no validation logic for the find command."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * A search for an empty string is still a valid search."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * @param tasks TaskList of tasks to use."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * @param ui MainWindow to use for displaying command output."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * @param storage Storage for WritableCommands to execute write-to-disk operations."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    void validate(TaskList tasks, MainWindow ui, Storage storage) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ang-zeyu": 70
    }
  },
  {
    "path": "src/main/java/duke/command/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import duke.ui.MainWindow;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " * Abstraction of the list command for displaying all tasks in the task list."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "class ListCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * Constructor of the List command."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * Calls its parent constructor then sets its commandType enum."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * @param commandArgs String array of arguments."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    ListCommand(String[] commandArgs) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        super(commandArgs);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        commandType \u003d Commands.LIST;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * Displays the tasks in the task list."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * @param tasks TaskList of tasks to use."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * @param ui MainWindow to use for displaying command output."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * @param storage Storage for WritableCommands to execute write-to-disk operations."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    void run(TaskList tasks, MainWindow ui, Storage storage) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        StringBuilder displayMessage \u003d new StringBuilder("
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                \"Here are the matching tasks in your list:\\n\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        int taskIndex \u003d 1;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        for (Task task : tasks.getAllTasks()) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            displayMessage.append(String.format(\"%d.%s\\n\", taskIndex, task.getStatusText()));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            taskIndex++;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        ui.showMessage(displayMessage.toString());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * Checks that there are no other arguments provided to the command."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * @param tasks TaskList of tasks to use."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * @param ui MainWindow to use for displaying command output."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * @param storage Storage for WritableCommands to execute write-to-disk operations."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * @throws DukeInvalidArgumentException If there are other arguments."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    void validate(TaskList tasks, MainWindow ui, Storage storage) throws DukeInvalidArgumentException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        if (commandArgs.length \u003e 0) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            throw new DukeInvalidArgumentException("
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                    \"Encountered extraneous arguments after list command\","
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                    \" \u003dX  OOPS!!! There shouldn\u0027t be anything following \u0027list\u0027,\\n\""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                            + \" did you meant to do something else?\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ang-zeyu": 60
    }
  },
  {
    "path": "src/main/java/duke/command/TodoCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import duke.DukeUtil;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import duke.ui.MainWindow;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import duke.task.TodoTask;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " * Todo command that adds a todo task to the task list."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "class TodoCommand extends AddTaskCommand {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * Constructor of the Todo command."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * Calls its parent constructor then sets its commandType enum."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * @param commandArgs String array of arguments."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public TodoCommand(String[] commandArgs) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        super(commandArgs);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        commandType \u003d Commands.TODO;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * Checks whether the provided description is valid."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * If valid, it then sets the taskToAdd instance variable,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * for use in run."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * @param tasks TaskList of tasks to use."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * @param ui MainWindow to use for displaying command output."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * @param storage Storage for WritableCommands to execute write-to-disk operations."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * @throws DukeInvalidArgumentException If the description provided is empty."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    void validate(TaskList tasks, MainWindow ui, Storage storage) throws DukeInvalidArgumentException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        String description \u003d DukeUtil.concatStrings(commandArgs, \" \");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        taskToAdd \u003d new TodoTask(description);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ang-zeyu": 39
    }
  },
  {
    "path": "src/main/java/duke/command/WritableCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import duke.ui.MainWindow;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import duke.storage.DukeFileWriteException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " * Abstraction of command that requires a generic save to disk operation after execution."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "abstract class WritableCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * Generic constructor of the writable command from its arguments."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * @param commandArgs String array of arguments"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    WritableCommand(String[] commandArgs) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        super(commandArgs);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * Validates and runs the command, then saves the tasks to disk."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * It is an override implementation of Command\u0027s execute,"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * with the additional step of saving to disk."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * @param tasks TaskList of tasks to use."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * @param ui MainWindow to use for displaying command output."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * @param storage Storage for WritableCommands to execute write-to-disk operations."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * @throws DukeInvalidArgumentException If an argument is invalid for the command."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * @throws DukeFileWriteException If a file write operation of a command fails."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public void execute(TaskList tasks, MainWindow ui, Storage storage)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            throws DukeInvalidArgumentException, DukeFileWriteException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        super.execute(tasks, ui, storage);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        storage.saveTasksToDisk(tasks);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ang-zeyu": 38
    }
  },
  {
    "path": "src/main/java/duke/storage/DukeFileWriteException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "package duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import duke.DukeExceptions;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " * Abstraction of exceptions due to a failure to write task data to disk."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "public class DukeFileWriteException extends DukeExceptions {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * Constructor that sets only the display message."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * Defaults to a pre defined error message."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * @param displayMsg The display message string."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    DukeFileWriteException(String displayMsg) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        super(\"Error encountered while writing task data to disk\", displayMsg);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * Constructor allowing setting the error and display message."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * @param errorMsg The informative error message string."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * @param displayMsg The display message string."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    DukeFileWriteException(String errorMsg, String displayMsg) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        super(errorMsg, displayMsg);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ang-zeyu": 28
    }
  },
  {
    "path": "src/main/java/duke/storage/DukeTaskFileParseException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "package duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import duke.DukeExceptions;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " * Abstraction of exceptions caused by errors parsing the existing task file on disk."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "class DukeTaskFileParseException extends DukeExceptions {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * Constructor that sets only the display message."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * Defaults to a pre defined error message."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * @param displayMsg The display message string."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public DukeTaskFileParseException(String displayMsg) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        super(\"Error encountered while parsing task data file\", displayMsg);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * Constructor allowing setting the error and display message."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * @param errorMsg The informative error message string."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * @param displayMsg The display message string."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public DukeTaskFileParseException(String errorMsg, String displayMsg) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        super(errorMsg, displayMsg);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ang-zeyu": 28
    }
  },
  {
    "path": "src/main/java/duke/storage/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "package duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import duke.command.DukeInvalidArgumentException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import duke.ui.MainWindow;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import duke.task.TaskType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import duke.task.TodoTask;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import duke.task.DeadlineTask;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import duke.task.EventTask;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import duke.task.TaskUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " * Abstraction of the file storage of tasks."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " * Saves the task data in a readable and editable json format."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    /** The filename of the task data file to use. */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    private static final String DATA_FILE_NAME \u003d \"taskData.txt\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    /** The upward recursive search limit for the existing specified dirName. */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    private static final int DIRECTORY_SEARCH_LIMIT \u003d 5;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    /** The directory name to use for storing the task data file. */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    private String dirName;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    /** The absolute filePath of the task data file to use. */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    private String filePath;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    /** The user interface object for displaying error messages. */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    private MainWindow ui;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * Constructor of the storage object."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * Searches recursively upward from the present working directory for"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * the directory dirName."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * If it is not found, the directory is creating in"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * the present working directory."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * @param dirName The directory name as a string."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * @param ui The user interface object to use."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public Storage(String dirName, MainWindow ui) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        this.dirName \u003d dirName;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        this.ui \u003d ui;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        setFilePath();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * Reads the task data file and loads the task data into the task list."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * Re-validates the input during construction of the task instances,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * skipping invalid inputs."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * See getTaskType/DoneStatus/Description for the validation."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * Also refer to the task constructors for additional info on validation."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * @param taskList The TaskList object to load the tasks into."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public void loadTasksToList(TaskList taskList) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        Scanner dataScanner;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            dataScanner \u003d new Scanner(new File(filePath));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        } catch (FileNotFoundException ex) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            ui.showMessage(\" I did not find any previous data in your data directory\\n\""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                    + \" I\u0027ll try to create one when you save something!\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        String input;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        Map\u003cStorageKey, String\u003e inputs;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        TaskType taskType;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        boolean isTaskDone;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        String taskDescription \u003d \"\";"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        String taskTiming \u003d \"\";"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        int lineNumber \u003d 0;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        while (dataScanner.hasNextLine()) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            input \u003d dataScanner.nextLine();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            lineNumber++;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                inputs \u003d StorageParser.parseJsonLine(input);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                taskType \u003d getTaskType(inputs.get(StorageKey.TYPE));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                isTaskDone \u003d getDoneStatus(inputs.get(StorageKey.DONE));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                taskDescription \u003d getDescription(inputs.get(StorageKey.DESCRIPTION));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                taskTiming \u003d inputs.get(StorageKey.TIME);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                Task taskToAdd;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                switch (taskType) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                case TODO:"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                    taskToAdd \u003d new TodoTask(taskDescription);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                case DEADLINE:"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                    taskToAdd \u003d new DeadlineTask(taskDescription, taskTiming);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                case EVENT:"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                    taskToAdd \u003d new EventTask(taskDescription, taskTiming);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                default:"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                    throw new DukeTaskFileParseException("
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                            \"Unhandled taskType encountered\","
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                            \" \u003dX  Oops! I am not trained to handle this type of Tasks...\\n\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                taskToAdd.setDone(isTaskDone);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                taskList.addTask(taskToAdd);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            } catch (DukeTaskFileParseException | DukeInvalidArgumentException ex) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                ui.showMessage(ex.getDisplayMsg()"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                        + String.format(\"\\n   Error in storage file line number: %d\", lineNumber));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * Writes the specified task list to disk."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * It throws a file write exception if an IOException occurs."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * @param tasks The task list to save to disk."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * @throws DukeFileWriteException If an IOException from FileWriter occurs."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public void saveTasksToDisk(TaskList tasks) throws DukeFileWriteException {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            FileWriter fileWriter \u003d new FileWriter(filePath);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            for (Task task : tasks.getAllTasks()) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                String jsonLineStart \u003d String.format("
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                        \"{ %s: %s, %s: %s, %s: %s\","
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                        StorageKey.TYPE.toString(), task.getTaskType().toString(),"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                        StorageKey.DONE.toString(), ((Boolean) task.isDone()).toString(),"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                        StorageKey.DESCRIPTION.toString(), task.getDescription());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                fileWriter.write(jsonLineStart);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                if (task.getTiming() !\u003d null) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                    fileWriter.write("
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                            String.format(\", %s: %s\","
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                                    StorageKey.TIME.toString(),"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                                    task.getTiming()));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                fileWriter.write(\" }\\n\");"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            fileWriter.close();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        } catch (IOException ex) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            throw new DukeFileWriteException("
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                    ex.getMessage(),"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                    \" \u003dX  OOPS!!! I failed to write the task data to disk!\");"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * Private method to get the TaskType enum from a string."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * @param input The task type string."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * @return The TaskType enum"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * @throws DukeTaskFileParseException If there is no valid TaskType for the input string."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    private TaskType getTaskType(String input) throws DukeTaskFileParseException {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            return TaskType.valueOf(input.toUpperCase());"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        } catch (IllegalArgumentException | NullPointerException ex) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            throw new DukeTaskFileParseException("
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                    \"Invalid task type encountered while parsing task file\","
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                    \" \u003dX  Oops! I encountered an invalid task type value while\\n\""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                            + \"   reading your file.\");"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * Private method to get the boolean done status from a string."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * Unlike Boolean.valueOf, only accepts \u0027true\u0027 or \u0027false\u0027 as valid arguments."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * @param status The status input string."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * @return The parsed boolean value."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * @throws DukeTaskFileParseException If status string is invalid as described."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    private boolean getDoneStatus(String status) throws DukeTaskFileParseException {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        if (status !\u003d null) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            if (status.equalsIgnoreCase(\"true\")) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            } else if (status.equalsIgnoreCase(\"false\")) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        throw new DukeTaskFileParseException("
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                \"Invalid done status number encountered while parsing task file\","
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                \" \u003dX  Oops! I encountered an invalid or missing done value\\n\""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                        + \"   while reading your file.\");"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * Private method for validating the description of the task."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * See TaskUtil for more information on validation of the description."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * Also returns the description again."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * @param description The description input string."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * @return The description string."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * @throws DukeTaskFileParseException If the description is empty."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    private String getDescription(String description) throws DukeTaskFileParseException {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            TaskUtil.validateTaskDescription(description);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            return description;"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        } catch (DukeInvalidArgumentException | NullPointerException ex) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            throw new DukeTaskFileParseException("
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                    \"Invalid task description encountered when parsing task file\","
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                    \" \u003dX  Oops! I encountered an empty description while\\n\""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                            + \"   reading your file.\");"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * Private method called in the constructor of the storage instance."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * Using the provided dirName, tries to search for an absolute directory path"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * recursively upward up to the search limit."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * If it is not found, the absolute directory path used is the present"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * working directory and the directory is created."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * If directory creation fails, the user is alerted that the app cannot"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * save changes to disk."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * The absolute file path is then determined using the directory path and"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * the DATA_FILE_NAME string constant."
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    private void setFilePath() {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        String workingDir \u003d System.getProperty(\"user.dir\");"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        Path currentDir \u003d Paths.get(workingDir);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        int recursiveSearchCount \u003d 1;"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        while (!Files.isDirectory(Paths.get(currentDir.toString(), dirName))"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                \u0026\u0026 recursiveSearchCount \u003c\u003d DIRECTORY_SEARCH_LIMIT) {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            currentDir \u003d currentDir.getParent();"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            recursiveSearchCount++;"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        if (recursiveSearchCount \u003e 5) {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            //create directory in pwd since it dosen\u0027t exist"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            Path fallbackDirPath \u003d Paths.get(workingDir, dirName);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                if (!Files.isDirectory(fallbackDirPath)) {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                    Files.createDirectory(fallbackDirPath);"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            } catch (IOException ex) {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                printNoStorageMsg();"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            this.filePath \u003d Paths.get(fallbackDirPath.toString(), DATA_FILE_NAME).toString();"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            this.filePath \u003d Paths.get(currentDir.toString(), dirName, DATA_FILE_NAME).toString();"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * Private method to display the no save-to-disk function message"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * to the user."
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    private void printNoStorageMsg() {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        ui.showMessage(\" \u003dX  Oops! I failed to find a \""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                + dirName"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                + \" directory upwards\\n\""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                + \"   and could not create one!\");"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        ui.showMessage("
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                \" You can still run the application, but note your data\\n\""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                    + \"   will not be here the next time you restart the app!\");"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ang-zeyu": 278
    }
  },
  {
    "path": "src/main/java/duke/storage/StorageKey.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "package duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " * Set of possible storage key types."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "enum StorageKey {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    TYPE,"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    DONE,"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    DESCRIPTION,"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    TIME;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * Overrride implementation of toString that returns the lower case version."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * @return Lower case string representation of enum."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        return super.toString().toLowerCase();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ang-zeyu": 21
    }
  },
  {
    "path": "src/main/java/duke/storage/StorageParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "package duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import java.util.EnumMap;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " * Abstraction of a storage file parser responsible for resolving file input."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "abstract class StorageParser {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * Method for parsing a single line of input."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * Returns a Map object that can be used"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * to retrieve the relavant task data."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * In the current iteration of the app, each task is"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * stored in json format on a single line."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * @param line The input string line."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * @return The Map(Key:StorageKey, Value:String) object backed by EnumMap."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * @throws DukeTaskFileParseException If an invalid storage key is encountered"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     *     or the string is not in the correct format."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    static Map\u003cStorageKey, String\u003e parseJsonLine(String line)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            throws DukeTaskFileParseException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        Map\u003cStorageKey, String\u003e lineMap \u003d new EnumMap\u003cStorageKey, String\u003e(StorageKey.class);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        checkOutermostBrackets(line);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        char[] lineArr \u003d line.toCharArray();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        //first word should be a key"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        boolean isKey \u003d true;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        StringBuilder currentKey \u003d new StringBuilder();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        StringBuilder currentValue \u003d new StringBuilder();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        for (char c : lineArr) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            switch (c) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            case \u0027{\u0027:"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            case \u0027:\u0027:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                isKey \u003d false;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            case \u0027,\u0027:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            case \u0027}\u0027:"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                isKey \u003d true;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                    StorageKey key \u003d StorageKey.valueOf("
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                            currentKey.toString().toUpperCase().trim());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                    lineMap.put(key, currentValue.toString().trim());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                    currentKey \u003d new StringBuilder();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                    currentValue \u003d new StringBuilder();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                } catch (IllegalArgumentException ex) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                    throw new DukeTaskFileParseException("
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                            \"Invalid key found in storage file (line will be skipped)\","
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                            \" \u003dX  OOPS!!! I found an invalid storage key in your storage file,\\n\""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                                    + \" I\u0027ll skip that line!\\n\""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                                    + String.format(\"   Invalid Key: \\\u0027%s\\\u0027\", currentKey.toString()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                if (isKey) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                    currentKey.append(c);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                    currentValue.append(c);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        return lineMap;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * Private utility method to validate the perimeter brackets of the input json string."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * @param line The input string."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * @throws DukeTaskFileParseException If the string has no opening or closing bracket."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    private static void checkOutermostBrackets(String line) throws DukeTaskFileParseException {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        String jsonLine \u003d line.trim();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        int lineLength \u003d jsonLine.length();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        boolean hasOpeningBracket \u003d lineLength \u003e 0 \u0026\u0026 jsonLine.charAt(0) \u003d\u003d \u0027{\u0027;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        if (!hasOpeningBracket) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            throw new DukeTaskFileParseException("
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                    \"Missing opening bracket while parsing file line.\","
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                    \" \u003dX  OOPS!!! I found line without an opening bracket in your storage file,\\n\""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                            + \" I\u0027ll skip that line!\\n\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        boolean hasClosingBracket \u003d jsonLine.charAt(lineLength - 1) \u003d\u003d \u0027}\u0027;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        if (!hasClosingBracket) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            throw new DukeTaskFileParseException("
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                    \"Missing closing bracket while parsing file line.\","
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                    \" \u003dX  OOPS!!! I found a line without an closing bracket in your storage file,\\n\""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                            + \" I\u0027ll skip that line!\\n\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ang-zeyu": 100
    }
  },
  {
    "path": "src/main/java/duke/task/DeadlineTask.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import duke.command.DukeInvalidArgumentException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " * Abstraction of a task representing a deadline by a certain date time."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "public class DeadlineTask extends Task {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    /** The LocalDateTime deadline of the dead line task. */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    private LocalDateTime deadlineDate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * Constructor of the deadline task."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * Calls the generic task constructor and initializes its task type."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * Also calls initDates for validating and setting its due date."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * @param description The task description string."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * @param deadlineDate The input timing string."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * @throws DukeInvalidArgumentException If any of the inputs are of invalid format."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public DeadlineTask(String description, String deadlineDate) throws DukeInvalidArgumentException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        super(description, deadlineDate);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        this.taskType \u003d TaskType.DEADLINE;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        initDates(deadlineDate);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        TaskUtil.validateTaskDescription(description);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * Method retrieving task type specific status strings."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * @return The task type specific status string."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public String getStatusText() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        return String.format(\"[D][%s] %s (by: %s)\","
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                getStatusIcon(),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                this.description,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                this.getFormattedTiming());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * Private function for retrieving the formatted timing for display."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * @return The formatted timing string."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    private String getFormattedTiming() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        return TaskUtil.getDisplayTime(deadlineDate);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * Private function for validating and setting the deadline\u0027s due date."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * Validates the timings according to the format defined"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * in TaskUtil, then sets the LocalDateTime instance"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * property."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * @param deadlineDate The input timing string."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * @throws DukeInvalidArgumentException If the input timing format is invalid or null."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    private void initDates(String deadlineDate) throws DukeInvalidArgumentException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        if (deadlineDate \u003d\u003d null) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            throw new DukeInvalidArgumentException("
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                    \"Null reference provided to task constructor\","
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                    \"\u003dX  OOPS!!! The timing for this task cannot be empty!\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        this.deadlineDate \u003d TaskUtil.getDateFromString(deadlineDate);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ang-zeyu": 70
    }
  },
  {
    "path": "src/main/java/duke/task/EventTask.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import duke.command.DukeInvalidArgumentException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " * Abstraction of a task representing an event occuring at some time period."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "public class EventTask extends Task {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    /** The starting date-time of the time period. */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    private LocalDateTime startDate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    /** The ending date-time of the time period. */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    private LocalDateTime endDate;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * Constructor of the event task."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * Calls the generic task constructor and initializes its task type."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * Also calls initDates for validating and setting its dates."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * @param description The task description string."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * @param timing The input timing string."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * @throws DukeInvalidArgumentException If any of the inputs are of invalid format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public EventTask(String description, String timing) throws DukeInvalidArgumentException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        super(description, timing);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        this.taskType \u003d TaskType.EVENT;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        initDates(timing);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        TaskUtil.validateTaskDescription(description);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * Method retrieving task type specific status strings."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * @return The task type specific status string."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public String getStatusText() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        return String.format(\"[E][%s] %s (at: %s)\","
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                getStatusIcon(),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                this.description,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                this.getFormattedTiming());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * Private function for retrieving the formatted timing for display."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * @return The formatted timing string."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    private String getFormattedTiming() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        return TaskUtil.getDisplayTime(startDate)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                + \" to \""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                + TaskUtil.getDisplayTime(endDate);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * Private function for validating and setting the event\u0027s time period."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * Checks for the \u0027to\u0027 delimiter to denote the event\u0027s start and end date-times."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * Also then validates the two string timings according to the formats defined"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * in TaskUtil, then sets the LocalDateTime instance properties."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * @param timing The input timing string."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * @throws DukeInvalidArgumentException If the input timing format is invalid or null."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    private void initDates(String timing) throws DukeInvalidArgumentException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        if (timing \u003d\u003d null) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            throw new DukeInvalidArgumentException("
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                    \"Null reference provided to task constructor\","
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                    \"\u003dX  OOPS!!! The timing for this task cannot be empty!\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        String[] splitTimings \u003d timing.split(\" to \");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        if (splitTimings.length !\u003d 2) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            throw new DukeInvalidArgumentException("
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                    \"Missing to delimiter in event task arguments\","
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                    \"\u003dX  OOPS!!! The format of the timing is invalid!\\n\""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                            + \" Enter your time with \\\"dd/MM/yyyy HHmm to HHmm\\\"\\n\""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                            + \"  or \\\"dd/MM/yyyy HHmm to dd/MM/yyyy HHmm\\\"\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        this.startDate \u003d TaskUtil.getDateFromString(splitTimings[0]);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            LocalTime endTime \u003d TaskUtil.getTimeFromString(splitTimings[1]);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            this.endDate \u003d this.startDate"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                    .plusHours(endTime.getHour() - this.startDate.getHour())"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                    .plusMinutes(endTime.getMinute() - this.startDate.getMinute());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        } catch (DukeInvalidArgumentException ex) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            //not a timing, but a date time."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            this.endDate \u003d TaskUtil.getDateFromString(splitTimings[1]);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        if (this.endDate.isBefore(this.startDate)) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            throw new DukeInvalidArgumentException("
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                    \"Invalid date format inputted by user\","
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                    \" \u003dX  OOPS!!! The second timing is not after the first one!\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ang-zeyu": 100
    }
  },
  {
    "path": "src/main/java/duke/task/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " * Abstraction of a task object."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "public abstract class Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    /** Whether the task is completed. */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    private boolean isDone;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    /** The input timing string as entered by the user. */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    private String timing;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    /** The description of the task. */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    String description;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    /** The TaskType enum value of the task. */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    TaskType taskType;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * Generic constructor for tasks with only a description."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * @param description The description input string of the task."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    Task(String description) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        this.timing \u003d null;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * Generic constructor for tasks with a timing and description."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * @param description The description input string of the task."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * @param timing The timing input string of the task."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    Task(String description, String timing) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        this(description);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        this.timing \u003d timing;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * Retrieves whether the task is completed."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * @return Bool of task completion status."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public boolean isDone() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        return isDone;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * Retrieves the appropriate unicode character for the done status."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * @return The respective unicode character."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    String getStatusIcon() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        return (isDone ? \"\\u2713\" : \"\\u2718\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * Retrieves the TaskType enum value of the task."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * @return The TaskType of the task."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public TaskType getTaskType() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        return taskType;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * Retrieves the description of the task."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * @return The description string."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        return this.description;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * Retrieves the input timing string entered by the user."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * @return The input timing string."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public String getTiming() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        return this.timing;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * Sets the done status of the task."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * @param done Boolean of the done status."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public void setDone(boolean done) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        this.isDone \u003d done;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * Abstraction of a method retrieving task type specific status strings."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * @return The task type specific status string."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public abstract String getStatusText();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ang-zeyu": 99
    }
  },
  {
    "path": "src/main/java/duke/task/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " * Abstraction of a in-memory list of tasks of the user."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    /** The array list of task objects used to back the TaskList. */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    private ArrayList\u003cTask\u003e tasks;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    /** The current number of tasks in the list. */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    private int size;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * Constructor of the task list."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * Initializes a new empty task list."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        this.tasks \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        this.size \u003d 0;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * Retrieves the underlying array list of tasks."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * @return The array list of tasks."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public ArrayList\u003cTask\u003e getAllTasks() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        return tasks;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * Retrieves the number of tasks."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * @return The number of tasks."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public int getSize() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        return size;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * Returns the task associated with the index."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * Essentially a wrapper around array list\u0027s get method."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * @param index The integer index."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * @return The associated task."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public Task getTaskByIndex(int index) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        return tasks.get(index);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * Deletes the task associated with the index."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * Also adjusts the task list size."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * Essentially a wrapper around array list\u0027s remove method."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * @param index The integer index."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * @return The associated deleted task."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public Task deleteTaskByIndex(int index) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        Task removedTask \u003d tasks.remove(index);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        size--;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        return removedTask;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * Adds the specified task to the task list."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * Also adjusts the task list size."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * Essentially a wrapper around array list\u0027s add method."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * @param task The task to add."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public void addTask(Task task) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        tasks.add(task);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        size++;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ang-zeyu": 78
    }
  },
  {
    "path": "src/main/java/duke/task/TaskType.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " * Set of possible types of tasks."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "public enum TaskType {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    TODO,"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    DEADLINE,"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    EVENT;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * Overrride implementation of toString that returns the lower case version."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * @return Lower case string representation of enum."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        return super.toString().toLowerCase();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ang-zeyu": 20
    }
  },
  {
    "path": "src/main/java/duke/task/TaskUtil.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import duke.command.DukeInvalidArgumentException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " * Class providing several utility methods for parsing and validating task data."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "public abstract class TaskUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    /** The required input date format to use. */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    private static final String DATE_FORMAT \u003d \"d/M/y HHmm\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    /** The required input time format to use. */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    private static final String TIME_FORMAT \u003d \"HHmm\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    /** The output format for displaying dates and times. */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    private static final String DISPLAY_FORMAT \u003d \"EEE, d MMM y h:mma\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    /** The dateTime formatter that uses the DATE_FORMAT pattern. */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    private static final DateTimeFormatter DATE_TIME_FORMATTER \u003d DateTimeFormatter.ofPattern(DATE_FORMAT);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    /** The dateTime formatter that uses the TIME_FORMAT pattern. */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    private static final DateTimeFormatter TIME_FORMATTER \u003d DateTimeFormatter.ofPattern(TIME_FORMAT);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    /** The dateTime formatter that uses the DISPLAY_FORMAT pattern. */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    private static final DateTimeFormatter DISPLAY_FORMATTER \u003d DateTimeFormatter.ofPattern(DISPLAY_FORMAT);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * Utility method for validating the input task description."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * @param description The input description string."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * @throws DukeInvalidArgumentException If the description is empty."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public static void validateTaskDescription(String description)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            throws DukeInvalidArgumentException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        if (description.length() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            throw new DukeInvalidArgumentException("
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                    \"User specified description of task is empty\","
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                    \" \u003dX  OOPS!!! The description of a task cannot be empty.\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * Method for parsing the input string using the dateFormatter."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * Returns the LocalDateTime representation of the string."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * @param dateString The input string."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * @return The localDateTime object."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * @throws DukeInvalidArgumentException If the input string format does not follow the pattern."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    static LocalDateTime getDateFromString(String dateString) throws DukeInvalidArgumentException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            return LocalDateTime.parse(dateString.trim(), DATE_TIME_FORMATTER);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        } catch (DateTimeParseException ex) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            throw new DukeInvalidArgumentException("
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                    \"Invalid date format inputted by user\","
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                    \" \u003dX  OOPS!!! The format of the timing is invalid!\\n\""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                            + \" Enter your time with \" + DATE_FORMAT);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * Method for parsing the input string using the timeFormatter."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * Returns the LocalTime representation of the string."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * @param timeString The input string."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * @return The LocalTime object."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * @throws DukeInvalidArgumentException If the input string format does not follow the pattern."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    static LocalTime getTimeFromString(String timeString) throws DukeInvalidArgumentException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            return LocalTime.parse(timeString.trim(), TIME_FORMATTER);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        } catch (DateTimeParseException ex) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            throw new DukeInvalidArgumentException("
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                    \"Invalid time format inputted by user\","
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                    \" \u003dX  OOPS!!! The format of the timing is invalid!\\n\""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                            + \" Enter your time with \" + TIME_FORMAT);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * Retrieves the string representation of the LocalDateTime object."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * Uses the displayFormatter and DISPLAY_FORMAT to format the string."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * @param dateTime The input LocalDateTime object."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * @return The string representation of the localDateTime."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    static String getDisplayTime(LocalDateTime dateTime) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        return DISPLAY_FORMATTER.format(dateTime);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ang-zeyu": 91
    }
  },
  {
    "path": "src/main/java/duke/task/TodoTask.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import duke.command.DukeInvalidArgumentException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " * Abstraction of a task representing a generic todo."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "public class TodoTask extends Task {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * Constructor of the todo task."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * Calls the generic task constructor and initializes its task type."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * @param description The task description string."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public TodoTask(String description) throws DukeInvalidArgumentException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        this.taskType \u003d TaskType.TODO;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        TaskUtil.validateTaskDescription(description);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * Method retrieving task type specific status strings."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * @return The task type specific status string."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public String getStatusText() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        return String.format(\"[T][%s] %s\", getStatusIcon(), this.description);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ang-zeyu": 29
    }
  },
  {
    "path": "src/main/java/duke/ui/DialogBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import javafx.scene.text.TextAlignment;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " * FXML abstraction of a dialogBox."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " * Consists of an ImageView to represent the user or duke\u0027s image and a label"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " * containing response from duke."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "class DialogBox extends HBox {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    /** JavaFX Label control containing the dialog message. */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    /** JavaFX ImageView control for displaying the user or duke\u0027s image. */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * Private constructor of dialog box for initialising the Label and"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * ImageView controls."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * @param text String dialog message for the Label control."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * @param image JavaFX Image for the ImageView control."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    private DialogBox(String text, Image image) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(this.getClass().getResource(\"/views/DialogBox.fxml\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        displayPicture.setImage(image);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * Flips the dialog box, such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        Collections.reverse(tmp);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        setAlignment(Pos.CENTER_LEFT);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        dialog.setAlignment(Pos.CENTER_LEFT);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        dialog.setTextAlignment(TextAlignment.LEFT);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * Utility method for creating a dialog from the user."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * @param text String dialog message from the user."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * @param image JavaFX image of user for the ImageView control."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * @return User DialogBox instance."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    static DialogBox getUserDialog(String text, Image image) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        return new DialogBox(text, image);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * Utility method for creating a dialog from duke."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * @param text String dialog message from duke."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * @param image JavaFX image of duke for the ImageView control."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * @return Duke DialogBox instance."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    static DialogBox getDukeDialog(String text, Image image) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        var db \u003d new DialogBox(text, image);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ang-zeyu": 87
    }
  },
  {
    "path": "src/main/java/duke/ui/DukeApplication.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import duke.Duke;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import javafx.stage.StageStyle;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " * A GUI for Duke using FXML."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " * Handles the initialisation logic for Duke\u0027s user interface."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "public class DukeApplication extends Application {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    /** Duke instance of this javafx duke application. */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    private Duke duke;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * JavaFX entry method of this duke application."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * Retrieves the mainWindow fxml file from the views folder then initialises it"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * and a Duke instance with it."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * @param stage Primary stage provided by JavaFX."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader("
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                    Duke.class.getResource(\"/views/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            Scene scene \u003d new Scene(fxmlLoader.load());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            duke \u003d new Duke(fxmlLoader.\u003cMainWindow\u003egetController());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().exitHandler \u003d"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                    (ActionEvent event) -\u003e stage.close();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ang-zeyu": 46
    }
  },
  {
    "path": "src/main/java/duke/ui/MainWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import duke.Duke;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import javafx.event.EventHandler;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " * Controller for MainWindow. Provides the layout for the other controls."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "public class MainWindow extends AnchorPane {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    /** Main scroll pane of dialogs of the window. */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    /** VBox container for dialog boxes in the scroll pane. */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    /** User input text field for receiving inputs. */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    /** Send button for sending input with mouse inputs. */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    /** Duke instance provided by DukeApplication\u0027s call to setDuke. */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    private Duke duke;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    /** JavaFX image representing the user to use for dialog boxes. */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    private Image userImage \u003d new Image("
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            this.getClass().getResourceAsStream(\"/images/DaUser.png\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    /** JavaFX image representing duke to use for dialog boxes. */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    private Image dukeImage \u003d new Image("
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    /** Exit handler for closing the main window. */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public EventHandler\u003cActionEvent\u003e exitHandler;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * JavaFX FXML method called after initialising this controller."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * Binds the scrollPane\u0027s vertical scroll position to the height"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * of the dialog container."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    private void initialize() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * Sets the instance of duke associated with this window."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * @param dukeInstance Instance of duke."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    void setDuke(Duke dukeInstance) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        duke \u003d dukeInstance;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * Creates one response dialog box displaying the input message."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * @param msg String message to display."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public void showMessage(String msg) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        dialogContainer.getChildren().add("
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                DialogBox.getDukeDialog(msg, dukeImage));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * and appends them to the dialog container."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * Clears the user input after processing."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        dialogContainer.getChildren().add("
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                DialogBox.getUserDialog(input, userImage));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        duke.processInput(input);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ang-zeyu": 86
    }
  },
  {
    "path": "src/main/resources/views/DialogBox.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "\u003cfx:root alignment\u003d\"CENTER_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" minHeight\u003d\"-Infinity\" minWidth\u003d\"400.0\" spacing\u003d\"10.0\" style\u003d\"-fx-background-color: #775238;\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        \u003cLabel fx:id\u003d\"dialog\" alignment\u003d\"CENTER_RIGHT\" focusTraversable\u003d\"false\" lineSpacing\u003d\"0.1\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefWidth\u003d\"500.0\" text\u003d\"Dummy text\" textAlignment\u003d\"RIGHT\" textFill\u003d\"#fdfdfd\" wrapText\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "         \u003cfont\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            \u003cFont name\u003d\"Arial\" size\u003d\"17.0\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "         \u003c/font\u003e\u003c/Label\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" style\u003d\"-fx-image-borders: 10.0;\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    \u003cpadding\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    \u003c/padding\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "ang-zeyu": 20
    }
  },
  {
    "path": "src/main/resources/views/MainWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"2880.0\" maxWidth\u003d\"1920.0\" minHeight\u003d\"600.0\" minWidth\u003d\"400.0\" prefHeight\u003d\"900.0\" prefWidth\u003d\"600.0\" style\u003d\"-fx-background-color: #353238;\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"duke.ui.MainWindow\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        \u003cTextField fx:id\u003d\"userInput\" maxWidth\u003d\"1920.0\" minWidth\u003d\"400.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"50.0\" prefWidth\u003d\"509.0\" AnchorPane.bottomAnchor\u003d\"1.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"90.39999999999998\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        \u003cButton id\u003d\"SendButton\" fx:id\u003d\"sendButton\" alignment\u003d\"CENTER\" layoutX\u003d\"510.0\" layoutY\u003d\"850.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"50.0\" prefWidth\u003d\"87.0\" stylesheets\u003d\"@../stylesheets/MainWindow.css\" text\u003d\"Send\" AnchorPane.bottomAnchor\u003d\"2.0\" AnchorPane.rightAnchor\u003d\"2.0\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "         \u003cfont\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            \u003cFont name\u003d\"Arial\" size\u003d\"16.0\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "         \u003c/font\u003e\u003c/Button\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        \u003cScrollPane fx:id\u003d\"scrollPane\" fitToHeight\u003d\"true\" fitToWidth\u003d\"true\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" maxHeight\u003d\"1.7976931348623157E308\" minHeight\u003d\"550.0\" minViewportHeight\u003d\"600.0\" minViewportWidth\u003d\"400.0\" minWidth\u003d\"400.0\" prefViewportHeight\u003d\"900.0\" prefViewportWidth\u003d\"600.0\" style\u003d\"-fx-border-style: solid; -fx-border-width: 3; -fx-border-color: #252323; -fx-background-color: #8e6040;\" vvalue\u003d\"1.0\" AnchorPane.bottomAnchor\u003d\"49.60000000000002\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            \u003ccontent\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                \u003cVBox fx:id\u003d\"dialogContainer\" maxHeight\u003d\"1.7976931348623157E308\" prefHeight\u003d\"99999.0\" spacing\u003d\"10.0\" style\u003d\"-fx-background-color: #8e6040;\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            \u003c/content\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "ang-zeyu": 23
    }
  },
  {
    "path": "src/test/java/duke/DukeUtilTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import java.util.stream.IntStream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "class DukeUtilTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    void concatEmptyArray() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        assertEquals("
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                \"\","
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                DukeUtil.concatStrings(new String[0], \" | \"));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    void concatArray() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        String[] testStringArray \u003d new String[] { \" a b c d | e f\\\\ g\", \" 1xf 0 9\", \"{[]}1|\" };"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        assertEquals("
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                \" a b c d | e f\\\\ g\\\\|*  1xf 0 9\\\\|* {[]}1|\","
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                DukeUtil.concatStrings(testStringArray, \"\\\\|* \"));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    void getIndexOfPatternInEmptyArray() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        assertEquals("
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                -1,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                DukeUtil.getIndexOfPattern(new String[0], \"abc\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    void getIndexOfPattern() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        String[] testPrimeStringStream \u003d IntStream"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                .range(2, 30)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                .filter(x -\u003e IntStream"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                    .range(2, x)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                    .noneMatch(y -\u003e (double) x / (double) y \u003d\u003d  x / y))"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                .mapToObj(primeNum -\u003e primeNum + \"\")"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                .toArray(size -\u003e new String[15]);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        //2, 3, 5, 7, 11..."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        assertEquals("
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                3,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                DukeUtil.getIndexOfPattern(testPrimeStringStream, \"7\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ang-zeyu": 47
    }
  },
  {
    "path": "src/test/java/duke/TestUtils.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " * Collection of methods and constants used in testing."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "public interface TestUtils {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * Generates a random string of length 0 to maxChars."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * Characters generated are from 33 - 126 in the ASCII table."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * @param minChars Minimum length of string to generate."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * @param maxChars Maximum length of string to generate."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * @return Random string generated."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    static String generateRandomString(int minChars, int maxChars) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        final int minAsciiChar \u003d 33;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        final int maxAsciiChar \u003d 126;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        if (maxChars \u003c 0) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            throw new IllegalArgumentException("
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                    \"argument to generateRandomString cannot be negative.\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        int length \u003d (int) (Math.random() * (maxChars - minChars)) + minChars;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        StringBuilder string \u003d new StringBuilder(length);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        for (int i \u003d 0; i \u003c length; i++) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            string.append("
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                    (char) ("
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                            Math.random() * (maxAsciiChar - minAsciiChar)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                            + minAsciiChar));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        return string.toString();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ang-zeyu": 37
    }
  },
  {
    "path": "src/test/java/duke/command/ByeCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import duke.ui.MainWindowStub;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "class ByeCommandTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    void execute_validArguments_success() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        MainWindowStub windowStub \u003d new MainWindowStub();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        ByeCommand byeCommand \u003d new ByeCommand(new String[0]);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        assertDoesNotThrow(() -\u003e byeCommand.execute(null, windowStub, null));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        assertEquals(windowStub.getMessages(), \"Bye. Hope to see you again soon!\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    void execute_invalidArguments_throwsDukeInvalidArgumentException() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        ByeCommand byeCommand \u003d new ByeCommand(new String[1]);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        assertThrows(DukeInvalidArgumentException.class,"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                () -\u003e byeCommand.execute(null, null, null));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ang-zeyu": 26
    }
  },
  {
    "path": "src/test/java/duke/command/CommandParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import static org.junit.jupiter.api.DynamicTest.dynamicTest;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import duke.TestUtils;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import org.junit.jupiter.api.DynamicTest;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import org.junit.jupiter.api.TestFactory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "class CommandParserTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    @TestFactory"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    Stream\u003cDynamicTest\u003e parseCommand_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        return Arrays.stream(Commands.values())"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                .map(commandType -\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                        dynamicTest("
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                                String.format("
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                                        \"%s dynamic test 1\","
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                                        commandType.toString()),"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                                () -\u003e CommandParser.parseCommand(commandType.toString())));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    @TestFactory"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    Stream\u003cDynamicTest\u003e parseCommand_success_trailing_random() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        return Arrays.stream(Commands.values())"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                .map(commandType -\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                        dynamicTest("
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                                String.format("
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                                        \"%s dynamic test 2\","
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                                        commandType.toString()),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                                () -\u003e CommandParser.parseCommand("
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                                        commandType.toString()"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                                                + \" \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                                                + TestUtils.generateRandomString(0, 20))));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    @TestFactory"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    Stream\u003cDynamicTest\u003e parseCommand_invalid_leading_whitespace() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        return Arrays.stream(Commands.values())"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                .map(commandType -\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                        dynamicTest("
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                                String.format("
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                                        \"%s dynamic test 1\","
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                                        commandType.toString()),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                                () -\u003e assertThrows("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                                        DukeInvalidCommandException.class,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                                        () -\u003e CommandParser.parseCommand("
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                                                \" \" + commandType.toString()))));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ang-zeyu": 54
    }
  },
  {
    "path": "src/test/java/duke/command/CommandStub.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import duke.ui.MainWindow;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "class CommandStub extends Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    boolean didRun \u003d false;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    boolean didValidate \u003d false;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    CommandStub(String[] commandArgs) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        super(commandArgs);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    void run(TaskList tasks, MainWindow ui, Storage storage) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        didRun \u003d true;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    void validate(TaskList tasks, MainWindow ui, Storage storage) throws DukeInvalidArgumentException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        didValidate \u003d true;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ang-zeyu": 25
    }
  },
  {
    "path": "src/test/java/duke/command/CommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "class CommandTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    void execute() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        String[] testCommandArgs \u003d new String[] { \"1\", \"abc\", \"3\"};"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        CommandStub commandStub \u003d new CommandStub(testCommandArgs);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        assertFalse(commandStub.didValidate);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        assertFalse(commandStub.didRun);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        assertDoesNotThrow(() -\u003e commandStub.execute(null, null, null));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        assertTrue(commandStub.didValidate);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        assertTrue(commandStub.didRun);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        //commandArgs should be set"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        assertEquals(testCommandArgs, commandStub.commandArgs);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ang-zeyu": 28
    }
  },
  {
    "path": "src/test/java/duke/command/DeleteCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import duke.task.TaskStub;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import duke.ui.MainWindowStub;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "class DeleteCommandTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    void run_validIndex_taskDeleted() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand("
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                new String[] {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                        \"1\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                });"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        MainWindowStub windowStub \u003d new MainWindowStub();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        TaskList testTasks \u003d new TaskList();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        testTasks.addTask(new TaskStub());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        assertEquals(1, testTasks.getSize());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        deleteCommand.run(testTasks, windowStub, null);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        assertEquals(0, testTasks.getSize());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        assertTrue(windowStub.getMessages().contains(\"Noted. I\u0027ve removed this task:\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    void validate_invalidIndex_throwsDukeInvalidArgumentException() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand("
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                new String[] {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                        \"11\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                });"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        DeleteCommand deleteCommand2 \u003d new DeleteCommand("
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                new String[] {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                        \"Nan\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                });"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        TaskList testTasks \u003d new TaskList();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        testTasks.addTask(new TaskStub());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        assertThrows(DukeInvalidArgumentException.class,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                () -\u003e deleteCommand.validate(testTasks, null, null));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        assertThrows(DukeInvalidArgumentException.class,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                () -\u003e deleteCommand2.validate(testTasks, null, null));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ang-zeyu": 49
    }
  },
  {
    "path": "src/test/java/duke/command/FindCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import duke.TestUtils;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import duke.task.TaskStub;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import duke.ui.MainWindowStub;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import java.util.stream.IntStream;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "class FindCommandTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    void execute_randomSearchPattern_patternFound() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        String findCommandPrefix \u003d \"find \";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        String[] testCases \u003d new String[100];"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        TaskList testTaskList \u003d new TaskList();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        IntStream.rangeClosed(0, 99)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                .forEach(maxChar -\u003e {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                    testCases[maxChar] \u003d TestUtils.generateRandomString(2, maxChar);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                    testTaskList.addTask(new TaskStub(testCases[maxChar], \"\"));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                });"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        Arrays.stream(testCases)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                .forEach(description -\u003e {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                    MainWindowStub windowStub \u003d new MainWindowStub();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                    FindCommand findCommand \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                            new FindCommand(findCommandPrefix + description, new String[0]);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                    assertDoesNotThrow("
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                            () -\u003e findCommand.execute(testTaskList, windowStub, null));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                    assertTrue(windowStub.getMessages().contains(description));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                });"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ang-zeyu": 39
    }
  },
  {
    "path": "src/test/java/duke/command/ListCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import duke.TestUtils;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import duke.task.TaskStub;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import duke.ui.MainWindowStub;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "class ListCommandTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    void execute_validArguments_success() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        MainWindowStub windowStub \u003d new MainWindowStub();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        TaskList testTasks \u003d new TaskList();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        TaskStub testTaskStub \u003d new TaskStub(TestUtils.generateRandomString(10,20), \"\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        testTasks.addTask(testTaskStub);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        ListCommand listCommand \u003d new ListCommand(new String[0]);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        assertDoesNotThrow(() -\u003e listCommand.execute(testTasks, windowStub, null));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        assertTrue(windowStub.getMessages().contains(testTaskStub.getStatusText()));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    void execute_invalidArguments_throwsDukeInvalidArgumentException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        ListCommand listCommand \u003d new ListCommand(new String[1]);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        assertThrows(DukeInvalidArgumentException.class,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                () -\u003e listCommand.execute(null, null, null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ang-zeyu": 32
    }
  },
  {
    "path": "src/test/java/duke/storage/StorageParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "package duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import java.util.EnumMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertAll;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "class StorageParserTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    void parseJsonLine() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        final String testCase1 \u003d \"{ type: deadline, done: false, description: 2103ip, time: 01/12/1997 0000 }\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        Map\u003cStorageKey, String\u003e testCase1Expected \u003d new EnumMap\u003cStorageKey, String\u003e(StorageKey.class);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        testCase1Expected.put(StorageKey.TYPE, \"deadline\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        testCase1Expected.put(StorageKey.DONE, \"false\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        testCase1Expected.put(StorageKey.DESCRIPTION, \"2103ip\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        testCase1Expected.put(StorageKey.TIME, \"01/12/1997 0000\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        final String testCase2 \u003d \"{ type: todo, done: true, description: --129n8sk }\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        Map\u003cStorageKey, String\u003e testCase2Expected \u003d new EnumMap\u003cStorageKey, String\u003e(StorageKey.class);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        testCase2Expected.put(StorageKey.TYPE, \"todo\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        testCase2Expected.put(StorageKey.DONE, \"true\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        testCase2Expected.put(StorageKey.DESCRIPTION, \"--129n8sk\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        final String testCase3 \u003d \"}\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        final String testCase4 \u003d \"{ type: todo, invalidkey: true, description: placeholder description }\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        final String testCase5 \u003d \"{ type: todo, done: true, description: --129n8sk\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        assertAll(\"Valid Inputs\","
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                () -\u003e parseJsonLine_success(testCase1, testCase1Expected),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                () -\u003e parseJsonLine_success(testCase2, testCase2Expected));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        assertAll(\"Invalid Inputs\","
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                () -\u003e parseJsonLine_dukeTaskFileParseException_thrown(testCase3),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                () -\u003e parseJsonLine_dukeTaskFileParseException_thrown(testCase4),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                () -\u003e parseJsonLine_dukeTaskFileParseException_thrown(testCase5));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    private void parseJsonLine_success(String jsonLine, Map\u003cStorageKey, String\u003e expectedOutput)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        throws DukeTaskFileParseException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        assertEquals("
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                expectedOutput,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                StorageParser.parseJsonLine(jsonLine));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    private void parseJsonLine_dukeTaskFileParseException_thrown(String jsonLine) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        assertThrows("
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                DukeTaskFileParseException.class,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                () -\u003e StorageParser.parseJsonLine(jsonLine));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ang-zeyu": 55
    }
  },
  {
    "path": "src/test/java/duke/storage/StorageTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "package duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import duke.ui.MainWindowStub;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import org.junit.jupiter.api.BeforeAll;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "class StorageTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    //randomly generated uuid to ensure it is conflict free"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    private static final String TEST_DIR_NAME \u003d \"c1834a65-3269-45d1-815b-3ae7130a6980\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    private static final String TRUNCATED_TEST_DIR \u003d"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            TEST_DIR_NAME.substring(0, TEST_DIR_NAME.length() - 1);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    private static String originalWorkingDirectory;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    static Path testTempDir;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    @BeforeAll"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    static void setUpTestDirectory() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        originalWorkingDirectory \u003d System.getProperty(\"user.dir\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            Path path \u003d testTempDir;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            System.out.println(path.toString());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            for (int i \u003d 0; i \u003c\u003d 3; i++) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                path \u003d path.resolve(TRUNCATED_TEST_DIR + i);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                Files.createDirectory(path);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            System.setProperty(\"user.dir\", path.toString());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        } catch (IOException ex) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            fail(ex.getMessage());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    void setFilePath_dirExists_dirNotCreated() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        assertDoesNotThrow(() -\u003e new Storage(TEST_DIR_NAME, null));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        Path dirCreated \u003d Paths.get(System.getProperty(\"user.dir\"), TEST_DIR_NAME);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        if (Files.isDirectory(dirCreated)) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            fail(\"Fallback directory created when not required by Storage.\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    void setFilePath_fallbackDirNotExists_dirCreated() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        final String FALLBACK_DIR_NAME \u003d ((Double) Math.random()).toString();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        assertDoesNotThrow(() -\u003e new Storage(FALLBACK_DIR_NAME, null));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        Path dirCreated \u003d Paths.get(System.getProperty(\"user.dir\"), FALLBACK_DIR_NAME);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        if (!Files.isDirectory(dirCreated)) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            fail(\"Fallback directory creation for Storage failed.\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    void setFilePath_fallbackDirNameInvalid_dirCreationFail() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        final String INVALID_DIR_NAME \u003d Paths.get(\"anInvalid\",\"dirName\").toString();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        MainWindowStub outputUi \u003d new MainWindowStub();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        new Storage(INVALID_DIR_NAME, outputUi);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        assertTrue(outputUi.getMessages().contains("
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                String.format(\" \u003dX  Oops! I failed to find a %s directory upwards\\n\", INVALID_DIR_NAME)));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    void loadTasksToList_validatedTaskCases_loadSuccess() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        TaskList listOfTasks \u003d new TaskList(); // implementation is simple enough."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        final String TEST_TASK_CASE_1 \u003d"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                \"{ type: deadline, done: false, description: 2103ip, time: 01/12/1997 0000 }\";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        final String TEST_TASK_CASE_2 \u003d \"{ type: todo, done: true, description: --129n8sk }\";"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            File testFile \u003d Files.createFile("
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                    Paths.get("
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                        testTempDir.toString(),"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                        TEST_DIR_NAME,"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                        \"taskData.txt\"))"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                    .toFile();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            FileWriter fileWriter \u003d new FileWriter(testFile);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            fileWriter.write(TEST_TASK_CASE_1 + \"\\n\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            fileWriter.write(TEST_TASK_CASE_2);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            fileWriter.close();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            Storage storage \u003d new Storage(TEST_DIR_NAME, null);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            storage.loadTasksToList(listOfTasks);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            assertEquals(2, listOfTasks.getSize());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        } catch (IOException ex) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            fail(\"IOException encountered when trying to create loadTasksToList test files.\\n\""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                    + ex.getMessage());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    void loadTasksToList_invalidTaskCases_uiErrorMsg() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        TaskList listOfTasks \u003d new TaskList(); // implementation is simple enough."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        MainWindowStub outputUi \u003d new MainWindowStub();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        final String TEST_TASK_CASE_INVALID_ARGUMENT \u003d"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                \"{ type: unknown, done: false, description: 2103ip, time: 01/12/1997 0000 }\";"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            File testFile \u003d Files.createFile("
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                    Paths.get("
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                            testTempDir.toString(),"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                            TEST_DIR_NAME,"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                            TRUNCATED_TEST_DIR + \"1\","
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                            \"taskData.txt\"))"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                    .toFile();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            FileWriter fileWriter \u003d new FileWriter(testFile);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            fileWriter.write(TEST_TASK_CASE_INVALID_ARGUMENT);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            fileWriter.close();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            Storage storage \u003d new Storage(TRUNCATED_TEST_DIR + \"1\", outputUi);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            storage.loadTasksToList(listOfTasks);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            assertEquals(0, listOfTasks.getSize());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            assertTrue(outputUi.getMessages().contains("
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                    \" \u003dX  Oops! I encountered an invalid task type value while\\n\"));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        } catch (IOException ex) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            fail(\"IOException encountered when trying to create loadTasksToList test files.\\n\""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                    + ex.getMessage());"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    static void cleanUpTestDirectory() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        System.setProperty(\"user.dir\", originalWorkingDirectory);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            Files.walk(Paths.get(originalWorkingDirectory, TEST_DIR_NAME))"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                    .sorted(Comparator.reverseOrder())"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                    .forEach("
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                            pathToDelete -\u003e {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                                try {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                                    Files.delete(pathToDelete);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                                } catch (IOException ex) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                                    fail(\"Failed to clean test directory for StorageTest.\""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                                            + ex.getMessage());"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                                }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                            });"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        } catch (IOException ex) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            fail(\"Failed to clean test directory for StorageTest.\\n\""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                    + ex.getMessage());"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ang-zeyu": 166
    }
  },
  {
    "path": "src/test/java/duke/task/DeadlineTaskTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import duke.command.DukeInvalidArgumentException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertAll;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "class DeadlineTaskTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    void deadlineTaskConstructor_invalidDescriptionCallsValidate_throwsDukeInvalidArgumentException() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        assertThrows(DukeInvalidArgumentException.class,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                () -\u003e new DeadlineTask("
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                        TaskTestConstants.INVALID_DESCRIPTION_1,"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                        TaskTestConstants.VALID_DATE_1));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    void deadlineTaskConstructor_invalidDatetimeCallsValidate_throwsDukeInvalidArgumentException() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        assertAll(\"Invalid date times\","
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                () -\u003e assertThrows("
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                        DukeInvalidArgumentException.class,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                        () -\u003e new DeadlineTask("
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                                TaskTestConstants.VALID_DESCRIPTION_1,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                                TaskTestConstants.INVALID_DATE_1)),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                () -\u003e assertThrows("
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                        DukeInvalidArgumentException.class,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                        () -\u003e new DeadlineTask("
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                                TaskTestConstants.VALID_DESCRIPTION_1,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                                TaskTestConstants.INVALID_DATE_2)),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                () -\u003e assertThrows("
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                        DukeInvalidArgumentException.class,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                        () -\u003e new DeadlineTask("
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                                TaskTestConstants.VALID_DESCRIPTION_1,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                                TaskTestConstants.INVALID_DATE_3)));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    void deadlineTaskConstructor_validDatetime_success() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        assertAll(\"Valid date times\","
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                () -\u003e new DeadlineTask("
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                        TaskTestConstants.VALID_DESCRIPTION_1,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                        TaskTestConstants.VALID_DATE_1),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                () -\u003e new DeadlineTask("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                        TaskTestConstants.VALID_DESCRIPTION_1,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                        TaskTestConstants.VALID_DATE_2),"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                () -\u003e new DeadlineTask("
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                        TaskTestConstants.VALID_DESCRIPTION_1,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                        TaskTestConstants.VALID_DATE_3),"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                () -\u003e new DeadlineTask("
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                        TaskTestConstants.VALID_DESCRIPTION_1,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                        TaskTestConstants.VALID_DATE_4));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    void getTaskType() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        assertDoesNotThrow(() -\u003e {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            DeadlineTask deadline \u003d new DeadlineTask("
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                    TaskTestConstants.VALID_DESCRIPTION_1,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                    TaskTestConstants.VALID_DATE_2);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            assertEquals(TaskType.DEADLINE, deadline.getTaskType());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        });"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    void getTiming() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        assertDoesNotThrow(() -\u003e {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            DeadlineTask deadline \u003d new DeadlineTask("
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                    TaskTestConstants.VALID_DESCRIPTION_1,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                    TaskTestConstants.VALID_DATE_3);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            assertEquals("
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                    TaskTestConstants.VALID_DATE_3,"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                    deadline.getTiming());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        });"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    void getDescription() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        assertDoesNotThrow(() -\u003e {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            DeadlineTask deadline \u003d new DeadlineTask("
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                    TaskTestConstants.VALID_DESCRIPTION_1,"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                    TaskTestConstants.VALID_DATE_4);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            assertEquals(TaskTestConstants.VALID_DESCRIPTION_1, deadline.getDescription());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        });"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    void doneStatusDependentTest() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        //tests isDone, getStatusIcon, getStatusText, and setDone"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        assertDoesNotThrow(() -\u003e {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            DeadlineTask deadline \u003d new DeadlineTask("
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                    TaskTestConstants.VALID_DESCRIPTION_1,"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                    TaskTestConstants.VALID_DATE_1);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            assertFalse(deadline.isDone());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            assertEquals(\"\\u2718\", deadline.getStatusIcon());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            assertEquals("
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                    String.format(\"[D][\\u2718] %s (by: %s)\","
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                            TaskTestConstants.VALID_DESCRIPTION_1,"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                            TaskUtil.getDisplayTime("
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                                    TaskUtil.getDateFromString("
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                                            TaskTestConstants.VALID_DATE_1))),"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                    deadline.getStatusText());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            deadline.setDone(true);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            assertTrue(deadline.isDone());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            assertEquals(\"\\u2713\", deadline.getStatusIcon());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            assertEquals("
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                    String.format(\"[D][\\u2713] %s (by: %s)\","
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                            TaskTestConstants.VALID_DESCRIPTION_1,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                            TaskUtil.getDisplayTime("
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                                    TaskUtil.getDateFromString("
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                                            TaskTestConstants.VALID_DATE_1))),"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                    deadline.getStatusText());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        });"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ang-zeyu": 123
    }
  },
  {
    "path": "src/test/java/duke/task/EventTaskTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import duke.command.DukeInvalidArgumentException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertAll;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "class EventTaskTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    void eventTaskConstructor_invalidDescriptionCallsValidate_throwsDukeInvalidArgumentException() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        assertThrows(DukeInvalidArgumentException.class,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                () -\u003e new EventTask("
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                        TaskTestConstants.INVALID_DESCRIPTION_1,"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                        TaskTestConstants.VALID_PERIOD_1));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    void eventTaskConstructor_invalidPeriodCallsValidate_throwsDukeInvalidArgumentException() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        assertAll(\"Invalid periods\","
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                () -\u003e assertThrows("
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                        DukeInvalidArgumentException.class,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                        () -\u003e new EventTask("
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                                TaskTestConstants.VALID_DESCRIPTION_1,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                                TaskTestConstants.INVALID_PERIOD_1)),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                () -\u003e assertThrows("
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                        DukeInvalidArgumentException.class,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                        () -\u003e new EventTask("
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                                TaskTestConstants.VALID_DESCRIPTION_1,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                                TaskTestConstants.INVALID_PERIOD_2)),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                () -\u003e assertThrows("
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                        DukeInvalidArgumentException.class,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                        () -\u003e new EventTask("
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                                TaskTestConstants.VALID_DESCRIPTION_1,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                                TaskTestConstants.INVALID_PERIOD_3)));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    void eventTaskConstructor_validPeriods_success() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        assertAll(\"Valid periods\","
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                () -\u003e new EventTask("
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                        TaskTestConstants.VALID_DESCRIPTION_1,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                        TaskTestConstants.VALID_PERIOD_1),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                () -\u003e new EventTask("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                        TaskTestConstants.VALID_DESCRIPTION_1,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                        TaskTestConstants.VALID_PERIOD_2),"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                () -\u003e new EventTask("
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                        TaskTestConstants.VALID_DESCRIPTION_1,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                        TaskTestConstants.VALID_PERIOD_3),"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                () -\u003e new EventTask("
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                        TaskTestConstants.VALID_DESCRIPTION_1,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                        TaskTestConstants.VALID_PERIOD_4));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    void getTaskType() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        assertDoesNotThrow(() -\u003e {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            EventTask event \u003d new EventTask(TaskTestConstants.VALID_DESCRIPTION_1,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                    TaskTestConstants.VALID_PERIOD_2);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            assertEquals(TaskType.EVENT, event.getTaskType());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        });"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    void getTiming() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        assertDoesNotThrow(() -\u003e {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            EventTask event \u003d new EventTask(TaskTestConstants.VALID_DESCRIPTION_1,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                    TaskTestConstants.VALID_PERIOD_3);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            assertEquals("
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                    TaskTestConstants.VALID_PERIOD_3,"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                    event.getTiming());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        });"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    void getDescription() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        assertDoesNotThrow(() -\u003e {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            EventTask event \u003d new EventTask(TaskTestConstants.VALID_DESCRIPTION_1,"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                    TaskTestConstants.VALID_PERIOD_4);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            assertEquals(TaskTestConstants.VALID_DESCRIPTION_1, event.getDescription());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        });"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    void doneStatusDependentTest() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        //tests isDone, getStatusIcon, getStatusText, and setDone"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        assertDoesNotThrow(() -\u003e {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            EventTask event \u003d new EventTask(TaskTestConstants.VALID_DESCRIPTION_1,"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                    TaskTestConstants.VALID_PERIOD_4);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            String[] splitTimings \u003d TaskTestConstants.VALID_PERIOD_4.split(\" to \");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            String startDate \u003d splitTimings[0];"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            String endDate \u003d splitTimings[1];"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            assertFalse(event.isDone());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            assertEquals(\"\\u2718\", event.getStatusIcon());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            assertEquals("
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                    String.format(\"[E][\\u2718] %s (at: %s)\","
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                            TaskTestConstants.VALID_DESCRIPTION_1,"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                            TaskUtil.getDisplayTime(TaskUtil.getDateFromString(startDate))"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                                    + \" to \""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                                    + TaskUtil.getDisplayTime("
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                                            TaskUtil.getDateFromString(endDate))),"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                    event.getStatusText());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            event.setDone(true);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            assertTrue(event.isDone());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            assertEquals(\"\\u2713\", event.getStatusIcon());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            assertEquals("
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                    String.format(\"[E][\\u2713] %s (at: %s)\","
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                            TaskTestConstants.VALID_DESCRIPTION_1,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                            TaskUtil.getDisplayTime(TaskUtil.getDateFromString(startDate))"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                                    + \" to \""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                                    + TaskUtil.getDisplayTime("
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                                            TaskUtil.getDateFromString(endDate))),"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                    event.getStatusText());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        });"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ang-zeyu": 125
    }
  },
  {
    "path": "src/test/java/duke/task/TaskListTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertAll;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "class TaskListTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    //group of tests dependent on their order of execution that must be grouped"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    //tests various methods of the TaskList abstraction"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    void dependentTaskOperationstest() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        assertAll(\"Task List Operations\","
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                () -\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                    TaskList taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                    assertEquals(0, taskList.getSize());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                    assertThrows(IndexOutOfBoundsException.class,"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                            () -\u003e taskList.getTaskByIndex(0));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                    assertThrows(IndexOutOfBoundsException.class,"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                            () -\u003e taskList.deleteTaskByIndex(0));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                    taskList.addTask(new TaskStub());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                    assertEquals(1, taskList.getSize());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                    assertEquals(1, taskList.getAllTasks().size());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                    taskList.getTaskByIndex(0);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                    taskList.deleteTaskByIndex(0);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                    assertEquals(0, taskList.getSize());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                    assertThrows(IndexOutOfBoundsException.class,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                            () -\u003e taskList.getTaskByIndex(0));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                    assertThrows(IndexOutOfBoundsException.class,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                            () -\u003e taskList.deleteTaskByIndex(0));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                });"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ang-zeyu": 38
    }
  },
  {
    "path": "src/test/java/duke/task/TaskStub.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "public class TaskStub extends Task {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public TaskStub() {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        super(\"a stub\", \"01/08/2019 0000\");"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        this.taskType \u003d TaskType.TODO;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public TaskStub(String description, String timing) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        super(description, timing);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        this.taskType \u003d TaskType.TODO;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public String getStatusText() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        return String.format(\"[Stub][%s] %s\", getStatusIcon(), this.description);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ang-zeyu": 20
    }
  },
  {
    "path": "src/test/java/duke/task/TaskTestConstants.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "//Interface housing public static final constants for testing"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "interface TaskTestConstants {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    String VALID_DATE_1 \u003d \"01/01/1997 0000\";"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    String VALID_DATE_2 \u003d \" 01/01/1997 0003   \";"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    String VALID_DATE_3 \u003d \"2/12/2019 1900\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    String VALID_DATE_4 \u003d \"8/8/2000 2000\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    String INVALID_DATE_1 \u003d \"1/Jan/1997 1200\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    String INVALID_DATE_2 \u003d \"\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    String INVALID_DATE_3 \u003d \"01/01/1997      1200\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    String VALID_TIME_1 \u003d \"0000\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    String VALID_TIME_2 \u003d \"  0120  \";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    String INVALID_TIME_1 \u003d \"01 20\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    String INVALID_TIME_2 \u003d \"130am\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    String INVALID_TIME_3 \u003d VALID_DATE_1;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    //double check it is valid if valid date \u0026 time constants are changed"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    String VALID_PERIOD_1 \u003d \"01/01/1997 1000 to 1100\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    String VALID_PERIOD_2 \u003d \"10/10/2000 0900 to 1500\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    String VALID_PERIOD_3 \u003d \"1/1/1997 1000 to 1/1/2019 0900\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    String VALID_PERIOD_4 \u003d \"9/9/2016 1200 to 25/10/2016 1200\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    //format invalid"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    String INVALID_PERIOD_1 \u003d \"1-1-1997 1200 to 10/10/2000 2000\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    //timing invalid"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    String INVALID_PERIOD_2 \u003d \"01/01/1997 1000 to 0900\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    String INVALID_PERIOD_3 \u003d \"02/01/1997 1000 to 1/1/1997 1100\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    String VALID_DESCRIPTION_1 \u003d \"just some description\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    String INVALID_DESCRIPTION_1 \u003d \"\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ang-zeyu": 33
    }
  },
  {
    "path": "src/test/java/duke/task/TaskUtilTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import duke.command.DukeInvalidArgumentException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertAll;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "class TaskUtilTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    void getDateFromString() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        assertAll(\"Valid\","
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                () -\u003e TaskUtil.getDateFromString(TaskTestConstants.VALID_DATE_1),"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                () -\u003e TaskUtil.getDateFromString(TaskTestConstants.VALID_DATE_2),"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                () -\u003e TaskUtil.getDateFromString(TaskTestConstants.VALID_DATE_3),"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                () -\u003e TaskUtil.getDateFromString(TaskTestConstants.VALID_DATE_4));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        assertAll(\"Invalid\","
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                () -\u003e assertThrows("
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                        DukeInvalidArgumentException.class,"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                        () -\u003e TaskUtil.getDateFromString(TaskTestConstants.INVALID_DATE_1)),"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                () -\u003e assertThrows("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                        DukeInvalidArgumentException.class,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                        () -\u003e TaskUtil.getDateFromString(TaskTestConstants.INVALID_DATE_2)),"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                () -\u003e assertThrows("
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                        DukeInvalidArgumentException.class,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                        () -\u003e TaskUtil.getDateFromString(TaskTestConstants.INVALID_DATE_3)));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    void getTimeFromString() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        assertAll(\"Valid\","
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                () -\u003e TaskUtil.getTimeFromString(TaskTestConstants.VALID_TIME_1),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                () -\u003e TaskUtil.getTimeFromString(TaskTestConstants.VALID_TIME_2));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        assertAll(\"Invalid\","
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                () -\u003e assertThrows("
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                        DukeInvalidArgumentException.class,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                        () -\u003e TaskUtil.getTimeFromString(TaskTestConstants.INVALID_TIME_1)),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                () -\u003e assertThrows("
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                        DukeInvalidArgumentException.class,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                        () -\u003e TaskUtil.getTimeFromString(TaskTestConstants.INVALID_TIME_2)),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                () -\u003e assertThrows("
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                        DukeInvalidArgumentException.class,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                        () -\u003e TaskUtil.getTimeFromString(TaskTestConstants.INVALID_TIME_3)));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    void validateTaskDescription() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        assertThrows(DukeInvalidArgumentException.class,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                () -\u003e TaskUtil.validateTaskDescription(TaskTestConstants.INVALID_DESCRIPTION_1));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ang-zeyu": 55
    }
  },
  {
    "path": "src/test/java/duke/task/TodoTaskTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import duke.command.DukeInvalidArgumentException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNull;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "class TodoTaskTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    void todoTaskConstructor_invalidDescriptionCallsValidate_throwsDukeInvalidArgumentException() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        assertThrows(DukeInvalidArgumentException.class,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                () -\u003e new TodoTask(TaskTestConstants.INVALID_DESCRIPTION_1));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    void getTaskType() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        assertDoesNotThrow(() -\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            TodoTask todo \u003d new TodoTask(TaskTestConstants.VALID_DESCRIPTION_1);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            assertEquals(TaskType.TODO, todo.getTaskType());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        });"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    void getTiming() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        assertDoesNotThrow(() -\u003e {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            TodoTask todo \u003d new TodoTask(TaskTestConstants.VALID_DESCRIPTION_1);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            assertNull(todo.getTiming());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        });"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    void getDescription() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        assertDoesNotThrow(() -\u003e {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            TodoTask todo \u003d new TodoTask(TaskTestConstants.VALID_DESCRIPTION_1);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            assertEquals(TaskTestConstants.VALID_DESCRIPTION_1, todo.getDescription());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        });"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    void doneStatusDependentTest() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        //tests isDone, getStatusIcon, getStatusText, and setDone"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        assertDoesNotThrow(() -\u003e {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            TodoTask todo \u003d new TodoTask(TaskTestConstants.VALID_DESCRIPTION_1);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            assertFalse(todo.isDone());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            assertEquals(\"\\u2718\", todo.getStatusIcon());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            assertEquals("
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                    String.format(\"[T][\\u2718] %s\", TaskTestConstants.VALID_DESCRIPTION_1),"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                    todo.getStatusText());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            todo.setDone(true);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            assertTrue(todo.isDone());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            assertEquals(\"\\u2713\", todo.getStatusIcon());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            assertEquals("
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                    String.format(\"[T][\\u2713] %s\", TaskTestConstants.VALID_DESCRIPTION_1),"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                    todo.getStatusText());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        });"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ang-zeyu": 67
    }
  },
  {
    "path": "src/test/java/duke/ui/MainWindowStub.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "//Custom MainWindow stub class for comparing output messages where MainWindow is used."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "public class MainWindowStub extends MainWindow {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    private StringBuilder messageShown;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public MainWindowStub() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        this.messageShown \u003d new StringBuilder();"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public void showMessage(String message) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        messageShown.append(message);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public String getMessages() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        return messageShown.toString();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ang-zeyu": 19
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "list list list"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "a very invalid command"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "bye bye"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "done 1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "event /at 2359"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "deadline /by sunday 2359"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "deadline submit report /by"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "event tutorial /at"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "event tutorial /at Mon 2-4pm"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "deadline submit report /by Fri 2359"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "todo"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "todo just a todo"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "list"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "done 2"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "todo another todo"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "event cs2103 lecture /at Fri 4-6pm"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "list"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "done 100"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "list"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "done 1"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "delete 2"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "list"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "delete 4"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "delete 10"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "list"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "ang-zeyu": 26
    }
  },
  {
    "path": "text-ui-test/runtest.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "#!/usr/bin/env bash"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "# create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "if [ ! -d \"../bin\" ]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "then"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    mkdir ../bin"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "fi"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "# delete output from previous run"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "if [ -e \"./ACTUAL.TXT\" ]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "then"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    rm ACTUAL.TXT"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "fi"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "# compile the code into the bin folder, terminates if error occurred"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "if ! javac -cp ../src/main/java -Xlint:none -d ../bin ../src/main/java/**/*.java"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "then"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    echo \"********** BUILD FAILURE **********\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "fi"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "java -classpath ../bin duke/Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "# compare the output to the expected output"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "diff ACTUAL.TXT EXPECTED.TXT"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "if [ $? -eq 0 ]"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "then"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    echo \"Test result: PASSED\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    exit 0"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "else"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    echo \"Test result: FAILED\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "fi"
      }
    ],
    "authorContributionMap": {
      "ang-zeyu": 34
    }
  }
]
