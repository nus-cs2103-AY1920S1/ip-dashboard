[
  {
    "path": "README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andyylam"
        },
        "content": "[![Build Status](https://travis-ci.com/andyylam/duke.svg?branch\u003dmaster)](https://travis-ci.com/andyylam/duke)"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "andyylam"
        },
        "content": "[![Coverage Status](https://coveralls.io/repos/github/andyylam/duke/badge.svg?branch\u003dmaster)](https://coveralls.io/github/andyylam/duke?branch\u003dmaster)"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andyylam"
        },
        "content": "[![Codacy Badge](https://api.codacy.com/project/badge/Grade/bf0320fbc373431cb72e9381cc531e0d)](https://www.codacy.com/app/andyylam/duke?utm_source\u003dgithub.com\u0026utm_medium\u003dreferral\u0026utm_content\u003dandyylam/duke\u0026utm_campaign\u003dBadge_Grade)"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "# Setting up"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "**Prerequisites**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andyylam"
        },
        "content": "-   JDK 11"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andyylam"
        },
        "content": "-   Recommended: IntelliJ IDE"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andyylam"
        },
        "content": "-   Fork this repo to your GitHub account and clone the fork to your computer"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "**Importing the project into IntelliJ**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "1. Open IntelliJ (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "1. Set up the correct JDK version."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    - Click `Configure` \u003e `Structure for new Projects` (in older versions of Intellij:`Configure` \u003e `Project Defaults` \u003e `Project Structure`)."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    - If JDK 11 is listed in the drop down, select it. If it is not, click `New...` and select the directory where you installed JDK 11."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    - Click `OK`."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "1. Click `Import Project`."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "1. Locate the project directory and click `OK`."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "1. Select `Create project from existing sources` and click `Next`."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "1. Rename the project if you want. Click `Next`."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "1. Ensure that your src folder is checked. Keep clicking `Next`."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "1. Click `Finish`."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "# Tutorials"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "andyylam"
        },
        "content": "| Duke Increment    | Tutorial                                                                                                                                                                                        |"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "andyylam"
        },
        "content": "| ----------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "andyylam"
        },
        "content": "| `A-Gradle`        | [Gradle Tutorial](tutorials/gradleTutorial.md)                                                                                                                                                  |"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "andyylam"
        },
        "content": "| `A-TextUiTesting` | [Text UI Testing Tutorial](tutorials/textUiTestingTutorial.md)                                                                                                                                  |"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "andyylam"
        },
        "content": "| `Level-10`        | JavaFX tutorials:\u003cbr\u003e→ [Part 1: Introduction to JavaFX][fx1]\u003cbr\u003e→ [Part 2: Creating a GUI for Duke][fx2]\u003cbr\u003e→ [Part 3: Interacting with the user][fx3]\u003cbr\u003e→ [Part 4: Introduction to FXML][fx4] |"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "andyylam"
        },
        "content": "[fx1]: tutorials/javaFxTutorialPart1.md"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "andyylam"
        },
        "content": "[fx2]: tutorials/javaFxTutorialPart2.md"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "andyylam"
        },
        "content": "[fx3]: tutorials/javaFxTutorialPart3.md"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "andyylam"
        },
        "content": "[fx4]: tutorials/javaFxTutorialPart4.md"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "# Feedback, Bug Reports"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "andyylam"
        },
        "content": "-   If you have feedback or bug reports, please post in [se-edu/duke issue tracker](https://github.com/se-edu/duke/issues)."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "andyylam"
        },
        "content": "-   We welcome pull requests too."
      }
    ],
    "authorContributionMap": {
      "andyylam": 21,
      "-": 22
    }
  },
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    id \u0027org.openjfx.javafxplugin\u0027 version \u00270.0.8\u0027"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andyylam"
        },
        "content": "}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andyylam"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andyylam"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "andyylam"
        },
        "content": "javafx {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    version \u003d \"11.0.2\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    modules \u003d [ \u0027javafx.controls\u0027, \u0027javafx.fxml\u0027 ]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "andyylam"
        },
        "content": "}"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "andyylam"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    archiveVersion \u003d \"0.1.3\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "group \u0027seedu.duke\u0027"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "andyylam"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter-api:5.1.0\u0027"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    testRuntimeOnly \u0027org.junit.jupiter:junit-jupiter-engine:5.1.0\u0027"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "andyylam"
        },
        "content": "}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    // Change this to your main class."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    mainClassName \u003d \"Main\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "andyylam"
        },
        "content": "}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "andyylam"
        },
        "content": "run {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "andyylam"
        },
        "content": "}"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "andyylam"
        },
        "content": "test {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andyylam": 33,
      "-": 15
    }
  },
  {
    "path": "src/main/data/duke.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andyylam"
        },
        "content": "E,1,carnival,2/12/2014 1920"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "andyylam"
        },
        "content": "T,1,return book"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andyylam"
        },
        "content": "E,1,asd,1/2/1231 1231"
      }
    ],
    "authorContributionMap": {
      "andyylam": 3
    }
  },
  {
    "path": "src/main/java/Main.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andyylam"
        },
        "content": "import duke.Duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "andyylam"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andyylam"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andyylam"
        },
        "content": " * The main entry point to the application."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andyylam"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andyylam"
        },
        "content": "public class Main {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        Application.launch(Duke.class, args);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andyylam"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andyylam": 11
    }
  },
  {
    "path": "src/main/java/duke/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andyylam"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andyylam"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andyylam"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andyylam"
        },
        "content": "import duke.parser.Parser;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andyylam"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andyylam"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andyylam"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andyylam"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andyylam"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andyylam"
        },
        "content": "public class Duke extends Application {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    private boolean isExit \u003d false;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     * Constructor for the Duke class."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     * @param filePath Local filePath to the data storage file."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    public Duke(String filePath) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        ui.setDuke(this);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        storage \u003d new Storage(filePath);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "andyylam"
        },
        "content": "            tasks \u003d new TaskList(storage.load());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "andyylam"
        },
        "content": "            ui.showLoadingError();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "andyylam"
        },
        "content": "            tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    public Duke() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        this(\"src/main/data/duke.txt\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    public String execute(String command) throws DukeException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        Command c \u003d Parser.parse(command);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        return c.execute(tasks, storage);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        ui.start(stage);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "andyylam"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andyylam": 47,
      "-": 1
    }
  },
  {
    "path": "src/main/java/duke/command/AddCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andyylam"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andyylam"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andyylam"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andyylam"
        },
        "content": "import duke.task.Deadlines;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andyylam"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andyylam"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andyylam"
        },
        "content": "import duke.task.ToDo;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andyylam"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andyylam"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andyylam"
        },
        "content": " * Represents an Add Command."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "andyylam"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andyylam"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    private Task task;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     * Constructor for the AddCommand."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     * @param typeOfTask \"todo\", \"deadline\" or \"event\"."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     * @param name The name of the specfied task."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     * @param datetime The datetime, if the task is a deadline or an event."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    public AddCommand(String typeOfTask, String name, String datetime) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        switch (typeOfTask) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        case \"todo\":"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "andyylam"
        },
        "content": "            task \u003d new ToDo(name);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "andyylam"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        case \"deadline\":"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "andyylam"
        },
        "content": "            task \u003d new Deadlines(name, datetime);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "andyylam"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        case \"event\":"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "andyylam"
        },
        "content": "            task \u003d new Event(name, datetime);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "andyylam"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "andyylam"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     * Overloaded constructor for AddCommand, if datetime is not given as a parameter."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     * @param typeOfEvent \"todo\"."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     * @param name The name of the specified event."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    public AddCommand(String typeOfEvent, String name) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        this(typeOfEvent, name, null);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     * Method that returns true only if this is an instance of an ExitCommand."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     * @return false"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     * Executes the Command: adds the current task to current TaskList and writes it in the storage file."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     * @param tasks   current TaskList instance"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     * @param storage current Storage instance"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     * @throws DukeException DukeException"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    public String execute(TaskList tasks, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        tasks.add(task);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        storage.addTask(task);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        return \"Got it. I\u0027ve added this task: \\n + task\\n + Now you have \" + tasks.size() + \" tasks in the list.\";"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     * Method that checks whether this instance is logically equivalent to another Object."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     *"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     * @param obj The other object in question."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     * @return true if logically equivalent, false otherwise"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        if (this \u003d\u003d obj) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "andyylam"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        } else if (obj instanceof AddCommand) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "andyylam"
        },
        "content": "            AddCommand other \u003d (AddCommand) obj;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "andyylam"
        },
        "content": "            return other.task.equals(this.task);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "andyylam"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andyylam": 86
    }
  },
  {
    "path": "src/main/java/duke/command/ByeCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andyylam"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andyylam"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andyylam"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andyylam"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andyylam"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andyylam"
        },
        "content": " * Represents a Bye Command."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andyylam"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andyylam"
        },
        "content": "public class ByeCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     * Method that returns true only if this is an instance of an ExitCommand."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     * @return true"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     * Executes the Command: Prints out Bye statement and exits the program."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     * @param tasks   current TaskList instance"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     * @param storage current Storage instance"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     * @throws DukeException DukeException"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    public String execute(TaskList tasks, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        return \"Bye. Hope to see you again soon!\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     * Method that checks whether this instance is logically equivalent to another Object."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     * @param obj The other object in question."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     * @return true if logically equivalent, false otherwise"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        if (this \u003d\u003d obj) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "andyylam"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        } else if (obj instanceof ByeCommand) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "andyylam"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "andyylam"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andyylam": 47
    }
  },
  {
    "path": "src/main/java/duke/command/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andyylam"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andyylam"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andyylam"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andyylam"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andyylam"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    public abstract boolean isExit();"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    public abstract String execute(TaskList tasks, Storage storage) throws DukeException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andyylam"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andyylam": 11
    }
  },
  {
    "path": "src/main/java/duke/command/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andyylam"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andyylam"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andyylam"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andyylam"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andyylam"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andyylam"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andyylam"
        },
        "content": " * Represents a Delete Command."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andyylam"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andyylam"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    public DeleteCommand(int index) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     * Method that returns true only if this is an instance of an ExitCommand."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     * @return false"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     * Executes the Command: removes current task from TaskList and removes line from storage."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     * @param tasks   current TaskList instance"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     * @param storage current Storage instance"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     * @throws DukeException DukeException"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    public String execute(TaskList tasks, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        Task deleted \u003d tasks.remove(index);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        storage.deleteLine(deleted.storageString());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        return (\"Noted. I\u0027ve removed this task:\\n  \" + deleted + \"\\nNow you have \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "andyylam"
        },
        "content": "                + tasks.size() + \" tasks in the list.\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     * Method that checks whether this instance is logically equivalent to another Object."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     * @param obj The other object in question."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     * @return true if logically equivalent, false otherwise"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        if (this \u003d\u003d obj) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "andyylam"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        } else if (obj instanceof DeleteCommand) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "andyylam"
        },
        "content": "            DeleteCommand other \u003d (DeleteCommand) obj;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "andyylam"
        },
        "content": "            return other.index \u003d\u003d this.index;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "andyylam"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andyylam": 58
    }
  },
  {
    "path": "src/main/java/duke/command/DoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andyylam"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andyylam"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andyylam"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andyylam"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andyylam"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andyylam"
        },
        "content": " * Represents a Done Command."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andyylam"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andyylam"
        },
        "content": "public class DoneCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    public DoneCommand(int index) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     * Method that returns true only if this is an instance of an ExitCommand."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     * @return false"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     * Executes the Command: Sets task in taskList done, and updates the storage file."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     * @param tasks   current TaskList instance"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     * @param storage current Storage instance"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     * @throws DukeException DukeException"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    public String execute(TaskList tasks, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        String current \u003d tasks.get(index).storageString();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        String doneString \u003d tasks.get(index).setDone();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        String res \u003d tasks.get(index).storageString();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        storage.replaceLine(current, res);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        return doneString;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     * Method that checks whether this instance is logically equivalent to another Object."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     * @param obj The other object in question."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     * @return true if logically equivalent, false otherwise"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        if (this \u003d\u003d obj) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "andyylam"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        } else if (obj instanceof DoneCommand) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "andyylam"
        },
        "content": "            DoneCommand other \u003d (DoneCommand) obj;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "andyylam"
        },
        "content": "            return other.index \u003d\u003d this.index;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "andyylam"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andyylam": 59
    }
  },
  {
    "path": "src/main/java/duke/command/FindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andyylam"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andyylam"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andyylam"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andyylam"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andyylam"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andyylam"
        },
        "content": " * Represents a Find Command."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andyylam"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andyylam"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    private String tofind;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    public FindCommand(String s) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        this.tofind \u003d s;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     * Method that returns true only if this is an instance of an ExitCommand."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     * @return false"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     * Executes the Command: Finds the Task(s) in tasks that match the specified string."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     * @param tasks   current TaskList instance"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     * @param storage current Storage instance"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     * @throws DukeException DukeException"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    public String execute(TaskList tasks, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        TaskList containsList \u003d tasks.find(this.tofind);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        return (\"Here are the matching tasks in your list:\\n\" + containsList.printAllTasks());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "andyylam"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andyylam": 39
    }
  },
  {
    "path": "src/main/java/duke/command/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andyylam"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andyylam"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andyylam"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andyylam"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andyylam"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andyylam"
        },
        "content": " * Represents a List Command."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andyylam"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andyylam"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     * Method that returns true only if this is an instance of an ExitCommand."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     * @return false"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     * Executes the Command: Prints out tasks in TaskList."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     * @param tasks   current TaskList instance"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     * @param storage current Storage instance"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     * @throws DukeException DukeException"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    public String execute(TaskList tasks, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        return (tasks.printAllTasks());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     * Method that checks whether this instance is logically equivalent to another Object."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     * @param obj The other object in question."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     * @return true if logically equivalent, false otherwise"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        if (this \u003d\u003d obj) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "andyylam"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        } else if (obj instanceof ListCommand) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "andyylam"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "andyylam"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andyylam": 47
    }
  },
  {
    "path": "src/main/java/duke/exception/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andyylam"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andyylam"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    private String exceptionMessage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    public DukeException(String exceptionMessage) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        super(exceptionMessage);"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        this.exceptionMessage \u003d exceptionMessage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        return this.exceptionMessage;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andyylam"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andyylam": 15
    }
  },
  {
    "path": "src/main/java/duke/parser/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andyylam"
        },
        "content": "package duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andyylam"
        },
        "content": "import duke.command.FindCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andyylam"
        },
        "content": "import duke.command.ListCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andyylam"
        },
        "content": "import duke.command.AddCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andyylam"
        },
        "content": "import duke.command.DoneCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andyylam"
        },
        "content": "import duke.command.DeleteCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andyylam"
        },
        "content": "import duke.command.ByeCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andyylam"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andyylam"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "andyylam"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andyylam"
        },
        "content": " * Represents a parser that parses a line, returning a Command instance."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andyylam"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "andyylam"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    private static final String UNKNOWN_COMMAND \u003d \"☹ OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    private static final String UNKNOWN_TODO \u003d \"☹ OOPS!!! The description of a todo cannot be empty.\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    private static final String UNKNOWN_DEADLINE \u003d \"☹ OOPS!!! The description of a deadline cannot be empty.\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    private static final String UNKNOWN_EVENT \u003d \"☹ OOPS!!! The description of an event cannot be empty.\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     * Returns a Command instance of the specified line."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     * @param line Line to be parsed."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     * @return an instance of a Command specified by the line ."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     * @throws DukeException when line does not meet expected parameters."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    public static Command parse(String line) throws DukeException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        if (line.equals(\"bye\")) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "andyylam"
        },
        "content": "            return new ByeCommand();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        } else if (line.equals(\"list\")) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "andyylam"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "andyylam"
        },
        "content": "            String[] strArr \u003d line.split(\" \");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "andyylam"
        },
        "content": "            String command \u003d strArr[0];"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "andyylam"
        },
        "content": "            int index;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "andyylam"
        },
        "content": "            switch (command) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "andyylam"
        },
        "content": "            case \"todo\":"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "andyylam"
        },
        "content": "                return new AddCommand(\"todo\", line.substring(5));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "andyylam"
        },
        "content": "            case \"deadline\":"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "andyylam"
        },
        "content": "                String[] deadline \u003d deadlineEventString(strArr, true);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "andyylam"
        },
        "content": "                return new AddCommand(\"deadline\", deadline[0], deadline[1]);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "andyylam"
        },
        "content": "            case \"event\":"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "andyylam"
        },
        "content": "                String[] event \u003d deadlineEventString(strArr, false);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "andyylam"
        },
        "content": "                return new AddCommand(\"event\", event[0], event[1]);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "andyylam"
        },
        "content": "            case \"done\":"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "andyylam"
        },
        "content": "                index \u003d Integer.parseInt(strArr[1]);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "andyylam"
        },
        "content": "                return new DoneCommand(index);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "andyylam"
        },
        "content": "            case \"delete\":"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "andyylam"
        },
        "content": "                index \u003d Integer.parseInt(strArr[1]);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "andyylam"
        },
        "content": "                return new DeleteCommand(index);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "andyylam"
        },
        "content": "            case \"find\":"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "andyylam"
        },
        "content": "                return new FindCommand(line.substring(5));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "andyylam"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "andyylam"
        },
        "content": "                throw new DukeException(UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "andyylam"
        },
        "content": "            }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     * Helper method that returns a string for Event or Deadline instance creation."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     *"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     * @param arr      String Array."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     * @param deadline true if deadline, false if event."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     * @return String[] with 2 elements - first is name, second is datetime."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     * @throws DukeException if expected parameters are not met."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    private static String[] deadlineEventString(String[] arr, boolean deadline) throws DukeException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        String[] res \u003d new String[2];"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        int divide \u003d 0;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        for (int i \u003d 1; i \u003c arr.length; i++) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "andyylam"
        },
        "content": "            if (deadline \u0026\u0026 arr[i].equals(\"/by\") || !deadline \u0026\u0026 arr[i].equals(\"/at\")) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "andyylam"
        },
        "content": "                divide \u003d i;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "andyylam"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "andyylam"
        },
        "content": "            }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "andyylam"
        },
        "content": "            sb.append(arr[i]);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "andyylam"
        },
        "content": "            sb.append(\" \");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        res[0] \u003d sb.toString().trim();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        if (res[0].isEmpty()) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "andyylam"
        },
        "content": "            throw new DukeException(deadline ? UNKNOWN_DEADLINE : UNKNOWN_EVENT);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        for (int i \u003d divide + 1; i \u003c arr.length; i++) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "andyylam"
        },
        "content": "            sb.append(arr[i]);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "andyylam"
        },
        "content": "            sb.append(\" \");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        res[1] \u003d sb.toString().trim();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        return res;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "andyylam"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andyylam": 93
    }
  },
  {
    "path": "src/main/java/duke/storage/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andyylam"
        },
        "content": "package duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andyylam"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andyylam"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andyylam"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andyylam"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andyylam"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andyylam"
        },
        "content": "import java.nio.file.StandardOpenOption;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andyylam"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andyylam"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andyylam"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andyylam"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andyylam"
        },
        "content": " * Represents a Storage class that handles all reading and writing into file storage for tasks."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "andyylam"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andyylam"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    private String filePath;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     * Constructor for storage class."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     * @param filePath filePath of the storage file."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    public Storage(String filePath) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     * Loads the tasks in storage file into a List."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     * @return List with Tasks from storage file."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     * @throws DukeException if file is not found."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    public List\u003cTask\u003e load() throws DukeException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "andyylam"
        },
        "content": "            List\u003cTask\u003e list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "andyylam"
        },
        "content": "            List\u003cString\u003e lines \u003d Files.readAllLines(Paths.get(filePath));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "andyylam"
        },
        "content": "            for (String line : lines) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "andyylam"
        },
        "content": "                if (!line.isEmpty()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "andyylam"
        },
        "content": "                    list.add(Task.taskMaker(line.split(\",\")));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "andyylam"
        },
        "content": "                }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "andyylam"
        },
        "content": "            }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "andyylam"
        },
        "content": "            return list;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "andyylam"
        },
        "content": "            throw new DukeException(e.getMessage());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     * Method to delete a line from the file."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     * @param toDelete Line to be deleted."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     * @throws DukeException if file is not found."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    public void deleteLine(String toDelete) throws DukeException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "andyylam"
        },
        "content": "            List\u003cString\u003e lines \u003d Files.readAllLines(Paths.get(filePath));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "andyylam"
        },
        "content": "            List\u003cString\u003e newlines \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "andyylam"
        },
        "content": "            for (String line : lines) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "andyylam"
        },
        "content": "                if (!line.equals(toDelete) \u0026\u0026 !line.contains(toDelete)) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "andyylam"
        },
        "content": "                    newlines.add(line);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "andyylam"
        },
        "content": "                }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "andyylam"
        },
        "content": "            }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "andyylam"
        },
        "content": "            Files.write(Paths.get(filePath), newlines);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "andyylam"
        },
        "content": "            throw new DukeException(e.getMessage());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     * Method to replace a line in the storage file."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     *"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     * @param before line to be replaced."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     * @param after  line to replace with."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     * @throws DukeException if file is not found."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    public void replaceLine(String before, String after) throws DukeException {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "andyylam"
        },
        "content": "            List\u003cString\u003e lines \u003d Files.readAllLines(Paths.get(filePath));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "andyylam"
        },
        "content": "            List\u003cString\u003e newlines \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "andyylam"
        },
        "content": "            System.out.println(before);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "andyylam"
        },
        "content": "            System.out.println(after);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "andyylam"
        },
        "content": "            for (String line : lines) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "andyylam"
        },
        "content": "                if (line.equals(before) || line.contains(before)) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "andyylam"
        },
        "content": "                    newlines.add(after);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "andyylam"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "andyylam"
        },
        "content": "                    newlines.add(line);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "andyylam"
        },
        "content": "                }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "andyylam"
        },
        "content": "            }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "andyylam"
        },
        "content": "            Files.write(Paths.get(filePath), newlines);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "andyylam"
        },
        "content": "            throw new DukeException(e.getMessage());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     * Method to store a new task into the storage file."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     *"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     * @param t Task to be written into the file."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     * @throws DukeException if file is not found."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    public void addTask(Task t) throws DukeException {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "andyylam"
        },
        "content": "            Files.write(Paths.get(filePath), Collections.singletonList(t.storageString()), StandardOpenOption.APPEND);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "andyylam"
        },
        "content": "            throw new DukeException(e.getMessage());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "andyylam"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andyylam": 110
    }
  },
  {
    "path": "src/main/java/duke/task/Deadlines.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andyylam"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andyylam"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andyylam"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andyylam"
        },
        "content": " * Represents a Deadline with a name and datetime."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andyylam"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andyylam"
        },
        "content": "public class Deadlines extends Task {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    private Calendar datetime \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    private String datetimeString;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    public Deadlines(String name, String datetime) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        this(name, datetime, false);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    Deadlines(String name, String datetime, boolean done) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        super(name, done);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        this.datetimeString \u003d datetime;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        String[] dateandtime \u003d datetime.split(\" \");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        String[] date \u003d dateandtime[0].split(\"/\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        this.datetime.set(Integer.parseInt(date[0]), Integer.parseInt(date[1]), Integer.parseInt(date[2]),"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "andyylam"
        },
        "content": "                Integer.parseInt(dateandtime[1].substring(0, 2)), Integer.parseInt(dateandtime[1].substring(2, 4)));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     * Returns the datetime of the Deadline instance in string."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     * @return String: datetime"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    public String getDatetimeString() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        return datetimeString;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     * Returns a string formatted for storage in the storage file."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     * @return String"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    public String storageString() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        return \"D,\" + (super.getDone() ? \"1,\" : \"0,\") + super.getName() + \",\" + this.datetimeString;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     * Returns a string for normal printing to represent state and details of the Task."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     * @return String"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        return \"[D]\" + super.toString() + \" (by: \" + datetimeString + \")\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     * Checks for logical equality of this instance to another object."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     * @param obj Another object in question."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     * @return true if logically equivalent, false otherwise."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        if (this \u003d\u003d obj) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "andyylam"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        } else if (obj instanceof Deadlines) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "andyylam"
        },
        "content": "            Deadlines other \u003d (Deadlines) obj;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "andyylam"
        },
        "content": "            return this.getDone() \u003d\u003d other.getDone() \u0026\u0026 this.getName().equals(other.getName())"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "andyylam"
        },
        "content": "                    \u0026\u0026 this.getDatetimeString().equals(other.getDatetimeString());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "andyylam"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andyylam": 71
    }
  },
  {
    "path": "src/main/java/duke/task/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andyylam"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andyylam"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andyylam"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andyylam"
        },
        "content": " * Represents an Event with a name and datetime."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andyylam"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andyylam"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    private Calendar datetime \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    private String datetimeString;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    public Event(String name, String datetime) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        this(name, datetime, false);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    Event(String name, String datetime, boolean done) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        super(name, done);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        this.datetimeString \u003d datetime;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        String[] dateandtime \u003d datetime.split(\" \");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        String[] date \u003d dateandtime[0].split(\"/\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        this.datetime.set(Integer.parseInt(date[0]), Integer.parseInt(date[1]), Integer.parseInt(date[2]),"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "andyylam"
        },
        "content": "                Integer.parseInt(dateandtime[1].substring(0, 2)), Integer.parseInt(dateandtime[1].substring(2, 4)));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     * Returns the datetime of the Deadline instance in string."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     * @return String: datetime"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    public String getDatetimeString() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        return datetimeString;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    public Calendar getDatetime() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        return datetime;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     * Returns a string formatted for storage in the storage file."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     * @return String"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    public String storageString() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        return \"E,\" + (super.getDone() ? \"1,\" : \"0,\") + super.getName() + \",\" + this.datetimeString;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     * Returns a string for normal printing to represent state and details of the Task."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     * @return String"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        return \"[E]\" + super.toString() + \" (at: \" + datetimeString + \")\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     * Checks for logical equality of this instance to another object."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     * @param obj Another object in question."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     * @return true if logically equivalent, false otherwise."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        if (this \u003d\u003d obj) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "andyylam"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        } else if (obj instanceof Event) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "andyylam"
        },
        "content": "            Event other \u003d (Event) obj;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "andyylam"
        },
        "content": "            return this.getDone() \u003d\u003d other.getDone() \u0026\u0026 this.getName().equals(other.getName())"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "andyylam"
        },
        "content": "                    \u0026\u0026 this.getDatetimeString().equals(other.getDatetimeString());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "andyylam"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andyylam": 75
    }
  },
  {
    "path": "src/main/java/duke/task/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andyylam"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andyylam"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andyylam"
        },
        "content": " * Represents a super-class Task that is extended to ToDo, Deadline and Event."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andyylam"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andyylam"
        },
        "content": "public abstract class Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    private boolean isDone;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    Task(String name, boolean isDone) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        this.isDone \u003d isDone;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    Task(String name) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        this(name, false);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        return this.name;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    public boolean getDone() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        return isDone;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     * Sets isDone to true."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    public String setDone() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        return (\"Nice! I\u0027ve marked this task as done: \\n  \" + this.toString());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    public abstract String storageString();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        return (\"[\" + (this.isDone ? \"done\" : \"not done\") + \"]\" + \" \" + this.name);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     * Static method that returns a Task depending on the given String arr[]."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     * @param arr String arr that contains the specifications of the task."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     * @return Task that corresponds to the given arr."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    public static Task taskMaker(String[] arr) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        String type \u003d arr[0];"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        boolean done \u003d arr[1].equals(\"1\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        String name \u003d arr[2];"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        Task task \u003d null;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        switch (type) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        case \"T\":"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "andyylam"
        },
        "content": "            task \u003d new ToDo(name, done);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "andyylam"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        case \"D\":"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "andyylam"
        },
        "content": "            task \u003d new Deadlines(name, arr[3], done);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "andyylam"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        case \"E\":"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "andyylam"
        },
        "content": "            task \u003d new Event(name, arr[3], done);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "andyylam"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "andyylam"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        return task;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "andyylam"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andyylam": 67
    }
  },
  {
    "path": "src/main/java/duke/task/ToDo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andyylam"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andyylam"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andyylam"
        },
        "content": " * Represents a ToDo with a name."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andyylam"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andyylam"
        },
        "content": "public class ToDo extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    ToDo(String name, boolean done) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        super(name, done);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    public ToDo(String name) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        this(name, false);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     * Returns a string formatted for storage in the storage file."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     * @return String"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    public String storageString() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        return \"T,\" + (super.getDone() ? \"1,\" : \"0,\") + super.getName();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     * Returns a string for normal printing to represent state and details of the Task."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     * @return String"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     * Checks for logical equality of this instance to another object."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     * @param obj Another object in question."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     * @return true if logically equivalent, false otherwise."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        if (this \u003d\u003d obj) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "andyylam"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        } else if (obj instanceof ToDo) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "andyylam"
        },
        "content": "            ToDo other \u003d (ToDo) obj;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "andyylam"
        },
        "content": "            return this.getDone() \u003d\u003d other.getDone() \u0026\u0026 this.getName().equals(other.getName());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "andyylam"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andyylam": 51
    }
  },
  {
    "path": "src/main/java/duke/tasklist/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andyylam"
        },
        "content": "package duke.tasklist;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andyylam"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andyylam"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andyylam"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andyylam"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andyylam"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andyylam"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andyylam"
        },
        "content": " * Represents a TaskList of Tasks that Duke currently holds."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andyylam"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "andyylam"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    private List\u003cTask\u003e list;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     * Constructor of TaskList."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     * @param list Initial list of tasks, loaded from storage file or otherwise."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    public TaskList(List\u003cTask\u003e list) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        this.list \u003d list;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     * Alternate constructor if initial list of tasks is not satisfied."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        this(new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    public FilteredList\u003cTask\u003e getTasks() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        return new FilteredList\u003c\u003e((ObservableList\u003cTask\u003e) this.list);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     * Method to add a new task to the TaskList."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     * @param t Task to be added."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    public void add(Task t) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        list.add(t);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     * Method to check if TaskList is empty."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     * @return true if empty, false if otherwise."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    public boolean isEmpty() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        return this.list.isEmpty();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     * Method to remove Task of given index from TaskList."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     * @param index given index to be removed."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     * @return Task that is removed."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    public Task remove(int index) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        return this.list.remove(index - 1);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     * Returns current size of TaskList."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     *"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     * @return current size"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    public int size() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        return this.list.size();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     * Returns Task t at given index."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     *"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     * @param index to be queried"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     * @return Task at index"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    public Task get(int index) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        return this.list.get(index - 1);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     * Returns a new TaskList that contains all tasks with name that contains the"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     * given string."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     *"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     * @param tofind - string to be queried."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     * @return TaskList that contains corresponding tasks."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    public TaskList find(String tofind) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        List\u003cTask\u003e newList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        for (Task t : this.list) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "andyylam"
        },
        "content": "            if (t.getName().contains(tofind)) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "andyylam"
        },
        "content": "                newList.add(t);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "andyylam"
        },
        "content": "            }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        return new TaskList(newList);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     * For every task in the TaskList, prints its corresponding string."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     *"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     * @return String containing all tasks in the TaskList"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    public String printAllTasks() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        if (this.size() !\u003d 0) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "andyylam"
        },
        "content": "            StringBuilder res \u003d new StringBuilder();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "andyylam"
        },
        "content": "            int count \u003d 1;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "andyylam"
        },
        "content": "            for (Task task : list) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "andyylam"
        },
        "content": "                res.append(\"\").append(count).append(\".\").append(task).append(\"\\n\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "andyylam"
        },
        "content": "                count++;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "andyylam"
        },
        "content": "            }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "andyylam"
        },
        "content": "            return res.toString().trim();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "andyylam"
        },
        "content": "            return \"There are no tasks on your list!\";"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "andyylam"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andyylam": 119
    }
  },
  {
    "path": "src/main/java/duke/ui/DialogBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andyylam"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andyylam"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andyylam"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andyylam"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andyylam"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andyylam"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andyylam"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andyylam"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andyylam"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andyylam"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "andyylam"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andyylam"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andyylam"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andyylam"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "andyylam"
        },
        "content": " * An example of a custom control using FXML."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andyylam"
        },
        "content": " * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "andyylam"
        },
        "content": " * containing text from the speaker."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "andyylam"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "andyylam"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    private DialogBox(String text, Image img) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "andyylam"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(Ui.class.getResource(\"/view/DialogBox.fxml\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "andyylam"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "andyylam"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "andyylam"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "andyylam"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        displayPicture.setImage(img);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        Collections.reverse(tmp);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     * Creates a dialog box for the user."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     * @param text message to be shown"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     * @param img  User\u0027s avatar image"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     * @return Dialog Box instance"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    public static DialogBox getUserDialog(String text, Image img) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        return new DialogBox(text, img);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     * Creates a dialog box for Duke, flipped to indicate that message is from Duke."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     * @param text message to be shown"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     * @param img  Duke\u0027s avatar image"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     * @return Dialog Box instance"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    public static DialogBox getDukeDialog(String text, Image img) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        var db \u003d new DialogBox(text, img);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "andyylam"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andyylam": 75
    }
  },
  {
    "path": "src/main/java/duke/ui/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andyylam"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andyylam"
        },
        "content": "import duke.Duke;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andyylam"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andyylam"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andyylam"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andyylam"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andyylam"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andyylam"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andyylam"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andyylam"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andyylam"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "andyylam"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andyylam"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "andyylam"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "andyylam"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andyylam"
        },
        "content": " * Ui class that handles all IO for the Duke application."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "andyylam"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "andyylam"
        },
        "content": "public class Ui extends AnchorPane {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    public TextField commandTextField;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    private Duke duke;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/user.png\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/duke.png\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     * Constructor for the Ui class, initiates a new Scanner instance."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    public Ui() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        dialogContainer \u003d new VBox();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        this.showWelcome();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        scrollPane \u003d new ScrollPane();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        commandTextField \u003d new TextField();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    public void setDuke(Duke d) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        duke \u003d d;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     * Starts the JavaFX GUI."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     * @param primaryStage default window"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "andyylam"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(Duke.class.getResource(\"/view/Ui.fxml\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "andyylam"
        },
        "content": "            AnchorPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "andyylam"
        },
        "content": "            Scene scene \u003d new Scene(ap);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "andyylam"
        },
        "content": "            primaryStage.setScene(scene);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "andyylam"
        },
        "content": "            primaryStage.setTitle(\"Duke\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "andyylam"
        },
        "content": "            fxmlLoader.\u003cUi\u003egetController().setDuke(duke);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "andyylam"
        },
        "content": "            primaryStage.show();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "andyylam"
        },
        "content": "            this.showWelcome();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "andyylam"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     * Prints out welcome message."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    private void showWelcome() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        dialogContainer.getChildren().add(DialogBox.getUserDialog(\"Hello! I\u0027m Duke\\n\""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "andyylam"
        },
        "content": "                + \"What can I do for you?\", dukeImage));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     * Method to handle input from the user."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     * Reads command and is passed to Duke class to be executed."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    public void handleInput() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "andyylam"
        },
        "content": "            String exit \u003d this.duke.execute(this.readCommand());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "andyylam"
        },
        "content": "            this.printLine(exit);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "andyylam"
        },
        "content": "            if (exit.equals(\"Bye. Hope to see you again soon!\")) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "andyylam"
        },
        "content": "                Platform.exit();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "andyylam"
        },
        "content": "            }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "andyylam"
        },
        "content": "            this.printLine(e.toString());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     * Method to read command from the user."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     * @return String command that user inputted."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    private String readCommand() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        String command \u003d commandTextField.getText();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        commandTextField.setText(\"\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        dialogContainer.getChildren().add(DialogBox.getUserDialog(command, userImage));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        return command;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     * Prints line."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     *"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     * @param line line to be printed."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    private void printLine(String line) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        dialogContainer.getChildren().add(DialogBox.getDukeDialog(line, dukeImage));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     * Print error when storage file is empty."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "andyylam"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    public void showLoadingError() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        dialogContainer.getChildren().add(DialogBox.getDukeDialog(\"You have not stored any tasks!\", dukeImage));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "andyylam"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andyylam": 119
    }
  },
  {
    "path": "src/main/resources/view/DialogBox.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andyylam"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andyylam"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andyylam"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andyylam"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andyylam"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andyylam"
        },
        "content": "\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andyylam"
        },
        "content": "         type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    \u003cpadding\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\"/\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    \u003c/padding\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andyylam"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "andyylam": 17
    }
  },
  {
    "path": "src/main/resources/view/Ui.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andyylam"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andyylam"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andyylam"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andyylam"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andyylam"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andyylam"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andyylam"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andyylam"
        },
        "content": "            prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andyylam"
        },
        "content": "            fx:controller\u003d\"duke.ui.Ui\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andyylam"
        },
        "content": "                    vvalue\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andyylam"
        },
        "content": "            \u003ccontent\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "andyylam"
        },
        "content": "                \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\"/\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andyylam"
        },
        "content": "            \u003c/content\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        \u003cStackPane layoutX\u003d\"29.0\" layoutY\u003d\"558.0\" maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "andyylam"
        },
        "content": "                   minWidth\u003d\"-Infinity\" prefHeight\u003d\"31.0\" prefWidth\u003d\"342.0\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "andyylam"
        },
        "content": "            \u003cchildren\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "andyylam"
        },
        "content": "                \u003cTextField fx:id\u003d\"commandTextField\" onAction\u003d\"#handleInput\" prefHeight\u003d\"47.0\" prefWidth\u003d\"365.0\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "andyylam"
        },
        "content": "                           promptText\u003d\"Enter a command:\"/\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "andyylam"
        },
        "content": "            \u003c/children\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "andyylam"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "andyylam": 27
    }
  },
  {
    "path": "src/test/java/duke/parser/ParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andyylam"
        },
        "content": "package duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andyylam"
        },
        "content": "import duke.command.ListCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andyylam"
        },
        "content": "import duke.command.AddCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andyylam"
        },
        "content": "import duke.command.DoneCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andyylam"
        },
        "content": "import duke.command.DeleteCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andyylam"
        },
        "content": "import duke.command.ByeCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andyylam"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andyylam"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andyylam"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "andyylam"
        },
        "content": "class ParserTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    void parse_normalInputs_success() throws DukeException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        assertEquals(new ListCommand(), Parser.parse(\"list\"));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        assertEquals(new ByeCommand(), Parser.parse(\"bye\"));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        assertEquals(new DoneCommand(1), Parser.parse(\"done 1\"));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        assertEquals(new DeleteCommand(1), Parser.parse(\"delete 1\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        assertEquals(new AddCommand(\"todo\", \"read book\"), Parser.parse(\"todo read book\"));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        assertEquals(new AddCommand(\"deadline\", \"finish reading\", \"23/11/2019 1800\"),"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "andyylam"
        },
        "content": "                Parser.parse(\"deadline finish reading /by 23/11/2019 1800\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        assertEquals(new AddCommand(\"event\", \"carnival\", \"12/9/2011 0012\"),"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "andyylam"
        },
        "content": "                Parser.parse(\"event carnival /at 12/9/2011 0012\"));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "andyylam"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andyylam": 27
    }
  },
  {
    "path": "src/test/java/duke/task/ToDoTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andyylam"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andyylam"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andyylam"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andyylam"
        },
        "content": "class ToDoTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    void storageString_normalInput_success() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        ToDo current \u003d new ToDo(\"read book\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        assertEquals(\"T,0,read book\", current.storageString());"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        current.setDone();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        assertEquals(\"T,1,read book\", current.storageString());"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    void testToString_normalInput_success() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        ToDo current \u003d new ToDo(\"read book\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        assertEquals(\"[T][not done] read book\", current.toString());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        current.setDone();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "andyylam"
        },
        "content": "        assertEquals(\"[T][done] read book\", current.toString());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "andyylam"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "andyylam": 24
    }
  },
  {
    "path": "text-ui-test/runtest.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "andyylam"
        },
        "content": "#!/usr/bin/env bash"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "andyylam"
        },
        "content": "# create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "andyylam"
        },
        "content": "if [ ! -d \"../bin\" ]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "andyylam"
        },
        "content": "then"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    mkdir ../bin"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "andyylam"
        },
        "content": "fi"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "andyylam"
        },
        "content": "# delete output from previous run"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "andyylam"
        },
        "content": "if [ -e \"./ACTUAL.TXT\" ]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "andyylam"
        },
        "content": "then"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    rm ACTUAL.TXT"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "andyylam"
        },
        "content": "fi"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "andyylam"
        },
        "content": "# compile the code into the bin folder, terminates if error occurred"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "andyylam"
        },
        "content": "if ! javac -cp ../src -Xlint:none -d ../bin ../src/main/java/Duke.java"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "andyylam"
        },
        "content": "then"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    echo \"********** BUILD FAILURE **********\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "andyylam"
        },
        "content": "fi"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "andyylam"
        },
        "content": "# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "andyylam"
        },
        "content": "java -classpath ../bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "andyylam"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "andyylam"
        },
        "content": "# compare the output to the expected output"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "andyylam"
        },
        "content": "diff ACTUAL.TXT EXPECTED.TXT"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "andyylam"
        },
        "content": "if [ $? -eq 0 ]"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "andyylam"
        },
        "content": "then"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    echo \"Test result: PASSED\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    exit 0"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "andyylam"
        },
        "content": "else"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    echo \"Test result: FAILED\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "andyylam"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "andyylam"
        },
        "content": "fi"
      }
    ],
    "authorContributionMap": {
      "andyylam": 34
    }
  }
]
