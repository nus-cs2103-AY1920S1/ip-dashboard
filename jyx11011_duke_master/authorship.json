[
  {
    "path": "README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "[![Build Status](https://travis-ci.com/jyx11011/duke.svg?branch\u003dmaster)](https://travis-ci.com/jyx11011/duke)"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "# Setting up"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "**Prerequisites**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "* JDK 11"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "* Recommended: IntelliJ IDE"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "* Fork this repo to your GitHub account and clone the fork to your computer"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "**Importing the project into IntelliJ**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "1. Open IntelliJ (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "1. Set up the correct JDK version."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "   * Click `Configure` \u003e `Structure for new Projects` (in older versions of Intellij:`Configure` \u003e `Project Defaults` \u003e `Project Structure`)."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "   * If JDK 11 is listed in the drop down, select it. If it is not, click `New...` and select the directory where you installed JDK 11."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "   * Click `OK`."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "1. Click `Import Project`."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "1. Locate the project directory and click `OK`."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "1. Select `Create project from existing sources` and click `Next`."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "1. Rename the project if you want. Click `Next`."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "1. Ensure that your src folder is checked. Keep clicking `Next`."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "1. Click `Finish`."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "# Tutorials "
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "Duke Increment | Tutorial"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "---------------|---------------"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "`A-Gradle` | [Gradle Tutorial](tutorials/gradleTutorial.md)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "`A-TextUiTesting` | [Text UI Testing Tutorial](tutorials/textUiTestingTutorial.md)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "`Level-10` | JavaFX tutorials:\u003cbr\u003e→ [Part 1: Introduction to JavaFX][fx1]\u003cbr\u003e→ [Part 2: Creating a GUI for Duke][fx2]\u003cbr\u003e→ [Part 3: Interacting with the user][fx3]\u003cbr\u003e→ [Part 4: Introduction to FXML][fx4]"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "[fx1]: \u003ctutorials/javaFxTutorialPart1.md\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "[fx2]: \u003ctutorials/javaFxTutorialPart2.md\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "[fx3]: \u003ctutorials/javaFxTutorialPart3.md\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "[fx4]: \u003ctutorials/javaFxTutorialPart4.md\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "# Feedback, Bug Reports"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "* If you have feedback or bug reports, please post in [se-edu/duke issue tracker](https://github.com/se-edu/duke/issues)."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "* We welcome pull requests too."
      }
    ],
    "authorContributionMap": {
      "jyx11011": 1,
      "-": 39
    }
  },
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    id \u0027org.openjfx.javafxplugin\u0027 version \u00270.0.7\u0027"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    archiveVersion \u003d \"1.1\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "test {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "group \u0027seedu.duke\u0027"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "version \u00271.1\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    // Change this to your main class."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    mainClassName \u003d \"Launcher\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "run{"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    enableAssertions \u003d true"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "javafx {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    version \u003d \"11.0.2\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    modules \u003d [ \u0027javafx.controls\u0027, \u0027javafx.fxml\u0027 ]"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jyx11011": 33,
      "-": 14
    }
  },
  {
    "path": "docs/README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "# Duke User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "### Introduction"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "Duke is an application for those who want to manage a personal task list with command line interface."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "With Duke, users can create and retrieve tasks with various commands."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "- **User guide syntax**  "
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "In this user guide, words highlighted in gray are commands. Command argument in `()` are optional."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "`|` means either the arguments on the left or the one on the right is needed. `\u003cname\u003e` means a range of"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "possible arguments.\u003cbr\u003e Other words, without special explanation, are literally presented in the command."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "  - `\u003cindex\u003e`, `\u003cstarting index\u003e`, `\u003cending index\u003e ` expect positive integers"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "  - `\u003ccommand\u003e` expects `todo`, `event`, `deadline`, `exit`,`bye`, `find`, `list`"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "  - `\u003cfilter\u003e` expects `index filter`, `type filter`, `status filter`, `time filter`"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "  - `\u003ctask type\u003e` expects `todo`, `event`, `deadline`,"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "  - `\u003cdate and time\u003e` expects `(DD/MM/YYYY) HH:MM`. If date is omitted, then duke assumes it is today\u0027s date."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "  - `\u003ctime operator\u003e` expects `before`, `until`, `on`, `from`, `after`"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "  - `\u003ctask description\u003e`, `\u003ckeywords\u003e` expect any words"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "### Features "
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "### 0. Filter"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "Filter is used to filter tasks by different criteria, including index, type, done status of task and "
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "time and date associated with the task. It is combined with Delete, Done and List command(**cannot be "
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "used on its own**)."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "- 0.1 Index Filter"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "  - 0.1.1 Literal Index Filter"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    * Format: `\u003cindex\u003e (\u003cliteral index filter\u003e)`"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    * Example: "
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "      1. `2 1 20` filter out tasks with index 1, 2, 20"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "      2. `4` filter out the task with index 4"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "   "
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "  - 0.1.2 Range Index Filter"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    * Format: `[(\u003cstarting index\u003e):(\u003cending index\u003e)]`"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    * (Starting index is inclusive. Ending index is exclusive. "
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "       If `\u003cstarting index\u003e` is omitted, then it starts from the first task by default."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "       If `\u003cending index\u003e` is omitted, then it ends at the last task by default.)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    * Example: "
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "      1. `[5:10]` filter out tasks with index 5-10"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "      2. `[:20]` filter out tasks with index 1-20"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "      3. `[:]` all tasks"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    "
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "- 0.2 Type Filter"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "  - Format: `/type \u003ctask type\u003e`"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "  - Example: `/type event` filter out all event tasks"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "- 0.3 Status Filter"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "  - Format: `/done \u003ctrue | false\u003e` "
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "  - Example: `/done true` filter out all tasks with status of done"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "  "
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "- 0.4 Time Filter"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "  - Format: `/\u003ctime comparator\u003e \u003cdate and time\u003e`"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "  - `\u003ctime comparator\u003e` includes `before`, `until`, `on`, `from`, `after`"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    \u003cbr\u003ebefore and after excludes tasks with `\u003cdate and time\u003e`"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    \u003cbr\u003euntil and from includes tasks with `\u003cdate and time\u003e`"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "  - Example: "
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    1. `/before 19:00` filter out all tasks that has time before today 19:00 "
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    2. `/from 20/1/2020 12:00` filter out all tasks that have time after or at 20 Jan 2020 12:00"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "### 1. Viewing help"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "* Format: `help (\u003ccommand\u003e | \u003cfilter\u003e)`"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "* Examples: "
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "  1. `help` show the general help information"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "  2. `help event` show the help information for event command"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "  3. `help index filter` show the help information for index filter"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "### 2. Adding a task"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "- 2.1 Adding a Todo task"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "  - Format: `todo \u003ctask description\u003e`"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "  - Examples: `todo buy apples` add a todo task with description \u0027buy apples\u0027"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "- 2.2 Adding an Event task"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "  - Format: `event \u003ctask description\u003e /at \u003cdate and time\u003e`"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "  - Examples: `event family dinner /at 31/12/2019 17:00` add an event task with description \u0027family dinner\u0027"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "  at 31 Dec 2019 17:00"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "  "
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "- 2.3 Adding a Deadline task"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "  - Format: `deadline \u003ctask description\u003e /by \u003cdate and time\u003e`"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "  - Examples: `deadline finish milk /by 30/11/2019 23:59` add a deadline task with description \u0027finish milk\u0027 whose"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "  deadline is 30 Nov 2019 23:59"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "  "
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "### 3. Deleting a task"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "* Format: `delete \u003cfilter\u003e`"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "* Example: "
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "  1. `delete 2 9 1` delete tasks with index 1, 2, 9 "
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "  2. `delete /done true` delete all tasks that are done"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "### 4. Setting a task status as done"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "* Format: `done \u003cfilter\u003e`"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "* Example: "
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "  1. `done [:9]` set all tasks with index 1-9 as done"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "  2. `done /before 12:00` set all tasks that have time before today 12:00 as done"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "### 5. Listing tasks"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "* Format: `list (\u003cfilter\u003e)`"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "* Index filter is not used for list command"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "* Example: "
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "  1. `list` list all tasks"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "  2. `list /done false` list all tasks that are not done"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "### 6. Finding tasks"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "* Format: `find \u003ckeyword\u003e`"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "* Example: `find chocolate` find all tasks that include word \u0027chocolate\u0027"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "### 7. Exiting the application"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "* Format: `bye`"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "* Example: `bye` exit the application"
      }
    ],
    "authorContributionMap": {
      "jyx11011": 92,
      "-": 12
    }
  },
  {
    "path": "gradlew.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "@rem Copyright 2015 the original author or authors."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "@rem Licensed under the Apache License, Version 2.0 (the \"License\");"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "@rem you may not use this file except in compliance with the License."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "@rem You may obtain a copy of the License at"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "@rem      https://www.apache.org/licenses/LICENSE-2.0"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "@rem Unless required by applicable law or agreed to in writing, software"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "@rem distributed under the License is distributed on an \"AS IS\" BASIS,"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "@rem WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "@rem See the License for the specific language governing permissions and"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "@rem limitations under the License."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "@if \"%DEBUG%\" \u003d\u003d \"\" @echo off"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "@rem ##########################################################################"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "@rem  Gradle startup script for Windows"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "@rem ##########################################################################"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Set local scope for the variables with windows NT shell"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%OS%\"\u003d\u003d\"Windows_NT\" setlocal"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "set DIRNAME\u003d%~dp0"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%DIRNAME%\" \u003d\u003d \"\" set DIRNAME\u003d."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "set APP_BASE_NAME\u003d%~n0"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "set APP_HOME\u003d%DIRNAME%"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "set DEFAULT_JVM_OPTS\u003d\"-Xmx64m\" \"-Xms64m\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Find java.exe"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "if defined JAVA_HOME goto findJavaFromJavaHome"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "set JAVA_EXE\u003djava.exe"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "%JAVA_EXE% -version \u003eNUL 2\u003e\u00261"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%ERRORLEVEL%\" \u003d\u003d \"0\" goto init"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "echo."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "echo ERROR: JAVA_HOME is not set and no \u0027java\u0027 command could be found in your PATH."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "echo."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "echo Please set the JAVA_HOME variable in your environment to match the"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "echo location of your Java installation."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "goto fail"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ":findJavaFromJavaHome"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "set JAVA_HOME\u003d%JAVA_HOME:\"\u003d%"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "set JAVA_EXE\u003d%JAVA_HOME%/bin/java.exe"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "if exist \"%JAVA_EXE%\" goto init"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "echo."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "echo."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "echo Please set the JAVA_HOME variable in your environment to match the"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "echo location of your Java installation."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "goto fail"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ":init"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Get command-line arguments, handling Windows variants"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "if not \"%OS%\" \u003d\u003d \"Windows_NT\" goto win9xME_args"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ":win9xME_args"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Slurp the command line arguments."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "set CMD_LINE_ARGS\u003d"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "set _SKIP\u003d2"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ":win9xME_args_slurp"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "if \"x%~1\" \u003d\u003d \"x\" goto execute"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "set CMD_LINE_ARGS\u003d%*"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ":execute"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Setup the command line"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "set CLASSPATH\u003d%APP_HOME%\\gradle\\wrapper\\gradle-wrapper.jar"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Execute Gradle"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "\"%JAVA_EXE%\" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% \"-Dorg.gradle.appname\u003d%APP_BASE_NAME%\" -classpath \"%CLASSPATH%\" org.gradle.wrapper.GradleWrapperMain %CMD_LINE_ARGS%"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ":end"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "@rem End local scope for the variables with windows NT shell"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%ERRORLEVEL%\"\u003d\u003d\"0\" goto mainEnd"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ":fail"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "rem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "rem the _cmd.exe /c_ return code!"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "if  not \"\" \u003d\u003d \"%GRADLE_EXIT_CONSOLE%\" exit 1"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "exit /b 1"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ":mainEnd"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%OS%\"\u003d\u003d\"Windows_NT\" endlocal"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ":omega"
      }
    ],
    "authorContributionMap": {
      "jyx11011": 17,
      "-": 83
    }
  },
  {
    "path": "src/main/java/Launcher.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jyx11011"
        },
        "content": " * A class to launch the app."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jyx11011"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Main method."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @param args not used."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        Application.launch(Main.class, args);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jyx11011": 14
    }
  },
  {
    "path": "src/main/java/Main.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import duke.handler.Duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import duke.ui.MainWindow;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jyx11011"
        },
        "content": " * A class representing the javafx application."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jyx11011"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "public class Main extends Application {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    private static final String FILEPATH \u003d Path.of(System.getProperty(\"user.home\"), \"duke.txt\").toString();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    private Duke duke \u003d new Duke(FILEPATH);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * The main entry point for JavaFX applications."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @param stage the stage to set set scene."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            AnchorPane anchorPane \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            Scene scene \u003d new Scene(anchorPane);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            stage.setTitle(\"Duke\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            stage.setOnCloseRequest(event -\u003e {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                    duke.storeTasks();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                } catch (IOException e) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                    e.printStackTrace();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            });"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().init(duke);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jyx11011": 45
    }
  },
  {
    "path": "src/main/java/duke/command/AddCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jyx11011"
        },
        "content": " * A class representing an add command."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jyx11011"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "public abstract class AddCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    private Task task;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Class constructor specifying the task to be added."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @param task the task to be added."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public AddCommand(Task task) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        this.task \u003d task;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Returns the task to be added."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @return the task to be added."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public Task getTask() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        return task;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Returns the result of executing the command."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Add the task to the list."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @param tasks a list task to work on."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @return the result of executing the command."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public CommandResult execute(TaskList tasks) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        tasks.addTask(task);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        return new CommandResult(CommandType.Add, tasks.getSize(), task);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jyx11011": 39
    }
  },
  {
    "path": "src/main/java/duke/command/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import duke.exception.IllegalDescriptionException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import duke.exception.IllegalIndexOfTaskException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jyx11011"
        },
        "content": " * An abstract class representing a command."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jyx11011"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Returns the result of executing the command."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @param tasks a list task to work on."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @return the result of executing the command."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @throws IllegalIndexOfTaskException If the index of the task is out of range."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public abstract CommandResult execute(TaskList tasks) throws"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            IllegalIndexOfTaskException, IllegalDescriptionException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jyx11011": 19
    }
  },
  {
    "path": "src/main/java/duke/command/CommandResult.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jyx11011"
        },
        "content": " * A class representing the result of executing a command."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jyx11011"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "public class CommandResult {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    private CommandType commandType;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    private Task[] tasks;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    private int taskListSize;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Class constructor specifying the type of the command."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @param commandType type of the command that is executed to produce the result."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public CommandResult(CommandType commandType) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        this.commandType \u003d commandType;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Class constructor specifying the type of the command and an array of tasks."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @param commandType type of the command that is executed to produce the result."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @param tasks an array of tasks generated by executing the command."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public CommandResult(CommandType commandType, Task... tasks) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        this.commandType \u003d commandType;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        this.tasks \u003d tasks;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Class constructor specifying the type of the command, the total number of tasks, and an array of tasks."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @param commandType type of the command that is executed to produce the result."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @param taskListSize the size of the task list that the user has."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @param tasks an array of tasks generated by executing the command."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public CommandResult(CommandType commandType, int taskListSize, Task... tasks) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        this(commandType, tasks);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        this.taskListSize \u003d taskListSize;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Class constructor specifying the type of the command and an array list of tasks."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @param commandType type of the command that is executed to produce the result."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @param tasks an array list of tasks generated by executing the command."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public CommandResult(CommandType commandType, ArrayList\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        this(commandType, tasks.toArray(new Task[tasks.size()]));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Class constructor specifying the type of the command, the total number of tasks, and an array list of tasks."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @param commandType type of the command that is executed to produce the result."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @param taskListSize the size of the task list that the user has."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @param tasks an array list of tasks generated by executing the command."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public CommandResult(CommandType commandType, int taskListSize, ArrayList\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        this(commandType, taskListSize, tasks.toArray(new Task[tasks.size()]));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Returns the type of command that this result is produced by."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @return the type of command that this result is produced by."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public CommandType getCommandType() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        return commandType;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Returns an array of tasks that are produced by executing the command."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @return an array of tasks that are produced by executing the command."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public Task[] getTasks() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        return tasks;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Returns the size of the task list."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @return the size of the task list."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public int getTaskListSize() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        return taskListSize;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jyx11011": 86
    }
  },
  {
    "path": "src/main/java/duke/command/CommandType.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jyx11011"
        },
        "content": " * Types of command."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jyx11011"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "public enum CommandType {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Add command."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * It includes todo, event and deadline command."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    Add,"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Delete command."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    Delete,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Find command."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    Find,"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * List command."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    List,"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Done command."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    Done,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Exit command."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    Exit,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Help command."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    Help;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public enum SubCommandType {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "         * Todo command, subtype of Add."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "         */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        Todo,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "         * Event command, subtype of Add."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "         */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        Event,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "         * Deadline command, subtype of Add."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "         */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        Deadline,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "         * Command with a status filter, subtype of Delete, Done, List."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "         */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        StatusFilter,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "         * Command with a time filter, subtype of Delete, Done, List."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "         */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        TimeFilter,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "         * Command with a type filter, subtype of Delete, Done, List."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "         */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        TypeFilter,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "         * Command with a index filter, subtype of Delete, Done."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "         */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        IndexFilter,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "         * Filter."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "         */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        Filter;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jyx11011": 71
    }
  },
  {
    "path": "src/main/java/duke/command/DeadlineCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import duke.exception.IllegalDescriptionException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jyx11011"
        },
        "content": " * A class representing an add deadline task command."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jyx11011"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "public class DeadlineCommand extends AddCommand {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"deadline\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Class constructor specifying the task description and deadline."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @param description the description of the task."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @param dateTime the deadline of the task."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @throws IllegalDescriptionException If the description is illegal."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public DeadlineCommand(String description, LocalDateTime dateTime)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            throws IllegalDescriptionException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        super(new Deadline(description, dateTime));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jyx11011": 24
    }
  },
  {
    "path": "src/main/java/duke/command/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import duke.exception.IllegalDescriptionException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import duke.filter.Filter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jyx11011"
        },
        "content": " * A class representing a delete command."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jyx11011"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    private Filter filter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Constructor specifying a task filter to filter tasks to be deleted."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @param filter a task filter to filter tasks to be deleted."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public DeleteCommand(Filter filter) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        this.filter \u003d filter;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Returns the result of executing the command."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @param tasks a list task to work on."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @return the result of executing the command."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public CommandResult execute(TaskList tasks) throws IllegalDescriptionException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        ArrayList\u003cTask\u003e deletedTasks \u003d filter.filter(tasks);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        if (deletedTasks.isEmpty()) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            throw new IllegalDescriptionException(\"No task satisfies the condition.\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        for (Task task: deletedTasks) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            tasks.removeTask(task);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        return new CommandResult(CommandType.Delete, deletedTasks);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jyx11011": 41
    }
  },
  {
    "path": "src/main/java/duke/command/DoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import duke.exception.IllegalDescriptionException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import duke.filter.Filter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jyx11011"
        },
        "content": " * A class representing a done command."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jyx11011"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "public class DoneCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"done\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    private Filter filter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Constructor specifying a task filter to filter tasks to be set as done."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @param filter a task filter to filter tasks to be set as done."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public DoneCommand(Filter filter) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        this.filter \u003d filter;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Returns the result of executing the command."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @param tasks a list task to work on."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @return the result of executing the command."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public CommandResult execute(TaskList tasks) throws IllegalDescriptionException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        ArrayList\u003cTask\u003e doneTasks \u003d filter.filter(tasks);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        if (doneTasks.isEmpty()) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            throw new IllegalDescriptionException(\"No task satisfies the condition.\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        for (Task task: doneTasks) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            task.setDone();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        return new CommandResult(CommandType.Done, doneTasks);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jyx11011": 41
    }
  },
  {
    "path": "src/main/java/duke/command/EventCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import duke.exception.IllegalDescriptionException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jyx11011"
        },
        "content": " * A class representing a event task command."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jyx11011"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "public class EventCommand extends AddCommand {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"event\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Class constructor specifying the task description and time."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @param description the description of the task."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @param dateTime the time at which the event happens."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @throws IllegalDescriptionException If the description is illegal."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public EventCommand(String description, LocalDateTime dateTime)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            throws IllegalDescriptionException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        super(new Event(description, dateTime));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jyx11011": 24
    }
  },
  {
    "path": "src/main/java/duke/command/ExitCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jyx11011"
        },
        "content": " * A class representing an exit command."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jyx11011"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"bye\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Returns the result of executing the command."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @param tasks a list task to work on."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @return the result of executing the command."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public CommandResult execute(TaskList tasks) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        return new CommandResult(CommandType.Exit);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jyx11011": 20
    }
  },
  {
    "path": "src/main/java/duke/command/FindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import duke.exception.IllegalDescriptionException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jyx11011"
        },
        "content": " * A class representing a find command."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jyx11011"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"find\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    private String keyword;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Class constructor specifying the keyword."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @param keyword the keyword to be searched."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @throws IllegalDescriptionException If the keyword is empty."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public FindCommand(String keyword) throws IllegalDescriptionException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        if (keyword.isEmpty()) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            throw new IllegalDescriptionException(\"The keyword cannot be empty.\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        this.keyword \u003d keyword.toLowerCase();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Returns the result of executing the command."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @param tasks a list task to work on."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @return the result of executing the command."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public CommandResult execute(TaskList tasks) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        ArrayList\u003cTask\u003e taskList \u003d tasks.getTasks();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        ArrayList\u003cTask\u003e matchingTasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        for (Task task: taskList) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            if (task.toString().toLowerCase().indexOf(keyword) !\u003d -1) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                matchingTasks.add(task);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        return new CommandResult(CommandType.Find, matchingTasks);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jyx11011": 44
    }
  },
  {
    "path": "src/main/java/duke/command/HelpCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import duke.exception.IllegalDescriptionException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import duke.exception.IllegalIndexOfTaskException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import duke.ui.HelpCommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"help\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    private Optional\u003cCommandType\u003e commandType \u003d Optional.empty();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    private Optional\u003cCommandType.SubCommandType\u003e subCommandType \u003d Optional.empty();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Constructor."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public HelpCommand() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Constructor specifying the command type asked by the help command."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public HelpCommand(CommandType commandType) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        this.commandType \u003d Optional.of(commandType);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Constructor specifying the sub command type asked by the help command."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public HelpCommand(CommandType.SubCommandType subCommandType) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        this.subCommandType \u003d Optional.of(subCommandType);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Constructor specifying the command type and sub command type asked by the help command."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public HelpCommand(CommandType commandType, CommandType.SubCommandType subCommandType) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        this.commandType \u003d Optional.of(commandType);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        this.subCommandType \u003d Optional.of(subCommandType);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Returns the result of executing the command."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Add the task to the list."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @param tasks a list task to work on."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @return the result of executing the command."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public CommandResult execute(TaskList tasks) throws IllegalIndexOfTaskException, IllegalDescriptionException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        return new HelpCommandResult(commandType, subCommandType);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jyx11011": 53
    }
  },
  {
    "path": "src/main/java/duke/command/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import duke.exception.IllegalDescriptionException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import duke.filter.Filter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jyx11011"
        },
        "content": " * A class representing a list command."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jyx11011"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    private Optional\u003cFilter\u003e filter;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Class constructor."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public ListCommand() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        filter \u003d Optional.\u003cFilter\u003eempty();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Constructor specifying a task filter to filter tasks to be listed."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @param filter a task filter to filter tasks to be listed."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public ListCommand(Filter filter) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        this.filter \u003d Optional.\u003cFilter\u003eof(filter);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Returns the result of executing the command."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @param tasks a list task to work on."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @return the result of executing the command."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public CommandResult execute(TaskList tasks) throws IllegalDescriptionException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        if (filter.isPresent()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            ArrayList\u003cTask\u003e tasklist \u003d filter.get().filter(tasks);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            if (tasklist.isEmpty()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                throw new IllegalDescriptionException(\"No task satisfies the condition.\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            return new CommandResult(CommandType.List, tasklist);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            return new CommandResult(CommandType.List, tasks.getTasks());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jyx11011": 50
    }
  },
  {
    "path": "src/main/java/duke/command/ToDoCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import duke.exception.IllegalDescriptionException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import duke.task.ToDo;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jyx11011"
        },
        "content": " * A class representing add a todo task command."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jyx11011"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "public class ToDoCommand extends AddCommand {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"todo\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Class constructor specifying the task description."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @param description the task description."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @throws IllegalDescriptionException If the description is illegal."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public ToDoCommand(String description) throws IllegalDescriptionException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        super(new ToDo(description));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jyx11011": 20
    }
  },
  {
    "path": "src/main/java/duke/exception/IllegalCommandException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "/** An exception to be thrown when the command is not legal.*/"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "public class IllegalCommandException extends Exception {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Constructor specifying the message."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @param message message about the exception."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public IllegalCommandException(String message) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jyx11011": 12
    }
  },
  {
    "path": "src/main/java/duke/exception/IllegalCommandTypeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "public class IllegalCommandTypeException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Constructor specifying the message."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @param message message about the exception."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public IllegalCommandTypeException(String message) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jyx11011": 11
    }
  },
  {
    "path": "src/main/java/duke/exception/IllegalDateException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "/** An exception to be thrown when the date is not legal.*/"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "public class IllegalDateException extends IllegalDescriptionException {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Constructor specifying the message."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @param message message about the exception."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public IllegalDateException(String message) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jyx11011": 12
    }
  },
  {
    "path": "src/main/java/duke/exception/IllegalDescriptionException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "/** An exception to be thrown when the task description is not legal.*/"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "public class IllegalDescriptionException extends Exception {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Constructor specifying the message."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @param message message about the exception."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public IllegalDescriptionException(String message) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jyx11011": 12
    }
  },
  {
    "path": "src/main/java/duke/exception/IllegalIndexOfTaskException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "/** An exception to be thrown when the task index is illegal.*/"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "public class IllegalIndexOfTaskException extends Exception {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Constructor specifying the message."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @param message message about the exception."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public IllegalIndexOfTaskException(String message) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jyx11011": 12
    }
  },
  {
    "path": "src/main/java/duke/exception/IllegalTimeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "/** An exception to be thrown when the time is not legal.*/"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "public class IllegalTimeException extends IllegalDescriptionException {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Constructor specifying the message."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @param message message about the exception."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public IllegalTimeException(String message) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jyx11011": 12
    }
  },
  {
    "path": "src/main/java/duke/filter/ComparisonOperator.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "package duke.filter;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jyx11011"
        },
        "content": " * Comparison Operators used in filter."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jyx11011"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "public enum ComparisonOperator {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Less than."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    LessThan,"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Less than or equal to."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    LessThanOrEqualTo,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Equal to."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    EqualTo,"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Greater than or equal to."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    GreaterThanOrEqualTo,"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Greater than."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    GreaterThan;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jyx11011": 27
    }
  },
  {
    "path": "src/main/java/duke/filter/Filter.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "package duke.filter;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jyx11011"
        },
        "content": " * Represents an operation to filter a list of tasks."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jyx11011"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "public interface Filter {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Returns an ArrayList of tasks that are filtered out by the filter."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @param tasks a list of tasks to be filtered."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @return an ArrayList of tasks that are filtered out by the filter."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    ArrayList\u003cTask\u003e filter(TaskList tasks);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jyx11011": 18
    }
  },
  {
    "path": "src/main/java/duke/filter/IndexFilter.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "package duke.filter;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import java.util.stream.IntStream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jyx11011"
        },
        "content": " * A class representing a filter to filter tasks by indices."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jyx11011"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "public class IndexFilter implements Filter {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    private IntStream range;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Constructor specifying a range of indices of resulting tasks."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @param range a range of indices of resulting tasks."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public IndexFilter(IntStream range) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        this.range \u003d range;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Returns an ArrayList of tasks that are filtered out by the filter."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @param tasks a list of tasks to be filtered."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @return an ArrayList of tasks that are filtered out by the filter."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public ArrayList\u003cTask\u003e filter(TaskList tasks) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        ArrayList\u003cTask\u003e result \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        range.takeWhile(index -\u003e index \u003c\u003d tasks.getSize())"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                .forEach(index -\u003e {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                    try {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                        result.add(tasks.getTaskAtIndex(index));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                    } catch (Exception e) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                        //Ignore out of bounds index"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                });"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jyx11011": 41
    }
  },
  {
    "path": "src/main/java/duke/filter/StatusFilter.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "package duke.filter;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "public class StatusFilter extends TaskFilter {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    private boolean isDoneStatus;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Constructor specifying the isDoneStatus for the filter."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @param isDoneStatus isDoneStatus for the filter."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public StatusFilter(boolean isDoneStatus) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        this.isDoneStatus \u003d isDoneStatus;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Returns an ArrayList of tasks that are filtered out by the filter."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @param tasks a list of tasks to be filtered."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @return an ArrayList of tasks that are filtered out by the filter."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public ArrayList\u003cTask\u003e filter(TaskList tasks) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        ArrayList\u003cTask\u003e result \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        for (Task task: tasks.getTasks()) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            if (test(task)) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                result.add(task);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Returns true if the task passes the filter."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @param task the task to be tested"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @return true if the task passes the filter."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public boolean test(Task task) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        return task.getStatus() \u003d\u003d isDoneStatus;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jyx11011": 44
    }
  },
  {
    "path": "src/main/java/duke/filter/TaskFilter.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "package duke.filter;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jyx11011"
        },
        "content": " * An abstract class representing a filter to filter tasks by task property."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jyx11011"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "public abstract class TaskFilter implements Filter, Predicate\u003cTask\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Returns an ArrayList of tasks that are filtered out by the filter."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @param tasks a list of tasks to be filtered."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @return an ArrayList of tasks that are filtered out by the filter."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public ArrayList\u003cTask\u003e filter(TaskList tasks) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        ArrayList\u003cTask\u003e result \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        for (Task task: tasks.getTasks()) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            if (test(task)) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                result.add(task);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jyx11011": 28
    }
  },
  {
    "path": "src/main/java/duke/filter/TimeFilter.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "package duke.filter;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jyx11011"
        },
        "content": " * A class representing a filter to filter tasks by time."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jyx11011"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "public class TimeFilter extends TaskFilter {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    private ComparisonOperator operator;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    private LocalDateTime dateTime;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Constructor specifying the comparison operator and the date and time."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @param operator a comparison operator"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @param dateTime the date and time to be compared to."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public TimeFilter(ComparisonOperator operator, LocalDateTime dateTime) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        this.operator \u003d operator;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        this.dateTime \u003d dateTime;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Returns true if the task passes the filter."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @param task the task to be tested"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @return true if the task passes the filter."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public boolean test(Task task) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        if (task.getDateTime() \u003d\u003d null) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        switch (operator) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        case LessThan:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            return task.getDateTime().isBefore(dateTime);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        case LessThanOrEqualTo:"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            return task.getDateTime().isBefore(dateTime) || task.getDateTime().isEqual(dateTime);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        case EqualTo:"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            return task.getDateTime().isEqual(dateTime);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        case GreaterThanOrEqualTo:"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            return task.getDateTime().isAfter(dateTime) || task.getDateTime().isEqual(dateTime);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        case GreaterThan:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            return task.getDateTime().isAfter(dateTime);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jyx11011": 49
    }
  },
  {
    "path": "src/main/java/duke/filter/TypeFilter.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "package duke.filter;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import duke.task.TaskType;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jyx11011"
        },
        "content": " * A class representing a filter to filter tasks by type."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jyx11011"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "public class TypeFilter extends TaskFilter {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    private TaskType taskType;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Constructor specifying the task type."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @param taskType the task type to be compared to."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public TypeFilter(TaskType taskType) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        this.taskType \u003d taskType;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Returns true if the the task passes the filter."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @param task a task to be tested."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @return true if the the task passes the filter."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public boolean test(Task task) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        return task.getTaskType().equals(taskType);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jyx11011": 29
    }
  },
  {
    "path": "src/main/java/duke/handler/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "package duke.handler;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import duke.command.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import duke.exception.IllegalCommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import duke.exception.IllegalDescriptionException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import duke.exception.IllegalIndexOfTaskException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import duke.parser.Parser;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jyx11011"
        },
        "content": " * A class manages duke operation."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jyx11011"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    private Parser parser;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Class constructor specifying the file path for storage."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @param filePath the file path for storage."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public Duke(String filePath) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        storage \u003d new Storage(filePath);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        parser \u003d new Parser();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Loads tasks from the disk."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @throws FileNotFoundException If the file from which to load task is not found."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public void loadTasks() throws FileNotFoundException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        tasks \u003d new TaskList(storage.load());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Stores all tasks in the task list to disk."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @throws IOException If an input or output exception occurred."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public void storeTasks() throws IOException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        storage.store(tasks);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Returns the result of executing the command."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @param commandString command to be parsed and executed."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @return the result of executing the command."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @throws IllegalDescriptionException If the task description is illegal."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @throws IllegalIndexOfTaskException If the indices of task is illegal."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @throws IllegalCommandException If the command is not recognized."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public CommandResult execute(String commandString) throws"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            IllegalDescriptionException, IllegalIndexOfTaskException, IllegalCommandException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        Command command \u003d parser.parseCommand(commandString);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        CommandResult result \u003d command.execute(tasks);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Returns a string representation of the command result."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @param commandResult the result to be shown."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @return a string representation of the command result."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public String getResultUi(CommandResult commandResult) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        return ui.composeResult(commandResult);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Returns a string representation of an exception occurring during parsing."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @param e the exception to be shown."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @return a string representation of an exception occurring during parsing."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public String getParsingErrorUi(Exception e) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        return ui.showParsingError(e);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Returns a string representation of an exception occurring during storing."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @param e the exception to be shown."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @return a string representation of an exception occurring during storing."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public String getStoringErrorUi(IOException e) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        return ui.showStoringError(e);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jyx11011": 93
    }
  },
  {
    "path": "src/main/java/duke/help/HelpInfoOfAddCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "package duke.help;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import duke.command.CommandType;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import duke.exception.IllegalCommandTypeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "public class HelpInfoOfAddCommand extends HelpInformation {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    private CommandType.SubCommandType subCommandType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Constructor specifying the sub command type of an Add command."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @param subCommandType the sub command type of an Add command."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @throws IllegalCommandTypeException If the sub command type is not Todo, Event or Deadline."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public HelpInfoOfAddCommand(CommandType.SubCommandType subCommandType) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        switch (subCommandType) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        case Todo:"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        case Event:"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        case Deadline:"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            this.subCommandType \u003d subCommandType;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Returns a string representation of help information."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @return a string representation of help information."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public String getHelpInformation() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        switch (subCommandType) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        case Todo:"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            return \"The format of Todo command is:\\ntodo \u003ctask description\u003e\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        case Event:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            return \"The format of Event command is:\\nevent \u003ctask description\u003e /at (DD/MM/YYYY) HH:MM\\n\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                    + \"If date is omitted, then it is set to be today by default\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        case Deadline:"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            return \"The format of Deadline command is:\\ndeadline \u003ctask description\u003e /by (DD/MM/YYYY) HH:MM\\n\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                    + \"If date is omitted, then it is set to be today by default\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            return \"\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jyx11011": 44
    }
  },
  {
    "path": "src/main/java/duke/help/HelpInfoOfDeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "package duke.help;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "public class HelpInfoOfDeleteCommand extends HelpInformation {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Returns a string representation of help information."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @return a string representation of help information."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public String getHelpInformation() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        return \"Delete command deletes all the tasks you specify.\\n\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                + \"Type \u0027delete \u003cfilter\u003e\u0027 to delete all tasks filtered out by the filter.\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                + \"To learn more about filter usage, type \u0027help filter\u0027 or other specific filters.\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jyx11011": 14
    }
  },
  {
    "path": "src/main/java/duke/help/HelpInfoOfDoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "package duke.help;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "public class HelpInfoOfDoneCommand extends HelpInformation {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Returns a string representation of help information."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @return a string representation of help information."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public String getHelpInformation() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        return \"Done command set status of all the tasks you specify to be done.\\n\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                + \"Type \u0027done \u003cfilter\u003e\u0027 to set all tasks filtered out by the filter as done.\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                + \"To learn more about filter usage, type \u0027help filter\u0027 or other specific filters.\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jyx11011": 14
    }
  },
  {
    "path": "src/main/java/duke/help/HelpInfoOfExitCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "package duke.help;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "public class HelpInfoOfExitCommand extends HelpInformation {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Returns a string representation of help information."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @return a string representation of help information."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public String getHelpInformation() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        return \"To exit the app, type \u0027bye\u0027\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "jyx11011": 13
    }
  },
  {
    "path": "src/main/java/duke/help/HelpInfoOfFilterUsage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "package duke.help;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "public class HelpInfoOfFilterUsage extends HelpInformation {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Returns a string representation of help information."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @return a string representation of help information."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public String getHelpInformation() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        return \"Filter is used to filter tasks in your list by certain criteria.\\n\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                + \"Duke supports IndexFilter, StatusFilter, TimeFilter and TypeFilter. \""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                + \"It is easy to use as well as makes your operations more efficiently.\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                + \"Type \u0027help \u003ccriteria\u003e filter\u0027 (eg. help index filter) to learn more about how to use filter.\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jyx11011": 15
    }
  },
  {
    "path": "src/main/java/duke/help/HelpInfoOfFindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "package duke.help;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "public class HelpInfoOfFindCommand extends HelpInformation {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Returns a string representation of help information."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @return a string representation of help information."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public String getHelpInformation() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        return \"Find command looks for all tasks that possibly match your keyword.\\n\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                + \"Type \u0027find \u003ckeyword\u003e\u0027 to look for all tasks match the \u003ckeyword\u003e.\\n\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jyx11011": 13
    }
  },
  {
    "path": "src/main/java/duke/help/HelpInfoOfIndexFilter.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "package duke.help;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "public class HelpInfoOfIndexFilter extends HelpInfoOfFilterUsage {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Returns a string representation of help information."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @return a string representation of help information."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public String getHelpInformation() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        return \"IndexFilter is used to filter tasks in your list by index of tasks.\\n\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                + \"Basically, you need to specify a list of indices or a range of indices.\\n\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                + \"1. To specify a list of indices, literally type indices(separated by spaces) of tasks.\\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                + \"2. To specify a range of indices, type [\u003cstart\u003e:\u003cend\u003e]. All tasks with indices greater than\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                + \"or equal to \u003cstart\u003e and less than \u003cend\u003e are selected. If \u003cstart\u003e is omitted, then it is 1 by\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                + \"by default. If \u003cend\u003e is omitted, then it is the last index in the task list + 1.\\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                + \"It is often used with Delete or Done command.\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                + super.getHelpInformation();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jyx11011": 19
    }
  },
  {
    "path": "src/main/java/duke/help/HelpInfoOfListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "package duke.help;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "public class HelpInfoOfListCommand extends HelpInformation {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Returns a string representation of help information."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @return a string representation of help information."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public String getHelpInformation() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        return \"List command list all the tasks you specify.\\n\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                + \"Type \u0027list \u003cfilter\u003e\u0027 to list all tasks filtered out by the filter.\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                + \"All filter except index filter is used.\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                + \"If filter is omitted, then all the tasks in your list is shown.\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                + \"To learn more about filter usage, type \u0027help filter\u0027 or other specific filters.\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jyx11011": 16
    }
  },
  {
    "path": "src/main/java/duke/help/HelpInfoOfStatusFilter.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "package duke.help;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "public class HelpInfoOfStatusFilter extends HelpInfoOfFilterUsage {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Returns a string representation of help information."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @return a string representation of help information."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public String getHelpInformation() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        return \"StatusFilter is used to filter tasks in your list by done status.\\n\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                + \"Basically, you need to specify the status of tasks that you want to select.\\n\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                + \"To select all the tasks that are done, type \u0027//done true\u0027.\\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                + \"To select all the tasks that are undon, type \u0027//done false\u0027.\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                + super.getHelpInformation();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jyx11011": 16
    }
  },
  {
    "path": "src/main/java/duke/help/HelpInfoOfTimeFilter.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "package duke.help;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "public class HelpInfoOfTimeFilter extends HelpInfoOfFilterUsage {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Returns a string representation of help information."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @return a string representation of help information."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public String getHelpInformation() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        return \"TimeFilter is used to filter tasks in your list by the time associated with the tasks.\\n\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                + \"Basically, you need to specify time period of tasks that you want to select.\\n\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                + \"To select all the tasks within a certain time, type \u0027//\u003ctime comparator\u003e (DD/MM/YYYY) HH:MM\u0027.\\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                + \"If date is omitted, it is set to today by default.\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                + \"\u003ctime operator\u003e consists of on, before, after, from, until\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                + super.getHelpInformation();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jyx11011": 17
    }
  },
  {
    "path": "src/main/java/duke/help/HelpInfoOfTypeFilter.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "package duke.help;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "public class HelpInfoOfTypeFilter extends HelpInfoOfFilterUsage {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Returns a string representation of help information."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @return a string representation of help information."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public String getHelpInformation() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        return \"TypeFilter is used to filter tasks in your list by task type.\\n\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                + \"Basically, you need to specify the type of tasks that you want to select.\\n\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                + \"To select all event task, type \u0027//type event\u0027.\\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                + \"To select all deadline tasks, type \u0027//type deadline\u0027.\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                + \"To select all todo tasks, type \u0027//type todo\u0027.\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                + super.getHelpInformation();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jyx11011": 17
    }
  },
  {
    "path": "src/main/java/duke/help/HelpInformation.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "package duke.help;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import duke.command.CommandType;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "public class HelpInformation {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Returns a string representation of help information."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @return a string representation of help information."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public String getHelpInformation() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        return \"Welcome to Duke application. This is an application for you to easily create a personal task list \""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                + \"and retrieve tasks efficiently.\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                + \"Duke supports Add(Todo, Event, Deadline), Done, Delete, List, Find, Exit command and filter. \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                + \"Type \u0027help\u0027, \u0027help \u003ccommand\u003e\u0027 or \u0027help \u003cfilter\u003e\u0027 to learn more. \""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                + \"Try \u0027help todo\u0027 now to learn how to add a todo task!\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Returns a help information class based on the command type."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @param commandType type of command that asks for help information."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @param subCommandType type of sub command that asks for help information."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @return a help information class based on the command type."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public static HelpInformation getHelpInformationFor(Optional\u003cCommandType\u003e commandType,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                                                        Optional\u003cCommandType.SubCommandType\u003e subCommandType) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        if (commandType.isEmpty() \u0026\u0026 subCommandType.isEmpty()) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            return getHelpInformationFor();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        } else if (commandType.isEmpty()) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            return getHelpInformationFor(subCommandType.get());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        } else if (subCommandType.isEmpty()) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            return getHelpInformationFor(commandType.get());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            return getHelpInformationFor(commandType.get(), subCommandType.get());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    private static HelpInformation getHelpInformationFor(CommandType commandType) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        switch (commandType) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        case Delete:"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            return new HelpInfoOfDeleteCommand();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        case Done:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            return new HelpInfoOfDoneCommand();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        case List:"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            return new HelpInfoOfListCommand();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        case Exit:"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            return new HelpInfoOfExitCommand();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        case Find:"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            return new HelpInfoOfFindCommand();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            return new HelpInformation();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    private static HelpInformation getHelpInformationFor(CommandType.SubCommandType commandType) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        switch (commandType) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        case Filter:"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            return new HelpInfoOfFilterUsage();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        case IndexFilter:"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            return new HelpInfoOfIndexFilter();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        case TypeFilter:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            return new HelpInfoOfTypeFilter();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        case TimeFilter:"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            return new HelpInfoOfTimeFilter();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        case StatusFilter:"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            return new HelpInfoOfStatusFilter();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            return new HelpInformation();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    private static HelpInformation getHelpInformationFor(CommandType commandType,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                                                         CommandType.SubCommandType subCommandType) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        switch (commandType) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        case Add:"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            return new HelpInfoOfAddCommand(subCommandType);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            return new HelpInformation();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    private static HelpInformation getHelpInformationFor() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        return new HelpInformation();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jyx11011": 86
    }
  },
  {
    "path": "src/main/java/duke/parser/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "package duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import duke.command.CommandType;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import duke.command.DeadlineCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import duke.command.DeleteCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import duke.command.DoneCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import duke.command.EventCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import duke.command.ExitCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import duke.command.FindCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import duke.command.HelpCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import duke.command.ListCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import duke.command.ToDoCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import duke.exception.IllegalCommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import duke.exception.IllegalDateException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import duke.exception.IllegalDescriptionException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import duke.exception.IllegalIndexOfTaskException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import duke.exception.IllegalTimeException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import duke.filter.ComparisonOperator;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import duke.filter.IndexFilter;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import duke.filter.StatusFilter;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import duke.filter.TimeFilter;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import duke.filter.TypeFilter;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import duke.help.HelpInfoOfAddCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import duke.task.TaskType;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import java.time.DateTimeException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import java.util.stream.IntStream;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "/**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jyx11011"
        },
        "content": " * A class representing a parser."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jyx11011"
        },
        "content": " */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Returns the command by parsing the command string that typed by the user."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @param commandString the command typed by the user"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @return the command by parsing the command string that typed by the user."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @throws IllegalDescriptionException If the description of the task is illegal."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @throws IllegalCommandException If the command is illegal."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public Command parseCommand(String commandString)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            throws IllegalDescriptionException, IllegalCommandException, IllegalIndexOfTaskException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        String stringWithoutLeadingSpaces \u003d commandString.stripLeading();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        String commandType \u003d getFirstWord(stringWithoutLeadingSpaces).toLowerCase();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        String description \u003d removeFirstWord(stringWithoutLeadingSpaces);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        switch (commandType) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        //Ignore words after bye"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            return parseListCommand(description);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        case DoneCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            return parseDoneCommand(description);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            return parseDeleteCommand(description);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        case ToDoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            return new ToDoCommand(description);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            return new FindCommand(description);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        case DeadlineCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            return parseDeadlineTask(description);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        case EventCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            return parseEventTask(description);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            return parseHelpCommand(description);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            throw new IllegalCommandException("
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                    \"I\u0027m sorry, but I don\u0027t know what that means :-(\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    private HelpCommand parseHelpCommand(String description) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        String firstWord \u003d getFirstWord(description).toLowerCase();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        switch (firstWord) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        case \"\":"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        case \"done\":"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            return new HelpCommand(CommandType.Done);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        case \"delete\":"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            return new HelpCommand(CommandType.Delete);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        case \"list\":"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            return new HelpCommand(CommandType.List);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        case \"find\":"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            return new HelpCommand(CommandType.Find);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        case \"filter\":"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            return new HelpCommand(CommandType.SubCommandType.Filter);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        case \"index\":"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            return new HelpCommand(CommandType.SubCommandType.IndexFilter);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        case \"time\":"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            return new HelpCommand(CommandType.SubCommandType.TimeFilter);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        case \"type\":"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            return new HelpCommand(CommandType.SubCommandType.TypeFilter);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        case \"status\":"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            return new HelpCommand(CommandType.SubCommandType.StatusFilter);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        case \"todo\":"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            return new HelpCommand(CommandType.Add, CommandType.SubCommandType.Todo);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        case \"deadline\":"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            return new HelpCommand(CommandType.Add, CommandType.SubCommandType.Deadline);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        case \"event\":"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            return new HelpCommand(CommandType.Add, CommandType.SubCommandType.Event);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        case \"exit\":"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        case \"bye\":"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            return new HelpCommand(CommandType.Exit);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    private DeadlineCommand parseDeadlineTask(String description) throws IllegalDescriptionException {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        int indexOfTime \u003d description.toLowerCase().indexOf(\"/by\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        if (indexOfTime \u003d\u003d -1) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            throw new IllegalDescriptionException("
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                    new HelpInfoOfAddCommand(CommandType.SubCommandType.Deadline).getHelpInformation());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        assert indexOfTime \u003c\u003d description.length() \u0026\u0026 indexOfTime + 3 \u003c\u003d description.length() :"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                        \"String length: \" + description.length() + \" separator index: \" + indexOfTime;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        String taskDescription \u003d description.substring(0, indexOfTime).strip();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        String dateTime \u003d description.substring(indexOfTime + 3).strip();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        return new DeadlineCommand(taskDescription, parseDateTime(dateTime));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    private EventCommand parseEventTask(String description) throws IllegalDescriptionException {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        int indexOfTime \u003d description.toLowerCase().indexOf(\"/at\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        if (indexOfTime \u003d\u003d -1) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            throw new IllegalDescriptionException("
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                    new HelpInfoOfAddCommand(CommandType.SubCommandType.Event).getHelpInformation());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        assert indexOfTime \u003c\u003d description.length() \u0026\u0026 indexOfTime + 3 \u003c\u003d description.length() :"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                        \"String length: \" + description.length() + \" separator index: \" + indexOfTime;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        String taskDescription \u003d description.substring(0, indexOfTime).strip();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        String dateTime \u003d description.substring(indexOfTime + 3).strip();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        return new EventCommand(taskDescription, parseDateTime(dateTime));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    private LocalDate parseDate(String dateString) throws IllegalDescriptionException {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        //If no date provided, return today\u0027s date."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        if (dateString.isEmpty()) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            return LocalDate.now();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        String[] dayMonthYear \u003d dateString.split(\"/\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        if (dayMonthYear.length !\u003d 3) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            throw new IllegalDescriptionException(\"The format of date should be DD/MM/YYYY.\");"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            LocalDate date \u003d LocalDate.of(Integer.parseInt(dayMonthYear[2]),"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                    Integer.parseInt(dayMonthYear[1]),"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                    Integer.parseInt(dayMonthYear[0]));"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            return date;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        } catch (NumberFormatException | DateTimeException e) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            throw new IllegalDateException(\"Please provide a valid date.\");"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    private LocalTime parseTime(String timeString) throws IllegalDescriptionException {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        if (timeString.isEmpty()) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        String[] hourMinute \u003d timeString.split(\":\");"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        if (hourMinute.length !\u003d 2) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            throw new IllegalDescriptionException(\"The format of time should be HH:MM.\");"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            LocalTime time \u003d LocalTime.of("
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                    Integer.parseInt(hourMinute[0]),"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                    Integer.parseInt(hourMinute[1]));"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            return time;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        } catch (NumberFormatException | DateTimeException e) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            throw new IllegalTimeException(\"Please provide a valid time\");"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    private LocalDateTime parseDateTime(String dateTimeString) throws IllegalDescriptionException {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        String dateString \u003d getFirstWord(dateTimeString);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        String timeString \u003d getSecondWord(dateTimeString);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        if (dateString.contains(\":\")) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            timeString \u003d dateString;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            dateString \u003d \"\";"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        LocalDate date \u003d parseDate(dateString);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        LocalTime time \u003d parseTime(timeString);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        return LocalDateTime.of(date, time);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    private IntStream parseRange(String description) throws IllegalIndexOfTaskException {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        int indexOfOpenBracket \u003d description.indexOf(\u0027[\u0027);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        int indexOfColon \u003d description.indexOf(\u0027:\u0027);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        int indexOfCloseBracket \u003d description.indexOf(\u0027]\u0027);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        String start \u003d description.substring(indexOfOpenBracket + 1, indexOfColon).strip();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        String end \u003d description.substring(indexOfColon + 1, indexOfCloseBracket).strip();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            int startingIndex \u003d 0;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            if (!start.isEmpty()) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                startingIndex \u003d Integer.parseInt(start);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            if (end.isEmpty()) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                return IntStream.iterate(startingIndex, index -\u003e index + 1);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                int endingIndex \u003d Integer.parseInt(end);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                return IntStream.iterate(startingIndex, index -\u003e index \u003c endingIndex, index -\u003e index + 1);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            throw new IllegalIndexOfTaskException(\"Please provide valid indices for the range\");"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    private IntStream parseIndices(String description) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        ArrayList\u003cInteger\u003e indices \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        while (!description.isEmpty()) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                indices.add(Integer.parseInt(getFirstWord(description)));"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                //Ignore words that is not an integer"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            description \u003d removeFirstWord(description);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        return indices.stream().mapToInt(Integer::intValue).sorted().distinct();"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    private IndexFilter getIndexFilter(String description) throws IllegalIndexOfTaskException {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        if (description.matches(\"\\\\[.*:.*\\\\]\")) {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            return new IndexFilter(parseRange(description));"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            return new IndexFilter(parseIndices(description));"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    private TaskType parseTaskType(String taskType) throws IllegalDescriptionException {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        switch (taskType.toLowerCase()) {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        case \"todo\":"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            return TaskType.ToDo;"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        case \"event\":"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            return TaskType.Event;"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        case \"deadline\":"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            return TaskType.Deadline;"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            throw new IllegalDescriptionException(\"Please provide a valid task type.\");"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    private TypeFilter getTypeFilter(String description) throws IllegalDescriptionException {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        return new TypeFilter(parseTaskType(getSecondWord(description)));"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    private StatusFilter getStatusFilter(String description) throws IllegalDescriptionException {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        String isDoneStatus \u003d getFirstWord(description).toLowerCase();"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        if (isDoneStatus.equals(\"true\")) {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            return new StatusFilter(true);"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        } else if (isDoneStatus.equals(\"false\")) {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            return new StatusFilter(false);"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            throw new IllegalDescriptionException(\"Done value should be true or false\");"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    private TimeFilter getTimeFilter(String description) throws IllegalDescriptionException {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        String preposition \u003d getFirstWord(description).toLowerCase();"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        LocalDateTime dateTime \u003d parseDateTime(removeFirstWord(description));"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        switch (preposition) {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        case \"/on\":"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            return new TimeFilter(ComparisonOperator.EqualTo, dateTime);"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        case \"/before\":"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            return new TimeFilter(ComparisonOperator.LessThan, dateTime);"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        case \"/after\":"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            return new TimeFilter(ComparisonOperator.GreaterThan, dateTime);"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        case \"/from\":"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            return new TimeFilter(ComparisonOperator.GreaterThanOrEqualTo, dateTime);"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        case \"/until\":"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            return new TimeFilter(ComparisonOperator.LessThanOrEqualTo, dateTime);"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            throw new IllegalDescriptionException(\"I\u0027m sorry, but I don\u0027t know what that means :-(\");"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        }"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    private ListCommand parseListCommand(String description) throws"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            IllegalDescriptionException, IllegalIndexOfTaskException {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        if (description.isEmpty()) {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        }"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        String filterType \u003d getFirstWord(description).toLowerCase();"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        switch (filterType) {"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        case \"/type\":"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            return new ListCommand(getTypeFilter(description));"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        case \"/on\":"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        case \"/before\":"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        case \"/after\":"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        case \"/from\":"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        case \"/until\":"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            return new ListCommand(getTimeFilter(description));"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        case \"/done\":"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            return new ListCommand(getStatusFilter(removeFirstWord(description)));"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        }"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    private DeleteCommand parseDeleteCommand(String description) throws"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            IllegalDescriptionException, IllegalIndexOfTaskException {"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        if (description.isEmpty()) {"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            throw new IllegalDescriptionException(\"Please provide a valid index or description.\");"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        }"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        String filterType \u003d getFirstWord(description).toLowerCase();"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        switch (filterType) {"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        case \"/type\":"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            return new DeleteCommand(getTypeFilter(description));"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        case \"/on\":"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        case \"/before\":"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        case \"/after\":"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        case \"/from\":"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        case \"/until\":"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            return new DeleteCommand(getTimeFilter(description));"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        case \"/done\":"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            return new DeleteCommand(getStatusFilter(removeFirstWord(description)));"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            return new DeleteCommand(getIndexFilter(description));"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        }"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    private DoneCommand parseDoneCommand(String description) throws"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            IllegalDescriptionException, IllegalIndexOfTaskException {"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        if (description.isEmpty()) {"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            throw new IllegalDescriptionException(\"Please provide a valid index or description\");"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        }"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        String filterType \u003d getFirstWord(description).toLowerCase();"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        switch (filterType) {"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        case \"/type\":"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            return new DoneCommand(getTypeFilter(description));"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        case \"/on\":"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        case \"/before\":"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        case \"/after\":"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        case \"/from\":"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        case \"/until\":"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            return new DoneCommand(getTimeFilter(description));"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        case \"/done\":"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            return new DoneCommand(getStatusFilter(removeFirstWord(description)));"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            return new DoneCommand(getIndexFilter(description));"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        }"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    private String getFirstWord(String string) {"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        int indexOfSpace \u003d string.indexOf(\u0027 \u0027);"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        if (indexOfSpace \u003d\u003d -1) {"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            return string;"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        }"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        return string.substring(0, indexOfSpace);"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    private String removeFirstWord(String string) {"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        int indexOfSpace \u003d string.indexOf(\u0027 \u0027);"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        if (indexOfSpace \u003d\u003d -1) {"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            return \"\";"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        }"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        return string.substring(indexOfSpace + 1).strip();"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    private String getSecondWord(String string) {"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        return getFirstWord(removeFirstWord(string));"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jyx11011": 366
    }
  },
  {
    "path": "src/main/java/duke/storage/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "package duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import duke.exception.IllegalDescriptionException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import duke.task.ToDo;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jyx11011"
        },
        "content": " * A class dealing with storage."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jyx11011"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    private static final String doneString \u003d \"1\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    private String filePath;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Class constructor specifying the path of file that stores data."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @param filePath the path of file that stores data."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public Storage(String filePath) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Returns a list of tasks that are stored in disk."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @return a list of tasks that are stored in disk."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @throws FileNotFoundException If storage file is not found."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public ArrayList\u003cTask\u003e load() throws FileNotFoundException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        ArrayList\u003cTask\u003e list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        File f \u003d new File(filePath);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            Scanner in \u003d new Scanner(f);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            while (in.hasNextLine()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                String[] str \u003d in.nextLine().split(\" \\\\| \");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                Task task;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                    switch (str[0]) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                    case \"T\":"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                        task \u003d new ToDo(str[2]);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                    case \"E\":"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                        task \u003d new Event(str[2], LocalDateTime.parse(str[3]));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                    case \"D\":"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                        task \u003d new Deadline(str[2], LocalDateTime.parse(str[3]));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                    default:"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                        continue;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                    if (str[1].equals(doneString)) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                        task.setDone();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                    list.add(task);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                } catch (IllegalDescriptionException e) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                    e.printStackTrace();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            if (!f.createNewFile()) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                throw e;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        } finally {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            return list;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Stores tasks in a task list into the file."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @param tasks a list of tasks."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @throws IOException If an input or output exception occurred."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public void store(TaskList tasks) throws IOException {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        FileWriter fw \u003d new FileWriter(filePath);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        for (int i \u003d 0; i \u003c tasks.getSize(); i++) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            fw.write(tasks.getTaskAtIndex(i + 1).toStringForFile() + \"\\n\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        fw.close();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jyx11011": 89
    }
  },
  {
    "path": "src/main/java/duke/task/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import duke.exception.IllegalDescriptionException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "/** A class representing a task with a deadline. */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    protected LocalDateTime deadline;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Constructor for the deadline task class."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @param description the description of the task."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @param deadline the deadline of the task."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public Deadline(String description, LocalDateTime deadline) throws IllegalDescriptionException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        this.deadline \u003d deadline;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Returns task type."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @return task type."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public TaskType getTaskType() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        return TaskType.Deadline;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Returns the time when the event happens."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @return the time when the event happens."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public LocalDateTime getDateTime() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        return deadline;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Returns a string representation of the task to be stored in file."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @return a string representation of the task to be stored in file, consisting of the task type,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     *         status, description and deadline."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public String toStringForFile() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        return super.toStringForFile() + \" | \" + deadline;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Returns a string representaion of the task."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @return a string representation of the task consisting of the task type,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     *         status, description and deadline."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"dd MMM yyyy HH:mm\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        String dateTime \u003d formatter.format(deadline);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        return \"[D]\" + super.toString() + \" (by: \" + dateTime + \")\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jyx11011": 59
    }
  },
  {
    "path": "src/main/java/duke/task/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import duke.exception.IllegalDescriptionException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "/** A class representing a event task. */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    private LocalDateTime time;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Constructor for the event task."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @param description the description of the event."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @param time the time at which the event starts."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public Event(String description, LocalDateTime time) throws IllegalDescriptionException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Returns task type."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @return task type."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public TaskType getTaskType() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        return TaskType.Event;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Returns the time when the event happens."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @return the time when the event happens."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public LocalDateTime getDateTime() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        return time;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Returns a string representation of the task to be stored in file."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @return a string representation of the task to be stored in file, consisting of the task type,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     *         status, description and time."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public String toStringForFile() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        return super.toStringForFile() + \" | \" + time;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Returns a string representaion of the task."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @return a string representation of the task consisting of the task type,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     *         status, description and time."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"dd MMM yyyy HH:mm\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        String dateTime \u003d formatter.format(time);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        return \"[E]\" + super.toString() + \" (at: \" + dateTime + \")\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jyx11011": 58
    }
  },
  {
    "path": "src/main/java/duke/task/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import duke.exception.IllegalDescriptionException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "/** A class that represents a task. */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "public abstract class Task {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Constructor for Task Object."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @param description task description"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public Task(String description) throws IllegalDescriptionException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        if (description.isEmpty()) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            throw new IllegalDescriptionException(\"The description of a \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                    + getClass().getSimpleName().toLowerCase() + \" cannot be empty.\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Returns task type."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @return task type."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public abstract TaskType getTaskType();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Returns the date and time associated with the task."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @return the date and time associated with the task."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public abstract LocalDateTime getDateTime();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Returns the status of the task."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @return true if the task is done, false if not done."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public boolean getStatus() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        return isDone;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Returns an icon showing the status of the task."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @return tick icon if the task is done otherwise X icon."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        return (isDone ? \"\\u2713\" : \"\\u2718\"); //return tick or X symbols"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Set the status of the task to be done."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public void setDone() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Returns a string representation of the task to be stored in file."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @return a string representation of the task to be stored in file, consisting of the task type,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     *         status, description."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public String toStringForFile() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        return String.format(\"%s | %d | %s\", getClass().getSimpleName().substring(0,1), isDone ? 1 : 0, description);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Returns a String representation of the task."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @return a String representation of the task, consisting of status icon"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     *         and description."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        return String.format(\"[%s] %s\", getStatusIcon(), description);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jyx11011": 78
    }
  },
  {
    "path": "src/main/java/duke/task/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jyx11011"
        },
        "content": " * A class representing a list of tasks."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jyx11011"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    private ArrayList\u003cTask\u003e tasks;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Class constructor."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Create an empty task list."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        this.tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Class constructor specifying tasks in the list."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @param tasks a list of tasks."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public TaskList(ArrayList\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        this.tasks \u003d tasks;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Returns the size of the task list."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @return the size of the task list."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public int getSize() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        return tasks.size();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Returns the task at certain index."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Index starts from 1."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @param index the index of the task."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @return the task at the index."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public Task getTaskAtIndex(int index) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        return tasks.get(index - 1);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Sets status of the task at index as done."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @param index the index of the task."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @return the task at the index."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @throws IndexOutOfBoundsException If the index given is out of range."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public Task setTaskAtIndexDone(int index) throws IndexOutOfBoundsException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        tasks.get(index - 1).setDone();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        return tasks.get(index - 1);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Removes the task at the index."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @param index the index of the task to be removed."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @return the task that was removed."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public Task removeTaskAtIndex(int index) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        return tasks.remove(index - 1);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Removes the task from task list."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @param task task to be removed."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public void removeTask(Task task) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        tasks.remove(task);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Add task to the task list."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @param task the task to be added."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public void addTask(Task task) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        tasks.add(task);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Returns a list of tasks."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @return a list of tasks."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public ArrayList\u003cTask\u003e getTasks() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        return tasks;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jyx11011": 88
    }
  },
  {
    "path": "src/main/java/duke/task/TaskType.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jyx11011"
        },
        "content": " * Types of tasks."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jyx11011"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "public enum TaskType {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * ToDo task."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    ToDo,"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Event task."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    Event,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Deadline task."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    Deadline;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jyx11011": 19
    }
  },
  {
    "path": "src/main/java/duke/task/ToDo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import duke.exception.IllegalDescriptionException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "/** A class representing a todo task. */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "public class ToDo extends Task {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Constructor of the toDo task."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @param description description of the task."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public ToDo(String description) throws IllegalDescriptionException {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Returns task type."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @return task type."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public TaskType getTaskType() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        return TaskType.ToDo;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public LocalDateTime getDateTime() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Returns a String representation of the task."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @return a String representation of the task, consisting of the type of"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     *         the task and description."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "jyx11011": 40
    }
  },
  {
    "path": "src/main/java/duke/ui/DialogBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import javafx.geometry.Rectangle2D;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import javafx.scene.effect.DropShadow;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import javafx.scene.paint.Color;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import javafx.scene.shape.Circle;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jyx11011"
        },
        "content": " * A class representing a dialog box."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jyx11011"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    private static final double CIRCLE_RADIUS \u003d 30;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    private ImageView userPicture;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    private DialogBox(String text, Image image) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        cropImage(image);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        addShadow();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    private void addShadow() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        DropShadow dropShadow \u003d new DropShadow();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        dropShadow.setColor(Color.rgb(138, 138, 138, 0.8));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        dropShadow.setWidth(2);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        dropShadow.setOffsetY(1);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        dropShadow.setOffsetX(1);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        dialog.setEffect(dropShadow);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    private void cropImage(Image image) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        double centerX \u003d image.getWidth() / 2;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        double centerY \u003d image.getHeight() / 2;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        double radius \u003d Math.min(centerX, centerY) * 0.5;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        Rectangle2D viewPort \u003d new Rectangle2D(centerX - radius, centerY - radius, radius * 2, radius * 2);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        userPicture.setImage(image);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        userPicture.setViewport(viewPort);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        userPicture.setFitWidth(CIRCLE_RADIUS * 2);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        Circle circle \u003d new Circle(CIRCLE_RADIUS, CIRCLE_RADIUS, CIRCLE_RADIUS);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        userPicture.setClip(circle);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        Collections.reverse(tmp);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Returns a user dialog box."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @param text text in the dialog box."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @param image user image for the text."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @return a user dialog box."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public static DialogBox getUserDialog(String text, Image image) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        DialogBox dialogBox \u003d new DialogBox(text, image);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        dialogBox.flip();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        dialogBox.setAlignment(Pos.TOP_RIGHT);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        dialogBox.getStyleClass().add(\"user\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        return dialogBox;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Returns a duke dialog box."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @param text text in the dialog box."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @param image duke image for the text."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @return a duke dialog box."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public static DialogBox getDukeDialog(String text, Image image) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        return new DialogBox(text, image);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jyx11011": 96
    }
  },
  {
    "path": "src/main/java/duke/ui/HelpCommandResult.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import duke.command.CommandResult;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import duke.command.CommandType;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "public class HelpCommandResult extends CommandResult {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    private Optional\u003cCommandType\u003e helpCommandType;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    private Optional\u003cCommandType.SubCommandType\u003e helpSubCommandType;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Returns the command type asked by the help command."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @return the command type asked by the help command."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public Optional\u003cCommandType\u003e getHelpCommandType() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        return helpCommandType;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Returns the sub command type asked by the help command."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @return the sub command type asked by the help command."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public Optional\u003cCommandType.SubCommandType\u003e getHelpSubCommandType() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        return helpSubCommandType;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Constructor specifying the command type and sub command type asked by the help command."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public HelpCommandResult(Optional\u003cCommandType\u003e commandType, Optional\u003cCommandType.SubCommandType\u003e subCommandType) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        super(CommandType.Help);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        this.helpCommandType \u003d commandType;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        this.helpSubCommandType \u003d subCommandType;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jyx11011": 36
    }
  },
  {
    "path": "src/main/java/duke/ui/MainWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import duke.command.CommandResult;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import duke.command.CommandType;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import duke.handler.Duke;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import javafx.animation.PauseTransition;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import javafx.util.Duration;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jyx11011"
        },
        "content": " * A class representing the main window of the app."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jyx11011"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "public class MainWindow extends AnchorPane {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/user.jpg\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/duke.jpg\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    private Duke duke;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Initializes the main window."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        scrollPane.setFitToWidth(true);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Initializes the main window with duke handler."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @param duke the duke handler to handle request."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public void init(Duke duke) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        this.duke \u003d duke;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            duke.loadTasks();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            addDukeDialogBox(Ui.showLoadingError(e));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        } finally {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            addDukeDialogBox(Ui.greet());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Adds a duke dialog box to main window."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @param text the text to be shown in the dialog box."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public void addDukeDialogBox(String text) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        dialogContainer.getChildren().addAll(DialogBox.getDukeDialog(text, dukeImage));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Adds a user dialog box to main window."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @param text the text to be shown in the dialog box."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public void addUserDialogBox(String text) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        dialogContainer.getChildren().addAll(DialogBox.getUserDialog(text, userImage));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        if (input.isEmpty()) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            addUserDialogBox(input);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            CommandResult commandResult \u003d duke.execute(input);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            addDukeDialogBox(duke.getResultUi(commandResult));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            if (commandResult.getCommandType() \u003d\u003d CommandType.Exit) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                    duke.storeTasks();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                } catch (IOException e) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                    addDukeDialogBox(duke.getStoringErrorUi(e));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                exit();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            addDukeDialogBox(duke.getParsingErrorUi(e));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        } finally {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            userInput.clear();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Exits the application after 3 seconds."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public void exit() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        userInput.setDisable(true);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        PauseTransition delay \u003d new PauseTransition(Duration.seconds(3));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        delay.setOnFinished(event -\u003e Platform.exit());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        delay.play();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jyx11011": 108
    }
  },
  {
    "path": "src/main/java/duke/ui/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import duke.command.CommandResult;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import duke.command.CommandType;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import duke.help.HelpInformation;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jyx11011"
        },
        "content": " * A class deals with user interface."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jyx11011"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Returns a string to be printed."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @param text an array of strings to be composed."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @return a string to be printed."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    private static String composeBlock(String... text) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        assert text.length \u003e 0 : \"empty dialog box\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        StringBuilder strb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        for (String line: text) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            strb.append(line + \"\\n\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        return strb.toString();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Returns a string representation of the command result."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @param result a command result to be shown in UI."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @return a string representation of the command result."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public String composeResult(CommandResult result) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        switch (result.getCommandType()) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        case Exit:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            return sayGoodBye();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        case Add:"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            return showAddedTask(result.getTasks()[0], result.getTaskListSize());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        case Delete:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            return showRemovedTask(result.getTasks(), result.getTaskListSize());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        case Find:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            return showMatchingTasks(result.getTasks());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        case List:"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            return showTasks(result.getTasks());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        case Done:"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            return showDoneTask(result.getTasks());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        case Help:"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            return getHelpInformation(result);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            assert false : \"unknown result type\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        return \"\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Returns a string to greet the user."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @return a string to greet the user."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public static String greet() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        String greeting \u003d \"Hello! I\u0027m Duke\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        String question \u003d \"What can I do for you?\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        return composeBlock(greeting, question);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Returns a string of all tasks in the task list."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @param tasks the task list to be shown."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @return a string of all tasks in the task list."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public String showTasks(Task[] tasks) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        if (tasks.length \u003d\u003d 0) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            return composeBlock(\"Your task list is empty.\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        String[] text \u003d new String[tasks.length + 1];"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        text[0] \u003d \"Here are the tasks:\";"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        for (int i \u003d 0; i \u003c tasks.length; i++) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            text[i + 1] \u003d (i + 1) + \".\" + tasks[i];"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        return composeBlock(text);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Returns a string representation of a message that tasks have been marked as done."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @param tasks tasks that have been marked as done."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @return a string representation of a message that tasks have been marked as done."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public String showDoneTask(Task[] tasks) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        String[] text \u003d new String[tasks.length + 1];"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        text[0] \u003d \"Nice! I\u0027ve marked the following tasks as done:\";"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        for (int i \u003d 0; i \u003c tasks.length; i++) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            text[i + 1] \u003d (i + 1) + \".\" + tasks[i];"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        return composeBlock(text);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Returns a string representation of a message that tasks has been removed from the list."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @param tasks tasks that has been removed."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @param taskListSize the number of tasks in the task list."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @return a string representation of a message that the task has been removed from the list."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public String showRemovedTask(Task[] tasks, int taskListSize) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        String[] text \u003d new String[tasks.length + 1];"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        text[0] \u003d \"Noted. I\u0027ve removed the following tasks:\";"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        for (int i \u003d 0; i \u003c tasks.length; i++) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            text[i + 1] \u003d (i + 1) + \".\" + tasks[i];"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        return composeBlock(text);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Returns a string representation of the message that the task has been added to the list."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @param task the task that has been added."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @param taskListSize the number of tasks in the task list."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @return a string representation of the message that the task has been added to the list."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public String showAddedTask(Task task, int taskListSize) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        return composeBlock(\"Got it. I\u0027ve added this task:\", \"  \" + task,"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                String.format(\"Now you have %d task%s in the list.\","
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                        taskListSize, taskListSize \u003e 1 ? \"s\" : \"\"));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Returns a string representation of all tasks that matches a keyword typed by the user."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @param taskList a list tasks that matches a keyword."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @return a string representation of all tasks that matches a keyword typed by the user."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public String showMatchingTasks(Task[] taskList) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        String[] text \u003d new String[taskList.length + 1];"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        text[0] \u003d \"Here are the matching tasks in your list:\";"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        for (int i \u003d 0; i \u003c taskList.length; i++) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            text[i + 1] \u003d (i + 1) + \".\" + taskList[i];"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        return composeBlock(text);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Returns a string representation of saying good bye to the user."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @return a string representation of saying good bye to the user."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public String sayGoodBye() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        return composeBlock(\"Bye. Hope to see you again soon!\");"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Returns a string representation of errors that occurs when parsing commands."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @param exception the exception thrown when parsing commands."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @return a string representation of errors that occurs when parsing commands."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public String showParsingError(Exception exception) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        return composeBlock(\"OPPS!!! \" + exception.getMessage());"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Returns a string representation of errors that occurs when loading tasks."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @param exception the exception thrown when loading tasks."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @return a string representation of errors that occurs when loading tasks."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public static String showLoadingError(Exception exception) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        return composeBlock(\"OPPS!!! Fails to load your tasks.\", exception.getMessage());"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * Returns a string representation of errors that occurs when storing tasks."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @param exception the exception thrown when storing tasks."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     * @return a string representation of errors that occurs when storing tasks."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "     */"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public String showStoringError(IOException exception) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        return composeBlock(\"OPPS!!! Fails to store your tasks.\", exception.getMessage());"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    private String getHelpInformation(CommandResult result) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        HelpCommandResult helpCommandResult \u003d (HelpCommandResult)result;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        Optional\u003cCommandType\u003e commandType \u003d helpCommandResult.getHelpCommandType();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        Optional\u003cCommandType.SubCommandType\u003e subCommandType \u003d helpCommandResult.getHelpSubCommandType();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        return HelpInformation.getHelpInformationFor(commandType, subCommandType).getHelpInformation();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jyx11011": 179
    }
  },
  {
    "path": "src/main/resources/view/DialogBox.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "\u003c?import javafx.scene.shape.Ellipse?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "\u003cfx:root alignment\u003d\"TOP_LEFT\" maxHeight\u003d\"Infinity\" styleClass\u003d\"dialogBox\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        \u003cImageView fx:id\u003d\"userPicture\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\" maxWidth\u003d\"600\"/\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "jyx11011": 14
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "\u003c?import java.lang.*?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "\u003c?import javafx.geometry.*?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "\u003c?import javafx.scene.control.*?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "\u003c?import javafx.scene.layout.*?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "\u003cAnchorPane fx:id\u003d\"mainWindow\" minHeight\u003d\"100\" minWidth\u003d\"300\" prefHeight\u003d\"700.0\" prefWidth\u003d\"600.0\" stylesheets\u003d\"@duke.css\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"duke.ui.MainWindow\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        \u003cTextField fx:id\u003d\"userInput\" maxWidth\u003d\"Infinity\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" AnchorPane.bottomAnchor\u003d\"0.0\" AnchorPane.leftAnchor\u003d\"10.0\" AnchorPane.rightAnchor\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" opacity\u003d\"1.0\" vvalue\u003d\"1.0\" AnchorPane.bottomAnchor\u003d\"41.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            \u003ccontent\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                \u003cVBox fx:id\u003d\"dialogContainer\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            \u003c/content\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "jyx11011": 17
    }
  },
  {
    "path": "src/test/java/duke/parser/ParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "package duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import duke.command.AddCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import duke.command.CommandType;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import duke.command.DeadlineCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import duke.command.DeleteCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import duke.command.DoneCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import duke.command.ExitCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import duke.command.FindCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import duke.command.HelpCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import duke.command.ListCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import duke.exception.IllegalCommandTypeException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import duke.exception.IllegalDateException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import duke.exception.IllegalDescriptionException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import duke.help.HelpInfoOfAddCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "public class ParserTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    private Parser parser \u003d new Parser();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public void testParseExitCommand() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            assertTrue(parser.parseCommand(\"Bye   abc123 \") instanceof ExitCommand);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public void testParseListCommand() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            Command listCommand \u003d parser.parseCommand(\"List 1 2\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            assertTrue(listCommand instanceof ListCommand);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public void testParseDoneCommand() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            Command doneCommand \u003d parser.parseCommand(\"Done [2:10]\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            assertTrue(doneCommand instanceof DoneCommand);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public void testParseDeleteCommand() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            Command deleteCommand \u003d parser.parseCommand(\"delete    /type todo\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            assertTrue(deleteCommand instanceof DeleteCommand);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public void parseDeleteCommand_illegalType_exceptionThrown() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            parser.parseCommand(\"deLete   /type   evet\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        } catch (IllegalDescriptionException e) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            assertEquals(\"Please provide a valid task type.\", e.getMessage());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public void parseDeadlineCommand() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            Command deadlineCommand \u003d parser.parseCommand(\"deadline  task  /by 20/9/2020   15:20  abcd\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            assertTrue(deadlineCommand instanceof DeadlineCommand);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public void parseEventCommand_onlyTimeProvided_DateEqualsToday() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            Command eventCommand \u003d parser.parseCommand(\"event  task  /at   22:00  abcd\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            AddCommand addCommand \u003d (AddCommand) eventCommand;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            assertEquals(LocalDateTime.of(LocalDate.now(), LocalTime.of(22,0)),"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                    ((AddCommand) eventCommand).getTask().getDateTime());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public void parseDeadlineCommand_illegalDate_exceptionThrown() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            parser.parseCommand(\"deadline   task  /by  20/-3/2020    12:00\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        } catch (IllegalDateException e) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            assertEquals(\"Please provide a valid date.\", e.getMessage());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public void parseDeadlineCommand_wrongFormat_exceptionThrown() throws IllegalCommandTypeException {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            parser.parseCommand(\"deadline   task  /at 20/3/2020  12\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        } catch (IllegalDescriptionException e) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            assertEquals(new HelpInfoOfAddCommand(CommandType.SubCommandType.Deadline).getHelpInformation(),"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                    e.getMessage());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public void testParseFindCommand() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            Command findCommand \u003d parser.parseCommand(\"find   event  t\");"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            assertTrue(findCommand instanceof FindCommand);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public void testHelpCommand() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            Command helpCommand \u003d parser.parseCommand(\"help event\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            assertTrue(helpCommand instanceof HelpCommand);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jyx11011": 148
    }
  },
  {
    "path": "src/test/java/duke/task/EventTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import duke.exception.IllegalDescriptionException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "public class EventTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public void testStringConversion() throws IllegalDescriptionException {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        assertEquals(\"[E][\\u2718] test (at: 01 Mar 2020 12:00)\","
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "                new Event(\"test\", LocalDateTime.of(2020, 3, 1, 12, 0)).toString());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public void constructor_emptyDescription_exceptionThrown() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            assertEquals(\"\", new Event(\"\", LocalDateTime.of(2020, 1, 1, 1, 1)).toString());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        } catch (IllegalDescriptionException e) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            assertEquals(\"The description of a event cannot be empty.\",e.getMessage());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jyx11011": 29
    }
  },
  {
    "path": "src/test/java/duke/task/TaskTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "public class TaskTest {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public void testStringConversionForFile() throws IllegalDescriptionException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        Task task \u003d new Task(\"test\");"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        assertEquals(\"T | 0 | test\", task.toStringForFile());"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public void testStringConversion() throws IllegalDescriptionException {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        Task task \u003d new Task(\"test\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        assertEquals(\"[\\u2718] test\", task.toString());"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public void statusIcon_notDone_cross() throws IllegalDescriptionException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        Task task \u003d new Task(\"test\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        assertEquals(\"\\u2718\", task.getStatusIcon());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public void statusIcon_done_tick() throws IllegalDescriptionException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        Task task \u003d new Task(\"test\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        task.setDone();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        assertEquals(\"\\u2713\", task.getStatusIcon());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public void constructor_emptyDescription_exceptionThrown() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            Task task \u003d new Task(\"\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        } catch (IllegalDescriptionException e) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            assertEquals(\"The description of a task cannot be empty.\", e.getMessage());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jyx11011": 42
    }
  },
  {
    "path": "src/test/java/duke/task/ToDoTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import duke.exception.IllegalDescriptionException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "public class ToDoTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    /* Comment out the test case because the unicode does not comply with style guide."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public void testStringConversion() throws IllegalDescriptionException {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        assertEquals(\"[T][\\u2718] test\", new ToDo(\"test\").toString());"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    public void constructor_emptyDescription_exceptionThrown() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            assertEquals(\"\", new ToDo(\"\").toString());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        } catch (IllegalDescriptionException e) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "            assertEquals(\"The description of a todo cannot be empty.\",e.getMessage());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jyx11011": 26
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "todo borrow book"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "deadline return book /by Sunday"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "list"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "event meeting /at"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "event"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "done 2"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "delete 1"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "jyx11011": 8
    }
  },
  {
    "path": "text-ui-test/runtest.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "#!/usr/bin/env bash"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "# create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "if [ ! -d \"../bin\" ]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "then"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    mkdir ../bin"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "fi"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "# delete output from previous run"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "if [ -e \"./ACTUAL.TXT\" ]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "then"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    rm ACTUAL.TXT"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "fi"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "# compile the code into the bin folder, terminates if error occurred"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "if ! javac -Xlint:none -d ../bin ../src/main/java/*.java"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "then"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    echo \"********** BUILD FAILURE **********\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "fi"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "java -classpath ../bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jyx11011"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "# compare the output to the expected output"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "diff ACTUAL.TXT EXPECTED.TXT"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "if [ $? -eq 0 ]"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "then"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    echo \"Test result: PASSED\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    exit 0"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "else"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    echo \"Test result: FAILED\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jyx11011"
        },
        "content": "fi"
      }
    ],
    "authorContributionMap": {
      "jyx11011": 34
    }
  }
]
