[
  {
    "path": "data/duke.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "T | 1 | read book"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "D | 0 | return book | June 6th"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "E | 0 | project meeting | Aug 6th 2-4pm"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "T | 1 | join sports club"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "E | 0 | project meeting | Mon 2-4pm"
      }
    ],
    "authorContributionMap": {
      "huiminlim": 5
    }
  },
  {
    "path": "src/main/java/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "import java.lang.Exception;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "enum Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    LIST, BYE, DONE, TODO, DEADLINE, EVENT, DELETE, ECHO;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    private static final String HORIZONTAL_LINE \u003d \"\\t____________________________________________________________\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    private static ArrayList\u003cTask\u003e list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    private static int listCounter \u003d 0;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    private static HashMap\u003cString, String\u003e map \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        Scanner sc \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        Path filePath \u003d Paths.get(\"data/Duke.txt\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        File dukeInput \u003d new File(filePath.toString());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        boolean isListChanged \u003d false;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        Task changedItem \u003d null;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        Command changedCommand;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        map.put(\"T\", \"TODO\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        map.put(\"E\", \"EVENT\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        map.put(\"D\", \"DEADLINE\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        String greeting \u003d \"Hello! I\u0027m Duke\\nWhat can I do for you?\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        String goodbye \u003d \"Bye. Hope to see you again soon!\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        processInputFile(dukeInput);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        System.out.println(greeting);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        // Start reading input"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        while (sc.hasNextLine()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                String readInput \u003d sc.next();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                Command cmd \u003d verifyCommandValue(readInput);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                if (cmd \u003d\u003d Command.BYE) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    System.out.println(processText(goodbye));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                } else if (cmd \u003d\u003d Command.LIST) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    // Error Handling: ListEmpty"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    if (listCounter \u003d\u003d 0) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                        // Clear buffer of scanner"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                        String i \u003d sc.nextLine();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                        throw new EmptyListException(\"\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    String printList \u003d \"Here are the tasks in your list:\\n\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    for (int i \u003d 0; i \u003c listCounter; i++) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                        String temp \u003d \"\\t\\t\" + (i + 1) + \".\" + list.get(i).getItemInfo();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                        printList \u003d printList + temp;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                        if (i !\u003d listCounter - 1) printList \u003d printList + \"\\n\";"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    System.out.println(processText(printList));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                } else if (cmd \u003d\u003d Command.TODO) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    String toDoItem \u003d sc.nextLine().trim();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    // Implies only word \"deadline\""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    if (toDoItem.equals(\"\")) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                        throw new EmptyCommandField(\"todo\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    list.add(new ToDo(toDoItem, false));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    listCounter++;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    String tempPrint \u003d addedTaskText();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    System.out.println(processText(tempPrint));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                } else if (cmd \u003d\u003d Command.EVENT) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    String input \u003d sc.nextLine().trim();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    int indexFirstSlash \u003d input.indexOf(\"/\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    if(indexFirstSlash \u003d\u003d -1) throw new CommandFieldFormatException(\"Incorrect command format\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    list.add(new Event(input.substring(0, indexFirstSlash), input.substring(indexFirstSlash + 1),"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                            false));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    listCounter++;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    String tempPrint \u003d addedTaskText();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    System.out.println(processText(tempPrint));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                } else if (cmd \u003d\u003d Command.DEADLINE) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    String input \u003d sc.nextLine().trim();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    //String[] tokenList \u003d input.split(\" \");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    int indexFirstSlash \u003d input.indexOf(\"/\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    if(indexFirstSlash \u003d\u003d -1) throw new CommandFieldFormatException(\"Incorrect command format\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    list.add(new Deadline(input.substring(0, indexFirstSlash), input.substring(indexFirstSlash + 1),"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                            false));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    listCounter++;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    String tempPrint \u003d addedTaskText();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    System.out.println(processText(tempPrint));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                } else if (cmd \u003d\u003d Command.DONE) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    // Cannot perform done in zero list"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    if (listCounter \u003d\u003d 0) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                        // Clear buffer of scanner"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                        String i \u003d sc.nextLine();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                        throw new EmptyListException(\"Cannot perform done.\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    int indexDone \u003d sc.nextInt();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    // If indexDone exceed listCounter"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    if (indexDone \u003e listCounter || indexDone \u003c 0) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                        throw new InvalidNumberException(\"Error exceeding item number\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    list.get(--indexDone).setDone();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    String doneMessage \u003d \"Nice! I\u0027ve marked this task as done: \\n\\t\\t\";"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    System.out.println(processText(doneMessage + list.get(indexDone).getItemInfo()));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                } else if (cmd \u003d\u003d Command.ECHO) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    // Read any remaining lines"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    String echoInput \u003d sc.nextLine().trim();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    if (echoInput.equals(\"\")) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                        throw new EmptyCommandField(\"echo\");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    // Store content"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    list.add(new Task(echoInput, false));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    listCounter++;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    String processedInput \u003d Duke.processText(echoInput);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    System.out.println(processedInput);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                } else if (cmd \u003d\u003d Command.DELETE) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    // Incorrect format for delete"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    if (!sc.hasNextInt()) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                        sc.nextLine();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                        throw new CommandFieldFormatException(\"delete\");"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    int numberToDelete \u003d sc.nextInt();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    // Make sure number is valid"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    if (numberToDelete \u003e listCounter || numberToDelete \u003c 1) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                        throw new InvalidNumberException(\"Number to delete does not exist\");"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    Task deletedTask \u003d list.remove(numberToDelete - 1);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    listCounter--;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    String tempPrint \u003d \"Noted. I\u0027ve removed this task:\\n\\t\\t\" +"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                            deletedTask.getItemInfo() + \"\\n\\tNow you have \" + listCounter + \" tasks in the list.\";"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    System.out.println(processText(tempPrint));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    isListChanged \u003d true;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    changedItem \u003d list.get(listCounter - 1);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                // Save changed list to hard disk, if changed"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                if (isListChanged) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    isListChanged \u003d false;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    FileWriter fw \u003d new FileWriter(dukeInput, true);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    fw.write(processWriteTest(changedItem, cmd));"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    fw.close();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            } catch (CommandNotRecognizedException c) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                // Clear buffer of scanner"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                String i \u003d sc.nextLine();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                System.out.println(processText(\"\\u263A OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\"));"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            } catch (EmptyCommandField e) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                System.out.println(processText(\"\\u263A The description of \""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                        + e.getMessage() + \" cannot be empty.\"));"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            } catch (EmptyListException l) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                System.out.println(processText(\"\\u263A List is empty! \" + l.getMessage()));"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            } catch (CommandFieldFormatException f) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                System.out.println(processText(\"\\u263A Description format is incorrect for \""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                        + f.getMessage() + \".\"));"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            } catch (InvalidNumberException n) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                System.out.println(processText(\"\\u263A Invalid input number. \" + n.getMessage()));"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            } catch (IOException o) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                System.out.println(\"File IO exception\");"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    private static String processWriteTest(Task t, Command changedCommand) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        char commandFirstChar \u003d changedCommand.toString().charAt(0);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        int isDone \u003d t.getIsDone() ? 1 : 0;"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        String itemDescription \u003d t.getTaskItem();"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        String timeDate \u003d \"\";"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        if (changedCommand.name().equals(\"EVENT\") || changedCommand.name().equals(\"DEADLINE\")) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            if (t instanceof Deadline) timeDate \u003d ((Deadline) t).getTimeDate();"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            else if (t instanceof Event) timeDate \u003d ((Event) t).getTimeDate();"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        return \"\\r\\n\" + commandFirstChar + \" | \" + isDone + \" | \" + itemDescription + \" | \" + timeDate;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    // Process input file data from hard disk"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    private static void processInputFile(File f) {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            Scanner sc \u003d new Scanner(f);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            while (sc.hasNextLine()) {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                String line \u003d sc.nextLine();"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                String[] lineData \u003d line.split(\"\\\\|\");"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                for (int i \u003d 0; i \u003c lineData.length; i++) lineData[i] \u003d lineData[i].trim();"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    if (lineData.length \u003d\u003d 0) throw new CommandFieldFormatException(\"Empty fields\");"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    String commandName \u003d map.get(lineData[0]);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    Command cmd \u003d verifyCommandValue(commandName);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    boolean isDone \u003d false;"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    if (cmd \u003d\u003d Command.TODO) {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                        if (lineData.length \u003c 3) throw new CommandFieldFormatException(\"Less that 2 fields\");"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                        if (lineData[1].equals(\"1\")) isDone \u003d true;"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                        else if (!lineData[1].equals(\"0\")) throw new CommandFieldFormatException(\"Incorrect fields\");"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                        list.add(new ToDo(lineData[2], isDone));"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                        listCounter++;"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    } else if (cmd \u003d\u003d Command.EVENT) {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                        if (lineData.length \u003c 4) throw new CommandFieldFormatException(\"Less that 3 fields\");"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                        if (lineData[1].equals(\"1\")) isDone \u003d true;"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                        else if (!lineData[1].equals(\"0\")) throw new CommandFieldFormatException(\"Incorrect fields\");"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                        list.add(new Event(lineData[2], lineData[3], isDone));"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                        listCounter++;"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    } else if (cmd \u003d\u003d Command.DEADLINE) {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                        if (lineData.length \u003c 4) throw new CommandFieldFormatException(\"Less that 2 fields\");"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                        if (lineData[1].equals(\"1\")) isDone \u003d true;"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                        else if (!lineData[1].equals(\"0\")) throw new CommandFieldFormatException(\"Incorrect fields\");"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                        list.add(new Event(lineData[2], lineData[3], isDone));"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                        listCounter++;"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                } catch (CommandNotRecognizedException e) {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    System.out.println(\"Command not recognized!\");"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                } catch (CommandFieldFormatException e1) {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    System.out.println(\"Command field format incorrect!\");"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                }"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            System.out.println(\"File not found!\");"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    // Add in Indentation and horizontal lines"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    private static String processText(String input) {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        return HORIZONTAL_LINE + \"\\n\" + \"\\t\" + input + \"\\n\" + HORIZONTAL_LINE + \"\\n\";"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    private static Command verifyCommandValue(String commandString) throws CommandNotRecognizedException {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        // Check if input command exist"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        boolean isExist \u003d false;"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        for (Command i : Command.values()) {"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            // If exists"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            if (i.name().equals(commandString.toUpperCase())) {"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                // Not recognized command"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                isExist \u003d true;"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            }"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        if (!isExist) throw new CommandNotRecognizedException();"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        // Command exist"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        return Command.valueOf(commandString.toUpperCase());"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    private static String addedTaskText() {"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        return \"Got it. I\u0027ve added this task:\\n\\t\\t\" +"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                list.get(listCounter - 1).getItemInfo() +"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                \"\\n\\tNow you have \" + listCounter + \" tasks in the list.\";"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "class TimeDate {"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    private int time;"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    private int day;"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    private int month;"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    private int year;"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    public TimeDate() {"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        time \u003d 0;"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        day \u003d 0;"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        month \u003d 0;"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        year \u003d 0;"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    public TimeDate(int day, int month, int year, int time){"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        this.day \u003d day;"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        this.month \u003d month;"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        this.year \u003d year;"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    public String print(){"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        return this.day + \"/\" + this.month + \"/\" + this.year + \" \" +this.time;"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    public boolean isValid(){"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        if(this.time \u003c 0 || this.time \u003e\u003d 2400) return false;"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        else if(this.day \u003c\u003d 0 || this.day \u003e 31) return false;"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        else if (this.month \u003c\u003d 0 || this.month \u003e 12) return false;"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        else if (this.year \u003c 0) return false;"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        // yet to handle leap, 31 months etc"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "}"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "class Task {"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    protected static final String ICON_TICK \u003d \"\\u2713\";"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    protected static final String ICON_CROSS \u003d \"\\u2718\";"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    protected String taskItem;"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    // Default Constructor"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    public Task() {"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        isDone \u003d false;"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    // Non-default Constructor"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    public Task(String taskItem, boolean isDone) {"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        this.isDone \u003d isDone;"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        this.taskItem \u003d taskItem.trim();"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    public void setDone() {"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        isDone \u003d true;"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        if (isDone) return \"[\" + ICON_TICK + \"]\";"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        else return \"[\" + ICON_CROSS + \"]\";"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    public String getTaskItem() {"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        return taskItem;"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    public boolean getIsDone(){"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        return isDone;"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    public String getItemInfo() {"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        return getStatusIcon() + \" \" + getTaskItem();"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "}"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "class ToDo extends Task {"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    public ToDo(String toDo, boolean isDone) {"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        super(toDo.trim(), isDone);"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        if (isDone) return \"[T][\" + ICON_TICK + \"]\";"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        else return \"[T][\" + ICON_CROSS + \"]\";"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "}"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "class Deadline extends Task {"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    private TimeDate timeDateGiven;"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    public Deadline(String event, String timing, boolean isDeadlineProcessed) {"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        super(event.trim(), isDeadlineProcessed);"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            String[] str \u003d timing.replace(\"by \", \"\").replace(\" \", \"/\").split(\"/\");"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            int[] temp \u003d new int[str.length];"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            for(int i \u003d 0; i \u003c str.length; i++){"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                temp[i] \u003d Integer.parseInt(str[i]);"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            }"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            timeDateGiven \u003d new TimeDate(temp[0], temp[1], temp[2], temp[3]);"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            if(timeDateGiven.isValid()) throw new InvalidTimeDateException();"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        } catch(InvalidTimeDateException e){"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            System.out.println(\"Time and date entered is invalid\");"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        if (isDone) return \"[D][\" + ICON_TICK + \"]\";"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        else return \"[D][\" + ICON_CROSS + \"]\";"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    public String getTimeDate(){"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        return timeDateGiven.print();"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    public String getItemInfo() {"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        return getStatusIcon() + \" \" + getTaskItem() + \" (by: \" + getTimeDate() + \")\";"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "}"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "class Event extends Task {"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    private TimeDate timeDateGiven;"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    public Event(String event, String timing, boolean isDone) {"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        super(event.trim(), isDone);"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            String[] str \u003d timing.replace(\"at \", \"\").replace(\" \", \"/\").split(\"/\");"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            int[] temp \u003d new int[str.length];"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            for(int i \u003d 0; i \u003c str.length; i++){"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                temp[i] \u003d Integer.parseInt(str[i]);"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            }"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            timeDateGiven \u003d new TimeDate(temp[0], temp[1], temp[2], temp[3]);"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            if(timeDateGiven.isValid()) throw new InvalidTimeDateException();"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        } catch(InvalidTimeDateException e){"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            System.out.println(\"Time and date entered is invalid\");"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        if (isDone) return \"[E][\" + ICON_TICK + \"]\";"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        else return \"[E][\" + ICON_CROSS + \"]\";"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    public String getTimeDate() {"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        return timeDateGiven.print();"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    public String getItemInfo() {"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        return getStatusIcon() + \" \" + getTaskItem() + \" (at: \" + getTimeDate() + \")\";"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "class InvalidTimeDateException extends Exception {"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "}"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "class CommandNotRecognizedException extends Exception {"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    public CommandNotRecognizedException() {"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        super(\"Error\");"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "}"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "// For:"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "// (1) Error printing empty list"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "// (2) Error performing done on empty list"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "class EmptyListException extends Exception {"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    public EmptyListException(String info) {"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        super(info);"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "}"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "// Format of command is incorrect: not using \"/\""
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "class CommandFieldFormatException extends Exception {"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    public CommandFieldFormatException(String command) {"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        super(command);"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "}"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "// Exceeded number of items in list"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "class InvalidNumberException extends Exception {"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    public InvalidNumberException(String info) {"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        super(info);"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "}"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "class EmptyCommandField extends Exception {"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    public EmptyCommandField(String command) {"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        super(command);"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "huiminlim": 502,
      "-": 6
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "deadline do homework /by no idea :-p"
      }
    ],
    "authorContributionMap": {
      "huiminlim": 1
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "if not exist ..\\bin mkdir ..\\bin"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "REM delete output from previous run"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "del ACTUAL.TXT"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "REM compile the code into the bin folder"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "javac  -cp ..\\src -Xlint:none -d ..\\bin ..\\src\\main\\java\\Duke.java"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    exit /b 1"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ")"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "java -classpath ..\\bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT"
      }
    ],
    "authorContributionMap": {
      "huiminlim": 21
    }
  }
]
