[
  {
    "path": "data/print.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "[E][❌] project meeting (at: 02/20/2019 1420)"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "[D][❌] return book (by: 02/20/2019 1420)"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "[T][❌] read book"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "[T][❌] jirofji"
      }
    ],
    "authorContributionMap": {
      "huiminlim": 4
    }
  },
  {
    "path": "src/main/java/duke/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "import java.nio.file.InvalidPathException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "import duke.command.CommandNotFoundException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "import duke.parser.IncorrectFileFormatException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "import duke.parser.IncorrectNumberOfArgumentsException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "import duke.parser.Parser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "huiminlim"
        },
        "content": " * Represents a Duke - interactive bot"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "huiminlim"
        },
        "content": " * Contains functions to operate the bot."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "huiminlim"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    // Initialising Duke"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    // Do Loading of tasks, greeting message, set up tasks list"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    public Duke(String filePath) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        Parser.initialize();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        storage \u003d new Storage(filePath);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            tasks \u003d new TaskList(storage.load());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        } catch (InvalidPathException i) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            ui.showLoadingError();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        } catch (IncorrectFileFormatException | FileNotFoundException f) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            ui.showLoadingError();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        } catch (NullPointerException n) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            ui.showIndexError();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * Runs the duke bot."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        ui.showWelcome();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        boolean isExit \u003d false;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        while (!isExit) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                String fullCommand \u003d ui.readCommand();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                ui.showLine(); // show the divider line (\"_______\")"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                Command c \u003d Parser.parse(fullCommand);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                c.execute(tasks, ui, storage);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                isExit \u003d c.isExit();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            } catch (IndexOutOfBoundsException o) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                ui.showIndexError();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            } catch (NullPointerException n) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                ui.showInputError();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            } catch (CommandNotFoundException c) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                ui.showCommandNotFoundError();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            } catch (IOException e) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                e.printStackTrace();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            } catch (IncorrectFileFormatException i) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                ui.showLoadingError();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            } catch (IncorrectNumberOfArgumentsException e) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                ui.showIncorrectNumberOfArgument();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            } finally {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                ui.showLine();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        new Duke(\"C:\\\\Users\\\\user\\\\Desktop\\\\CS2103_Git\\\\duke\\\\data\\\\tasks.txt\").run();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "}"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "huiminlim": 96
    }
  },
  {
    "path": "src/main/java/duke/Task/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "import java.text.ParsePosition;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "huiminlim"
        },
        "content": " * Represents a deadline task."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "huiminlim"
        },
        "content": " * Has functions to print the task information to a standard form,"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "huiminlim"
        },
        "content": " * to set and get the given time of the deadline."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "huiminlim"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    private Date givenTime;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    private SimpleDateFormat df;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    public Deadline(char taskType, String taskDescription, boolean isDone, String givenTime) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        super(taskType, taskDescription, isDone);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            df \u003d new SimpleDateFormat(\"dd/mm/yyyy Hm\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            this.givenTime \u003d df.parse(givenTime, new ParsePosition(0));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        } catch (NullPointerException n) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            throw new NullPointerException();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    public Deadline(String taskDescription, boolean isDone, String givenTime) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        super(taskDescription, isDone);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            df \u003d new SimpleDateFormat(\"dd/mm/yyyy Hm\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            this.givenTime \u003d df.parse(givenTime, new ParsePosition(0));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        } catch (NullPointerException n) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            throw new NullPointerException();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    /** Returns string representation of task,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     *  in terms of initial, icon of done, task description and given deadline."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * @return String representation of task."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    public String printTask() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        return \"[\" + getFirstCharTask() +"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                \"][\" + getIcon() + \"] \" + getTaskDescription() + \" (by: \" + getGivenTime() + \")\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    /** Set time for given deadline,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * @param time String representation of time."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * @throws ParseException If format of time in string does not match specified format."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    public void setGivenTime(String time) throws ParseException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        this.givenTime \u003d df.parse(time);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    /** Get time for given deadline,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    public String getGivenTime() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        return df.format(givenTime);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "huiminlim": 64
    }
  },
  {
    "path": "src/main/java/duke/Task/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "import java.text.ParsePosition;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "huiminlim"
        },
        "content": " * Represents an Event task."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "huiminlim"
        },
        "content": " * Has functions to print the task information to a standard form,"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "huiminlim"
        },
        "content": " * to set and get the given time of the deadline."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "huiminlim"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    private Date givenTime;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    private SimpleDateFormat df;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    public Event(String taskDescription, boolean isDone, String givenTime) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        super(taskDescription, isDone);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            df \u003d new SimpleDateFormat(\"dd/mm/yyyy Hm\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            this.givenTime \u003d df.parse(givenTime, new ParsePosition(0));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            System.out.println(this.givenTime);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            //System.out.println(this.givenTime);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        } catch (NullPointerException n) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            throw new NullPointerException();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    public Event(char taskType, String taskDescription, boolean isDone, String givenTime) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        super(taskType, taskDescription, isDone);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            df \u003d new SimpleDateFormat(\"dd/mm/yyyy Hm\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            this.givenTime \u003d df.parse(givenTime, new ParsePosition(0));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            //System.out.println(this.givenTime);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        } catch (NullPointerException n) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            throw new NullPointerException();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    /** Returns string representation of task,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     *  in terms of initial, icon of done, task description and given deadline."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * @return String representation of task."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    public String printTask() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        return \"[\" + getFirstCharTask() +"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                \"][\" + getIcon() + \"] \" + getTaskDescription() + \" (at: \" + getGivenTime() + \")\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    /** Set time for given deadline,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * @param time String representation of time."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * @throws ParseException If format of time in string does not match specified format."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    public void setGivenTime(String time) throws ParseException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        this.givenTime \u003d df.parse(time);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    /** Get time for given deadline"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * @return String of formatted time."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    public String getGivenTime() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        return df.format(givenTime);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "huiminlim": 71
    }
  },
  {
    "path": "src/main/java/duke/Task/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "huiminlim"
        },
        "content": " * Represents an task."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "huiminlim"
        },
        "content": " * Has functions to print the task information to a standard form,"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "huiminlim"
        },
        "content": " * to set and get the given time of the deadline."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "huiminlim"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    protected char taskType;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    protected String taskDescription;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    public Task() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        this.taskDescription \u003d \"\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    public Task(String taskDescription, boolean isDone) throws NullPointerException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        this.isDone \u003d isDone;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        if (taskDescription \u003d\u003d null) throw new NullPointerException();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        this.taskDescription \u003d taskDescription;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    public Task(char taskType, String taskDescription, boolean isDone) throws NullPointerException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        this.isDone \u003d isDone;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        this.taskType \u003d taskType;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        if (taskDescription \u003d\u003d null) throw new NullPointerException();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        this.taskDescription \u003d taskDescription;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    /** Returns string representation of task,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     *  in terms of initial, icon of done, task description."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * @return String representation of task."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    public String printTask() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        return \"[\" + getFirstCharTask() + \"][\" + getIcon() + \"] \" + getTaskDescription();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    /** Returns char icon."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * Returns tick if isDone is true, else returns cross."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * @return char icon."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    public char getIcon() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        return isDone ? \u0027\\u2713\u0027 : \u0027\\u274C\u0027;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    /** Indicate that task is done."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * Set isDone true when function is called."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    public void setIsDone() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    /** Returns char of first letter in task name."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * @return char of first letter in task name."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    public char getFirstCharTask() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        return taskType;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    /** Get isDone,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * indicating done status of the task."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * @return boolean true if done, else false."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    public boolean getIsDone() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        return isDone;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    /** Get task description for task."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * @return String task description."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    public String getTaskDescription() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        return taskDescription;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    /** Set task description of task."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * @param input task description from user."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    public void setTaskDescription(String input) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        this.taskDescription \u003d input;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "}"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "huiminlim": 92
    }
  },
  {
    "path": "src/main/java/duke/Task/ToDo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "huiminlim"
        },
        "content": " * Represents a todo task."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "huiminlim"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "public class ToDo extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    public ToDo(char taskType, String taskDescription, boolean isDone) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        super(taskType, taskDescription, isDone);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    public ToDo(String taskDescription, boolean isDone) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        super(taskDescription, isDone);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "huiminlim": 16
    }
  },
  {
    "path": "src/main/java/duke/TaskList/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "package duke.tasklist;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "huiminlim"
        },
        "content": " * Represents a task list"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "huiminlim"
        },
        "content": " * Contains functions to interact with task list"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "huiminlim"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    private ArrayList\u003cTask\u003e taskList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    private int taskCount;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    // Default constructor"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        taskList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        taskCount \u003d 0;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    // Non-default constructor for initial loading"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    public TaskList(ArrayList\u003cTask\u003e list) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        this.taskList \u003d list;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        this.taskCount \u003d list.size();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    /** Add new task to task list"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * @param task To add to the task list."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    public void addNewTask(Task task) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        taskList.add(task);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    /** Increase task count of task list."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    public void increaseTaskCount() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        taskCount++;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    /** Get task count of task list."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * @return int Number of tasks in task list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    public int getTaskCount() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        return taskCount;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    /** Get list of print format of task list."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * @return ArrayList\u003cString\u003e List of strings representing task."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    public ArrayList\u003cString\u003e printList() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        ArrayList\u003cString\u003e temp \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        for (int i \u003d 0; i \u003c taskList.size(); i++) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            temp.add(taskList.get(i).printTask());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        return temp;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    /** Delete the task, and return deleted task."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * @return Task Deleted task."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    public Task deleteTask(int indexToDelete) throws IndexOutOfBoundsException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        Task t;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            t \u003d taskList.remove(indexToDelete);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        } catch (IndexOutOfBoundsException o) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            throw new IndexOutOfBoundsException();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        taskCount--;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        return t;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    /** Set task as done given index."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * @return Task Done task"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    public Task setTaskDone(int indexSetDone) throws IndexOutOfBoundsException {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        Task t;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            taskList.get(indexSetDone).setIsDone();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            t \u003d taskList.get(indexSetDone);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        } catch (IndexOutOfBoundsException o) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            throw new IndexOutOfBoundsException(\"Index out of Bound\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        return t;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    public ArrayList\u003cString\u003e find(String keyword) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        ArrayList\u003cString\u003e listFound \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        for (int i \u003d 0; i \u003c taskList.size(); i++) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            Task t \u003d taskList.get(i);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            String[] taskToken \u003d t.getTaskDescription().split(\" \");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            for (int j \u003d 0; j \u003c taskToken.length; j++) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                if (taskToken[j].equals(keyword)) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    listFound.add(t.printTask());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        return listFound;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "huiminlim": 108
    }
  },
  {
    "path": "src/main/java/duke/Ui/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "huiminlim"
        },
        "content": " * Represents a Ui"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "huiminlim"
        },
        "content": " * Contains functions to interact with user."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "huiminlim"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    private Scanner sc;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    public Ui() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        sc \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * Display welcome message."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    public void showWelcome() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        String UI_GREETING \u003d \"Hello! I\u0027m Duke\\nWhat can I do for you?\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        System.out.println(UI_GREETING);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * Display line."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    public void showLine() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        String UI_HORIZONTAL_LINE \u003d \"____________________________________________________________\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        System.out.println(UI_HORIZONTAL_LINE);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * Display bye message."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    public void showBye() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        String UI_GOODBYE \u003d \"Bye. Hope to see you again soon!\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        sc.close();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        System.out.println(UI_GOODBYE);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * Display loading error message."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    public void showLoadingError() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        System.out.println(\"Error in loading tasks into Duke.\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    /** Read user input from system input"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * @return String User input."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    public String readCommand() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        String input \u003d sc.nextLine();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        return input;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * Display added task message."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    public void showAddedTask(char firstAlphabet, boolean isDone, String taskDescription, int numberOfItems) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        char icon \u003d isDone ? \u0027\\u2713\u0027 : \u0027\\u274C\u0027;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        System.out.println(\"Got it. I\u0027ve added this task: \");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        System.out.println(\"\\t[\" + firstAlphabet + \"][\" + icon + \"] \" + taskDescription);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        System.out.println(\"Now you have \" + numberOfItems + \" in the list.\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * Display list message."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    public void showList(ArrayList\u003cString\u003e listToPrint) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        System.out.println(\"Here are the tasks in your list:\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        for (int i \u003d 0; i \u003c listToPrint.size(); i++) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            System.out.println((i + 1) + \".\" + listToPrint.get(i));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * Display deleted task message."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    public void showDeletedTask(Task t, int taskCount) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        System.out.println(\"Noted. I\u0027ve removed this task:\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        System.out.println(t.printTask());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        System.out.println(\"Now you have \" + taskCount + \" tasks in the list.\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * Display task done message."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    public void showDoneTask(Task t) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        System.out.println(\"Nice! I\u0027ve marked this task as done:\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        System.out.println(t.printTask());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * Display index error message."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    public void showIndexError() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        System.out.println(\"Invalid task number. Please check again.\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * Display input error message."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    public void showInputError() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        System.out.println(\"Error! Please check input again\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * Display command not found message."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    public void showCommandNotFoundError() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        System.out.println(\"Command not found. Please check command again.\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    public void showMatchingTaskList(ArrayList\u003cString\u003e listFound) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        if (listFound.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            System.out.println(\"No matching result from your list.\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        System.out.println(\"Here are the matching tasks in your list:\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        for (int i \u003d 0; i \u003c listFound.size(); i++) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            System.out.println((i + 1) + \".\" + listFound.get(i));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    public void showIncorrectNumberOfArgument() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        System.out.println(\"Incorrect number of arguments in command.\");"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "huiminlim": 133
    }
  },
  {
    "path": "src/main/java/duke/command/AddCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "huiminlim"
        },
        "content": " * Represents an add command"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "huiminlim"
        },
        "content": " * To add task to task list, perform Ui task and save to hard disk."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "huiminlim"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    public AddCommand(String command, Task pendingTask) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        super(command, pendingTask);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * Added new task to task list, perform Ui display and save to hard disk"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * @param list  List containing all tasks."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * @param ui Ui interface of duke."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * @param storage Storage interface."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    public void execute(TaskList list, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        Task temp \u003d getPendingTask();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        list.addNewTask(temp);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        list.increaseTaskCount();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        storage.save(list.printList());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        ui.showAddedTask(temp.getFirstCharTask(),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                temp.getIsDone(), temp.getTaskDescription(), list.getTaskCount());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * Return boolean indicating if command is exit command."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * @return boolean flag indicating if is exit command."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "huiminlim": 46
    }
  },
  {
    "path": "src/main/java/duke/command/ByeCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "huiminlim"
        },
        "content": " * Performs a Bye command"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "huiminlim"
        },
        "content": " * by executing the Ui to show bye screen."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "huiminlim"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "public class ByeCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    public ByeCommand(String command, Task pending) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        super(command, pending);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * Shows Ui screen of bye."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * @param list  List containing all tasks."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * @param ui Ui interface of duke."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * @param storage Storage interface."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    public void execute(TaskList list, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        ui.showBye();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * Return boolean indicating if command is exit command."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * @return boolean flag indicating if is exit command."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "huiminlim": 39
    }
  },
  {
    "path": "src/main/java/duke/command/COMMAND_TYPE.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "huiminlim"
        },
        "content": " * Contains the different types of commands available in duke."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "huiminlim"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "public enum COMMAND_TYPE {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    ADD, DELETE, LIST, DONE, BYE, FIND;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "huiminlim": 8
    }
  },
  {
    "path": "src/main/java/duke/command/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "huiminlim"
        },
        "content": " * General command class,"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "huiminlim"
        },
        "content": " * contains basic abstract command actions, such as execute, check if exit command"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "huiminlim"
        },
        "content": " * and get command type and pending tasks of command."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "huiminlim"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    private COMMAND_TYPE commandType;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    private Task pendingTask;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    public Command(String command, Task pendingTask) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            this.commandType \u003d COMMAND_TYPE.valueOf(command.toUpperCase());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        } catch (IllegalArgumentException i) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            throw new IllegalArgumentException();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        } catch (NullPointerException n) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            throw new NullPointerException();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        if (pendingTask \u003d\u003d null) throw new NullPointerException();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        else this.pendingTask \u003d pendingTask;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * Perform command actions."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    public abstract void execute(TaskList list, Ui ui, Storage storage) throws IOException;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * Return boolean indicating if command is exit command."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * @return boolean flag indicating if is exit command."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    public abstract boolean isExit();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * Return task object held by command."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * @return task held in pendingTask."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    public Task getPendingTask() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        return pendingTask;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * Return type of command from enum COMMAND_TYPE."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * @return COMMAND_TYPE enum constant of commandType."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    public COMMAND_TYPE getCommandType() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        return commandType;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "}"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "huiminlim": 65
    }
  },
  {
    "path": "src/main/java/duke/command/CommandNotFoundException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "huiminlim"
        },
        "content": " * Exception thrown when command input by user is not found by Duke."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "huiminlim"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "public class CommandNotFoundException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    public CommandNotFoundException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "huiminlim": 12
    }
  },
  {
    "path": "src/main/java/duke/command/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "huiminlim"
        },
        "content": " * Represents a delete command"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "huiminlim"
        },
        "content": " * To remove task from task list, perform Ui task and save updated list to hard disk."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "huiminlim"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    private int taskNumberToDelete;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    public DeleteCommand(String command, Task pending, int taskNumberToDelete) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        super(command, pending);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        this.taskNumberToDelete \u003d taskNumberToDelete;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    /** Delete task from task list, perform Ui display and save to hard disk"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * @param list  List containing all tasks."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * @param ui Ui interface of duke."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * @param storage Storage interface."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    public void execute(TaskList list, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        Task t \u003d list.deleteTask(taskNumberToDelete - 1);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        storage.save(list.printList());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        ui.showDeletedTask(t, list.getTaskCount());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * Return boolean indicating if command is exit command."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * @return boolean flag indicating if is exit command."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "huiminlim": 42
    }
  },
  {
    "path": "src/main/java/duke/command/DoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "huiminlim"
        },
        "content": " * Represents a done command"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "huiminlim"
        },
        "content": " * To set task from task list as done, perform Ui task and save updated list to hard disk."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "huiminlim"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "public class DoneCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    private int taskNumberDone;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    public DoneCommand(String command, Task pending, int taskNumberDone) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        super(command, pending);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        this.taskNumberDone \u003d taskNumberDone;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    /** Set task from task list as done, perform Ui display and save to hard disk"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * @param list  List containing all tasks."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * @param ui Ui interface of duke."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * @param storage Storage interface."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    public void execute(TaskList list, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        Task t \u003d list.setTaskDone(taskNumberDone - 1);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        storage.save(list.printList());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        ui.showDoneTask(t);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * Return boolean indicating if command is exit command."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * @return boolean flag indicating if is exit command."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "huiminlim": 43
    }
  },
  {
    "path": "src/main/java/duke/command/FindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    private String keyword;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    public FindCommand(String command, String keyword, Task pendingTask) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        super(command, pendingTask);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        this.keyword \u003d keyword;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    public void execute(TaskList list, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        ArrayList\u003cString\u003e listFound \u003d list.find(keyword);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        ui.showMatchingTaskList(listFound);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "huiminlim": 28
    }
  },
  {
    "path": "src/main/java/duke/command/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "huiminlim"
        },
        "content": " * Represents a list command"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "huiminlim"
        },
        "content": " * To obtain list of task to print, perform Ui task."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "huiminlim"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    public ListCommand(String command) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        super(command, new Task());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    /** Obtain list of tasks to print, perform Ui display and save to hard disk"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * @param list  List containing all tasks."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * @param ui Ui interface of duke."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * @param storage Storage interface."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    public void execute(TaskList list, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        ArrayList\u003cString\u003e listToPrint \u003d list.printList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        ui.showList(listToPrint);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * Return boolean indicating if command is exit command."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * @return boolean flag indicating if is exit command."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "huiminlim": 40
    }
  },
  {
    "path": "src/main/java/duke/parser/IncorrectFileFormatException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "package duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "huiminlim"
        },
        "content": " * Exception thrown when file read has incorrect format."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "huiminlim"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "public class IncorrectFileFormatException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    public IncorrectFileFormatException() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "huiminlim": 10
    }
  },
  {
    "path": "src/main/java/duke/parser/IncorrectNumberOfArgumentsException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "package duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "public class IncorrectNumberOfArgumentsException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    public IncorrectNumberOfArgumentsException() {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "huiminlim": 7
    }
  },
  {
    "path": "src/main/java/duke/parser/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "package duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "import duke.command.*;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "import duke.task.ToDo;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "huiminlim"
        },
        "content": " * Represents a parser to parse user input."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "huiminlim"
        },
        "content": " * Has parse functions for user input and file."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "huiminlim"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    private static ArrayList\u003cString\u003e commandList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * Initialize the parser,"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * by preparing command list to cross check if command input by user/file"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * is valid."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * @throws CommandNotFoundException If zone is \u003c\u003d 0."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    public static void initialize() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        commandList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        commandList.add(\"DEADLINE\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        commandList.add(\"TODO\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        commandList.add(\"EVENT\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        commandList.add(\"DELETE\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        commandList.add(\"DONE\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        commandList.add(\"LIST\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        commandList.add(\"BYE\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        commandList.add(\"FIND\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * Checks if user input follows format of \u003ccommand\u003e \u003cdescription\u003e \u003ctime\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * Throws CommandNotFoundException if command is not found."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * Return user command in command object."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * @param input String input of command from user."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * @return Command object of the user."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * @throws CommandNotFoundException If command entered by user is not found."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    public static Command parse(String input) throws CommandNotFoundException, IncorrectFileFormatException, IncorrectNumberOfArgumentsException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        Task task;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        Command command;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        boolean isFound \u003d false;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        String commandName \u003d \"\", commandType \u003d \"\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        for (int i \u003d 0; i \u003c commandList.size(); i++) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            if (input.toUpperCase().startsWith(commandList.get(i))) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                commandName \u003d commandList.get(i);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                isFound \u003d true;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        if (!isFound) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            throw new CommandNotFoundException();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        if (commandName.equals(\"TODO\") || commandName.equals(\"DEADLINE\") || commandName.equals(\"EVENT\")) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            commandType \u003d \"ADD\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        } else commandType \u003d commandName;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        COMMAND_TYPE type \u003d COMMAND_TYPE.valueOf(commandType);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        if (type \u003d\u003d COMMAND_TYPE.ADD) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            if (commandName.equals(\"TODO\")) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                task \u003d new ToDo(commandName.toUpperCase().charAt(0),"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                        input.substring(\"Todo\".length()).trim(), false);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            } else if (commandName.equals(\"DEADLINE\")) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                String subsequent \u003d input.substring(\"Deadline\".length());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                int lastIndexSlash \u003d subsequent.lastIndexOf((char) \u0027/\u0027);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                String date \u003d subsequent.substring(lastIndexSlash + 1);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                String taskInfo \u003d subsequent.substring(0, lastIndexSlash + \"by \".length() + 1).trim();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                task \u003d new Deadline(commandName.toUpperCase().charAt(0),"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                        taskInfo, false, date);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                String subsequent \u003d input.substring(\"Event\".length());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                int lastIndexSlash \u003d subsequent.lastIndexOf((char) \u0027/\u0027);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                String date \u003d subsequent.substring(lastIndexSlash + 1);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                String taskInfo \u003d subsequent.substring(0, lastIndexSlash"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                        + \"at \".length() + 1).trim();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                task \u003d new Event(commandName."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                        toUpperCase().charAt(0), taskInfo, false, date);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            command \u003d new AddCommand(commandType, task);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        } else if (type \u003d\u003d COMMAND_TYPE.BYE) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            task \u003d new Task();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            command \u003d new ByeCommand(commandName, task);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        } else if (type \u003d\u003d COMMAND_TYPE.DELETE) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            String subsequent \u003d input.substring(\"Delete \".length()).trim();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            int numberToDelete \u003d Integer.parseInt(subsequent);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            task \u003d new Task();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            command \u003d new DeleteCommand(commandName, task, numberToDelete);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        } else if (type \u003d\u003d COMMAND_TYPE.DONE) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            String subsequent \u003d input.substring(\"Done \".length()).trim();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            int numberDone \u003d Integer.parseInt(subsequent);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            task \u003d new Task();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            command \u003d new DoneCommand(commandName, task, numberDone);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        } else if (type \u003d\u003d COMMAND_TYPE.LIST) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            command \u003d new ListCommand(commandName);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        } else if (type \u003d\u003d COMMAND_TYPE.FIND) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            if (input.toLowerCase().equals(\"find\")) throw new IncorrectNumberOfArgumentsException();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            String keyword \u003d input.substring(\"Find \".length()).trim();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            if (keyword.equals(\"\")) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                throw new IncorrectNumberOfArgumentsException();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            command \u003d new FindCommand(commandName, keyword, new Task());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        } else throw new CommandNotFoundException();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        return command;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * Checks if file input follows format of \u003ccommand\u003e \u003cdone\u003e \u003cdescription\u003e \u003ctime\u003e"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * Throws IncorrectFileFormatException if command is not found."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * Return task in task object."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * @param input String input of command from user."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * @return task object of the file."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * @throws IncorrectFileFormatException If input entered by user is not recognized."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    public static Task parseFromFile(String input) throws IncorrectFileFormatException {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        Task task \u003d new Task();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        String subsequent;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        boolean isDone \u003d false;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        boolean check \u003d input.startsWith(\"[D]\") || input.startsWith(\"[E]\") || input.startsWith(\"[T]\");"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        if (!check) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            throw new IncorrectFileFormatException();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            subsequent \u003d input.substring(\"[X]\".length());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            if (subsequent.startsWith(\"[1]\")) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                isDone \u003d true;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            } else if (subsequent.startsWith(\"[0]\")) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                isDone \u003d false;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            } else throw new IncorrectFileFormatException();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            // Move to after cross/tick and space"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            subsequent \u003d subsequent.substring(4).trim();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            if (input.startsWith(\"[T]\")) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                task \u003d new ToDo(\u0027T\u0027, subsequent, isDone);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            } else if (input.startsWith(\"[D]\") || input.startsWith(\"[E]\")) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                int slashIndex \u003d subsequent.indexOf(\u0027/\u0027);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                if (slashIndex \u003d\u003d -1) throw new IncorrectFileFormatException();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                String taskDescription \u003d subsequent.substring(0, slashIndex).trim();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                String date \u003d subsequent.substring(slashIndex + \"xx: \".length() + 1);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                if (input.startsWith(\"[D]\")) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    task \u003d new Deadline(\u0027D\u0027, taskDescription, isDone, date);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                } else if (input.startsWith(\"[E]\")) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                    task \u003d new Event(\u0027E\u0027, taskDescription, isDone, date);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                } else throw new IncorrectFileFormatException();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        return task;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "huiminlim": 183
    }
  },
  {
    "path": "src/main/java/duke/storage/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "package duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "import duke.parser.IncorrectFileFormatException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "import duke.parser.Parser;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "huiminlim"
        },
        "content": " * Represents a storage function of duke."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "huiminlim"
        },
        "content": " * Has loading from file and saving to hard disk function."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "huiminlim"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    private String targetFilePath;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    private String printFilePath \u003d \"C:\\\\Users\\\\user\\\\Desktop\\\\CS2103_Git\\\\duke\\\\data\\\\print.txt\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    public Storage(String filePath) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        // Convert string filePath to actual filepath and store in FilePath class"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        targetFilePath \u003d filePath;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    /** Returns task list of tasks from file,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     *  convert input from file to task objects."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * @return task list from file."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * @throws IncorrectFileFormatException If file format is incorrect."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * @throws FileNotFoundException if file is not found."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    public ArrayList\u003cTask\u003e load() throws IncorrectFileFormatException, FileNotFoundException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        File f;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        f \u003d new File(targetFilePath);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        Scanner s \u003d new Scanner(f, \"Unicode\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        ArrayList\u003cString\u003e listInput \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        while (s.hasNextLine()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            String i \u003d s.nextLine();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            listInput.add(i);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        ArrayList\u003cTask\u003e listTask \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        for (int i \u003d 0; i \u003c listInput.size(); i++) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                listTask.add(Parser.parseFromFile(listInput.get(i)));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            } catch (IncorrectFileFormatException f1) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                throw new IncorrectFileFormatException();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            } catch (NullPointerException n) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                throw new NullPointerException();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        return listTask;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    /** Obtain list of tasks to print, save to hard disk"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     * @param l  List containing all string format tasks to save."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    public void save(ArrayList\u003cString\u003e l) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            FileWriter fw \u003d new FileWriter(printFilePath);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            for (int i \u003d 0; i \u003c l.size(); i++) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "                fw.write(l.get(i) + System.lineSeparator());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            fw.close();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "            System.out.println(\"Something went wrong: \" + e.getMessage());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "}"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "huiminlim": 76
    }
  },
  {
    "path": "src/main/test/java/ParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "import duke.command.CommandNotFoundException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "import duke.parser.Parser;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "public class ParserTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    public void parserTest_incorrectCommand_throwException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        assertThrows(CommandNotFoundException.class, () -\u003eParser.parse(\"eijfioj\"));"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "huiminlim": 14
    }
  },
  {
    "path": "src/main/test/java/TaskListTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "public class TaskListTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    TaskList list \u003d new TaskList();"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    public void taskList_indexOutofBound_throwException(){"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        //Duke duke \u003d new Duke(\"C:\\\\Users\\\\user\\\\Desktop\\\\CS2103_Git\\\\duke\\\\data\\\\tasks.txt\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        //duke.run();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003elist.deleteTask( 10));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "huiminlim": 16
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "deadline do homework /by no idea :-p"
      }
    ],
    "authorContributionMap": {
      "huiminlim": 1
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "if not exist ..\\bin mkdir ..\\bin"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "REM delete output from previous run"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "del ACTUAL.TXT"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "REM compile the code into the bin folder"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "javac  -cp ..\\src -Xlint:none -d ..\\bin ..\\src\\main\\java\\Duke.java"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "    exit /b 1"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ")"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "java -classpath ..\\bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "huiminlim"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "huiminlim"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT"
      }
    ],
    "authorContributionMap": {
      "huiminlim": 21
    }
  }
]
