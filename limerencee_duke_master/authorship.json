[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "    archiveVersion \u003d \"0.1.3\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "    testCompile \u0027com.github.stefanbirkner:system-rules:1.19.0\u0027"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "group \u0027seedu.duke\u0027"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "application {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "    // Change this to your main class."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "    mainClassName \u003d \"Duke\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "run {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "test {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jia Hao": 27,
      "Jeffry Lum": 15
    }
  },
  {
    "path": "data/duke.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "T | 0 | Test adding todo task."
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "D | 0 | Test adding deadline | 18th of October 2019, 7PM"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "E | 0 | Test adding event | i3 Auditorium"
      }
    ],
    "authorContributionMap": {
      "Jia Hao": 3
    }
  },
  {
    "path": "gradlew.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "@if \"%DEBUG%\" \u003d\u003d \"\" @echo off"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "@rem ##########################################################################"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "@rem  Gradle startup script for Windows"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "@rem ##########################################################################"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "@rem Set local scope for the variables with windows NT shell"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "if \"%OS%\"\u003d\u003d\"Windows_NT\" setlocal"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "set DIRNAME\u003d%~dp0"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "if \"%DIRNAME%\" \u003d\u003d \"\" set DIRNAME\u003d."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "set APP_BASE_NAME\u003d%~n0"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "set APP_HOME\u003d%DIRNAME%"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "set DEFAULT_JVM_OPTS\u003d\"-Xmx64m\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "@rem Find java.exe"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "if defined JAVA_HOME goto findJavaFromJavaHome"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "set JAVA_EXE\u003djava.exe"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "%JAVA_EXE% -version \u003eNUL 2\u003e\u00261"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "if \"%ERRORLEVEL%\" \u003d\u003d \"0\" goto init"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "echo."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "echo ERROR: JAVA_HOME is not set and no \u0027java\u0027 command could be found in your PATH."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "echo."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "echo Please set the JAVA_HOME variable in your environment to match the"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "echo location of your Java installation."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "goto fail"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": ":findJavaFromJavaHome"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "set JAVA_HOME\u003d%JAVA_HOME:\"\u003d%"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "set JAVA_EXE\u003d%JAVA_HOME%/bin/java.exe"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "if exist \"%JAVA_EXE%\" goto init"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "echo."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "echo."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "echo Please set the JAVA_HOME variable in your environment to match the"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "echo location of your Java installation."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "goto fail"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": ":init"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "@rem Get command-line arguments, handling Windows variants"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "if not \"%OS%\" \u003d\u003d \"Windows_NT\" goto win9xME_args"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": ":win9xME_args"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "@rem Slurp the command line arguments."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "set CMD_LINE_ARGS\u003d"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "set _SKIP\u003d2"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": ":win9xME_args_slurp"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "if \"x%~1\" \u003d\u003d \"x\" goto execute"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "set CMD_LINE_ARGS\u003d%*"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": ":execute"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "@rem Setup the command line"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "set CLASSPATH\u003d%APP_HOME%\\gradle\\wrapper\\gradle-wrapper.jar"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "@rem Execute Gradle"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "\"%JAVA_EXE%\" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% \"-Dorg.gradle.appname\u003d%APP_BASE_NAME%\" -classpath \"%CLASSPATH%\" org.gradle.wrapper.GradleWrapperMain %CMD_LINE_ARGS%"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": ":end"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "@rem End local scope for the variables with windows NT shell"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "if \"%ERRORLEVEL%\"\u003d\u003d\"0\" goto mainEnd"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": ":fail"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "rem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "rem the _cmd.exe /c_ return code!"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "if  not \"\" \u003d\u003d \"%GRADLE_EXIT_CONSOLE%\" exit 1"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "exit /b 1"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": ":mainEnd"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "if \"%OS%\"\u003d\u003d\"Windows_NT\" endlocal"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": ":omega"
      }
    ],
    "authorContributionMap": {
      "Jeffry Lum": 84
    }
  },
  {
    "path": "settings.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "rootProject.name \u003d \u0027duke\u0027"
      }
    ],
    "authorContributionMap": {
      "Jeffry Lum": 1
    }
  },
  {
    "path": "src/main/java/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "import duke.util.DukeParser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "import duke.util.DukeStorage;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "import duke.util.DukeUi;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "import duke.command.DukeCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "import duke.command.DukeCommandExit;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "import duke.util.DukeTaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "    private final static String DUKE_TASK_FILE_PATH \u003d \".\\\\data\\\\duke.txt\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "    private DukeStorage storage;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "    private DukeTaskList tasks;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "    private DukeUi ui;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "     * Constructor takes in a file path String which specifies the location of the data file to save to/load from."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "     * @param filePath Relative/Absolute file path where the data file is stored on the hard disk."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "    public Duke(String filePath) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "        ui \u003d new DukeUi();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "        storage \u003d new DukeStorage(filePath);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "            tasks \u003d new DukeTaskList(storage.load(ui));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "        } catch (IOException ex) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "            ui.displayFileLoadingError();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "            tasks \u003d new DukeTaskList();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "     * Run method will first display Duke\u0027s welcome message {@link DukeUi#displayWelcomeMessage()} and then run"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "     * continuously until a {@link DukeCommandExit} is executed."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "        ui.displayWelcomeMessage();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "        while (true) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "            String inputLine \u003d ui.readCommand();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "            Optional\u003cDukeCommand\u003e command \u003d DukeParser.parseCommand(inputLine, ui);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "            if (!command.isEmpty()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "                command.get().execute(tasks, ui, storage);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "        new Duke(DUKE_TASK_FILE_PATH).run();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jia Hao": 48,
      "-": 4
    }
  },
  {
    "path": "src/main/java/duke/command/DukeCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "import duke.util.DukeStorage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "import duke.util.DukeTaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "import duke.util.DukeUi;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "public abstract class DukeCommand {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "    public abstract void execute(DukeTaskList tasks, DukeUi ui, DukeStorage storage);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jia Hao": 9
    }
  },
  {
    "path": "src/main/java/duke/command/DukeCommandAdd.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "import duke.util.DukeStorage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "import duke.util.DukeTaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "import duke.util.DukeUi;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "import duke.util.DukeParser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "import duke.task.DukeTaskDeadline;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "import duke.task.DukeTaskEvent;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "import duke.task.DukeTaskToDo;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "public class DukeCommandAdd extends DukeCommand {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "    String[] inputTokens;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "     * Constructor that takes in the user input split by the \" \" delimiter into a String[]."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "     * @param inputTokens User entered line split by a space delimiter."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "    public DukeCommandAdd(String[] inputTokens) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "        this.inputTokens \u003d inputTokens;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "     * This method will handle adding of a {@link DukeTaskToDo} into {@link DukeTaskList} list of {@link duke.task.DukeTask}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "     * @param tasks Instance of {@link DukeTaskList} which contains an existing list of {@link duke.task.DukeTask}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "     * @param ui Instance of {@link DukeUi} which will show output to the user."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "     * @param storage Instance of {@link DukeStorage} which will save the {@link DukeTaskList} to the hard disk."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "    private void handleTodo(DukeTaskList tasks, DukeUi ui, DukeStorage storage) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "        String todoTaskName \u003d DukeParser.concatStringTokens(inputTokens, 1, (inputTokens.length - 1));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "        DukeTaskToDo dukeToDo \u003d new DukeTaskToDo(todoTaskName);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "        tasks.addToDukeTasks(dukeToDo, ui, storage);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "     * This method will handle adding of a {@link DukeTaskDeadline} into {@link DukeTaskList} list of {@link duke.task.DukeTask}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "     * @param tasks Instance of {@link DukeTaskList} which contains an existing list of {@link duke.task.DukeTask}."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "     * @param ui Instance of {@link DukeUi} which will show output to the user."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "     * @param storage Instance of {@link DukeStorage} which will save the {@link DukeTaskList} to the hard disk."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "    private void handleDeadline(DukeTaskList tasks, DukeUi ui, DukeStorage storage) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "        int deadlineParameterIndex \u003d DukeParser.getInputFlagParameterStartingIndex(inputTokens, \"/by\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "        if (deadlineParameterIndex \u003d\u003d -1 || deadlineParameterIndex \u003d\u003d inputTokens.length) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "            ui.displayMissingDeadlineParam();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "            String deadlineTaskName \u003d DukeParser.concatStringTokens(inputTokens, 1,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "                    (deadlineParameterIndex - 2));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "            String deadlineParameterString \u003d DukeParser.concatStringTokens(inputTokens, deadlineParameterIndex,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "                    (inputTokens.length - 1));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "                DukeTaskDeadline dukeDeadline \u003d new DukeTaskDeadline(deadlineTaskName,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "                        DukeParser.formatDate(deadlineParameterString));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "                tasks.addToDukeTasks(dukeDeadline, ui, storage);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "            } catch (DateTimeParseException ex) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "                ui.displayInvalidDateFormat();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "            }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "     * This method will handle adding of a {@link DukeTaskEvent} into {@link DukeTaskList} list of {@link duke.task.DukeTask}."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "     * @param tasks Instance of {@link DukeTaskList} which contains an existing list of {@link duke.task.DukeTask}."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "     * @param ui Instance of {@link DukeUi} which will show output to the user."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "     * @param storage Instance of {@link DukeStorage} which will save the {@link DukeTaskList} to the hard disk."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "    private void handleEvent(DukeTaskList tasks, DukeUi ui, DukeStorage storage) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "        int eventParameterIndex \u003d DukeParser.getInputFlagParameterStartingIndex(inputTokens, \"/at\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "        if (eventParameterIndex \u003d\u003d -1 || eventParameterIndex \u003d\u003d inputTokens.length) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "            ui.displayMissingEventParam();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "            String eventTaskName \u003d DukeParser.concatStringTokens(inputTokens, 1,"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "                    (eventParameterIndex - 2));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "            String eventParameterString \u003d DukeParser.concatStringTokens(inputTokens, eventParameterIndex,"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "                    (inputTokens.length - 1));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "            DukeTaskEvent dukeEvent \u003d new DukeTaskEvent(eventTaskName, eventParameterString);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "            tasks.addToDukeTasks(dukeEvent, ui, storage);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "     * This method will add {@link duke.task.DukeTask} according to the command name."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "     * @param tasks Instance of {@link DukeTaskList} which contains an existing list of {@link duke.task.DukeTask}."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "     * @param ui Instance of {@link DukeUi} which will show output to the user."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "     * @param storage Instance of {@link DukeStorage} which will save the {@link DukeTaskList} to the hard disk."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "    public void execute(DukeTaskList tasks, DukeUi ui, DukeStorage storage) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "        if (inputTokens.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "            ui.displayEmptyDescriptionError();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "            if (inputTokens[0].equals(\"todo\")) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "                handleTodo(tasks, ui, storage);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "            } else if (inputTokens[0].equals(\"deadline\")) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "                handleDeadline(tasks, ui, storage);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "            } else if (inputTokens[0].equals(\"event\")) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "                handleEvent(tasks, ui, storage);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "            }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jia Hao": 101
    }
  },
  {
    "path": "src/main/java/duke/command/DukeCommandExit.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "import duke.util.DukeStorage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "import duke.util.DukeTaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "import duke.util.DukeUi;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "public class DukeCommandExit extends DukeCommand {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "     * This method will exit the application after executing the exit message from"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "     * {@link DukeUi#displayTerminateMessage()}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "     * @param tasks Instance of {@link DukeTaskList} which contains an existing list of {@link duke.task.DukeTask}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "     * @param ui Instance of {@link DukeUi} which will show output to the user."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "     * @param storage Instance of {@link DukeStorage} which will save the {@link DukeTaskList} to the hard disk."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "    public void execute(DukeTaskList tasks, DukeUi ui, DukeStorage storage) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "        ui.displayTerminateMessage();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "        System.exit(0);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jia Hao": 21
    }
  },
  {
    "path": "src/main/java/duke/command/DukeCommandList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "import duke.util.DukeStorage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "import duke.util.DukeTaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "import duke.util.DukeUi;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "public class DukeCommandList extends DukeCommand {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "     * This method will list the current existing {@link duke.task.DukeTask} from {@link DukeTaskList}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "     * @param tasks Instance of {@link DukeTaskList} which contains an existing list of {@link duke.task.DukeTask}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "     * @param ui Instance of {@link DukeUi} which will show output to the user."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "     * @param storage Instance of {@link DukeStorage} which will save the {@link DukeTaskList} to the hard disk."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "    public void execute(DukeTaskList tasks, DukeUi ui, DukeStorage storage) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "        tasks.displayDukeTasks(ui);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jia Hao": 19
    }
  },
  {
    "path": "src/main/java/duke/command/DukeCommandUpdate.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "import duke.util.DukeStorage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "import duke.util.DukeTaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "import duke.util.DukeUi;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "public class DukeCommandUpdate extends DukeCommand {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "    private String[] inputTokens;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "     * Constructor that takes in the user input split by the \" \" delimiter into a String[]."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "     * @param inputTokens User entered line split by a space delimiter."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "    public DukeCommandUpdate(String[] inputTokens) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "        this.inputTokens \u003d inputTokens;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "     * This method will either update by marking a {@link duke.task.DukeTask} as done or deleting it, depending on the command"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "     * name."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "     * @param tasks Instance of {@link DukeTaskList} which contains an existing list of {@link duke.task.DukeTask}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "     * @param ui Instance of {@link DukeUi} which will show output to the user."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "     * @param storage Instance of {@link DukeStorage} which will save the {@link DukeTaskList} to the hard disk."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "    public void execute(DukeTaskList tasks, DukeUi ui, DukeStorage storage) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "        if (inputTokens.length \u003d\u003d 2) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "            if (inputTokens[0].equals(\"done\")) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "                tasks.markDukeTaskComplete(inputTokens[1], ui, storage);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "            } else if (inputTokens[0].equals(\"delete\")) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "                tasks.deleteDukeTask(inputTokens[1], ui, storage);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "            }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "            ui.displayMissingIndex();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jia Hao": 38
    }
  },
  {
    "path": "src/main/java/duke/task/DukeTask.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "public class DukeTask {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "    private String taskName;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "    private String taskType;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "    private boolean isComplete;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "    public DukeTask(String taskName, String taskType) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "        this.taskName \u003d taskName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "        this.taskType \u003d taskType;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "        this.isComplete \u003d false;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "    public DukeTask(String taskName, boolean isComplete, String taskType) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "        this.taskName \u003d taskName;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "        this.isComplete \u003d isComplete;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "        this.taskType \u003d taskType;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "    public String getTaskName() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "        return this.taskName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "    public String getTaskType() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "        return this.taskType;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "    public boolean getTaskIsComplete() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "        return this.isComplete;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "    public void setTaskComplete() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "        this.isComplete \u003d true;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jia Hao": 35
    }
  },
  {
    "path": "src/main/java/duke/task/DukeTaskDeadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "public class DukeTaskDeadline extends DukeTask {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "    private String taskDeadline;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "    public DukeTaskDeadline(String taskName, String taskDeadline) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "        super(taskName, \"D\");"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "        this.taskDeadline \u003d taskDeadline;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "    public DukeTaskDeadline(String taskName, boolean isComplete, String taskDeadline) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "        super(taskName, isComplete, \"D\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "        this.taskDeadline \u003d taskDeadline;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "    public String getTaskDeadline() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "        return this.taskDeadline;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "        String symbol \u003d getTaskIsComplete() ? \"\\u2713\" : \"\\u2718\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "        return \"[\" + getTaskType() +\"][\" + symbol + \"] \" + getTaskName() + \" (by: \" + this.taskDeadline + \")\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jia Hao": 26
    }
  },
  {
    "path": "src/main/java/duke/task/DukeTaskEvent.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "public class DukeTaskEvent extends DukeTask {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "    private String taskLocation;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "    public DukeTaskEvent(String taskName, String taskLocation) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "        super(taskName, \"E\");"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "        this.taskLocation \u003d taskLocation;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "    public DukeTaskEvent(String taskName, boolean isComplete, String taskLocation) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "        super(taskName, isComplete, \"E\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "        this.taskLocation \u003d taskLocation;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "    public String getTaskLocation() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "        return this.taskLocation;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "        String symbol \u003d getTaskIsComplete() ? \"\\u2713\" : \"\\u2718\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "        return \"[\" + getTaskType() +\"][\" + symbol + \"] \" + getTaskName() + \" (at: \" + this.taskLocation + \")\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jia Hao": 25
    }
  },
  {
    "path": "src/main/java/duke/task/DukeTaskToDo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "public class DukeTaskToDo extends DukeTask {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "    public DukeTaskToDo(String taskName) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "        super(taskName, \"T\");"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "    public DukeTaskToDo(String taskName, boolean isComplete) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "        super(taskName, isComplete, \"T\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "        String symbol \u003d getTaskIsComplete() ? \"\\u2713\" : \"\\u2718\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "        return \"[\" + getTaskType() +\"][\" + symbol + \"] \" + getTaskName();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jia Hao": 17
    }
  },
  {
    "path": "src/main/java/duke/util/DukeParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "package duke.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "import duke.command.DukeCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "import duke.command.DukeCommandAdd;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "import duke.command.DukeCommandExit;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "import duke.command.DukeCommandList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "import duke.command.DukeCommandUpdate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "import java.time.format.DateTimeFormatterBuilder;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "import java.time.temporal.ChronoField;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "public class DukeParser {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "    private static final String DUKE_DATETIME_INPUT_FORMAT \u003d \"d/M/yyyy HHmm\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "    private static final String DUKE_DATETIME_OUTPUT_FORMAT \u003d \"MMMM uuuu, ha\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "    private enum DukeCommandEnum {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "        TODO, DEADLINE, EVENT, LIST, DONE, DELETE, BYE"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "     * Gets the starting index of the parameter of the supplied flag in the input String array."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "     * @param inputTokens Array of String to check for if the flag exists."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "     * @param flag Exact String to look for."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "     * @return Starting index of the flag\u0027s parameter, -1 if flag is not found in the array."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "    public static int getInputFlagParameterStartingIndex(String[] inputTokens, String flag) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "        for (int counter \u003d 0; counter \u003c inputTokens.length; counter++) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "            if (inputTokens[counter].equals(flag)) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "                return counter + 1;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "            }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "        return -1;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "     * Concatenates the input String[] from the specified starting index, with a space delimiter between each token"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "     * with the exception of the last token. Returns the concatenated String."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "     * @param inputTokens Input String array to concatenate from."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "     * @param startIndex Starting index (inclusive) to start concatenating from."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "     * @param endIndex Ending index (inclusive) to end concatenating at."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "     * @return A concatenated String starting from the startIndex to the endIndex, with a single-space delimiter except"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "     * after the last token."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "    public static String concatStringTokens(String[] inputTokens, int startIndex, int endIndex) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "        while (startIndex \u003c endIndex) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "            sb.append(inputTokens[startIndex++] + \" \");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "        sb.append(inputTokens[startIndex]);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "     * Takes a input String date-time in the format {@link #DUKE_DATETIME_INPUT_FORMAT} and attempts to create a"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "     * LocalDateTime object. Then, depending on the day of the month, there will be a suffix at the end. For example,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "     * 1st, 2nd, 3rd, 4th, etc. This LocalDateTime object is then formatted to the format"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "     * {@link #DUKE_DATETIME_OUTPUT_FORMAT}"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "     * @param input Date-time String in the format \"d/MM/uuuu HHmm\". E.g. \"2/12/2019 1800\"."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "     * @return Date-time String in the format: \"ddth of MM uuuu, ha\". E.g. \"2nd of December 2019, 6PM\"."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "     * @throws DateTimeParseException If the input String does not match the required format."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "    public static String formatDate(String input) throws DateTimeParseException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "        DateTimeFormatter dateTimeFormat \u003d DateTimeFormatter.ofPattern(DUKE_DATETIME_INPUT_FORMAT);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "        LocalDateTime inputDateTime \u003d LocalDateTime.parse(input, dateTimeFormat);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "        Map\u003cLong, String\u003e ordinalNumbers \u003d new HashMap\u003c\u003e(31);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "        ordinalNumbers.put(1L, \"1st\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "        ordinalNumbers.put(2L, \"2nd\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "        ordinalNumbers.put(3L, \"3rd\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "        ordinalNumbers.put(21L, \"21st\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "        ordinalNumbers.put(22L, \"22nd\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "        ordinalNumbers.put(23L, \"23rd\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "        ordinalNumbers.put(31L, \"31st\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "        for (long d \u003d 1; d \u003c\u003d 31; d++) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "            ordinalNumbers.putIfAbsent(d, \"\" + d + \"th\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "        DateTimeFormatter dayOfMonthFormatter \u003d new DateTimeFormatterBuilder()"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "                .appendText(ChronoField.DAY_OF_MONTH, ordinalNumbers)"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "                .appendLiteral(\" of \")"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "                .appendPattern(DUKE_DATETIME_OUTPUT_FORMAT)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "                .toFormatter();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "        return inputDateTime.format(dayOfMonthFormatter);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "     * Checks the user input to determine the course of action depending on the command. If the command is to \"TODO/"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "     * DEADLINE/EVENT\", a {@link DukeCommandAdd} class will be instantiated and returned. If the command is to \"DONE/"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "     * DELETE\", a {@link DukeCommandUpdate} class will be instantiated and returned. If the command is to \"LIST\", a"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "     * {@link DukeCommandList} class will be instantiated and returned. If the command is to \"BYE\", a"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "     * {@link DukeCommandExit} class will be instantiated and returned. An Optional.empty() will be returned if the"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "     * user input cannot be parsed."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "     * @param input Raw user input String obtained from {@link DukeUi#readCommand()}."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "     * @param ui Instance of {@link DukeUi} which will show output to the user."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "     * @return Optional\u003cDukeCommand\u003e which is empty if the user input cannot be parsed, or a {@link DukeCommand}"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "     * sub-class which has a {@link DukeCommand#execute(DukeTaskList, DukeUi, DukeStorage)} method."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "    public static Optional\u003cDukeCommand\u003e parseCommand(String input, DukeUi ui) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "        String[] inputTokens \u003d input.split(\" \");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "            DukeCommandEnum inputCommand \u003d DukeCommandEnum.valueOf(inputTokens[0].toUpperCase());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "            switch (inputCommand) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "                case BYE:"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "                    return Optional.of(new DukeCommandExit());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "                case TODO:"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "                case DEADLINE:"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "                case EVENT:"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "                    return Optional.of(new DukeCommandAdd(inputTokens));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "                case LIST:"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "                    return Optional.of(new DukeCommandList());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "                case DONE:"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "                case DELETE:"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "                    return Optional.of(new DukeCommandUpdate(inputTokens));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "            }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "        } catch (IllegalArgumentException ex) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "            ui.displayUnknownCommand();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "        return Optional.empty();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jia Hao": 131
    }
  },
  {
    "path": "src/main/java/duke/util/DukeStorage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "package duke.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "import duke.task.DukeTask;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "import duke.task.DukeTaskDeadline;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "import duke.task.DukeTaskEvent;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "import duke.task.DukeTaskToDo;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "import java.io.BufferedWriter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "import java.io.FileReader;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "public class DukeStorage {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "    private BufferedReader taskFileInputBuffer;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "    private BufferedWriter taskFileOutputBuffer;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "    private File taskFilePath;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "     * This constructor takes in the path of the data file stored on the hard disk."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "     * @param taskFilePath Relative/Full path to the data file."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "    public DukeStorage (String taskFilePath) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "        this.taskFilePath \u003d new File(taskFilePath);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "     * Initializes the BufferedWriter object to prepare for writing to the specified file in {@link #taskFilePath}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "     * @throws IOException If there are any errors like insufficient permissions, file not found or other file errors."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "    private void initializeFileOutputStream() throws IOException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "        taskFileOutputBuffer \u003d new BufferedWriter(new FileWriter(taskFilePath, false));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "     * Initializes the BufferedReader object to prepare for reading from the specified file in {@link #taskFilePath}. If"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "     * the data file does not exist, create it along with the necessary folders."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "     * @throws IOException"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "    private void initializeFileInputStream() throws IOException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "        if (!taskFilePath.exists()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "            taskFilePath.getParentFile().mkdirs();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "        taskFileInputBuffer \u003d new BufferedReader(new FileReader(taskFilePath));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "     * Writes a specified List\u003cduke.task.DukeTask\u003e into the specified file in {@link #taskFilePath}. Each task will be written"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "     * on a new line."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "     * @param userTasks List\u003cduke.task.DukeTask\u003e to save tasks from, to the file."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "     * @throws IOException File parsing error."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "    private void writeDukeTasks(List\u003cDukeTask\u003e userTasks) throws IOException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "        for (DukeTask task : userTasks) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "            taskFileOutputBuffer.write(processWriteTask(task));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "            taskFileOutputBuffer.newLine();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "     * Reads the specified file in {@link #taskFilePath} and initializes a List\u003cduke.task.DukeTask\u003e object to be returned."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "     * @param ui Instance of {@link DukeUi} which will show output to the user."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "     * @return An initialized List of duke.task.DukeTask objects, can be an empty List if there are no tasks in the read file."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "     * @throws IOException File parsing error."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "    private List\u003cDukeTask\u003e readDukeTasks(DukeUi ui) throws IOException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "        List\u003cDukeTask\u003e userTasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "        String line;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "        while ((line \u003d taskFileInputBuffer.readLine()) !\u003d null) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "            Optional\u003cDukeTask\u003e readTask \u003d processReadTask(line);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "            if (!readTask.isEmpty()) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "                userTasks.add(readTask.get());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "                ui.displayUnknownTask();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "            }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "        return userTasks;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "     * Takes in a duke.task.DukeTask object and determines how the final String to write to the file should be formatted."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "     * @param task {@link DukeTask} object to save to file as a String."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "     * @return Formatted String to be written to the file."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "    private String processWriteTask(DukeTask task) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "        int taskComplete \u003d task.getTaskIsComplete() ? 1 : 0;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "        String taskConstraint \u003d \"\";"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "        String writtenString \u003d \"\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "        if (task instanceof DukeTaskDeadline) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "            taskConstraint \u003d ((DukeTaskDeadline) task).getTaskDeadline();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "        } else if (task instanceof  DukeTaskEvent) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "            taskConstraint \u003d ((DukeTaskEvent) task).getTaskLocation();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "        writtenString \u003d task.getTaskType() + \" | \" + taskComplete + \" | \" + task.getTaskName();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "        if (taskConstraint.length() \u003e 0) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "            writtenString +\u003d \" | \" + taskConstraint;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "        return writtenString;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "     * Takes in a line read from the data file and determines what duke.task.DukeTask should be re-constructed."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "     * @param line A single line from the data file."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "     * @return Optional\u003cduke.task.DukeTask\u003e which could be Optional.empty() if the String has an unexpected formatting."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "    private Optional\u003cDukeTask\u003e processReadTask(String line) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "        DukeTask task;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "        String[] lineTokens \u003d line.split(\" \\\\| \");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "        String taskType \u003d lineTokens[0];"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "        boolean isComplete \u003d lineTokens[1].equals(\"1\") ? true : false;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "        String taskName \u003d lineTokens[2];"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "        if (taskType.equals(\"T\")) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "            task \u003d new DukeTaskToDo(taskName, isComplete);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "        } else if (taskType.equals(\"D\")) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "            task \u003d new DukeTaskDeadline(taskName, isComplete, lineTokens[3]);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "        } else if (taskType.equals(\"E\")) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "            task \u003d new DukeTaskEvent(taskName, isComplete, lineTokens[3]);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "        return Optional.of(task);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "     * Loads the data file and reads it, initializing a List\u003cduke.task.DukeTask\u003e to be returned to the caller. This List will be"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "     * populated with duke.task.DukeTask from the data file."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "     * @param ui Instance of {@link DukeUi} which will show output to the user."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "     * @return Optional\u003cduke.task.DukeTask\u003e which could be Optional.empty() if there are file parsing errors."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "     * @throws IOException File parsing error."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "    public List\u003cDukeTask\u003e load(DukeUi ui) throws IOException {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "        initializeFileInputStream();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "        List\u003cDukeTask\u003e retrievedTasks \u003d readDukeTasks(ui);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "        taskFileInputBuffer.close();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "        return retrievedTasks;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "     * Saves the List\u003cduke.task.DukeTask\u003e into the data file. Saving process is opening the target data file for writing without"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "     * append option, meaning the file will be reset each time."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "     * @param userTasks List\u003cduke.task.DukeTask\u003e to be written to the data file in String format."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "     * @throws IOException File parsing error."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "    public void save(List\u003cDukeTask\u003e userTasks) throws IOException {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "        initializeFileOutputStream();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "        writeDukeTasks(userTasks);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "        taskFileOutputBuffer.close();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jia Hao": 159
    }
  },
  {
    "path": "src/main/java/duke/util/DukeTaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "package duke.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "import duke.task.DukeTask;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "public class DukeTaskList {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "    private final int DUKE_MAXIMUM_TASKS \u003d 100;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "    private List\u003cDukeTask\u003e userDukeTasks;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "    private StringBuilder sb;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "     * This constructor is used if a new List\u003cduke.task.DukeTask\u003e of initial capacity of {@link #DUKE_MAXIMUM_TASKS} is"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "     * to be instantiated."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "    public DukeTaskList() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "        this.userDukeTasks \u003d new ArrayList\u003c\u003e(DUKE_MAXIMUM_TASKS);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "        this.sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "     * This constructor is used if an existing List\u003cduke.task.DukeTask\u003e is to be used."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "     * @param userDukeTasks An existing and initialized List\u003cduke.task.DukeTask\u003e to be used."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "    public DukeTaskList(List\u003cDukeTask\u003e userDukeTasks) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "        this.userDukeTasks \u003d userDukeTasks;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "        this.sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "     * Creates a new duke.task.DukeTask and adds it into the current list of user duke.task.DukeTask. The specified input is also mirrored"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "     * to the user. The list of user duke.task.DukeTask is then saved to the hard disk via"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "     * {@link DukeStorage#save(List\u003cDukeTask\u003e)}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "     * @param inputTask User specified input that will be the name of the duke.task.DukeTask to be added to the current list of"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "     *              duke.task.DukeTask."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "     * @param ui duke.util.DukeUi object for displaying output to the user."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "     * @param storage duke.util.DukeStorage object for updating the data file on the hard disk."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "    public void addToDukeTasks(DukeTask inputTask, DukeUi ui, DukeStorage storage) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "            userDukeTasks.add(inputTask);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "            sb.setLength(0);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "            sb.append(\"Got it. I\u0027ve added this task:\\n\\t   \");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "            sb.append(inputTask.toString());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "            sb.append(\"\\n\\t Now you have \" + userDukeTasks.size() + \" tasks in the list.\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "            ui.displayToUser(sb.toString());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "            storage.save(userDukeTasks);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "        } catch (IOException ex) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "            ui.displayFileLoadingError();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "     * Displays the user-supplied list of tasks in a formatted style. This method will prepare the list by looping"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "     * through the List of tasks and printing each task with its index. Then it will call"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "     * {@link DukeUi#displayToUser(String)} to display the final formatted list."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "     * @param ui duke.util.DukeUi object for displaying output to the user."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "    public void displayDukeTasks(DukeUi ui) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "        sb.setLength(0);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "        sb.append(\"Here are the tasks in your list:\\n\\t \");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "        for (int index \u003d 0; index \u003c userDukeTasks.size(); index++) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "            sb.append((index + 1) + \".\" + userDukeTasks.get(index).toString());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "            if (index !\u003d (userDukeTasks.size() - 1)) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "                sb.append(\"\\n\\t \");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "            }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "        ui.displayToUser(sb.toString());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "     * Checks if the specified task index has already been marked as complete. If it is not then mark the task as"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "     * complete and print out the name of this task."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "     * @param taskIndexString Raw String index of the task following the printed list from running the \"list\" command."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "     * @param ui duke.util.DukeUi object for displaying output to the user."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "     * @param storage duke.util.DukeStorage object for updating the data file on the hard disk."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "    public void markDukeTaskComplete(String taskIndexString, DukeUi ui, DukeStorage storage) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "            int taskIndex \u003d Integer.parseInt(taskIndexString);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "            if (taskIndex \u003c 1 || taskIndex \u003e\u003d userDukeTasks.size()) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "                ui.displayTaskIndexOutOfBounds();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "                DukeTask completedTask \u003d userDukeTasks.get(taskIndex - 1);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "                sb.setLength(0);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "                if (completedTask.getTaskIsComplete()) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "                    sb.append(\"This task has already been marked as done!\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "                    completedTask.setTaskComplete();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "                    sb.append(\"Nice! I\u0027ve marked this task as done:\\n\\t   \" + completedTask.toString());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "                }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "                ui.displayToUser(sb.toString());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "                storage.save(userDukeTasks);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "            }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "        } catch (IOException ex) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "            ui.displayFileLoadingError();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "        } catch (NumberFormatException ex) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "            ui.displayTaskInvalidIndex();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "     * Deletes the specified task index."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "     * @param taskIndexString Raw String index of the task to be deleted, following the printed list index from"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "     *                        the \"list\" command."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "     * @param ui duke.util.DukeUi object for displaying output to the user."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "     * @param storage duke.util.DukeStorage object for updating the data file on the hard disk."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "    public void deleteDukeTask(String taskIndexString, DukeUi ui, DukeStorage storage) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "            int taskIndex \u003d Integer.parseInt(taskIndexString);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "            if (taskIndex \u003c 1 || taskIndex \u003e userDukeTasks.size()) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "                ui.displayTaskIndexOutOfBounds();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "                DukeTask deletedTask \u003d userDukeTasks.get(taskIndex - 1);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "                userDukeTasks.remove(taskIndex - 1);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "                sb.setLength(0);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "                sb.append(\"Noted. I\u0027ve removed this task:\\n\\t   \");"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "                sb.append(deletedTask.toString());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "                sb.append(\"\\n\\t Now you have \" + userDukeTasks.size() + \" tasks in the list.\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "                ui.displayToUser(sb.toString());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "                storage.save(userDukeTasks);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "            }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "        } catch (IOException ex) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "            ui.displayFileLoadingError();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "        } catch (NumberFormatException ex) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "            ui.displayTaskInvalidIndex();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jia Hao": 134
    }
  },
  {
    "path": "src/main/java/duke/util/DukeUi.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "package duke.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "public class DukeUi {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "    private final String DUKE_ASCII_LOGO \u003d \" ____        _        \\n\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "            + \"|  _ \\\\ _   _| | _____ \\n\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "            + \"| | | | | | | |/ / _ \\\\\\n\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "            + \"| |_| | |_| |   \u003c  __/\\n\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "            + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "    private final String SEPARATOR \u003d \"____________________________________________________________\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "    private final String DUKE_WELCOME_MESSAGE \u003d \"Hello! I\u0027m Duke\\n\\t What can I do for you?\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "    private final String DUKE_EXIT_MESSAGE \u003d \"Bye. Hope to see you again soon!\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "    /*\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "    || Error Messages ||"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "    \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d*/"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "    private final String DUKE_ERR_EMPTY_DESCRIPTION_MESSAGE \u003d \"☹ OOPS!!! The description of a task cannot be empty.\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "    private final String DUKE_ERR_FILE_IO_EXCEPTION \u003d \"☹ OOPS!!! Failed to open file! Is the path correct?\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "    private final String DUKE_ERR_INDEX_OUT_OF_BOUNDS \u003d \"☹ OOPS!!! Please enter a valid task index value.\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "    private final String DUKE_ERR_INVALID_DATE_FORMAT \u003d \"☹ OOPS!!! Please input the deadline in the following \" +"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "            \"format: \\\"dd/mm/yyyy hhmm\\\".\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "    private final String DUKE_ERR_INVALID_INDEX \u003d \"☹ OOPS!!! Please only enter numeric values for the task index.\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "    private final String DUKE_ERR_MISSING_DEADLINE_PARAM \u003d \"☹ OOPS!!! The deadline for the task must be specified with \\\"/by\\\".\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "    private final String DUKE_ERR_MISSING_EVENT_PARAM \u003d \"\\\"☹ OOPS!!! The event parameter must be specified with \\\\\\\"/at\\\\\\\".\\\"\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "    private final String DUKE_ERR_MISSING_INDEX \u003d \"☹ OOPS!!! The index of the completed task is missing.\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "    private final String DUKE_ERR_UNKNOWN_COMMAND_MESSAGE \u003d \"☹ OOPS!!! I\u0027m sorry, but I don\u0027t know what that means \" +"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "            \":-(\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "    private final String DUKE_ERR_UNKNOWN_TASK \u003d \"An error occurred when trying to re-create a task from the saved file!\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "    private StringBuilder sb;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "    private Scanner scanner;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "    public DukeUi() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "        sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "        scanner \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "     * Takes an input String and wrap it with \"______\" separator before returning the new updated String."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "     * @param input String to wrap the separators around."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "     * @return String that is wrapped around the separators."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "    private String encapsulateOutputWithSeparator(String input) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "        sb.setLength(0);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "        sb.append(\"\\t\" + SEPARATOR + \"\\n\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "        sb.append(\"\\t \" + input + \"\\n\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "        sb.append(\"\\t\" + SEPARATOR + \"\\n\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "     * Displays the Duke ASCII logo and the welcome message to the user through {@link #displayToUser(String)}."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "    public void displayWelcomeMessage() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "        System.out.println(DUKE_ASCII_LOGO);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "        displayToUser(DUKE_WELCOME_MESSAGE);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "     * Displays the goodbye message to the user through {@link #displayToUser(String)}."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "    public void displayTerminateMessage() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "        displayToUser(DUKE_EXIT_MESSAGE);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "     * Prints supplied input wrapped with \"______\" separator."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "     * The input is first formatted through {@link #encapsulateOutputWithSeparator(String)}."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "     * @param input String to be displayed to the user."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "    public void displayToUser(String input) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "        System.out.println(encapsulateOutputWithSeparator(input));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "     * Prints the error message for when the task description is missing from a new task."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "    public void displayEmptyDescriptionError() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "        System.out.println(encapsulateOutputWithSeparator(DUKE_ERR_EMPTY_DESCRIPTION_MESSAGE));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "     * Prints the error message for when the data file failed to load."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "    public void displayFileLoadingError() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "        System.out.println(encapsulateOutputWithSeparator(DUKE_ERR_FILE_IO_EXCEPTION));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "     * Prints the error message for when the user entered a date-time format that is different from the syntax."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "    public void displayInvalidDateFormat() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "        System.out.println(encapsulateOutputWithSeparator(DUKE_ERR_INVALID_DATE_FORMAT));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "     * Prints the error message for when the deadline parameter is missing from a new deadline."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "    public void displayMissingDeadlineParam() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "        System.out.println(encapsulateOutputWithSeparator(DUKE_ERR_MISSING_DEADLINE_PARAM));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "     * Prints the error message for when the event parameter is missing from a new event."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "    public void displayMissingEventParam() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "        System.out.println(encapsulateOutputWithSeparator(DUKE_ERR_MISSING_EVENT_PARAM));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "     * Prints the error message for when the index parameter is missing from deleting a task or marking a task as done."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "    public void displayMissingIndex() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "        System.out.println(encapsulateOutputWithSeparator(DUKE_ERR_MISSING_INDEX));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "     * Prints the error message for when the index parameter specified for deleting a task or marking a task as done is"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "     * out of bounds."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "    public void displayTaskIndexOutOfBounds() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "        System.out.println(encapsulateOutputWithSeparator(DUKE_ERR_INDEX_OUT_OF_BOUNDS));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "     * Prints the error message for when the index parameter specified for deleting a task or marking a task as done is"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "     * non-numerical."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "    public void displayTaskInvalidIndex() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "        System.out.println(encapsulateOutputWithSeparator(DUKE_ERR_INVALID_INDEX));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "     * Prints the error message for when an unknown user-input is entered."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "    public void displayUnknownCommand() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "        System.out.println(encapsulateOutputWithSeparator(DUKE_ERR_UNKNOWN_COMMAND_MESSAGE));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "     * Prints the error for when data read from the data file cannot be understood, thus a Task cannot be restored."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "     * This is usually because the data file is corrupted or in an incorrect format."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "    public void displayUnknownTask() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "        System.out.println(encapsulateOutputWithSeparator(DUKE_ERR_UNKNOWN_TASK));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "    public String readCommand() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "        return scanner.nextLine();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jia Hao": 153
    }
  },
  {
    "path": "src/test/java/DukeTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "public class DukeTest {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "    public void testFileLoad() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "        assertDoesNotThrow(() -\u003e new Duke(\"Invalid Path\"));"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jia Hao": 11
    }
  },
  {
    "path": "src/test/java/command/DukeCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "import duke.command.DukeCommandAdd;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "import duke.command.DukeCommandUpdate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "import duke.util.DukeStorage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "import duke.util.DukeTaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "import duke.util.DukeUi;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "import org.junit.contrib.java.lang.system.SystemOutRule;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "import org.junit.jupiter.api.BeforeAll;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "public class DukeCommandTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "    private static final String DUKE_TASK_FILE_PATH \u003d \".\\\\data\\\\duke.txt\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "    private static DukeTaskList tasks;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "    private static DukeUi ui;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "    private static DukeStorage storage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "    public final SystemOutRule systemOutRule \u003d new SystemOutRule().enableLog();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "    @BeforeAll"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "    public static void beforeAll() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "        tasks \u003d new DukeTaskList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "        ui \u003d new DukeUi();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "        storage \u003d new DukeStorage(DUKE_TASK_FILE_PATH);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "    public void testAddTodo() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "        //Test adding valid DukeTaskTodo"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "        String[] validTodoTestTokens \u003d {\"todo\", \"Test\", \"adding\", \"todo\", \"task.\"};"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "        assertDoesNotThrow(() -\u003e new DukeCommandAdd(validTodoTestTokens).execute(tasks, ui, storage));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "        //Test adding invalid DukeTask with missing arguments."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "        systemOutRule.clearLog();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "        String[] invalidTodoTestTokens \u003d {\"todo\"};"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "        new DukeCommandAdd(invalidTodoTestTokens).execute(tasks, ui, storage);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "        String output \u003d systemOutRule.getLogWithNormalizedLineSeparator();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "        systemOutRule.clearLog();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "        ui.displayEmptyDescriptionError();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "        String errorMessage \u003d systemOutRule.getLogWithNormalizedLineSeparator();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "        assertEquals(output, errorMessage);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "    public void testAddDeadline() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "        //Test adding valid DukeTaskDeadline."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "        String[] validDeadlineTestTokens \u003d {\"deadline\", \"Test\", \"adding\", \"deadline\", \"/by\", \"18/10/2019\", \"1930\"};"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "        assertDoesNotThrow(() -\u003e new DukeCommandAdd(validDeadlineTestTokens).execute(tasks, ui, storage));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "        //Test adding invalid DukeTaskDeadline with missing parameter /by."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "        systemOutRule.clearLog();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "        String[] invalidDeadlineTestTokensMissingParam1 \u003d {\"deadline\", \"Test\", \"adding\", \"deadline\"};"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "        new DukeCommandAdd(invalidDeadlineTestTokensMissingParam1).execute(tasks, ui, storage);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "        String output \u003d systemOutRule.getLogWithNormalizedLineSeparator();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "        systemOutRule.clearLog();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "        ui.displayMissingDeadlineParam();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "        String errorMessage \u003d systemOutRule.getLogWithNormalizedLineSeparator();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "        assertEquals(output, errorMessage);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "        //Test adding invalid DukeTaskDeadline with /by but without parameter after"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "        systemOutRule.clearLog();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "        String[] invalidDeadlineTestTokensMissingParam2 \u003d {\"deadline\", \"Test\", \"adding\", \"deadline\", \"/by\"};"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "        new DukeCommandAdd(invalidDeadlineTestTokensMissingParam2).execute(tasks, ui, storage);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "        output \u003d systemOutRule.getLogWithNormalizedLineSeparator();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "        assertEquals(output, errorMessage);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "        //Test adding invalid DukeTaskDeadline with invalid dateformat."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "        String[] invalidDeadlineTestTokensInvalidDateFormat \u003d {\"deadline\", \"Test\", \"adding\", \"deadline\", \"/by\", \"abc\"};"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "        assertDoesNotThrow(() -\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "                new DukeCommandAdd(invalidDeadlineTestTokensInvalidDateFormat).execute(tasks, ui, storage));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "    public void testAddEvent() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "        //Test adding valid DukeTaskEvent"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "        String[] validEventTestTokens \u003d {\"event\", \"Test\", \"adding\", \"event\", \"/at\", \"i3\", \"Auditorium\"};"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "        assertDoesNotThrow(() -\u003e new DukeCommandAdd(validEventTestTokens).execute(tasks, ui, storage));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "        //Test adding invalid DukeTaskEvent with missing parameter /at"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "        systemOutRule.clearLog();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "        String[] invalidEventTestTokensMissingParam1 \u003d {\"event\", \"Test\", \"adding\", \"event\"};"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "        new DukeCommandAdd(invalidEventTestTokensMissingParam1).execute(tasks, ui, storage);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "        String output \u003d systemOutRule.getLogWithNormalizedLineSeparator();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "        systemOutRule.clearLog();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "        ui.displayMissingEventParam();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "        String errorMessage \u003d systemOutRule.getLogWithNormalizedLineSeparator();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "        assertEquals(output, errorMessage);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "        //Test adding invalid DukeTasktEvent with /at but missing parameter after"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "        systemOutRule.clearLog();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "        String[] invalidEventTestTokensMissingParam2 \u003d {\"event\", \"Test\", \"adding\", \"event\", \"/at\"};"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "        new DukeCommandAdd(invalidEventTestTokensMissingParam2).execute(tasks, ui, storage);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "        output \u003d systemOutRule.getLogWithNormalizedLineSeparator();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "        assertEquals(output, errorMessage);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "    public void testDoneDelete() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "        //Test marking invalid task index"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "        String[] invalidDoneIndex \u003d {\"done\", \"a\"};"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "        assertDoesNotThrow(() -\u003e new DukeCommandUpdate(invalidDoneIndex).execute(tasks, ui, storage));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "        //Test deleting invalid task index"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "        String[] invalidDeleteIndex \u003d {\"delete\", \"a\"};"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "        assertDoesNotThrow(() -\u003e new DukeCommandUpdate(invalidDeleteIndex).execute(tasks, ui, storage));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "        //Test missing input index parameter for done command"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "        systemOutRule.clearLog();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "        String[] invalidDoneIndexMissingParam \u003d {\"done\"};"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "        new DukeCommandUpdate(invalidDoneIndexMissingParam).execute(tasks, ui, storage);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "        String output \u003d systemOutRule.getLogWithNormalizedLineSeparator();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "        systemOutRule.clearLog();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "        ui.displayMissingIndex();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "        String errorMessage \u003d systemOutRule.getLogWithNormalizedLineSeparator();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "        assertEquals(output, errorMessage);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "        //Test missing input index parameter for delete command"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "        systemOutRule.clearLog();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "        String[] invalidDeleteIndexMissingParam \u003d {\"delete\"};"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "        new DukeCommandUpdate(invalidDeleteIndexMissingParam).execute(tasks, ui, storage);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "        output \u003d systemOutRule.getLogWithNormalizedLineSeparator();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "        assertEquals(output, errorMessage);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jia Hao": 134
    }
  },
  {
    "path": "src/test/java/task/DukeTaskTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "package task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "import duke.task.DukeTaskDeadline;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "import duke.task.DukeTaskEvent;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "import duke.task.DukeTaskToDo;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "public class DukeTaskTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "    private final String DUKE_TASK_TODO_INCOMPLETE \u003d \"[T][\\u2718] Conduct Testing on DukeTaskTodo\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "    private final String DUKE_TASK_TODO_COMPLETE \u003d \"[T][\\u2713] Conduct Testing on DukeTaskTodo\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "    private final String DUKE_TASK_DEADLINE_INCOMPLETE \u003d \"[D][\\u2718] Conduct Testing on DukeTaskDeadline (by: 10/2/2019 2100)\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "    private final String DUKE_TASK_DEADLINE_COMPLETE \u003d \"[D][\\u2713] Conduct Testing on DukeTaskDeadline (by: 10/2/2019 2100)\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "    private final String DUKE_TASK_EVENT_INCOMPLETE \u003d \"[E][\\u2718] Conduct Testing on DukeTaskEvent (at: i3 Auditorium)\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "    private final String DUKE_TASK_EVENT_COMPLETE \u003d \"[E][\\u2713] Conduct Testing on DukeTaskEvent (at: i3 Auditorium)\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "    public void testTodo() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "        DukeTaskToDo todo \u003d new DukeTaskToDo(\"Conduct Testing on DukeTaskTodo\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "        assertEquals(todo.toString(), DUKE_TASK_TODO_INCOMPLETE);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "        todo.setTaskComplete();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "        assertEquals(todo.toString(), DUKE_TASK_TODO_COMPLETE);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "    public void testDeadline() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "        DukeTaskDeadline deadline \u003d new DukeTaskDeadline(\"Conduct Testing on DukeTaskDeadline\", \"10/2/2019 2100\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "        assertEquals(deadline.toString(), DUKE_TASK_DEADLINE_INCOMPLETE);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "        deadline.setTaskComplete();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "        assertEquals(deadline.toString(), DUKE_TASK_DEADLINE_COMPLETE);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "    public void testEvent() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "        DukeTaskEvent event \u003d new DukeTaskEvent(\"Conduct Testing on DukeTaskEvent\", \"i3 Auditorium\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "        assertEquals(event.toString(), DUKE_TASK_EVENT_INCOMPLETE);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "        event.setTaskComplete();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "        assertEquals(event.toString(), DUKE_TASK_EVENT_COMPLETE);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jia Hao": 45
    }
  },
  {
    "path": "src/test/java/util/DukeUtilTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "package util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "import duke.util.DukeParser;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "import duke.util.DukeUi;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "import org.junit.jupiter.api.BeforeAll;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "public class DukeUtilTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "    private static DukeUi ui;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "    @BeforeAll"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "    public static void beforeAll() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "        ui \u003d new DukeUi();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "    public void testParser() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "        assertDoesNotThrow(() -\u003e DukeParser.parseCommand(\"This is an invalid input\", ui));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jia Hao": 23
    }
  },
  {
    "path": "text-ui-test/EXPECTED.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": " ____        _        "
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "|  _ \\ _   _| | _____ "
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "| | | | | | | |/ / _ \\"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "| |_| | |_| |   \u003c  __/"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "|____/ \\__,_|_|\\_\\___|"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "\t____________________________________________________________"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "\t Hello! I\u0027m Duke"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "\t What can I do for you?"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "\t____________________________________________________________"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "\t____________________________________________________________"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "\t Got it. I\u0027ve added this task:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "\t   [T][?] read book"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "\t Now you have 1 tasks in the list."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "\t____________________________________________________________"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "\t____________________________________________________________"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "\t Got it. I\u0027ve added this task:"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "\t   [T][?] return book"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "\t Now you have 2 tasks in the list."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "\t____________________________________________________________"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "\t____________________________________________________________"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "\t Here are the tasks in your list:"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "\t 1.[T][?] read book"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "\t 2.[T][?] return book"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "\t____________________________________________________________"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "\t____________________________________________________________"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "\t Bye. Hope to see you again soon!"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "\t____________________________________________________________"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Jia Hao": 33
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "todo read book"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "todo return book"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "list"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "Jia Hao": 4
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "if not exist ..\\bin mkdir ..\\bin"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "REM delete output from previous run"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "del ACTUAL.TXT"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "REM compile the code into the bin folder"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "javac  -cp ..\\src -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "    exit /b 1"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": ")"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "java -classpath ..\\bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jia Hao"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT"
      }
    ],
    "authorContributionMap": {
      "Jia Hao": 21
    }
  }
]
