[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    id \u0027org.openjfx.javafxplugin\u0027 version \u00270.0.7\u0027"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "group \u0027seedu.duke\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "javafx {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    version \u003d \"11.0.2\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    modules \u003d [ \u0027javafx.controls\u0027, \u0027javafx.fxml\u0027 ]"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "}"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "}"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    archiveVersion \u003d \"0.1.3\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    // Change this to your main class."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    mainClassName \u003d \"Main\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "test {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "arjavibahety": 30,
      "-": 15
    }
  },
  {
    "path": "data/duke.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "T, 1, hello world"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "D, 1, dance, Mon Dec 02 23:59:00 SGT 2019"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "E, 1, welcome tea, Thu Aug 29 19:00:00 SGT 2019"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "D, 0, cs2103t, Tue Apr 02 23:59:00 SGT 2019"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "D, 0, splashdow happening, Mon Dec 02 23:59:00 SGT 2019"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "E, 1, splasdowwnnnn, Fri Mar 02 12:34:00 SGT 2018"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "D, 1, hdhwriwu, Mon Dec 23 23:59:00 SGT 2019"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "D, 1, fsgjdfs, Mon Dec 23 23:59:00 SGT 2019"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "D, 0, hhksd, Thu Dec 12 23:56:00 SGT 2019"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "D, 1, djaaas, Sun Dec 22 23:59:00 SGT 2019"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "D, 1, hahdkas, Mon Dec 23 23:59:00 SGT 2019"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "E, 1, jshfksjdh, Sun Dec 22 23:59:00 SGT 2019"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "T, 1, meap"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "D, 1, jada, Tue Feb 12 23:56:00 SGT 2019"
      }
    ],
    "authorContributionMap": {
      "arjavibahety": 14
    }
  },
  {
    "path": "src/main/java/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "public class Command {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    private String commandType;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    private String instruction;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    private String date;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "     * Represents the command given by the user to the chatbot."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "     * @param commandType refers to the command type"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "     * @param instruction refers to the instructions for the particular commmand type"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "     * @param date represents the time by which the task should be complete"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    public Command(String commandType, String instruction, String date) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        this.commandType \u003d commandType;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        this.instruction \u003d instruction;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "     * Returns the type of the command."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "     * @return String commandType"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    public String getCommandType() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        return commandType;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "     * Returns instruction of the task."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "     * @return String instruction"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    public String getInstruction() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        return instruction;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "     * Returns the data by which the task must be completed."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "     * @return String date"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    public String getDate() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        return date;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "arjavibahety": 41
    }
  },
  {
    "path": "src/main/java/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    protected Date by;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "     * Represents the Deadline tasks in the task list."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "     * @param description refers to the task details"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "     * @param by refers to the date by which the task should be done"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    public Deadline(String description, Date by) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        this.by \u003d by;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "     * Returns the date of the Deadline task."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "     * @return Date by"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    public Date getBy() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        return by;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "     * Returns the stringified form of the task."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "     * @return String task"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        return \"[D]\" + super.toString() + \" (by: \" + by + \")\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "arjavibahety": 33
    }
  },
  {
    "path": "src/main/java/DialogBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": " * An example of a custom control using FXML."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": " * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": " * containing text from the speaker."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    private DialogBox(String text, Image img) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        displayPicture.setImage(img);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        Collections.reverse(tmp);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    public static DialogBox getUserDialog(String text, Image img) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        return new DialogBox(text, img);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    public static DialogBox getDukeDialog(String text, Image img) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        var db \u003d new DialogBox(text, img);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "}"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "arjavibahety": 60
    }
  },
  {
    "path": "src/main/java/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    private UI ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    private int tracker;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "     * Represents the Main code for the Duke chatbot."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "     * Will load a list of tasks from the .txt file and modify it"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "     * as the user keys in new tasks and manipulates existing ones"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "     * @throws IOException thrown if unable to load file"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    public Duke() throws IOException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        String filePath \u003d \"data/duke.txt\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        ui \u003d new UI();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        storage \u003d new Storage(filePath);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "            if (storage.load() !\u003d null) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "                tasks \u003d new TaskList(storage.load());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "                tracker \u003d tasks.getListSize();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "                throw new DukeException(\"Unable to load data from file\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "            }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        } catch (DukeException exp) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "            ui.showErrorMsg(exp.getMessage());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "     * Get response from Duke."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    public String getResponse(String echo) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        Command cmd \u003d (new Parser()).parse(echo);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "            if (echo.equals(\"bye\")) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "                return ui.showGoodbye();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "            } else if (echo.equals(\"list\")) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "                return ui.showTasksInList(tasks);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "            } else if (cmd.getCommandType().equals(\"find\")) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "                return ui.showFoundItems(cmd.getInstruction(), tasks);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "            } else if (cmd.getCommandType().equals(\"done\")) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "                    if (cmd.getInstruction().equals(\"\")) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "                        throw new DukeException(\"☹ OOPS!!! Please specify which task is done\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "                    } else if (Integer.parseInt(cmd.getInstruction()) \u003e tasks.getListSize()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "                        throw new DukeException(\"☹ OOPS!!! Task \" + cmd.getInstruction() + \" does not exist\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "                        tasks.markAsDone(Integer.parseInt(cmd.getInstruction()) - 1);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "                        try {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "                            storage.update(tasks.getList());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "                            return ui.showTaskIsDoneMsg(tasks.getItemAtIndex(Integer.parseInt(cmd.getInstruction()) - 1));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "                        } catch (Exception exp) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "                            return ui.showErrorMsg(exp.getMessage());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "                } catch (DukeException exp) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "                    return ui.showErrorMsg(exp.getMessage());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "                }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "            } else if (cmd.getCommandType().equals(\"delete\")) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "                    if (cmd.getInstruction().equals(\"\")) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "                        throw new DukeException(\"☹ OOPS!!! Please specify which task is to be deleted\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "                    } else if (Integer.parseInt(cmd.getInstruction()) \u003e tasks.getListSize()) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "                        throw new DukeException(\"☹ OOPS!!! Task \" + cmd.getInstruction() + \" does not exist\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "                        Task tsk \u003d tasks.removeFromList(Integer.parseInt(cmd.getInstruction()) - 1);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "                        try {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "                            storage.update(tasks.getList());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "                            return ui.showTaskDeletedMsg(tsk, tasks.getListSize());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "                        } catch (Exception exp) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "                            return ui.showErrorMsg(exp.getMessage());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "                } catch (DukeException exp) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "                    return ui.showErrorMsg(exp.getMessage());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "                }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "            } else if (cmd.getCommandType().equals(\"deadline\") || cmd.getCommandType().equals(\"todo\")"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "                    || cmd.getCommandType().equals(\"event\")) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "                if (cmd.getCommandType().equals(\"deadline\")) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "                    try {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "                        if (cmd.getInstruction().equals(\"\") || cmd.getInstruction().equals(\"deadline\")) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "                            throw new DukeException(\"☹ OOPS!!! The description of deadline cannot be empty\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "                        } else if (!echo.contains(\"/by\")) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "                            throw new DukeException(\"☹ OOPS!!! The deadline must be completed \""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "                                    + \"by a certain date\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "                        } else {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "                            try {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "                                SimpleDateFormat formatter \u003d new SimpleDateFormat(\"dd/MM/yyyy HHmm\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "                                tasks.addItemToList(new Deadline(cmd.getInstruction(),"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "                                        formatter.parse(cmd.getDate())));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "                            } catch (java.text.ParseException exp) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "                                return exp.getMessage();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "                            }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "                            try {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "                                storage.append(tasks.getLastItem());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "                            } catch (Exception exp) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "                                return ui.showErrorMsg(exp.getMessage());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "                            }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "                    } catch (DukeException exp) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "                        return ui.showErrorMsg(exp.getMessage());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "                } else if (cmd.getCommandType().equals(\"todo\")) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "                    try {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "                        if (cmd.getInstruction().equals(\"\") || cmd.getInstruction().equals(\"todo\")) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "                            throw new DukeException(\"☹ OOPS!!! The description of todo cannot be empty\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "                        } else {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "                            tasks.addItemToList(new Todo(cmd.getInstruction()));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "                            try {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "                                storage.append(tasks.getLastItem());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "                            } catch (Exception exp) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "                                return ui.showErrorMsg(exp.getMessage());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "                            }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "                    } catch (DukeException exp) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "                        return ui.showErrorMsg(exp.getMessage());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "                } else if (cmd.getCommandType().equals(\"event\") || cmd.getInstruction().equals(\"event\")) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "                    try {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "                        if (cmd.getInstruction().equals(\"\")) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "                            throw new DukeException(\"☹ OOPS!!! The description of event cannot be empty\");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "                        } else if (!echo.contains(\"/at\")) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "                            throw new DukeException(\"☹ OOPS!!! The event must be at by a certain date\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "                        } else {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "                            try {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "                                SimpleDateFormat formatter \u003d new SimpleDateFormat(\"dd/MM/yyyy HHmm\");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "                                tasks.addItemToList(new Event(cmd.getInstruction(),"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "                                        formatter.parse(cmd.getDate())));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "                            } catch (java.text.ParseException exp) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "                                return exp.getMessage();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "                            }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "                            try {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "                                storage.append(tasks.getLastItem());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "                            } catch (Exception exp) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "                                return ui.showErrorMsg(exp.getMessage());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "                            }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "                    } catch (DukeException exp) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "                        return ui.showErrorMsg(exp.getMessage());"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "                }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "                if (tasks.getListSize() \u003e tracker) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "                    tracker \u003d tasks.getListSize();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "                    return ui.showTaskAddedMsg(tasks.getLastItem(), tasks.getListSize());"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "                }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "                throw new DukeException(\"☹ OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\");"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "            }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        } catch (DukeException exp) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "            return ui.showErrorMsg(exp.getMessage());"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        return \"☹ OOPS!!! That did not go according to plan\";"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "arjavibahety": 160,
      "-": 3
    }
  },
  {
    "path": "src/main/java/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "     * Represents the errors which can be thrown in the chatbot."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "     * @param message refers to the error message to be displayed to the user"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "     */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    public DukeException(String message) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "arjavibahety": 11
    }
  },
  {
    "path": "src/main/java/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    protected Date at;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "     * Represents the upcoming event the user wants to add to his tasklist."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "     * @param description refers to the details of the event"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "     * @param at refers to the date when the event is happening"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    public Event(String description, Date at) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        this.at \u003d at;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "     * Returns the event date."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "     * @return Date at"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    public Date getAt() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        return at;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "     * Returns the stringified form the Event task."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "     * @return String event"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        return \"[E]\" + super.toString() + \" (at: \" + at + \")\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "arjavibahety": 32
    }
  },
  {
    "path": "src/main/java/Launcher.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": " * A launcher class to workaround classpath issues."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        Application.launch(Main.class, args);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "arjavibahety": 11
    }
  },
  {
    "path": "src/main/java/Main.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": " * A GUI for Duke using FXML."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "public class Main extends Application {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    private Duke duke \u003d new Duke();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    public Main() throws IOException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "            AnchorPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "            Scene scene \u003d new Scene(ap);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "arjavibahety": 32
    }
  },
  {
    "path": "src/main/java/MainWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": " * Controller for MainWindow. Provides the layout for the other controls."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "public class MainWindow extends AnchorPane {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    private Duke duke;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    public void setDuke(Duke d) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        duke \u003d d;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "     * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        String response \u003d duke.getResponse(input);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "                DialogBox.getUserDialog(input, userImage),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "                DialogBox.getDukeDialog(response, dukeImage)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        );"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "arjavibahety": 49
    }
  },
  {
    "path": "src/main/java/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "     * Returns the command given by the user."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "     * Accepts the string command given and create a new Comment object"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "     * depending on the command type."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "     * @param command refers to the input by the user"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "     * @return a new Command object"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    public Command parse(String command) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        String commandType \u003d command.split(\" \")[0];"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        String instruction \u003d \"\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        String date \u003d \"\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        if (commandType.equals(\"todo\") || commandType.equals(\"delete\") || commandType.equals(\"done\")"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "                || commandType.equals(\"find\")) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "            instruction \u003d command.substring(command.indexOf(\" \") + 1);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        } else if (commandType.equals(\"deadline\") || commandType.equals(\"event\")) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "            if (command.contains(\"/\")) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "                instruction \u003d command.substring(command.indexOf(\" \") + 1, command.indexOf(\"/\") - 1);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "                date \u003d command.substring(command.indexOf(\"/\") + 4);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "            }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        return new Command(commandType, instruction, date);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "arjavibahety": 27
    }
  },
  {
    "path": "src/main/java/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "import java.io.BufferedWriter;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    protected String filePath;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "     * Manages file management."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "     * Will load, update, and append the associated .txt file."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "     * @param filePath refers to the path of the .txt file"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    public Storage(String filePath) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "     * Loads tasks from the .txt file into the program."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "     * @return ArrayList of Task specified in the .txt file"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "     * @throws IOException when unable to resolve date"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    public ArrayList\u003cTask\u003e load() throws IOException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        File file \u003d new File(filePath);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        ArrayList\u003cTask\u003e list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        Scanner sc \u003d new Scanner(file);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        while (sc.hasNextLine()) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "            String[] task \u003d sc.nextLine().replaceAll(\", \", \",\").split(\",\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "            if (task[0].equals(\"T\")) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "                Task tsk \u003d new Todo(task[2]);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "                if (task[1].equals(\"1\")) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "                    tsk.markAsDone();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "                }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "                list.add(tsk);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "            } else if (task[0].equals(\"D\")) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "                    SimpleDateFormat formatter \u003d new SimpleDateFormat(\"EEEEE MMMMM dd HH:mm:ss z yyyy\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "                    Task tsk \u003d new Deadline(task[2], formatter.parse(task[3]));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "                    if (task[1].equals(\"1\")) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "                        tsk.markAsDone();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "                    list.add(tsk);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "                } catch (java.text.ParseException exp) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "                    exp.printStackTrace();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "                }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "                    SimpleDateFormat formatter \u003d new SimpleDateFormat(\"EEEEE MMMMM dd HH:mm:ss z yyyy\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "                    Task tsk \u003d new Event(task[2], formatter.parse(task[3]));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "                    if (task[1].equals(\"1\")) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "                        tsk.markAsDone();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "                    list.add(tsk);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "                } catch (java.text.ParseException exp) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "                    exp.printStackTrace();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "                }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "            }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        sc.close();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        return list;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "     * Appends new task specified by the user into the file."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "     * @param tsk refers to the tasklist"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "     * @throws IOException when unable to read file"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    public void append(Task tsk) throws IOException {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        FileWriter fileWriter \u003d new FileWriter(filePath, true);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        String status \u003d tsk.getIsDone() ? \"1\" : \"0\";"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "            if (tsk instanceof Todo) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "                fileWriter.write(\"T, \" + status + \", \" + tsk.getDescription() + \"\\n\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "            } else if (tsk instanceof Deadline) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "                fileWriter.write(\"D, \" + status + \", \" + tsk.getDescription() + \", \" + ((Deadline) tsk).getBy() + \"\\n\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "            } else if (tsk instanceof Event) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "                fileWriter.write(\"E, \" + status + \", \" + tsk.getDescription() + \", \" + ((Event) tsk).getAt() + \"\\n\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "                throw new DukeException(\"☹ OOPS! Error in file handling\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "            }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        } catch (DukeException exp) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "            System.out.println(exp.getMessage());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        fileWriter.close();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "     * Updates the tasks in the file."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "     * @param list refers to the tasklist"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "     * @throws IOException when unable to read file"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    public void update(ArrayList\u003cTask\u003e list) throws IOException {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        BufferedWriter bufferedWriter \u003d new BufferedWriter(new FileWriter(filePath));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        int counter \u003d 0;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        while (counter \u003c list.size()) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "            Task tsk \u003d list.get(counter);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "            String status \u003d tsk.getIsDone() ? \"1\" : \"0\";"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "                if (tsk instanceof Todo) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "                    bufferedWriter.write(\"T, \" + status + \", \" + tsk.getDescription());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "                    bufferedWriter.newLine();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "                    counter++;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "                } else if (tsk instanceof Deadline) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "                    bufferedWriter.write(\"D, \" + status + \", \" + tsk.getDescription() + \", \""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "                            + ((Deadline) tsk).getBy());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "                    bufferedWriter.newLine();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "                    counter++;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "                } else if (tsk instanceof Event) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "                    bufferedWriter.write(\"E, \" + status + \", \" + tsk.getDescription() + \", \""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "                            + ((Event) tsk).getAt());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "                    bufferedWriter.newLine();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "                    counter++;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "                    throw new DukeException(\"☹ OOPS! Error in file handling\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "                }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "            } catch (DukeException exp) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "                System.out.println(exp);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "            }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        bufferedWriter.close();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "arjavibahety": 131
    }
  },
  {
    "path": "src/main/java/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "     * Represents the task managed by the chatbot."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "     * @param description refers to the details of the task given by the user."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "     */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "     * Returns the details of the task."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "     * @return String description"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "     * Returns whether a task is marked complete."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "     * @return boolean isDone"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    public boolean getIsDone() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        return isDone;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "     * Returns the status icon."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "     * If the task is complete, a tick is returned otherwise a cross is returned."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "     * @return String symbol"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        return (isDone ? \"\\u2713\" : \"\\u2718\"); //return tick or X symbols"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "     * Marks the task as done."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    public void markAsDone() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        isDone \u003d true;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "     * Stringified representation of the task."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "     * @return String task"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        return \"[\" + getStatusIcon() + \"] \" + description;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "arjavibahety": 53
    }
  },
  {
    "path": "src/main/java/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    protected ArrayList\u003cTask\u003e list;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "     * Represents the list of tasks which the chatbot user has."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "     * @param list refers to the list of tasks"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    public TaskList(ArrayList\u003cTask\u003e list) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        this.list \u003d list;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "     * Returns the number of items in the task list."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "     * @return int listSize"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    public int getListSize() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        return list.size();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "     * Returns the task at a particular place in the sequence."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "     * @param i refers to the index of the task which needs to be fetched."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "     * @return Task at the specified index"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    public Task getItemAtIndex(int i) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        return list.get(i);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "     * Returns the last item in the list of tasks."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "     * @return last task item"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    public Task getLastItem() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        return list.get(list.size() - 1);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "     * Returns the tasklist."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "     * @return Arraylist of Task"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    public ArrayList\u003cTask\u003e getList() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        return list;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "     * Adds a new task to the list of tasks."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "     * @param tsk refers to the new task which needs to be added."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    public void addItemToList(Task tsk) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        list.add(tsk);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "     * Marks the specified task as done."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "     * @param i refers to the index of the task in the list"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "     *          which needs to be marked as done"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    public void markAsDone(int i) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        list.get(i).markAsDone();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "     * Removed the specified task from the list."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "     * @param i refers to the index of the task which needs to"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "     *          be removed from the list"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "     * @return the task removed"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    public Task removeFromList(int i) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        return list.remove(i);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "arjavibahety": 73
    }
  },
  {
    "path": "src/main/java/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "public class Todo extends Task {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "     * Represents the Todo item specified by the user."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "     * @param description refers to details about the todo task"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "     */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    public Todo(String description) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "     * Stringified representation of the Todo task."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "     * @return String todo"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "arjavibahety": 19
    }
  },
  {
    "path": "src/main/java/UI.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "public class UI {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    protected String line \u003d \"    __________________________________\";"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    protected String logo \u003d \" ____        _        \\n\""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "            + \"|  _ \\\\ _   _| | _____ \\n\""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "            + \"| | | | | | | |/ / _ \\\\\\n\""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "            + \"| |_| | |_| |   \u003c  __/\\n\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "            + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "     * Displays horizontal line."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    public String showLine() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        return line;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "     * Displays greeting on start of the program."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    public String showGreeting() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        return \"    Yo! I\u0027m Duke\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "                + \"    What can I do for you?\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "     * Displays goodbye message on exit."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    public String showGoodbye() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "//        System.out.println(line);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        return \"    Bye. Hope to see you again soon!\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "//        System.out.println(line);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "     * Displays all the items in the tasklist."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "     * @param tasks refers to the tasklist"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    public String showTasksInList(TaskList tasks) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        String output \u003d \"    Here are the tasks in your list: \\n\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        for (int i \u003d 0; i \u003c tasks.getListSize(); i++) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "            output +\u003d \"    \" + (i + 1) + \". \" + tasks.getItemAtIndex(i) + \"\\n\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "     * Displays message on marking a task as done."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "     * @param task refers to the task marked as done"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    public String showTaskIsDoneMsg(Task task) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        return \"    Nice! I\u0027ve marked this task as done: \\n\" + \"     \" + task.toString();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "     * Displays message on deleting a task."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "     * @param task refers to the task deleted."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "     * @param taskListSize refers to the size of the tasklist after deletion."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    public String showTaskDeletedMsg(Task task, int taskListSize) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        return \"    Noted. I\u0027ve removed this task: \\n\""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "                + \"     \" + task.toString() + \"\\n\" + \"    Now you have \""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "                + taskListSize + \" tasks in the list.\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "     * Displays message on adding a task to the tasklist."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "     * @param task refers to the task added to the list."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "     * @param taskListSize refers to the size of the tasklist after the addition"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    public String showTaskAddedMsg(Task task, int taskListSize) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        return \"    Got it. I\u0027ve added this task:\\n\""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "                + \"     \" + task"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "                + \"    Now you have \" + taskListSize + \" in the list.\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "     * Displays message on encoutering an error."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "     * @param errMsg refers to the error message to be shown to the user."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    public String showErrorMsg(String errMsg) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        return \"    \" + errMsg;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "     * Displays tasks which contain the given keyword."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "     * @param toFind refers to the keyword to be found."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "     * @param tasks refers to the list of tasks."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    public String showFoundItems(String toFind, TaskList tasks) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        String output \u003d \"    Here are the matching tasks in your list: \\n\";"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        int counter \u003d 1;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        for (int i \u003d 0; i \u003c tasks.getListSize(); i++) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "            if (tasks.getItemAtIndex(i).getDescription().contains(toFind)) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "                output +\u003d \"    \" + counter + \". \" + tasks.getItemAtIndex(i) + \"\\n\";"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "                counter++;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "            }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "arjavibahety": 101
    }
  },
  {
    "path": "src/main/resources/view/DialogBox.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    \u003cpadding\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    \u003c/padding\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "arjavibahety": 16
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "            prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "            fx:controller\u003d\"MainWindow\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "            \u003ccontent\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "                \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "            \u003c/content\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "arjavibahety": 21
    }
  },
  {
    "path": "src/test/java/DeadlineTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "public class DeadlineTest {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    public void testDeadlineGetBy() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        Deadline dd \u003d new Deadline(\"splashdown poster\", new Date(1000000000));"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        assertEquals(new Date(1000000000), dd.getBy());"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "arjavibahety": 13
    }
  },
  {
    "path": "src/test/java/TaskTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "public class TaskTest {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    public void testTaskGetDescription() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        Task task \u003d new Task(\"complete hw\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        assertEquals(\"complete hw\", task.getDescription());"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "arjavibahety": 12
    }
  },
  {
    "path": "src/test/java/TodoTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "public class TodoTest {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    public void  testTodoGetIsDone() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        Todo td \u003d new Todo(\"assignments\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        assertEquals(false, td.getIsDone());"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "arjavibahety": 11
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "todo read book"
      }
    ],
    "authorContributionMap": {
      "arjavibahety": 1
    }
  },
  {
    "path": "text-ui-test/runtest.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "#!/usr/bin/env bash"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "# create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "if [ ! -d \"../bin\" ]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "then"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    mkdir ../bin"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "fi"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "# delete output from previous run"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "if [ -e \"./ACTUAL.TXT\" ]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "then"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    rm ACTUAL.TXT"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "fi"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "# compile the code into the bin folder, terminates if error occurred"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "if ! javac -cp ../src -Xlint:none -d ../bin ../src/main/java/*.java"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "then"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    echo \"********** BUILD FAILURE **********\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "fi"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "java -classpath ../bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "# compare the output to the expected output"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "diff ACTUAL.TXT EXPECTED.TXT"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "if [ $? -eq 0 ]"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "then"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    echo \"Test result: PASSED\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    exit 0"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "else"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    echo \"Test result: FAILED\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "fi"
      }
    ],
    "authorContributionMap": {
      "arjavibahety": 34
    }
  },
  {
    "path": "tutorials/gradleTutorial.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# Gradle Tutorial"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "Gradle is a _build automation tool_ used to automate build processes. There are many ways of integrating Gradle into a project. In this guide, we will be using the _Gradle wrapper_."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "* [Introduction](#introduction)"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "* [Adding Gradle Support to Your Project](#adding-gradle-support-to-your-project)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "* [Adding Plugins](#adding-plugins)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "  * [CheckStyle](#checkstyle)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "  * [Shadow](#shadow)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "* [Adding Dependencies](#adding-dependencies)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "  * [JUnit](#junit)"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "* [Further Reading](#further-reading)"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "## Introduction"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "As a developer, you write a _build file_ that describes the project. A build file mainly consists of _plugins_, _tasks_ and _properties_. "
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "* **Plugins** extend the functionality of Gradle. For example, the `java` plugin adds support for `Java` projects."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "* **Tasks** are reusable blocks of logic.  For example, the task `clean` simply deletes the project build directory. Tasks can be composed of other tasks or be dependent on another task. "
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "* **Properties** change the behavior of tasks. For instance, `mainClassName` of the `application` plugin is a compulsory property which tells Gradle which class is the entrypoint to your application."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "  As Gradle favors [_convention over configuration_](https://en.wikipedia.org/wiki/Convention_over_configuration), there is not much to you need to configure if you follow the recommended directory structure."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "## Adding Gradle Support to Your Project "
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "1. Pull the branch named `gradle`. Merge it to the `master` branch. This will add the Gradle wrapper to your project."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "   git checkout --track origin/gradle"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "   git checkout master"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "   git merge gradle"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "1. Open the `build.gradle` file in an editor. Update the following code block to point to the main class (i.e., the one containing the `main` method) of your application. The code below assumes your main class is `seedu.duke.Duke`"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "   ```groovy"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "   application {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "       mainClassName \u003d \"seedu.duke.Duke\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "   }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "1. To check if Gradle has been added to the project correctly, open a terminal window, navigate to the root directory of your project and run the command `gradlew run`. This should result in Gradle running the main method of your project."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ":bulb: Simply run the command `gradlew {taskName}` in the terminal and Gradle will run the task! Here are some example commands:"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "* `gradlew tasks` (or `gradlew tasks --all`): shows a list of tasks available"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "* `gradlew run`: runs the main class of your project"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ":bulb: Some plugins may add more helpful tasks so be sure to check their documentation!"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "#### Using Gradle from within Intellij"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "1. After adding support for Gradle, Intellij might automatically ask you (via a pop-up at the bottom right corner of the Window) whether to import the project as a Gradle project. In that case, go ahead and say yes."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "1. If the above didn\u0027t happen, import the Gradle project by `Help \u003e Find Action \u003e Import Gradle Project`."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "   ![Import Gradle](assets/ImportGradle.png)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "1. If the above didn\u0027t work either, close Intellij, delete the Intellij project files (i.e., `.idea` folder and `*.iml` files), and set up the project again, but instead of choosing `Create project from existing sources`, choose `Import project from external model` -\u003e `Gradle`."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "After this, IntelliJ IDEA will identify your project as a Gradle project and you will gain access to the `Gradle Toolbar`. Through the toolbar, you run Gradle tasks and view your project\u0027s dependencies."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "You can click on the Gradle icon in the Gradle toolbar and create a new run configuration for running Gradle tasks without needing to type a `gradlew` command."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "![Gradle icon](assets/GradleIcon.png)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "## Adding Plugins"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "Gradle plugins are reusable units of build logic. Most common build tasks are provided as core plugins by Gradle. Given below are instructions on how to use some useful plugins:"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "### CheckStyle"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "To add support for _Checkstyle_ (a tool to check if your code complies with a set of style rules), which comes as a core plugin, simply add the line `id \u0027checkstyle\u0027` into the `plugins` block."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "Your build file should look something like this now:"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "```groovy"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "// ..."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "Checkstyle expects configuration files for checkstyle to be in `./config/checkstyle/` by convention."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "A sample checkstyle rule configuration is provided in the branch."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "The plugin adds a few _tasks_ to your project. Run `gradlew checkstyleMain checkstyleTest` to verify that you have set up Checkstyle properly (the command will check your main code and test code against the style rules)."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "**Resources**:"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "* [Gradle documentation for CheckStyle plugin](https://docs.gradle.org/current/userguide/checkstyle_plugin.html)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "### Shadow"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "Shadow is a plugin that packages an application into an executable jar file. To use it, first add the following line to your Gradle build file:"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "```groovy"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    //..."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    //..."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "The plugin can be configured by setting some properties. Let\u0027s try to produce a jar file with the name in format of `{baseName}-{version}.jar`."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "Add the following block to your build file:"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "```groovy"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveVersion \u003d \"0.1.3\""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "Now you can run the command `gradlew shadowJar`.It publishes an executable jar to `./build/libs/`. You should be able to able to execute the created jar file by double-clicking it or using the command `java -jar {jarName}`?"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "**Resources**:"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "* [Gradle documentation for Shadow plugin](https://plugins.gradle.org/plugin/com.github.johnrengelman.shadow)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "* [Gradle documentation for JUnit](https://docs.gradle.org/current/userguide/java_testing.html#using_junit5)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "* [More about the Shadow plugin](https://imperceptiblethoughts.com/shadow/introduction/)"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "## Adding Dependencies"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "Gradle can automate the management of dependencies to third-party libraries. Given below are some examples."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "### JUnit"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "JUnit is a testing framework for Java. It allows developers to write tests and run them. To manage JUnit dependency via Gradle, add the following to your build file:"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "```groovy"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "Then, configure Gradle to use JUnit by adding the following block to your build file:"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "```groovy"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "By convention, java tests belong in `src/test/java` folder. Create a new `test/java` folder in under `src`."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "src"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "├─main"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "│  └─java"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "│     └─seedu/duke/Duke.java"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "└─test"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    └─java"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "        └─seedu/duke/TaskTest.java"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "If you have imported your Gradle project into IntelliJ IDEA, you will notice that IDEA is able to mark the test directory as the _Test root_ (colored in green by default) automatically."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "arjavibahety"
        },
        "content": "You can now write a test (e.g., `test/java/seedu/duke/TaskTest.java`) and run it with `gradlew test`."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "**Resources**:"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "* [Gradle documentation for JUnit](https://docs.gradle.org/current/userguide/java_testing.html#using_junit5)"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "## Further Reading"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "Now that you have a general idea of how to accomplish basic tasks with Gradle, here\u0027s a list of material you can read to further your understanding."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": " "
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "* [Official Gradle Documentation](https://docs.gradle.org/current/userguide/userguide.html)"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "----------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "**Authors:**"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "* Initial Version: Jeffry Lum"
      }
    ],
    "authorContributionMap": {
      "arjavibahety": 2,
      "-": 168
    }
  }
]
