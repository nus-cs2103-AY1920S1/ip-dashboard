[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    id \u0027org.openjfx.javafxplugin\u0027 version \u00270.0.7\u0027"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "javafx {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    version \u003d \"11.0.2\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    modules \u003d [ \u0027javafx.controls\u0027, \u0027javafx.fxml\u0027 ]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "}"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    archiveBaseName \u003d \u0027duke\u0027"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    archiveVersion \u003d \u00270.1.3\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "}"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "}"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "test {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "group \u0027duke\u0027"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    mainClassName \u003d \"duke.gui.Launcher\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonchan51": 29,
      "-": 13
    }
  },
  {
    "path": "src/main/java/duke/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import duke.parser.Parser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    private static final String DEFAULT_FILE_PATH \u003d \"tasks.txt\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * Returns output in response to input command."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * @param input User command."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * @return String representation of the output from the input command."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    public String getResponse(String input) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        ui.resetMessage();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "            Command c \u003d Parser.parse(input);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "            c.execute(tasks, ui, storage);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "            storage.save(tasks);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        } catch (DukeException ex) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "            ui.append(ex.getMessage());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        return ui.getMessage();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * Starts Duke using the default file path."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    public Duke() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        this(DEFAULT_FILE_PATH);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * Starts Duke."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * @param filePath File path of the tasks data."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    public Duke(String filePath) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        storage \u003d new Storage(filePath);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "            tasks \u003d storage.load();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "            ui.append(String.format(\"Loaded from %s\", storage.getFilePath()));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        } catch (DukeException ex) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "            ui.append(ex.getMessage());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "            tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * Returns data load message. Only used on initialization."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * @return Data load message."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    public String getStartUpMessage() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        return ui.getMessage();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * Returns greeting message."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * @return Greeting message."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    public String getGreeting() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        return ui.getGreeting();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "jonchan51": 72,
      "-": 1
    }
  },
  {
    "path": "src/main/java/duke/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    public DukeException(String message) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        super(String.format(\"☹ OOPS!!! %s\", message));"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonchan51": 7
    }
  },
  {
    "path": "src/main/java/duke/Main.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import duke.gui.MainWindow;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jonchan51"
        },
        "content": " * A GUI for Duke using FXML."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jonchan51"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "public class Main extends Application {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    private Duke duke \u003d new Duke();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "            AnchorPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "            Scene scene \u003d new Scene(ap);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().sendStartUpMessage();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonchan51": 33
    }
  },
  {
    "path": "src/main/java/duke/command/AddCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import duke.task.Todo;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    private String type;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    private static final String MESSAGE_ADD \u003d \"Got it. I\u0027ve added this task:\\n  %s\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "            + \"Now you have %d %s in the list.\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    private static final String ERROR_MISSING_DESCRIPTION \u003d \"The description cannot be empty.\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    private static final String ERROR_MISSING_DESCRIPTION_AND_TIME \u003d \"The description and time cannot be empty.\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    private static final String ERROR_MISSING_DEADLINE \u003d \"The deadline must be present. e.g. task /by Monday\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    private static final String ERROR_MISSING_EVENT_TIME \u003d \"The event time must be present. e.g. meeting /at Monday\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    private static final String ERROR_WRONG_DATE_FORMAT  \u003d \"The date time provided is in the wrong format. \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "            + \"Expected d/m/yyyy hh:mm.\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    private static final DateTimeFormatter DATE_TIME_FORMATTER \u003d DateTimeFormatter.ofPattern(\"d/M/uuuu HH:mm\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * Constructs an Add command."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * @param type Type of task to add."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * @param description Description of task to add."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    public AddCommand(String type, String description) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        this.type \u003d type;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * Executes Add command to add a task to the given TaskList."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * @param tasks Current TaskList."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * @param ui Current Ui."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * @param storage Current Storage."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * @throws DukeException If invalid input."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        Task task;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        switch (type) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        case \"event\": {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "            if (!description.matches(\".+\\\\s/at\\\\s.+$\")) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "                if (description.length() \u003d\u003d 0 || description.matches(\"^\\\\s?/at\\\\s?$\")) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "                    throw new DukeException(ERROR_MISSING_DESCRIPTION_AND_TIME);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "                }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "                if (description.matches(\"^\\\\s?/at.*\")) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "                    throw new DukeException(ERROR_MISSING_DESCRIPTION);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "                }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "                if (!description.contains(\"/at\") || description.matches(\".*/at\\\\s?\")) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "                    throw new DukeException(ERROR_MISSING_EVENT_TIME);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "                }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "            }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "            String[] desc \u003d description.split(\" /at \");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "            LocalDateTime time;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "                time \u003d LocalDateTime.parse(desc[1], DATE_TIME_FORMATTER);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "            } catch (DateTimeParseException ex) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "                throw new DukeException(ERROR_WRONG_DATE_FORMAT);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "            }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "            task \u003d new Event(desc[0], time);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        case \"deadline\": {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "            if (!description.matches(\".+\\\\s/by\\\\s.+$\")) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "                if (description.length() \u003d\u003d 0 || description.matches(\"^\\\\s?/by\\\\s?$\")) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "                    throw new DukeException(ERROR_MISSING_DESCRIPTION_AND_TIME);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "                }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "                if (description.matches(\"^\\\\s?/by.*\")) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "                    throw new DukeException(ERROR_MISSING_DESCRIPTION);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "                }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "                if (!description.contains(\"/by\") || description.matches(\".*/by\\\\s?\")) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "                    throw new DukeException(ERROR_MISSING_DEADLINE);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "                }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "            }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "            String[] desc \u003d description.split(\" /by \");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "            LocalDateTime time;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "                time \u003d LocalDateTime.parse(desc[1], DATE_TIME_FORMATTER);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "            } catch (DateTimeParseException ex) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "                throw new DukeException(ERROR_WRONG_DATE_FORMAT);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "            }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "            task \u003d new Deadline(desc[0], time);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "            task \u003d new Todo(description);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        tasks.add(task);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        ui.append(String.format(MESSAGE_ADD,  task.toString(), tasks.size(),"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "                tasks.size() !\u003d 1 ? \"tasks\" : \"task\"));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonchan51": 108
    }
  },
  {
    "path": "src/main/java/duke/command/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * Executes command."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * @param tasks Current TaskList."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * @param ui Current Ui."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * @param storage Current Storage."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * @throws DukeException If invalid input."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    public abstract void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * Returns true if it is an ExitCommand."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * @return true if ExitCommand."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonchan51": 27
    }
  },
  {
    "path": "src/main/java/duke/command/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    private int[] taskIds;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    private static final String MESSAGE_DELETE   \u003d \"Noted. I\u0027ve removed the following tasks:\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    private static final String MESSAGE_REMAINDER \u003d \"Now you have %d %s in the list.\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    private static final String ERROR_INVALID_TASK_ID \u003d \"The id of the task must be a number. e.g. done 1\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * Constructs a Delete command."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * @param taskIds Ids of tasks to delete."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    public DeleteCommand(int... taskIds) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        Arrays.sort(taskIds);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        this.taskIds \u003d taskIds;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * Executes Delete command to delete tasks from the given TaskList."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * @param tasks Current TaskList."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * @param ui Current Ui."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * @param storage Current Storage."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * @throws DukeException If invalid id."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        if (taskIds[0] \u003c 1 || taskIds[taskIds.length - 1] \u003e tasks.size()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "            throw new DukeException(ERROR_INVALID_TASK_ID);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        ui.append(MESSAGE_DELETE);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        for (int taskId : taskIds) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "            Task task \u003d tasks.get(taskId - 1);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "            ui.append(task.toString());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        for (int i \u003d taskIds.length - 1; i \u003e\u003d 0; i--) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "            tasks.remove(taskIds[i] - 1);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        ui.append(String.format(MESSAGE_REMAINDER, tasks.size(), tasks.size() !\u003d 1 ? \"tasks\" : \"task\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonchan51": 51
    }
  },
  {
    "path": "src/main/java/duke/command/DoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "public class DoneCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    private int[] taskIds;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    private static final String MESSAGE_DONE     \u003d \"Nice! I\u0027ve marked the following tasks as done:\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    private static final String ERROR_INVALID_TASK_ID \u003d \"The id of the task must be a number. e.g. done 1\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * Constructs a Done command."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * @param taskIds Ids of task to mark as done."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    public DoneCommand(int... taskIds) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        Arrays.sort(taskIds);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        this.taskIds \u003d taskIds;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * Executes Done command to mark tasks from the given TaskList as done."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * @param tasks Current TaskList."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * @param ui Current Ui."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * @param storage Current Storage."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * @throws DukeException If invalid id."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        if (taskIds[0] \u003c 1 || taskIds[taskIds.length - 1] \u003e tasks.size()) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "            throw new DukeException(ERROR_INVALID_TASK_ID);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        ui.append(MESSAGE_DONE);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        for (int taskId : taskIds) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "            Task task \u003d tasks.get(taskId - 1);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "            task.markAsDone();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "            ui.append(task.toString());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonchan51": 47
    }
  },
  {
    "path": "src/main/java/duke/command/ExitCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * Executes Exit command to close Duke."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * @param tasks Current TaskList."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * @param ui Current Ui."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * @param storage Current Storage."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * @throws DukeException Never."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        ui.append(ui.getBye());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonchan51": 25
    }
  },
  {
    "path": "src/main/java/duke/command/FindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    private String search;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    private static final String MESSAGE_LIST \u003d \"Here are the matching tasks in your list:\\n\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    private static final String MESSAGE_NO_TASKS \u003d \"You have no matching tasks in your list.\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * Constructs a Find command. Searches for the search param in all task descriptions."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * @param search String to search in tasks."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    public FindCommand(String search) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        this.search \u003d search;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * Executes Find command to filter the given TaskList for those that contain the search term."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * @param tasks Current TaskList."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * @param ui Current Ui."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * @param storage Current Storage."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * @throws DukeException Never."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        TaskList filteredTasks \u003d new TaskList();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        for (Task task : tasks) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "            if (task.getDescription().contains(search)) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "                filteredTasks.add(task);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "            }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        StringBuilder lines \u003d new StringBuilder();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        if (filteredTasks.isEmpty()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "            lines.append(MESSAGE_NO_TASKS);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "            ui.append(lines.toString());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        lines.append(MESSAGE_LIST);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        for (int i \u003d 0; i \u003c filteredTasks.size(); i++) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "            lines.append(String.format(\"%d. %s\\n\", i + 1, filteredTasks.get(i).toString()));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        ui.append(lines.toString());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonchan51": 52
    }
  },
  {
    "path": "src/main/java/duke/command/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    private static final String MESSAGE_LIST     \u003d \"Here are the tasks in your list:\\n\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    private static final String MESSAGE_NO_TASKS \u003d \"You have no tasks in your list yet!\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * Executes List command to list all tasks in given TaskList."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * @param tasks Current TaskList."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * @param ui Current Ui."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * @param storage Current Storage."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * @throws DukeException Never."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        StringBuilder lines \u003d new StringBuilder();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        if (tasks.isEmpty()) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "            lines.append(MESSAGE_NO_TASKS);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "            ui.append(lines.toString());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        lines.append(MESSAGE_LIST);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        for (int i \u003d 0; i \u003c tasks.size(); i++) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "            lines.append(String.format(\"%d. %s\\n\", i + 1, tasks.get(i).toString()));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        ui.append(lines.toString());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonchan51": 33
    }
  },
  {
    "path": "src/main/java/duke/gui/DialogBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "package duke.gui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jonchan51"
        },
        "content": " * An example of a custom control using FXML."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jonchan51"
        },
        "content": " * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jonchan51"
        },
        "content": " * containing text from the speaker."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jonchan51"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    private DialogBox(String text, Image img) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        displayPicture.setImage(img);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        Collections.reverse(tmp);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * Returns a DialogBox component for User."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * @param text Input text."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * @param img Picture to show."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * @return DialogBox comopnent for User."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    public static DialogBox getUserDialog(String text, Image img) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        return new DialogBox(text, img);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * Returns a flipped DialogBox component for Duke."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * @param text Text to output."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * @param img Picture to show."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * @return DialogBox component for Duke."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    public static DialogBox getDukeDialog(String text, Image img) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        var db \u003d new DialogBox(text, img);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonchan51": 73
    }
  },
  {
    "path": "src/main/java/duke/gui/Launcher.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "package duke.gui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import duke.Main;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jonchan51"
        },
        "content": " * Launcher class to workaround classpath issues."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jonchan51"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        Application.launch(Main.class, args);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonchan51": 13
    }
  },
  {
    "path": "src/main/java/duke/gui/MainWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "package duke.gui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import duke.Duke;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jonchan51"
        },
        "content": " * Controller for MainWindow. Provides the layout for the other controls."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jonchan51"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "public class MainWindow extends AnchorPane {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    private Duke duke;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    public void setDuke(Duke duke) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        this.duke \u003d duke;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * Creates two dialog boxes that contains the startup message from Duke."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    public void sendStartUpMessage() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "                DialogBox.getDukeDialog(duke.getStartUpMessage(), dukeImage),"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "                DialogBox.getDukeDialog(duke.getGreeting(), dukeImage)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        );"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        String response \u003d duke.getResponse(input);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "                DialogBox.getUserDialog(input, userImage),"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "                DialogBox.getDukeDialog(response, dukeImage)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        );"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonchan51": 64
    }
  },
  {
    "path": "src/main/java/duke/parser/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "package duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import duke.command.*;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    private static final String ERROR_INVALID_INPUT \u003d \"I\u0027m sorry, but I don\u0027t know what that means :-(\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    private static final String ERROR_MISSING_DESCRIPTION \u003d \"The description cannot be empty.\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    private static final String ERROR_MISSING_TASK_ID \u003d \"The id of the task must be provided.\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    private static final String ERROR_INVALID_TASK_ID \u003d \"The id of the task must be a number. e.g. done 1\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    private static final String ERROR_TOO_MANY_ARGUMENTS \u003d \"There are too many arguments for this command.\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * Returns a Command object depending on the command inputted by the User."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * @param fullCommand User input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * @return Command object depending on given input."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * @throws DukeException If invalid input."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    public static Command parse(String fullCommand) throws DukeException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        String[] line \u003d fullCommand.split(\" \", 2);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        switch (line[0]) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        case \"todo\":"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        case \"deadline\":"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        case \"event\":"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "            if (line.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "                throw new DukeException(ERROR_MISSING_DESCRIPTION);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "            }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "            return new AddCommand(line[0], line[1]);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        case \"list\":"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "            if (line.length !\u003d 1) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "                throw new DukeException(ERROR_TOO_MANY_ARGUMENTS);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "            }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        case \"find\":"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "            if (line.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "                throw new DukeException(ERROR_MISSING_DESCRIPTION);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "            }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "            return new FindCommand(line[1]);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        case \"done\":"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "            return new DoneCommand(getIds(line));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        case \"delete\":"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "            return new DeleteCommand(getIds(line));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        case \"bye\":"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "            if (line.length !\u003d 1) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "                throw new DukeException(ERROR_TOO_MANY_ARGUMENTS);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "            }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "            throw new DukeException(ERROR_INVALID_INPUT);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * Returns parsed number from input."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * @param input Entire line of input."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * @return Number in rest of input."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * @throws DukeException If rest of input is not a number."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    private static int[] getIds(String[] input) throws DukeException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        if (input.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "            throw new DukeException(ERROR_MISSING_TASK_ID);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        String[] ids \u003d input[1].split(\" \");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        int[] taskIds \u003d new int[ids.length];"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "            for (int i \u003d 0; i \u003c taskIds.length; i++) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "                taskIds[i] \u003d Integer.parseInt(ids[i]);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "            }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        } catch (NumberFormatException ex) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "            throw new DukeException(ERROR_INVALID_TASK_ID);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        return taskIds;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonchan51": 77
    }
  },
  {
    "path": "src/main/java/duke/storage/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "package duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import duke.task.Todo;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    private File file;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    private static final String ERROR_FAILED_TO_READ     \u003d \"Failed to read save data. Creating new task list.\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    private static final String ERROR_FAILED_SAVE        \u003d \"Failed to save file.\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    private static final DateTimeFormatter DATE_TIME_FORMATTER \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "            DateTimeFormatter.ofPattern(\"EEE, d MMM uuuu, hh.mma\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * Constructs a Storage object that contains the file at the given filePath."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * @param filePath Path of file to save tasks in."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    public Storage(String filePath) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        file \u003d new File(filePath);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * Returns a String representing the file\u0027s absolute path."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * @return String representing the file\u0027s absolute path."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    public String getFilePath() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        return file.getAbsolutePath();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * Returns a TaskList with all the tasks in the given file."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * @return TaskList with all the tasks in the given file."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * @throws DukeException If invalid input."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    public TaskList load() throws DukeException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        TaskList tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "            Scanner sc \u003d new Scanner(file);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "            while (sc.hasNext()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "                String[] input \u003d sc.nextLine().split(\" [|] \");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "                Task task;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "                switch (input[0]) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "                case \"T\":"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "                    task \u003d new Todo(input[2], input[1].equals(\"1\"));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "                case \"D\":"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "                    task \u003d new Deadline(input[2], LocalDateTime.parse(input[3], DATE_TIME_FORMATTER),"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "                            input[1].equals(\"1\"));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "                case \"E\":"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "                    task \u003d new Event(input[2], LocalDateTime.parse(input[3], DATE_TIME_FORMATTER),"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "                            input[1].equals(\"1\"));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "                default:"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "                    throw new DukeException(ERROR_FAILED_TO_READ);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "                }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "                tasks.add(task);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "            }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        } catch (FileNotFoundException | DukeException | ArrayIndexOutOfBoundsException"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "                | DateTimeParseException ex) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "            throw new DukeException(ERROR_FAILED_TO_READ);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        return tasks;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * Saves tasks onto disk."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * Tasks will be saved in the following format: T | 1 | read book."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * @throws DukeException If failed to save."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    public void save(TaskList tasks) throws DukeException {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "            FileWriter fw \u003d new FileWriter(file.getAbsolutePath());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "            for (Task task : tasks) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "                if (task instanceof Deadline) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "                    fw.append(String.format(\"D | %d | %s | %s\\n\","
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "                            task.isDone() ? 1 : 0,"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "                            task.getDescription(),"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "                            ((Deadline) task).getDeadline()));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "                } else if (task instanceof Event) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "                    fw.append(String.format(\"E | %d | %s | %s\\n\","
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "                            task.isDone() ? 1 : 0,"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "                            task.getDescription(),"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "                            ((Event) task).getTime()));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "                    fw.append(String.format(\"T | %d | %s\\n\","
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "                            task.isDone() ? 1 : 0,"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "                            task.getDescription()));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "                }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "            }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "            fw.close();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        } catch (IOException ex) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "            throw new DukeException(ERROR_FAILED_SAVE);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonchan51": 114
    }
  },
  {
    "path": "src/main/java/duke/task/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    protected LocalDateTime by;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    public Deadline(String description, LocalDateTime by) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        this(description, by, false);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * Constructs a Deadline object."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * @param description Description of deadline."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * @param by DateTime of deadline."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * @param isDone Whether a deadline is done."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    public Deadline(String description, LocalDateTime by, boolean isDone) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        super(description, isDone);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        this.by \u003d by;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * Returns deadline of task."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * @return Deadline of task."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    public String getDeadline() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        return DATE_TIME_FORMATTER.format(this.by);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * Returns a String representing the task, of format \"[D][✘] task (by: date time)\"."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * @return String representing the task."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        return String.format(\"[D]%s (by: %s)\", super.toString(), DATE_TIME_FORMATTER.format(this.by));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonchan51": 39
    }
  },
  {
    "path": "src/main/java/duke/task/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    LocalDateTime at;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    public Event(String description, LocalDateTime at) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        this(description, at, false);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * Constructs an Event task object."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * @param description Description of event."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * @param at DateTime of event."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * @param isDone Whether an event is done."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    public Event(String description, LocalDateTime at, boolean isDone) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        super(description, isDone);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        this.at \u003d at;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * Returns time of Event."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * @return Time of Event."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    public String getTime() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        return DATE_TIME_FORMATTER.format(this.at);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * Returns a String representing the task, of format \"[E][✘] task (at: date time)\"."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * @return String representing the task."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        return String.format(\"[E]%s (at: %s)\", super.toString(), DATE_TIME_FORMATTER.format(this.at));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonchan51": 39
    }
  },
  {
    "path": "src/main/java/duke/task/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "public abstract class Task {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    protected boolean isDone \u003d false;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    protected static final DateTimeFormatter DATE_TIME_FORMATTER \u003d"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "            DateTimeFormatter.ofPattern(\"EEE, d MMM uuuu, hh.mma\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    "
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        this(description, false);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * Constructs a Task object."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * @param description Description of task."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * @param isDone Whether a task is done."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    public Task(String description, boolean isDone) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        this.isDone \u003d isDone;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * Gets task status."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * @return Task status."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    public boolean isDone() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        return this.isDone;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * Returns task description."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * @return Task description."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        return this.description;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * Marks this task as done."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    public void markAsDone() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * Marks this task as not done."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    public void markAsNotDone() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * Returns the status of the task."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * @return Unicode character representing status of task."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        return this.isDone ? \"✓\" : \"✘\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * Returns a String representing the task, of format \"[✘] task\"."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * @return String representing the task."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        return String.format(\"[%s] %s\", getStatusIcon(), this.description);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonchan51": 71
    }
  },
  {
    "path": "src/main/java/duke/task/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "public class TaskList extends ArrayList\u003cTask\u003e {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonchan51": 6
    }
  },
  {
    "path": "src/main/java/duke/task/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "public class Todo extends Task {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    public Todo(String description) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        this(description, false);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * Constructs a To do object."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * @param description Description of to do."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * @param isDone Whether a to do is done."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    public Todo(String description, boolean isDone) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        super(description, isDone);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * Returns a String representing the task, of format \"[T][✘] task\"."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * @return String representing the task."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        return String.format(\"[T]%s\", super.toString());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonchan51": 25
    }
  },
  {
    "path": "src/main/java/duke/ui/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    StringBuilder outputMessage \u003d new StringBuilder();"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    private static final String MESSAGE_GREETING \u003d \"Hello! I\u0027m Duke\\nWhat can I do for you?\";"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    private static final String MESSAGE_BYE      \u003d \"Bye. Hope to see you again soon!\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * Returns outputMessage to print to GUI."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * @return outputMessage."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        return outputMessage.toString();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * Makes outputMessage empty."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    public void resetMessage() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        outputMessage.setLength(0);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * Adds text to outputMessage for printing."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * @param output Text to add to outputMessage."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    public void append(String output) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        outputMessage.append(output);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        outputMessage.append(\"\\n\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * Returns the greeting message."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * @return Greeting message."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    public String getGreeting() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        return MESSAGE_GREETING;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * Returns the farewell message."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * @return Farewell message."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    public String getBye() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        return MESSAGE_BYE;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonchan51": 48
    }
  },
  {
    "path": "src/main/resources/view/DialogBox.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    \u003cpadding\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    \u003c/padding\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "jonchan51": 16
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"duke.gui.MainWindow\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "            \u003ccontent\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "                \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "            \u003c/content\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "jonchan51": 19
    }
  },
  {
    "path": "src/test/java/duke/task/TodoTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "public class TodoTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    public void testStringConversion() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        assertEquals(\"[T][✘] run\", new Todo(\"run\").toString());"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    public void markAsDone_regularTask_success() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        Task task \u003d new Todo(\"run\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        task.markAsDone();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        assertEquals(\"[T][✓] run\", task.toString());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonchan51": 20
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "deadline return book /by Monday"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "event project /at Tuesday"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "done 2"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "randomcommand"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "event /at Tuesday"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "deadline /by"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "deadline return /by Monday"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "list"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "jonchan51": 9
    }
  },
  {
    "path": "text-ui-test/runtest.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "#!/usr/bin/env bash"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "# create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "if [ ! -d \"../bin\" ]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "then"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    mkdir ../bin"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "fi"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "# delete output from previous run"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "if [ -e \"./ACTUAL.TXT\" ]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "then"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    rm ACTUAL.TXT"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "fi"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "# delete save data"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "if [ -e \"./tasks.txt\" ]"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "then"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "  rm tasks.txt"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "fi"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "# compile the code into the bin folder, terminates if error occurred"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "if ! javac -cp ../src -Xlint:none -d ../bin ../src/main/java/*.java"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "then"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    echo \"********** BUILD FAILURE **********\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "fi"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "java -classpath ../bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "# compare the output to the expected output"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "diff ACTUAL.TXT EXPECTED.TXT"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "if [ $? -eq 0 ]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "then"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    echo \"Test result: PASSED\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    exit 0"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "else"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    echo \"Test result: FAILED\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "fi"
      }
    ],
    "authorContributionMap": {
      "jonchan51": 40
    }
  },
  {
    "path": "text-ui-test/tasks.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "D | 0 | return book | Monday"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "E | 1 | project | Tuesday"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "D | 0 | return | Monday"
      }
    ],
    "authorContributionMap": {
      "jonchan51": 3
    }
  }
]
