[
  {
    "path": "src/main/java/commands/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import logic.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import logic.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import logic.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import logic.DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DivineDX"
        },
        "content": " * Abstraction and Encapsulation of User Commands."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DivineDX"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public abstract void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "DivineDX": 13
    }
  },
  {
    "path": "src/main/java/commands/DeadlineCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import logic.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import logic.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import logic.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import logic.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import logic.Parser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import task.Deadlines;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import task.Task;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DivineDX"
        },
        "content": " * Encapsulates command to add a Deadline Obj to TaskList."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DivineDX"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "public class DeadlineCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    private String args;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public DeadlineCommand(String args) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        this.args \u003d args;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * Overridden Method to execute the DeadlineCommand."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * @param tasks   list of tasks"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * @param ui      User Interface"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * @param storage File Storage and Management"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * @throws DukeException If command arguments is invalid"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        String[] splitStr \u003d args.split(\"/by\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        if (splitStr.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            throw new DukeException(\"Invalid format. Please include \u0027/by\u0027 to state your deadline\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "                    + \"\\nE.g. deadline work /by 12/7/2019 2000\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        } else if (splitStr[0].trim().isEmpty()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            throw new DukeException(\"â˜¹ OOPS!!! The description of a todo cannot be empty\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        LocalDateTime deadline \u003d Parser.parseDateTime(splitStr[1].trim());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        Task task \u003d new Deadlines(false, splitStr[0].trim(), deadline);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        tasks.addTask(task);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        storage.updateFile(tasks);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "DivineDX": 47
    }
  },
  {
    "path": "src/main/java/commands/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import logic.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import logic.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import logic.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import logic.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DivineDX"
        },
        "content": " * Encapsulates command to delete a task from the Task List."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DivineDX"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    private String args;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public DeleteCommand(String args) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        this.args \u003d args;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * Overridden Method to execute the delete command."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * @param tasks   list of tasks"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * @param ui      User Interface"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * @param storage File Storage and Management"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * @throws DukeException If problems encountered with file update"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        tasks.deleteTask(args); //deletes task obj"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        storage.updateFile(tasks);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "DivineDX": 31
    }
  },
  {
    "path": "src/main/java/commands/DoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import logic.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import logic.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import logic.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import logic.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DivineDX"
        },
        "content": " * Encapsulates command to mark a task as done."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DivineDX"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "public class DoneCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    private String args;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public DoneCommand(String args) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        this.args \u003d args;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * Overridden Method to execute the DoneCommand."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * @param tasks   list of tasks"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * @param ui      User Interface"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * @param storage File Storage and Management"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * @throws DukeException If problem encountered with file update"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        tasks.markTask(args); //will mark task.task Obj as done"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        storage.updateFile(tasks);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "DivineDX": 31
    }
  },
  {
    "path": "src/main/java/commands/EventCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import logic.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import logic.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import logic.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import logic.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import logic.Parser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import task.Events;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import task.Task;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DivineDX"
        },
        "content": " * Encapsulates command to create an Event Task to be added to List of Tasks."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DivineDX"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "public class EventCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    private String args;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public EventCommand(String args) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        this.args \u003d args;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * Overridden Method to execute the EventCommand."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * @param tasks   list of tasks"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * @param ui      User Interface"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * @param storage File Storage and Management"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * @throws DukeException If command arguments is invalid"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        String[] splitStr \u003d args.split(\"/at\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        String[] dateString \u003d splitStr[1].trim().split(\" - \"); //e.g. 2/12/2019 1800 - 2/12/2019 1800"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        if (splitStr.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            throw new DukeException(\"Invalid format. Please include \u0027/at\u0027 to state your start and end dates. \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "                    + \"\\nE.g. event meeting /at 12/7/2019 2000 - 18/12/2019 1800\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        } else if (dateString.length !\u003d 2) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            throw new DukeException(\"Invalid Format. Please enter both the start and end dates\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "                    + \"\\nE.g. event meeting /at 12/7/2019 2000 - 18/12/2019 1800\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        } else if (splitStr[0].trim().isEmpty()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            throw new DukeException(\"â˜¹ OOPS!!! The description of an event cannot be empty\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        LocalDateTime start \u003d Parser.parseDateTime(dateString[0]);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        LocalDateTime end \u003d Parser.parseDateTime(dateString[1]);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        if (start.isAfter(end)) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            throw new DukeException(\"â˜¹ OOPS!!! Start DateTime cannnot be after End DateTime!\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        Task task \u003d new Events(false, splitStr[0].trim(), start, end);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        tasks.addTask(task);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        storage.updateFile(tasks);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "DivineDX": 57
    }
  },
  {
    "path": "src/main/java/commands/ExitCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import logic.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import logic.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import logic.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DivineDX"
        },
        "content": " * Encapsulates command to exit and terminate the program."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DivineDX"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * Overridden Method to exit the program."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * @param tasks   list of tasks"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * @param ui      User Interface"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * @param storage File Storage and Management"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        ui.bye();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        System.exit(0);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "DivineDX": 24
    }
  },
  {
    "path": "src/main/java/commands/FindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import logic.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import logic.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import logic.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import logic.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import task.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DivineDX"
        },
        "content": " * Encapsulates command to find and filter tasks by keyword."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DivineDX"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    private String args;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public FindCommand(String args) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        this.args \u003d args;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * Overridden Method to exit the program."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * @param tasks   list of tasks"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * @param ui      User Interface"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * @param storage File Storage and Management"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        List\u003cTask\u003e filteredTasks \u003d tasks.findTask(args);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        ui.printList(filteredTasks, true);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "DivineDX": 33
    }
  },
  {
    "path": "src/main/java/commands/GetListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import logic.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import logic.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import logic.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DivineDX"
        },
        "content": " * Encapsulates command to get and print an ordered list of tasks."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DivineDX"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "public class GetListCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * Overridden Method to execute the GetList command."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * @param tasks   list of tasks"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * @param ui      User Interface"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * @param storage File Storage and Management"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        ui.printList(tasks.getTaskList(), false);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "DivineDX": 23
    }
  },
  {
    "path": "src/main/java/commands/ToDoCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import logic.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import logic.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import logic.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import logic.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import task.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import task.ToDo;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DivineDX"
        },
        "content": " * Encapsulates command to create a ToDo object to be added to the list of tasks."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DivineDX"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "public class ToDoCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    private String args;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public ToDoCommand(String args) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        this.args \u003d args;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * Overridden Method to execute the ToDo command."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * @param tasks   list of tasks"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * @param ui      User Interface"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * @param storage File Storage and Management"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * @throws DukeException If command arguments is invalid"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        if (args.trim().isEmpty()) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            throw new DukeException(\"â˜¹ OOPS!!! The description of a todo cannot be empty\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        Task task \u003d new ToDo(false, args); //args is the description string"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        tasks.addTask(task);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        storage.updateFile(tasks);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "DivineDX": 38
    }
  },
  {
    "path": "src/main/java/commands/UnknownCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import logic.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import logic.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import logic.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import logic.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "public class UnknownCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * Overridden Method to throw an exception due to an unknown command."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * @param tasks   list of tasks"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * @param ui      User Interface"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * @param storage File Storage and Management"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * @throws DukeException By default due to unknown command"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        throw new DukeException(\"â˜¹ OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "DivineDX": 22
    }
  },
  {
    "path": "src/main/java/logic/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "package logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DivineDX"
        },
        "content": " * Driver Class for Program."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DivineDX"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    private Scanner sc \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    private String taskListPath;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * Constructor."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * @param filePath filePath of the taskList.txt file"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * @throws DukeException If encounter error in loading file"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public Duke(String filePath) throws DukeException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        taskListPath \u003d filePath;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        storage \u003d new Storage(taskListPath);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        tasks \u003d new TaskList(storage.load());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * Continuously scans for User Input, Creates Command Objects and execute accordingly."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    void start() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        ui.greet();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        while (sc.hasNextLine()) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            String input \u003d sc.nextLine();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "                Command command \u003d Parser.parseCommand(input);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "                command.execute(tasks, ui, storage);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            } catch (DukeException e) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "                Ui.printStr(e.getMessage());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public static void main(String[] args) throws DukeException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        Duke duke \u003d new Duke(\"./src/main/data/taskList.txt\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        duke.start();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "DivineDX": 49,
      "-": 3
    }
  },
  {
    "path": "src/main/java/logic/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "package logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DivineDX"
        },
        "content": " * Exception Object for Duke Program."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DivineDX"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public DukeException(String errorMsg) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        super(errorMsg);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "DivineDX": 10
    }
  },
  {
    "path": "src/main/java/logic/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "package logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import commands.*;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import java.time.DateTimeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DivineDX"
        },
        "content": " * Deals with making sense of user command."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DivineDX"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * Receives string format of a dateTime and parses it to an object."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * @param dateTimeStr String of dateTime. E.g. 2/12/2019 1800"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * @return LocalDateTime variable that is stored in Deadline/Event Obj"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * @throws DukeException If given dateTimeStr is of an incorrect format"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public static LocalDateTime parseDateTime(String dateTimeStr) throws DukeException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            String[] strSplit \u003d dateTimeStr.split(\" \");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            String[] date \u003d strSplit[0].split(\"/\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            String time \u003d strSplit[1];"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            int year \u003d Integer.parseInt(date[2]);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            int month \u003d Integer.parseInt(date[1]);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            int day \u003d Integer.parseInt(date[0]);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            int hours \u003d Integer.parseInt(time.substring(0, 2));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            int mins \u003d Integer.parseInt(time.substring(2));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            return LocalDateTime.of(year, month, day, hours, mins);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException | DateTimeException | NumberFormatException e) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            throw new DukeException(\"Invalid Date-Time format.\\n\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "                    + \"Please use DD/MM/YYYY HHMM E.g. [2/12/2019 1800]\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * Converts date object to string that is written on txt file."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * @param dateObj LocalDateTime Object"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * @return DateTime string E.g. 10/12/2019 0830"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public static String toFileDateTime(LocalDateTime dateObj) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        return dateObj.getDayOfMonth() + \"/\" + dateObj.getMonthValue()"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "                + \"/\" + dateObj.getYear() + \" \""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "                + String.format(\"%02d\", dateObj.getHour())"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "                + String.format(\"%02d\", dateObj.getMinute());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * Prints date-time in a legible format on the CLI."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * @param dateObj LocalDateTime Object"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * @return Date String e.g. 10 DECEMBER 2019 0830"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public static String printDate(LocalDateTime dateObj) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        return dateObj.getDayOfMonth() + \" \" + dateObj.getMonth()"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "                + \" \" + dateObj.getYear() + \" \" + String.format(\"%02d\", dateObj.getHour())"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "                + String.format(\"%02d\", dateObj.getMinute());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * Attempts to convert input string into an int."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     *"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * @param str      String to be parsed"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * @param taskList List of Tasks"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * @return Int of Task in the TaskList"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * @throws DukeException If task number doesnt exist"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public static int parseTaskInt(String str, List\u003cTask\u003e taskList) throws DukeException {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        int taskInt;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            taskInt \u003d Integer.parseInt(str);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            if (taskInt \u003e taskList.size() || taskInt \u003c\u003d 0) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "                throw new DukeException(\"That task number does not exist, please try again\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            throw new DukeException(\"Please state a valid task number\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        return taskInt;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * Massive switch statement to read user inputs."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     *"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * @param inputString Input read from scanner"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * @return Command Object to be executed"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * @throws DukeException If input is invalid"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public static Command parseCommand(String inputString) throws DukeException { //receives scanned string immediately"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        String[] strSplit \u003d inputString.split(\" \", 2); //get first word and remaining"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        String command \u003d strSplit[0];"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        switch (command) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        case \"bye\":"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        case \"list\":"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            return new GetListCommand();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        case \"done\":"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "                return new DoneCommand(strSplit[1]);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "                throw new DukeException(\"Please enter a task.task Number\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        case \"delete\":"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "                return new DeleteCommand(strSplit[1]);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "                throw new DukeException(\"Please enter a task.task Number\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        case \"todo\":"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "                return new ToDoCommand(strSplit[1]);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "                throw new DukeException(\"â˜¹ OOPS!!! The description of a todo cannot be empty\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        case \"deadline\":"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "                return new DeadlineCommand(strSplit[1]);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "                throw new DukeException(\"â˜¹ OOPS!!! The description of a deadline cannot be empty\");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        case \"event\":"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "                return new EventCommand(strSplit[1]);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "                throw new DukeException(\"â˜¹ OOPS!!! The description of an event cannot be empty\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        case \"find\":"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "                return new FindCommand(strSplit[1]);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "                throw new DukeException(\"â˜¹ OOPS!!! Please enter a keyword\");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            return new UnknownCommand();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "DivineDX": 146
    }
  },
  {
    "path": "src/main/java/logic/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "package logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import task.*;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DivineDX"
        },
        "content": " * Deals with loading tasks and saving tasks in file."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DivineDX"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    private String filePath;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public Storage(String filePath) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * Reads and scans text file, convert them to Task Objs to be added."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * @return List of Tasks loaded from text file"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * @throws DukeException If encounter file creation/parsing problems"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public List\u003cTask\u003e load() throws DukeException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        List\u003cTask\u003e taskList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            File f \u003d new File(filePath); //hardCoded file directory"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            Scanner sc \u003d new Scanner(f);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            while (sc.hasNext()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "                String line \u003d sc.nextLine();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "                String[] strArr \u003d line.split(Pattern.quote(\" | \"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "                Task task \u003d readAndCreateTask(strArr);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "                taskList.add(task);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            Ui.printStr(\"Data is loaded from data/taskList.txt\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            Ui.printStr(\"File not found, data not loaded!\\nCreating new file taskList.txt\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            File f \u003d new File(filePath);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "                f.createNewFile(); //creates new text file"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            } catch (IOException ioE) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "                Ui.printStr(ioE.getMessage());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        return taskList;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * Creates task from reading the string from text file. Called from load()."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     *"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * @param textArr String Array obtained after splitted"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * @return Task Object to be added to TaskList"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * @throws DukeException If unable to parse"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    private Task readAndCreateTask(String[] textArr) throws DukeException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        String type \u003d textArr[0];"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        Task task \u003d null;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        boolean isDone \u003d textArr[1].equals(\"1\"); //1 means done"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        switch (type) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        case \"T\": //todo"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            task \u003d new ToDo(isDone, textArr[2]);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        case \"D\": //deadline"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            LocalDateTime deadline \u003d Parser.parseDateTime(textArr[3]);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            task \u003d new Deadlines(isDone, textArr[2], deadline);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        case \"E\": //event"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            String[] startEndStr \u003d textArr[3].split(\" - \");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            LocalDateTime start \u003d Parser.parseDateTime(startEndStr[0]);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            LocalDateTime end \u003d Parser.parseDateTime(startEndStr[1]);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            task \u003d new Events(isDone, textArr[2], start, end);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        return task;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * Updates text file after command execution."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     *"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * @param taskList List of Tasks in logic.TaskList"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public void updateFile(TaskList taskList) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        List\u003cTask\u003e list \u003d taskList.getTaskList();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        for (int i \u003d 0; i \u003c list.size(); i++) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            Task t \u003d list.get(i);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            sb.append(t.toFileString());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            if (i !\u003d list.size() - 1) { //final item, dont add new line"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "                sb.append(\"\\n\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            FileWriter fw \u003d new FileWriter(filePath);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            fw.write(sb.toString());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            fw.close();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            Ui.printStr(\"Cannot write to file: \" + e.getMessage());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "DivineDX": 118
    }
  },
  {
    "path": "src/main/java/logic/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "package logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DivineDX"
        },
        "content": " * Contains the logic.TaskList and has the operations to add/delete tasks in the list."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DivineDX"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    private List\u003cTask\u003e taskList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public TaskList(List\u003cTask\u003e taskList) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        this.taskList \u003d taskList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public List\u003cTask\u003e getTaskList() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        return taskList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * Adds Tasks to Task List."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * @param task Task Obj to be added"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public void addTask(Task task) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        taskList.add(task);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        sb.append(\"Got it. I\u0027ve added this task:\\n\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        sb.append(\"  \" + task + \"\\n\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        sb.append(\"Now you have \" + taskList.size() + \" tasks in the list.\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        Ui.printStr(sb.toString());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * Task to be marked as done."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * @param taskNumStr String to be parsed as int"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * @throws DukeException If cannot parse string to int"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public void markTask(String taskNumStr) throws DukeException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        int taskNum \u003d Parser.parseTaskInt(taskNumStr, taskList);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        Task task \u003d taskList.get(taskNum - 1);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        task.markDone();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        sb.append(\"Nice! I\u0027ve marked this task as done:\\n\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        sb.append(\"  \" + task.toString());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        Ui.printStr(sb.toString());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * Task to be deleted from list of tasks."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * @param taskNumStr String to be parsed as int"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * @throws DukeException If cannot parse string to int"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public void deleteTask(String taskNumStr) throws DukeException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        int taskNum \u003d Parser.parseTaskInt(taskNumStr, taskList);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        Task t \u003d taskList.get(taskNum - 1);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        sb.append(\"Noted. I\u0027ve removed this task: \\n\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        sb.append(\"  \" + t + \"\\n\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        taskList.remove(taskNum - 1);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        sb.append(\"Now you have \" + taskList.size() + \" tasks in the list.\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        Ui.printStr(sb.toString());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * Find and filter tasks by keyword."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     *"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * @param taskDescription Keyword string to filter with"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * @return Filtered list of tasks"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public List\u003cTask\u003e findTask(String taskDescription) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        return taskList.stream()"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "                .filter(task -\u003e task.getDescription().contains(taskDescription))"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "DivineDX": 81
    }
  },
  {
    "path": "src/main/java/logic/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "package logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DivineDX"
        },
        "content": " * Deals with interactions with the user and output on CLI."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DivineDX"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * Wraps strings for style and formatting."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * @param input String parameter to be wrapped and printed"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public static String HORIZONTAL_LINE \u003d \"____________________________________________________________\\n\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * Wraps the parameter String with horizontal lines for aesthetic purposes."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * @param input String to be wrapped"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public static void printStr(String input) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        sb.append(HORIZONTAL_LINE);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        sb.append(input + \"\\n\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        sb.append(HORIZONTAL_LINE);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        System.out.println(sb.toString());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * Prints out greeting string at start of app."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public void greet() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        String logo \u003d \" ____        _        \\n\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "                + \"|  _ \\\\ _   _| | _____ \\n\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "                + \"| | | | | | | |/ / _ \\\\\\n\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "                + \"| |_| | |_| |   \u003c  __/\\n\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "                + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        sb.append(logo);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        sb.append(\"Hello! I\u0027m Duke\\n\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        sb.append(\"What can I do for you?\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        printStr(sb.toString());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * Prints out ordered list of tasks."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * @param taskList List of Tasks"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public void printList(List\u003cTask\u003e taskList, boolean isMatching) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        if (isMatching) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            sb.append(\"Here are the matching tasks in your list:\\n\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            sb.append(\"Here are the tasks in your list:\\n\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "      "
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        for (int i \u003d 0; i \u003c taskList.size(); i++) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            sb.append((i + 1) + \". \" + taskList.get(i).toString());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            if (i !\u003d taskList.size() - 1) { //last item"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "                sb.append(\"\\n\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "      "
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        printStr(sb.toString());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * Exit Message to be printed."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public void bye() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        printStr(\"Bye. Hope to see you again soon!\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "DivineDX": 78
    }
  },
  {
    "path": "src/main/java/task/Deadlines.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "package task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import logic.Parser;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "public class Deadlines extends Task {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    private LocalDateTime deadline;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public Deadlines(boolean isDone, String description, LocalDateTime deadline) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        super(isDone, description);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        this.deadline \u003d deadline;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public String toFileString() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder(\"D | \");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        if (isDone) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            sb.append(\"1 | \");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            sb.append(\"0 | \");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        sb.append(description + \" | \" + Parser.toFileDateTime(deadline));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder(\"[D]\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        if (isDone) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            sb.append(\"[âœ“] \");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            sb.append(\"[âœ—] \");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        sb.append(description);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        sb.append(\" (by: \" + Parser.printDate(deadline) + \")\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "DivineDX": 43
    }
  },
  {
    "path": "src/main/java/task/Events.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "package task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import logic.Parser;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "public class Events extends Task {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    private LocalDateTime start;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    private LocalDateTime end;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * Constructor for Event Object."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * @param isDone      If task is completed"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * @param description Description String of Event"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * @param start       LocalDateTime Object of start"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * @param end         LocalDateTime Object of end"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public Events(boolean isDone, String description, LocalDateTime start, LocalDateTime end) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        super(isDone, description);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        this.start \u003d start;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        this.end \u003d end;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public String toFileString() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder(\"E | \");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        if (isDone) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            sb.append(\"1 | \");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            sb.append(\"0 | \");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        sb.append(description + \" | \" + Parser.toFileDateTime(start) + \" - \" + Parser.toFileDateTime(end));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder(\"[E]\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        if (isDone) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            sb.append(\"[âœ“] \");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            sb.append(\"[âœ—] \");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        sb.append(description);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        sb.append(\" (\" + Parser.printDate(start) + \" - \" + Parser.printDate(end) + \")\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "DivineDX": 50
    }
  },
  {
    "path": "src/main/java/task/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "package task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import logic.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "public abstract class Task {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    String description;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    boolean isDone;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public Task(boolean isDone, String description) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        this.isDone \u003d isDone;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * Marks Task as done."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * @throws DukeException If task is already done"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public void markDone() throws DukeException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        if (isDone) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            throw new DukeException(\"task.task is already done!\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            this.isDone \u003d true;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * Converts to String to be written onto text file."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     * @return String"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public abstract String toFileString();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public abstract String toString();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "DivineDX": 38
    }
  },
  {
    "path": "src/main/java/task/ToDo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "package task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "public class ToDo extends Task {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public ToDo(boolean isDone, String description) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        super(isDone, description);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public String toFileString() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder(\"T | \");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        if (isDone) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            sb.append(\"1 | \");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            sb.append(\"0 | \");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        sb.append(description);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder(\"[T]\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        if (isDone) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            sb.append(\"[âœ“] \");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "            sb.append(\"[âœ—] \");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        sb.append(description);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "DivineDX": 31
    }
  },
  {
    "path": "src/test/java/ParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import logic.DukeException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import logic.Parser;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "public class ParserTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public void testParseDateTime() throws DukeException {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        LocalDateTime test \u003d Parser.parseDateTime(\"2/12/2019 1820\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        LocalDateTime actual \u003d LocalDateTime.of(2019, 12, 2, 18, 20);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        assertEquals(test, actual);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "DivineDX": 17
    }
  },
  {
    "path": "src/test/java/ToDoTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import task.ToDo;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "public class ToDoTest {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public void testToString() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        ToDo todo \u003d new ToDo(false, \"Homework\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        String expected \u003d \"[T][âœ—] Homework\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        assertEquals(expected, todo.toString());"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    public void testToFileString() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        ToDo todo \u003d new ToDo(false, \"Homework\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        String expected \u003d \"T | 0 | Homework\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "        assertEquals(expected, todo.toFileString());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DivineDX"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DivineDX"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "DivineDX": 21
    }
  }
]
