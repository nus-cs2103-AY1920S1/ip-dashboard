[
  {
    "path": "README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "# atharvjoshi\u0027s Duke"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "**What**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "* Duke was built as part of a module on Software Engineering I read at the National University of Singapore as part of my minor in Computer Science. "
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "* Duke is a basic Command Line Interface (CLI) application written in JAVA, following the OOP paradigm, and supplied with a basic GUI."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "* Duke can manage a list of tasks such as to-dos, events, and deadlines with nine recognised commands tabulated below. Simply enter the command in the specified format and let Duke do the rest!"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "**Getting Duke**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "Simply download the v0.3 jar release to get started. It is available here: https://github.com/atharvjoshi/duke/releases/tag/A-Release"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "# Using Duke "
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "Command | What Duke does | CLI entry format"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "---------------|---------------|---------------"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "`bye` | exits the application | `bye`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "`deadline` | adds a deadline type task to the task list | `deadline \u003cdescription\u003e /by \u003cdd/mm/yyyy\u003e \u003chhmm\u003e`"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "`delete` | deletes task with specified index | `delete \u003cone-indexed positive integer\u003e`"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "`done` | marks task with specified index as done | `done \u003cone-indexed positive integer\u003e`"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "`event` | adds an event type task to the task list | `event \u003cdescription\u003e /at \u003cdd/mm/yyyy\u003e \u003chhmm\u003e`"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "`find` | finds a task corresponding to specified keywords | `find \u003ckeyword(s)\u003e`"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "`list` | prints the task list | `list`"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "`todo` | adds a todo type task to the task list | `todo \u003cdescription\u003e`"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "`undo` | undos the last add/delete/done command in this session | `undo`"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "**Product Screenshot**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "![alt text](https://github.com/atharvjoshi/duke/blob/master/docs/Ui.png)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "# Acknowledgements"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "The project was built on code supplied by the CS2103 Teaching Department. Some parts of the code were reused from the JavaFX tutorials written by the CS2103 Teaching Department. The inspiration for the `undo` functionality came from a description of the OOP Command pattern by Matt Berther. "
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "# Feedback, Bug Reports"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "* If you have feedback or bug reports, please write to me at github.com/atharvjoshi"
      }
    ],
    "authorContributionMap": {
      "atharvjoshi": 27,
      "-": 10
    }
  },
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    id \u0027org.openjfx.javafxplugin\u0027 version \u00270.0.7\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "test {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "}"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "group \u0027duke.src.main.java\u0027"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    // Change this to your main class."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    mainClassName \u003d \"Main\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "javafx {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    version \u003d \"11.0.2\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    modules \u003d [ \u0027javafx.controls\u0027, \u0027javafx.fxml\u0027 ]"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "}"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    archiveVersion \u003d \"0.1.3\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-media\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-media\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-media\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "}"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "run {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "atharvjoshi": 50,
      "-": 18
    }
  },
  {
    "path": "data/tasks.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "T-N-this"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "atharvjoshi": 2
    }
  },
  {
    "path": "docs/README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "**What**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "* Duke was built as part of a module on Software Engineering I read at the National University of Singapore as part of my minor in Computer Science. "
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "* Duke is a basic Command Line Interface (CLI) application written in JAVA, following the OOP paradigm, and supplied with a basic GUI."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "* Duke can manage a list of tasks such as to-dos, events, and deadlines with nine recognised commands tabulated below. Simply enter the command in the specified format and let Duke do the rest!"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "**Getting Duke**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "Simply download the v0.3 jar release to get started. It is available here: https://github.com/atharvjoshi/duke/releases/tag/A-Release"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "# Features"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "Command | What Duke does | Usage"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "---------------|---------------|---------------"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "`bye` | Exits this session of Duke. User can now type `restart` to begin another session of Duke. | `bye`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "`deadline` | Adds a deadline type task to the task list with the description provided. The date must be entered in dd/mm/yyyy format and time must be entered in 24hr format. | `deadline \u003cdescription\u003e /by \u003cdd/mm/yyyy\u003e \u003chhmm\u003e`"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "`delete` | Deletes task with specified index. | `delete \u003cone-indexed positive integer\u003e`"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "`done` | Marks task with specified index as done. Done tasks have a `[Y]` tag while undone tasks have a `[N]` tag. | `done \u003cone-indexed positive integer\u003e`"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "`event` | Adds an event type task to the task list with the description provided. The date must be entered in dd/mm/yyyy format and time must be entered in 24hr format. | `event \u003cdescription\u003e /at \u003cdd/mm/yyyy\u003e \u003chhmm\u003e`"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "`find` | Finds task(s) corresponding to specified keywords. Any number of keywords separated by a space may be entered. | `find \u003ckeyword(s)\u003e`"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "`list` | Prints the task list, along with their task type and done status. | `list`"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "`todo` | Adds a todo type task to the task list with the description provided. | `todo \u003cdescription\u003e`"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "`undo` | Undos the last add/delete/done command in this session. | `undo`"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "# Product Screenshot"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "![](Ui.png)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "# Acknowledgements"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "The project was built on code supplied by the CS2103 Teaching Department. Some parts of the code were reused from the JavaFX tutorials written by the CS2103 Teaching Department. The inspiration for the `undo` functionality came from a description of the OOP Command pattern by Matt Berther. "
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "# Feedback, Bug Reports"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "If you have feedback or bug reports, please write to me at github.com/atharvjoshi"
      }
    ],
    "authorContributionMap": {
      "atharvjoshi": 27,
      "-": 10
    }
  },
  {
    "path": "src/main/java/Main.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "import ui.Duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": " * GUI Launcher for Duke."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": " *"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": " * @author atharvjoshi"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": " * @version CS2103 AY19/20 Sem 1 iP Week 4"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "public class Main {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * The main method that launches Duke."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * @param args command(s) from the user"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        // code adapted from JavaFX tutorials by CS2103 teaching dept"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        Application.launch(Duke.class, args);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "atharvjoshi": 21
    }
  },
  {
    "path": "src/main/java/commands/AddCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "import tasks.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "import util.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": " * Encapsulates command for adding to-do, deadline, and event tasks to list."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": " *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": " * @author atharvjoshi"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": " * @version CS2103 AY19/20 Sem 1 iP Week 4"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "public class AddCommand extends UndoableCommand {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    /** The task created in response to this command. */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    private Task task;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * Initialises an add command."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * @param imperative the term used to identify command type"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * @param task the task to be added"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    public AddCommand(String imperative, Task task) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        super(imperative);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        this.task \u003d task;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * Executes the add command task by adding task to list, sending a message"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * to be printed on the user interface, and asking storage to update the"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * task list on the hard drive."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * @param tasks the task list the task is to be added to."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * @param ui the user interface associated with this run of Duke."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * @param storage the storage handler associated with this run of Duke."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * @throws IOException when file the list is to be written to is not found."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * @return Duke\u0027s response to the user command."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    public String execute(TaskList tasks, Ui ui, Storage storage)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "            throws IOException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        tasks.add(this.task);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        // update the saved file of tasks"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        storage.update(tasks);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        // inform the user that task has been added"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        return ui.showAddTaskMessage(this.task, tasks.size());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * Undos the command by deleting the task that was added."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * @param tasks the task list the task is to be added to."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * @param ui the user interface associated with this run of Duke."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * @param storage the storage handler associated with this run of Duke."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * @return Duke\u0027s response to user command."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * @throws IOException when file the list is to be written to is not found."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    public String undo(TaskList tasks, Ui ui, Storage storage)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "            throws IOException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        int listSize \u003d tasks.size();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        tasks.remove(listSize - 1);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        storage.update(tasks);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        return ui.showCommandUndoneMessage(tasks);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "atharvjoshi": 71
    }
  },
  {
    "path": "src/main/java/commands/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "import util.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": " * Encapsulates a user command."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": " *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": " * \u003cp\u003e Abstract class whose execute method is to be implemented by"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": " * child classes. \u003c/p\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": " *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": " * @author atharvjoshi"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": " * @version CS2103 AY19/20 Sem 1 iP Week 4"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    /** Constant to indicate the list indexing is one-based. */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    static final int ONE_BASED_LIST_INDEX \u003d 1;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    /** The term used to identify command type. */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    private String imperative;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    /** Boolean depicting whether the command is used to exit Duke. */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    boolean isExit;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    /** Abstract execute method to be implemented by child classes. */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    public abstract String execute(TaskList tasks, Ui ui, Storage storage)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "            throws IOException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * Instantiate a command with an imperative."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * @param imperative the term used to identify the command type."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    Command(String imperative) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        this.imperative \u003d imperative;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        this.isExit \u003d false;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * Returns whether command is used to exit ui.Duke."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * @return true if exit command, false otherwise."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    public boolean getIsExit() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        return this.isExit;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * Parses a string into an integer corresponding to the index to the"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * task to be retrieved."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * @param indexString the string representing the task index."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * @return the integer corresponding to indexString."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    public int parseStringToIntIndex(String indexString) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        return Integer.parseInt(indexString) - ONE_BASED_LIST_INDEX;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "atharvjoshi": 59
    }
  },
  {
    "path": "src/main/java/commands/CommandManager.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "import util.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "import java.util.Stack;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": " * Encapsulates a command manager to manage the running of commands by Duke."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": " *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": " * @author atharvjoshi"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": " * @version CS2103 AY19/20 Sem 1 iP Week 5"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "public class CommandManager {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    /** Stack to keep track of user commands. */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    private Stack\u003cCommand\u003e commandStack \u003d new Stack\u003cCommand\u003e();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * Executes the given command."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * @param command the comand to be executed."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * @param tasks the task list the task is to be added to."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * @param ui the user interface associated with this run of Duke."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * @param storage the storage handler associated with this run of Duke."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * @return Duke\u0027s response to the user command."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * @throws IOException when file the list is to be written to is not found."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    public String executeCommand(Command command, TaskList tasks, Ui ui,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "                               Storage storage) throws IOException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        if (command instanceof UndoableCommand) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "            commandStack.push(command);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        return command.execute(tasks, ui, storage);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * Undos the last executed command."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * @param tasks the task list the task is to be added to."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * @param ui the user interface associated with this run of Duke."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * @param storage the storage handler associated with this run of Duke."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * @return Duke\u0027s response to the user command."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * @throws IOException when file the list is to be written to is not found."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    public String undoCommand(TaskList tasks, Ui ui, Storage storage)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "            throws IOException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        if (commandStack.isEmpty()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "            return ui.showNoCommandToUndoError();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "            UndoableCommand command \u003d (UndoableCommand)commandStack.pop();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "            return command.undo(tasks, ui, storage);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "atharvjoshi": 56
    }
  },
  {
    "path": "src/main/java/commands/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "import tasks.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "import util.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "import java.lang.Integer;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": " * Encapsulates command for deleting task from the task list."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": " *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": " * @author atharvjoshi"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": " * @version CS2103 AY19/20 Sem 1 iP Week 4"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "public class DeleteCommand extends UndoableCommand {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    /** The serial number (1-indexed) of the task to be deleted. */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    private String taskNumber;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    /** The task that was deleted by this command. */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    private Task task;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * Initialises a command for deleting the specified task."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * @param imperative the term used to identify command type"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * @param content string representing the index of the task to be deleted"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    public DeleteCommand(String imperative, String content) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        super(imperative);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        this.taskNumber \u003d content;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * Executes the delete command by deleting the specified task from the"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * list, sending a suitable message to the user interface, and asking"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * the storage handler to update the task list on the hard disk."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * @param tasks the task list the task is to be added to"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * @param ui the user interface associated with this run of Duke"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * @param storage the storage handler associated with this run of Duke"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * @throws IOException when file the list is to be written to is not found"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * @return Duke\u0027s response to the user command."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    public String execute(TaskList tasks, Ui ui, Storage storage) throws IOException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        if (tasks.isEmpty()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "            // if the user is trying this command on an empty task list"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "            return ui.showEmptyListError();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "                int taskIndex \u003d parseStringToIntIndex(this.taskNumber);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "                assert taskIndex \u003e\u003d 0;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "                // retrieve task to be removed and remove it"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "                Task taskToRemove \u003d tasks.get(taskIndex);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "                this.task \u003d taskToRemove;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "                assert taskToRemove !\u003d null;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "                tasks.remove(taskIndex);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "                // update storage"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "                storage.update(tasks);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "                // inform user that task has been removed"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "                return ui.showDeleteTaskMessage(taskToRemove, tasks.size());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "            } catch (IndexOutOfBoundsException exceptionOne) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "                return ui.showIndexOutOfBoundsError();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "            } catch (NumberFormatException exceptionTwo) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "                return ui.showInvalidIndexError();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * Undo the command by adding the task that was deleted."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * @param tasks the task list the task is to be added to."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * @param ui the user interface associated with this run of Duke."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * @param storage the storage handler associated with this run of Duke."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * @return Duke\u0027s response to the user command."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * @throws IOException when file the list is to be written to is not found."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    public String undo(TaskList tasks, Ui ui, Storage storage)"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "            throws IOException {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        assert this.task !\u003d null;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        if (this.task !\u003d null) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "            tasks.add(this.task);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "            storage.update(tasks);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "            return ui.showCommandUndoneMessage(tasks);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "            return ui.showNoCommandToUndoError();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "atharvjoshi": 99
    }
  },
  {
    "path": "src/main/java/commands/DoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "import tasks.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "import util.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "import java.lang.Integer;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": " * Encapsulates command for marking a task as done."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": " *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": " * @author atharvjoshi"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": " * @version CS2103 AY19/20 Sem 1 iP Week 4"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "public class DoneCommand extends UndoableCommand {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    /** The serial number (1-indexed) of the task to be marked done. */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    private String taskNumber;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    /** The task modified by this command. */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    private Task task;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * Initialises a command for marking the specified task as done."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * @param imperative the term used to identify command type"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * @param content string representing the index of the task to be marked done"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    public DoneCommand(String imperative, String content) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        super(imperative);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        this.taskNumber \u003d content;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * Executes the command by retreiving the specified task and marking it"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * as done."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * @param tasks the task list the task is to be added to"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * @param ui the user interface associated with this run of Duke"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * @param storage the storage handler associated with this run of Duke"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * @throws IOException when file the list is to be written to is not found"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * @return Duke\u0027s response to the user command."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    public String execute(TaskList tasks, Ui ui, Storage storage) throws IOException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        if (tasks.isEmpty()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "            // if the user is trying this command on an empty task list"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "            return ui.showEmptyListError();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "                int taskIndex \u003d parseStringToIntIndex(this.taskNumber);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "                // retrieve task from list"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "                Task taskToMarkDone \u003d tasks.get(taskIndex);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "                this.task \u003d taskToMarkDone;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "                assert taskToMarkDone !\u003d null;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "                // mark task as done only if its not yet done"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "                if (!taskToMarkDone.getIsDone()) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "                    taskToMarkDone.setTaskAsDone(true);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "                    // update storage"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "                    storage.update(tasks);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "                    // return message"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "                    return ui.showTaskDoneMessage(taskToMarkDone);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "                    return ui.showTaskAlreadyDoneMessage();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "                }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "            } catch (IndexOutOfBoundsException exceptionOne) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "                return ui.showIndexOutOfBoundsError();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "            } catch (NumberFormatException exceptionTwo) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "                return ui.showInvalidIndexError();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * Undos the command by marking the task as not done, if it was earlier"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * marked as done."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * @param tasks the task list the task is to be added to."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * @param ui the user interface associated with this run of Duke."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * @param storage the storage handler associated with this run of Duke."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * @return Duke\u0027s response to the user command."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    public String undo(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        assert this.task !\u003d null;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        if (this.task !\u003d null) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "            if (this.task.getIsDone()) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "                this.task.setTaskAsDone(false);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "                return ui.showCommandUndoneMessage(tasks);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "                return ui.showNoCommandToUndoError();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "            return ui.showNoCommandToUndoError();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "atharvjoshi": 102
    }
  },
  {
    "path": "src/main/java/commands/ExitCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "import util.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": " * Encapsulates command for exiting ui.Duke."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": " *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": " * @author atharvjoshi"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": " * @version CS2103 AY19/20 Sem 1 iP Week 4"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * Initialises a command for exiting Duke."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * @param imperative the term used to identify command type"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    public ExitCommand(String imperative) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        super(imperative);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * Executes the command by setting its exit status to true."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * @param tasks the task list the task is to be added to"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * @param ui the user interface associated with this run of Duke"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * @param storage the storage handler associated with this run of Duke"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * @return Duke\u0027s response to the user command."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    public String execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        assert !this.isExit;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        this.isExit \u003d true;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        return ui.getFarewellMessage();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "atharvjoshi": 37
    }
  },
  {
    "path": "src/main/java/commands/FindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "import util.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "import tasks.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": " * Encapsulates command for finding tasks using specified keyword(s)."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": " *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": " * @author atharvjoshi"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": " * @version CS2103 AY19/20 Sem 1 iP Week 4"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    /** The keyword(s) specified by the user. */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    private String keywords;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * Creates a find command to search for tasks relating to given keyword(s)."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * @param imperative the term used to identify command type"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * @param keywords the search term(s) given by the user"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    public FindCommand(String imperative, String keywords) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        super(imperative);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * Executes the command by finding string matches between keywords and"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * descriptions of tasks stored in the task list."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * @param tasks the task list the task is to be added to"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * @param ui the user interface associated with this run of Duke"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * @param storage the storage handler associated with this run of Duke"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * @throws IOException when file the list is to be written to is not found"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * @return Duke\u0027s response to the user command."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    public String execute(TaskList tasks, Ui ui, Storage storage) throws IOException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        // obtain array of keywords, size of array, and size of list"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        String[] keywordArray \u003d this.keywords.split(\" \");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        int keywordArraySize \u003d keywordArray.length;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        int taskListSize \u003d tasks.size();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        // initialise a temporary container to hold matching tasks"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        TaskList foundTasksContainer \u003d new TaskList();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        boolean[] isTaskAlreadyFound \u003d new boolean[taskListSize]; // false"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        "
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        // find task if applicable and add to container"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        for (int i \u003d 0; i \u003c taskListSize; i++) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "            for (int j \u003d 0; j \u003c keywordArraySize; j++) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "                // if task has already been found before, move on"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "                if (!isTaskAlreadyFound[i]) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "                    Task currentTask \u003d tasks.get(i);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "                    String currentTaskDescription \u003d currentTask"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "                            .getTaskDescription().toUpperCase();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "                    String currentKeyword \u003d keywordArray[j].toUpperCase();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "                    if (currentTaskDescription.contains(currentKeyword)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "                        isTaskAlreadyFound[i] \u003d true;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "                        foundTasksContainer.add(currentTask);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "                }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        if (foundTasksContainer.isEmpty()) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "            // inform user that task is not found"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "            return ui.showTaskNotFoundMessage();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "            // send container task list for printing"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "            return ui.printTasks(foundTasksContainer);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "atharvjoshi": 78
    }
  },
  {
    "path": "src/main/java/commands/PrintCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "import util.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": " * Encapsulates command to print all tasks in the task list."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": " *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": " * @author atharvjoshi"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": " * @version CS2103 AY19/20 Sem 1 iP Week 4"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "public class PrintCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * Initialises a command to print the whole list on the user interface."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * @param imperative the term used to identify command type"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    public PrintCommand(String imperative) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        super(imperative);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * Executes the print command method by asking the user interface handler"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * to print all the tasks in the lists to the terminal."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * @param tasks the task list the task is to be added to"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * @param ui the user interface associated with this run of ui.Duke"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * @param storage the storage handler associated with this run of ui.Duke"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * @return Duke\u0027s response to the user command."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    public String execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        // print task list"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        return ui.printTasks(tasks);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "atharvjoshi": 38
    }
  },
  {
    "path": "src/main/java/commands/UndoableCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "import util.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": " * Encapsulates a user command that can be undo-ed."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": " *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": " * \u003cp\u003e Abstract class whose undo method is to be implemented by"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": " * child classes. \u003c/p\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": " *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": " * @author atharvjoshi"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": " * @version CS2103 AY19/20 Sem 1 iP Week 5"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "public abstract class UndoableCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * Instantiates an undoable command."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * @param imperative the term used to identify the command type."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    UndoableCommand(String imperative) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        super(imperative);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    /** Abstract execute method to be implemented by child classes. */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    public abstract String undo(TaskList tasks, Ui ui, Storage storage) throws IOException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "atharvjoshi": 29
    }
  },
  {
    "path": "src/main/java/parser/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "package parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "import commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "import commands.PrintCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "import commands.CommandManager;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "import commands.AddCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "import commands.DeleteCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "import commands.DoneCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "import commands.ExitCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "import commands.FindCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "import commands.UndoableCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "import tasks.Deadline;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "import tasks.Event;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "import tasks.Todo;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "import tasks.Task;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "import util.TaskList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": " * Encapsulates a handler that tries to make sense of user commands."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": " *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": " *  @author atharvjoshi"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": " *  @version CS2103 AY19/20 Sem 1 iP Week 4"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * Enumeration of all command types supported by Duke."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    private enum Imperative {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        BYE, DEADLINE, DELETE, DONE, EVENT, FIND, LIST, TODO, UNDO"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    /** Command manager. */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    private static CommandManager manager \u003d new CommandManager();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    /** Boolean to indicate whether it is time to exit Duke.*/"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    public static boolean isItTimeToExit \u003d false;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * Parses user input into a command executed by Duke."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * @param fullCommand the string entered by the user as a command"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * @return a Duke-executable command"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * @throws IllegalArgumentException if command not supported by duke"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * @throws IndexOutOfBoundsException if incomplete commands"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * @throws ParseException if incorrect date/time format"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    public static String parse(String fullCommand, TaskList tasks, Ui ui, Storage storage)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "            throws IllegalArgumentException, IndexOutOfBoundsException,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "            ParseException, IOException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        // try to create the command based on the imperative and run it"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        // if the imperative entered is unrecognised, inform the user"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        // extract the imperative specified by the user to identify which"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        // command is to be executed by ui.Duke"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        String[] splitCommand \u003d fullCommand.split(\" \", 2);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        String imperative \u003d splitCommand[0].toUpperCase();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        switch (Imperative.valueOf(imperative)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        case BYE:"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "            isItTimeToExit \u003d true;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "            return parseByeCommand(imperative, tasks, ui, storage);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        case DELETE:"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "            return parseDeleteCommand(imperative, splitCommand[1], tasks, ui, storage);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        case DONE:"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "            return parseDoneCommand(imperative, splitCommand[1], tasks, ui, storage);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        case LIST:"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "            return parsePrintCommand(imperative, tasks, ui, storage);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        case TODO:"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "            Todo todoForAddCommand \u003d new Todo(splitCommand[1],false);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "            return parseAddCommand(imperative, todoForAddCommand, tasks, ui, storage);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        case DEADLINE:"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "            String newDeadlineDescription \u003d splitTaskAttributes(splitCommand[1], \"\\\\/\")[0];"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "            String newDeadlineDueDate \u003d splitTaskAttributes(splitCommand[1], \"\\\\/\")[1];"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "            Deadline deadlineForAddCommand \u003d new Deadline(newDeadlineDescription,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "                    newDeadlineDueDate, false);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "            return parseAddCommand(imperative, deadlineForAddCommand, tasks, ui, storage);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        case EVENT:"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "            String newEventDescription \u003d splitTaskAttributes(splitCommand[1], \"\\\\/\")[0];"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "            String newEventDate \u003d splitTaskAttributes(splitCommand[1], \"\\\\/\")[1];"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "            Event eventForAddCommand \u003d new Event(newEventDescription,"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "                    newEventDate, false);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "            return parseAddCommand(imperative, eventForAddCommand, tasks, ui, storage);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        case FIND:"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "            return parseFindCommand(imperative, splitCommand[1], tasks, ui, storage);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        case UNDO:"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "            return parseUndoCommand(tasks, ui, storage);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "            throw new IllegalArgumentException();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    private static String parseByeCommand(String imperative, TaskList tasks, Ui ui,"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "                                          Storage storage) throws IOException {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        ExitCommand exitCommand  \u003d new ExitCommand(imperative);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        String responseString \u003d manager.executeCommand(exitCommand, tasks, ui, storage);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        return responseString;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    private static String parseDeleteCommand(String imperative, String index, TaskList tasks,"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "                                             Ui ui, Storage storage) throws IOException {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        UndoableCommand deleteCommand  \u003d new DeleteCommand(imperative, index);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        String responseString \u003d manager.executeCommand(deleteCommand, tasks, ui, storage);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        return responseString;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    private static String parseDoneCommand(String imperative, String index, TaskList tasks,"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "                                             Ui ui, Storage storage) throws IOException {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        UndoableCommand doneCommand  \u003d new DoneCommand(imperative, index);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        String responseString \u003d manager.executeCommand(doneCommand, tasks, ui, storage);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        return responseString;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    private static String parsePrintCommand(String imperative, TaskList tasks, Ui ui,"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "                                          Storage storage) throws IOException {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        PrintCommand printCommand  \u003d new PrintCommand(imperative);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        String responseString \u003d manager.executeCommand(printCommand, tasks, ui, storage);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        return responseString;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    private static String parseAddCommand(String imperative, Task task, TaskList tasks,"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "                                           Ui ui, Storage storage) throws IOException {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        UndoableCommand addCommand  \u003d new AddCommand(imperative, task);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        String responseString \u003d manager.executeCommand(addCommand, tasks, ui, storage);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        return responseString;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    private static String parseFindCommand(String imperative, String searchTerm, TaskList tasks,"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "                                           Ui ui, Storage storage) throws IOException {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        Command findCommand  \u003d new FindCommand(imperative, searchTerm);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        String responseString \u003d manager.executeCommand(findCommand, tasks, ui, storage);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        return responseString;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    private static String parseUndoCommand(TaskList tasks, Ui ui,"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "                                           Storage storage) throws IOException {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        String responseString \u003d manager.undoCommand(tasks, ui, storage);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        return responseString;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * Returns the string containing date/time information for deadline and"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * event type tasks."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * @param command string containing task attribute information"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * @param regex the delimiter used to split the command string"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * @return string containing date/time information"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    private static String[] splitTaskAttributes(String command, String regex) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        // try to obtain the description and date/time information of"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        // the deadline / event. Inform user if the input is in an"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        // incorrect format."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        String[] taskAttributes \u003d command.split(regex, 2);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        String taskDescription \u003d taskAttributes[0];"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        String taskDateTime \u003d taskAttributes[1].split(\" \", 2)[1];"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        return new String[] {taskDescription, taskDateTime};"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * Reads text file containing saved tasks, converts them into tasks.Task objects,"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * and adds to the task list in order to load the last saved task list."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * @param line string containing one line from the text file"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * @param emptyList empty list to add the parsed tasks to"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * @throws ParseException if incorrect date/time format"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    public static void parseTextToTask(String line, TaskList emptyList) throws"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "            ParseException {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        String[] splitLine \u003d line.split(\"-\", 3);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        boolean isTaskDone \u003d splitLine[1].equals(\"Y\");"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        switch (splitLine[0]) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        case \"D\":"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "            emptyList.add(new Deadline("
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "                    splitTaskAttributes(splitLine[2], \"-\")[0],"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "                    splitTaskAttributes(splitLine[2], \"-\")[1], isTaskDone));"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        case \"E\":"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "            emptyList.add(new Event("
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "                    splitTaskAttributes(splitLine[2], \"-\")[0],"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "                    splitTaskAttributes(splitLine[2], \"-\")[1], isTaskDone));"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        case \"T\":"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "            emptyList.add(new Todo(splitLine[2], isTaskDone));"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "            assert emptyList.isEmpty();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "            System.out.println(\"list remains empty.\");"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "atharvjoshi": 197
    }
  },
  {
    "path": "src/main/java/storage/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "package storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "import parser.Parser;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "import tasks.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "import util.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": " * Encapsulates a handler that deals with storage - loading tasks from"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": " * file and saving to file."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": " *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": " *  @author atharvjoshi"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": " *  @version CS2103 AY19/20 Sem 1 iP Week 4"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    /** File object containing the saved task list. */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    private File file;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    /** The string represnting file path relativ to root folder. */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    private String filePath;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * Creates a storage handler with a given filepath."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * @param filePath the path to the file object containing the task list"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    public Storage(String filePath) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        this.file \u003d new File(filePath);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * Loads tasks into the task list from the saved file, every time ui.Duke is"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * re-initialised."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * @param emptyList the list the tasks are to be loaded into"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * @throws FileNotFoundException if file specified by filepath is not found"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * @throws ParseException if wrong date/time format encountered"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    public void loadToList(TaskList emptyList) throws FileNotFoundException,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "            ParseException, IOException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        // create file if it doesn\u0027t already exist"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        if (!this.file.exists()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "            this.file.getParentFile().mkdir();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "            this.file.createNewFile();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        // read file using Scanner class"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        Scanner s \u003d new Scanner(this.file);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        while (s.hasNext()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "            Parser.parseTextToTask(s.nextLine(), emptyList);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * Updates task list whenever an add, done, or delete command is executed."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * @param modifiedList the list instance after command is executed."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * @throws IOException if file not found"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    public void update(TaskList modifiedList) throws IOException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        if (!modifiedList.isEmpty()) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "            int listSize \u003d modifiedList.size();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "            for (int i \u003d 0; i \u003c listSize; i++) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "                Task currentTask \u003d modifiedList.get(i);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "                assert currentTask !\u003d null;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "                this.writeToFile(currentTask.toString());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "            if (!modifiedList.isEmpty()) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "                StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "                // loop through each task in list and append to string builder."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "                int listSize \u003d modifiedList.size();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "                for (int i \u003d 0; i \u003c listSize; i++) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "                    Task currentTask \u003d modifiedList.get(i);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "                    assert currentTask !\u003d null;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "                    sb.append(currentTask.toString());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "                    sb.append(\"\\n\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "                }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "                assert !sb.toString().isEmpty();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "                this.writeToFile(sb.toString());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        } catch (IOException exception) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "            System.out.println(\"Sorry. I can\u0027t save this change :-(\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * Writes given text to the specified file on the hard disk."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * @param textToAdd the text to be added"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * @throws IOException if file not found"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    private void writeToFile(String textToAdd) throws IOException {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        FileWriter fw \u003d new FileWriter(this.filePath);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        fw.write(textToAdd);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        fw.write(\"\\n\"); // add newline"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        fw.close();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "}"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "atharvjoshi": 107
    }
  },
  {
    "path": "src/main/java/tasks/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "package tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": " * Encapsulates a deadline-type task handled by Duke."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": " *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": " * \u003cp\u003e A deadline differs from other tasks because it has a due date. \u003c/p\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": " *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": " * @author atharvjoshi"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": " * @version CS2103 AY19/20 Sem 1 iP Week 4"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    /** The date by which task is due. */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    private String dueDate;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    /** Fixed string pattern for date time format. */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    private static final String DATE_TIME_FORMAT_PATTERN \u003d \"dd/MM/yyyy HHmm\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    /** Tag identifying deadline. */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    private static final String DEADLINE_TAG \u003d \"D-\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    /** Date / Time converted to Date format. */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    private Date byWhen;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * Creates a deadline with a description and due date."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * @param description string representing the description of the deadline"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * @param dueDate string representing date by which deadline is due"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * @param isDone flag indicating whether task has been done or not"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * @throws ParseException if the date/time is entered in the wrong format"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    public Deadline(String description, String dueDate, boolean isDone)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "            throws ParseException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        super(description, isDone);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        this.dueDate \u003d dueDate;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        this.byWhen \u003d this.toDate();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * Return a string representation of this deadline."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * @return string representing this deadline."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        return DEADLINE_TAG + super.toString() + \"-\" + dueDate;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * Converts string representation of date/time into an actual date/time"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * object."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * @return the parsed date and time information"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * @throws ParseException if the date/time is entered in the wrong format"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    private Date toDate() throws ParseException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        return new SimpleDateFormat(DATE_TIME_FORMAT_PATTERN).parse(this.dueDate);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "atharvjoshi": 62
    }
  },
  {
    "path": "src/main/java/tasks/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "package tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": " * Encapsulates a event-type task handled by uDuke."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": " *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": " * \u003cp\u003e A event differs from other tasks because it has a date on which it is to"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": " * occur. \u003c/p\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": " *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": " * @author atharvjoshi"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": " * @version CS2103 AY19/20 Sem 1 iP Week 4"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    /** Tag identifying event. */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    private static final String EVENT_TAG \u003d \"E-\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    /** Fixed string pattern for date time format. */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    private static final String DATE_TIME_FORMAT_PATTERN \u003d \"dd/MM/yyyy HHmm\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    /** String representing date or time at which event is slated to occur. */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    private String dateTime;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    /** Date / Time converted to the Date format. */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    private Date when;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * Creates an event with a description and date/time information."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * @param description string representing description of event."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * @param dateTime string representing when the event will occur."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * @param isDone flag indicating whether task has been done or not"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * @throws ParseException if the date/time is entered in the wrong format"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    public Event(String description, String dateTime, boolean isDone)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "            throws ParseException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        super(description, isDone);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        this.dateTime \u003d dateTime;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        this.when \u003d this.toDate();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * Return a string representation of this event."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * @return string representing this event."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        return EVENT_TAG + super.toString() + \"-\" + dateTime;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * Converts string representation of date/time into an actual date/time"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * object."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * @return the parsed date and time information"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * @throws ParseException if the date/time is entered in the wrong format"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    private Date toDate() throws ParseException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        return new SimpleDateFormat(DATE_TIME_FORMAT_PATTERN).parse(this.dateTime);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "atharvjoshi": 64
    }
  },
  {
    "path": "src/main/java/tasks/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "package tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": " * Encapsulates a task handled by Duke."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": " *"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": " * \u003cp\u003e A task has a description and a status, for each of which getter methods have"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": " * been provided. The task status can also be updated when a task is done. \u003c/p\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": " *"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": " * @author atharvjoshi"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": " * @version CS2103 AY19/20 Sem 1 iP Week 4"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    /** The description of the task. */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    /** The status of the task - done or not done. */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    private boolean isDone;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * Creates a task with a description and a status."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * @param description string representing the description of this task"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * @param isDone flag indicating whether task has been done or not"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    public Task(String description, boolean isDone) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        this.isDone \u003d isDone;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * Retrieves the icon indicating task status."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * @return \"Y\" if task is done or \"N\" if task is not done."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    private String getTaskStatusIcon() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        return (this.isDone ? \"Y\" : \"N\"); // return Y or N"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        // return (this.isDone ? \"\\u2713\" : \"\\u2718\"); // return tick or X"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * Get current status of this task."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * @return true if current task is done, false if current task is not done."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    public boolean getIsDone() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        return this.isDone;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * Changes the status of the task to \u0027done\u0027."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * @param hasBeenDone boolean to indicate that the task has been completed."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    public boolean setTaskAsDone(boolean hasBeenDone) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        this.isDone \u003d hasBeenDone;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        return this.isDone;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * Return a string representation of this task."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * @return string representing this task."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        return this.getTaskStatusIcon() + \"-\" + this.description;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * Return task description of this task."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * @return string representing task description."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    public String getTaskDescription() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        return this.description;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "atharvjoshi": 77
    }
  },
  {
    "path": "src/main/java/tasks/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "package tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": " * Encapsulates a todo-type task handled by Duke."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": " *"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": " * \u003cp\u003e A todo differs from other tasks because it has no due date, it simply has"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": " * a task description. \u003c/p\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": " *"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": " * @author atharvjoshi"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": " * @version CS2103 AY19/20 Sem 1 iP Week 4"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "public class Todo extends Task {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    /** Tag identifying Todo. */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    private static final String TODO_TAG \u003d \"T-\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * Create a todo with a description."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * @param description string representing description of this todo."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * @param isDone flag indicating whether task has been done or not"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    public Todo(String description, boolean isDone) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        super(description, isDone);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * Return a string representation of this todo."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * @return string representing this todo."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        return TODO_TAG + super.toString();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "atharvjoshi": 35
    }
  },
  {
    "path": "src/main/java/ui/DialogBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "package ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": " * Custom control for GUI encapsulating a dialog box that contains two"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": " * other controls - ImageView and Label."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": " *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": " * \u003cp\u003e The code for DialogBox has been reused from the JavaFX tutorials"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": " * on the duke repository written by the CS2103 teaching team. \u003c/p\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": " *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": " * @authors: j-lum"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": " * @version: CS2103 AY19/20 Sem 1 iP Week 4"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    /** The text to be displayed on the GUI. */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    private Label text;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    /** The display picture accompanying the text to be displayed. */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * Initialises a dialog box with a given label and image."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * @param label the text associated with this dialog box."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * @param imageView the display image associated with this dialog box."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    public DialogBox(Label label, ImageView imageView) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        this.text \u003d label;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        this.displayPicture \u003d imageView;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        text.setWrapText(true);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        displayPicture.setFitWidth(100.0);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        displayPicture.setFitHeight(100.0);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        this.setAlignment(Pos.TOP_RIGHT);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        this.getChildren().addAll(text, displayPicture);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        this.setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        FXCollections.reverse(tmp);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        this.getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * Returns User\u0027s dialog box."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * @param label the text associated with this dialog box."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * @param imageView the display image associated with this dialog box."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * @return the user\u0027s dialog box."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    public static DialogBox getUserDialog(Label label, ImageView imageView) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        return new DialogBox(label, imageView);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * Returns Duke\u0027s dialog box."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * @param label the text associated with this dialog box."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * @param imageView the display image associated with this dialog box."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * @return duke\u0027s dialog box."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    public static DialogBox getDukeDialog(Label label, ImageView imageView) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        var db \u003d new DialogBox(label, imageView);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "atharvjoshi": 77
    }
  },
  {
    "path": "src/main/java/ui/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "package ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "import parser.Parser;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "import util.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": " * Encapsulates attributes and behaviour of ui.Duke, a personal assistant chatbot."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": " *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": " * \u003cp\u003e Duke manages a user\u0027s list of tasks. It can store, add to, remove from, find,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": " * or modify the contents of the list. User input must come either in the form of"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": " * commands \u0027list\u0027, \u0027bye\u0027 \u0027done (task index)\u0027, \u0027delete (task index)\u0027 or storage"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": " * requests beginning with the type of task to be stored. Duke supports three"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": " * types of tasks - todos, deadlines, and events. Deadlines and events need to"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": " * be supplied with additional date or time information, which is parsed by"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": " * Duke using Java\u0027s SimpleDateFormat library. The input format for"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": " * todos is \u0027to-do (task description)\u0027 and that for deadlines and events is"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": " * \u0027(task type) (task description) / (day/month/year hh:mm)\u0027. Deviating from this"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": " * input format results in Duke supplying error messages to the user. Duke"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": " * currently runs a simple graphic user interface supported by JavaFX. \u003c/p\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": " *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": " * @author atharvjoshi"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": " * @contributors j-lum, damithc"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": " * @version CS2103 AY19/20 Sem 1 iP Week 4"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": " */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "public class Duke extends Application {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    /** Handler for loading from and writing to hard disk. */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    /** The list of tasks. */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    /** Handler for dealing with user interactions. */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    /** flag to indicate if ui.Duke is listening to commands from the user. */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    private boolean isListening;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    /** A scroll pane for the Duke GUI. */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    /** A container to display dialogs in Duke GUI. */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    /** A field to enter user input in Duke GUI. */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    /** A button to send input in Duke GUI. */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    /** The user\u0027s display picture in the GUI. */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    private Image user \u003d new Image(this.getClass()"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "            .getResourceAsStream(\"/images/user.png\"));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    /** Duke\u0027s display picture in the GUI. */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    private Image duke \u003d new Image(this.getClass()"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "            .getResourceAsStream(\"/images/duke.png\"));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * Initialises Duke with a user-interface, storage, and task"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * handler."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    public Duke() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        String filePath \u003d \"data/tasks.txt\"; // saved task list file"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        storage \u003d new Storage(filePath);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        this.isListening \u003d true;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "            this.tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "            storage.loadToList(tasks);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        } catch (IOException | ParseException exception) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "            ui.showStartupError();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "            this.tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * The start method for the Duke application."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * @param stage stage on which scenes run."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        // code reused from JavaFX tutorials by CS2103 teaching dept"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        this.setupStage(stage);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        // handle user input based on user interactions."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        sendButton.setOnMouseClicked((event) -\u003e {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "            handleUserInput();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        });"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        userInput.setOnAction((event) -\u003e {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "            handleUserInput();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        });"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        // Scroll down to the end every time dialogContainer\u0027s height changes."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        dialogContainer.heightProperty().addListener((observable) -\u003e scrollPane.setVvalue(1.0));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * Initialise the stage elements and layout for the Duke GUI."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * @param stage the stage to be set up."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    private void setupStage(Stage stage) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        // code reused from JavaFX tutorials by CS2103 teaching dept"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        //Step 1. Setting up required components"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        //The container for the content of the chat to scroll."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        scrollPane \u003d new ScrollPane();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        dialogContainer \u003d new VBox();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        scrollPane.setContent(dialogContainer);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        userInput \u003d new TextField();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        sendButton \u003d new Button(\"Send\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        AnchorPane mainLayout \u003d new AnchorPane();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        mainLayout.getChildren().addAll(scrollPane, userInput, sendButton);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        //Step 2. Formatting the window to look as expected"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        stage.setTitle(\"Duke\");"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        stage.setResizable(false);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        stage.setMinHeight(600.0);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        stage.setMinWidth(400.0);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        mainLayout.setPrefSize(400.0, 600.0);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        scrollPane.setPrefSize(385, 535);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        scrollPane.setHbarPolicy(ScrollPane.ScrollBarPolicy.NEVER);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        scrollPane.setVbarPolicy(ScrollPane.ScrollBarPolicy.ALWAYS);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        scrollPane.setVvalue(1.0);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        scrollPane.setFitToWidth(true);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        dialogContainer.setPrefHeight(Region.USE_COMPUTED_SIZE);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        userInput.setPrefWidth(325.0);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        sendButton.setPrefWidth(55.0);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        AnchorPane.setTopAnchor(scrollPane, 1.0);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        AnchorPane.setBottomAnchor(sendButton, 1.0);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        AnchorPane.setRightAnchor(sendButton, 1.0);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        AnchorPane.setLeftAnchor(userInput, 1.0);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        AnchorPane.setBottomAnchor(userInput, 1.0);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        Scene scene \u003d new Scene(mainLayout);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        stage.setScene(scene);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        stage.show();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        // show welcome message"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        Label welcomeText \u003d new Label(ui.getWelcomeMessage());"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        dialogContainer.getChildren().add("
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "                DialogBox.getDukeDialog(welcomeText, new ImageView(duke)));"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * Handler for user input which runs user commands and presents"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * Duke\u0027s responses."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        // code adapted from JavaFX tutorials by CS2103 teaching dept"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        String fullCommand \u003d userInput.getText(); // get command"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        String dukeResponse \u003d getResponse(fullCommand); // run command"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        assert fullCommand !\u003d null;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        assert dukeResponse !\u003d null;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        // create labels"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        Label userText \u003d new Label(fullCommand);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        Label dukeText \u003d new Label(dukeResponse);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "                DialogBox.getUserDialog(userText, new ImageView(user)),"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "                DialogBox.getDukeDialog(dukeText, new ImageView(duke))"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        );"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * Run the command entered by the user and return a string corresponding to"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * Duke\u0027s response."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * @return string representing Duke\u0027s response to given user input."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    private String getResponse(String inputString) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        // code adapted from JavaFX tutorials by CS2103 teaching dept"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        while (this.isListening) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "                String responseString \u003d Parser.parse(inputString, tasks, ui, storage);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "                this.isListening \u003d !Parser.isItTimeToExit;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "                assert responseString !\u003d null;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "                return responseString;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "            } catch (IllegalArgumentException exceptionOne) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "                return ui.showInvalidCommandError();"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "            } catch (IndexOutOfBoundsException exceptionTwo) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "                return ui.showInvalidFormattingError();"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "            } catch (IOException exceptionThree) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "                return ui.showStartupError();"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "            } catch (ParseException exceptionFour) {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "                return ui.showInvalidDateTimeFormattingError();"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        // user has requested to restart duke."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        if (inputString.equalsIgnoreCase(\"restart\")) {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "            return restart();"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        // let user know that a recent instance of Duke has stopped running"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        // and steps to take next."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        return \"Duke has already stopped running! \""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "                + \"Type \u0027restart\u0027 to talk to Duke again, or simply close the window!!!\";"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * Restarts Duke."
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * @return string representing welcome message after restart."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    private String restart() {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        this.isListening \u003d true;"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        return ui.getWelcomeMessage();"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "atharvjoshi": 244,
      "-": 1
    }
  },
  {
    "path": "src/main/java/ui/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "package ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "import util.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "import tasks.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "import java.lang.StringBuilder;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": " *  Encapsulates a user interface handler that deals with interactions with"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": " *  the user."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": " *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": " *   @author atharvjoshi"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": " *   @version CS2103 AY19/20 Sem 1 iP Week 4"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    /** welcome message. */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    private String welcomeMessage;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    /** logo for Duke. */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    private String logo;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    /** exit message. */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    private String exitMessage;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     *  Instantiates the user interface handler."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    Ui() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        this.logo \u003d \" ____        _        \\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "                + \"|  _ \\\\ _   _| | _____ \\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "                + \"| | | | | | | |/ / _ \\\\\\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "                + \"| |_| | |_| |   \u003c  __/\\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "                + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        this.welcomeMessage \u003d \"Hello! I\u0027m Duke!!!\\n\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        this.exitMessage \u003d \"Hope to see you again soon!\\n\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * Returns the specified welcome message and logo."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * @return welcome message."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    String getWelcomeMessage() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        return logo + welcomeMessage;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * Returns the exit message that wishes the user goodbye upon exiting Duke."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * @return exit message."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    public String getFarewellMessage() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        return exitMessage;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * Returns startup error message."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * @return startup error message."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    String showStartupError() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        return \"Unable to load tasks from hard disk\\n\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * Returns error when user tries to work on an empty list."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * @return empty list error message."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    public String showEmptyListError() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        return \"No tasks in your list!\";"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * Returns message when task is successfully added to list."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * @param task the task that was added"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * @param size the size of the list after adding task"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * @return add task message."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    public String showAddTaskMessage(Task task, int size) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        sb.append(\"Got it. I\u0027ve added this task: \\n\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        sb.append(\"  \" + task + \"\\n\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        sb.append(String.format(\"Now you have %d tasks in the list. \\n\", size));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * Prints message when task is successfully deleted from the list."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * @param task the task that was deleted"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * @param size the size of the list after deleting task"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * @return delete task message."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    public String showDeleteTaskMessage(Task task, int size) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        sb.append(\"Noted. I\u0027ve removed this task:\\n\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        sb.append(\"   \" + task + \"\\n\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        sb.append(String.format(\"Now you have %d tasks in the list\\n\", size));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * Prints error message when user specifies 0 index or an index bigger"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * than the size of the task list."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * @return index out of bounds error message."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    public String showIndexOutOfBoundsError() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        return \"You\u0027ve specified a 0 index or index \""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "                + \"that is bigger than the size of your list!\\n\";"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * Prints error message when user specifies an invalid non-integer index."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * @return invalid index error message."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    public String showInvalidIndexError() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        return \"Please input an integer which is the \""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "                + \"index of the task you wish to mark as done.\\n\";"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * Prints error message when user enters invalid command."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * @return invalid command error message."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    String showInvalidCommandError() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        return \"You entered a command I do not understand :-(\\n\";"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * Prints error message when user enters incorrect date/time format."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * @return invalid date time format message."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    String showInvalidDateTimeFormattingError() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        return \"Looks like you entered the incorrect Date/Time \""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "                + \"format. Please follow \u003cdd\u003e/\u003cmm\u003e/\u003cyyyy\u003e \u003chhmm\u003e\\n\";"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * Prints error message when user enters incorrect task attributes format."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * @return invalid format message."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    String showInvalidFormattingError() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        return \"Wrong format! Please try again!\\n\";"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * Prints message when given find keywords do not match any task."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * @return task not found message."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    public String showTaskNotFoundMessage() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        return \"No tasks found matching the keyword you specified!\";"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * Prints message when user marks a given task as done."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * @param task the task marked as done."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * @return task marked done message."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    public String showTaskDoneMessage(Task task) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        sb.append(\"Nice! I\u0027ve marked this task as done:\\n\");"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        sb.append(\"   \" + task + \"\\n\");"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * Returns message saying task has already been done."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * @return task already done message."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    public String showTaskAlreadyDoneMessage() {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        return \"This task has already been done!\";"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * Prints all tasks in the list to the terminal."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * @param tasks the task list"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * @return string containing all tasks in readable format."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    public String printTasks(TaskList tasks) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        // inform user if the list is empty"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        if (tasks.isEmpty()) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "            return \"No tasks in your list!\";"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "            StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "            sb.append(\"Here are the tasks in your list:\\n\");"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "            // loop through each task in list and print it"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "            int listSize \u003d tasks.size();"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "            for (int i \u003d 0; i \u003c listSize; i++) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "                // specified format e.g. \"1. task 1\""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "                Task currentTask \u003d tasks.get(i);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "                sb.append(String.format(\"%d. %s\\n\", i + 1, currentTask));"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "            return sb.toString();"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    public String showNoCommandToUndoError() {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        return \"No command to undo!\";"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * Shows command undone message, along with a printed list of tasks."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * @param tasks the tasks to be printed."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * @return string containing undone message."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    public String showCommandUndoneMessage(TaskList tasks) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        sb.append(\"Last command undone!\\n\");"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        sb.append(printTasks(tasks));"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "atharvjoshi": 225
    }
  },
  {
    "path": "src/main/java/util/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "package util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "import tasks.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": " * Contains the task list and operations on the list."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": " *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": " *  @author atharvjoshi"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": " *  @version CS2103 AY19/20 Sem 1 iP Week 4"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    /** Internal task list kept as an array list of task objects. */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    private ArrayList\u003cTask\u003e tasks;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * Creates new task list."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        this.tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * Creates a copy of the given task list."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * @param anotherTaskList the task list to be copied"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    public TaskList(TaskList anotherTaskList) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        this.tasks \u003d anotherTaskList.tasks;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * Checks if list is empty."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * @return true if list is empty, false otherwise"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    public boolean isEmpty() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        return this.tasks.isEmpty();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * Returns size of the list as an integer."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * @return int representing size of the list"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    public int size() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        return this.tasks.size();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * Adds given task to the list."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * @param task the task to be added"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    public boolean add(Task task) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        return this.tasks.add(task);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * Returns task from the list at specified index."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * @param index the index of the task to be returned"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * @return the specified task"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * @throws IndexOutOfBoundsException if index specified \u003e list size"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    public Task get(int index) throws IndexOutOfBoundsException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        return this.tasks.get(index);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * Removes task at specified index from the task list."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * @param index the index of the task to be removed"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * @throws IndexOutOfBoundsException if index specified \u003e list size"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    public void remove(int index) throws IndexOutOfBoundsException {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        this.tasks.remove(index);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "atharvjoshi": 80
    }
  },
  {
    "path": "src/test/java/tasks/ToDoTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "package tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "class ToDoTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    void todoToStringTest() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        Todo testTask \u003d new Todo(\"eat banana\", false);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        String testTaskDescription \u003d testTask.toString();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        assertEquals(\"T-N-eat banana\", testTaskDescription);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    void todoIsDoneTest() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        Todo toBeDone \u003d new Todo(\"run in circles\", false);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        boolean isTestTaskDone \u003d toBeDone.setTaskAsDone(true);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        assertTrue(isTestTaskDone);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        isTestTaskDone \u003d toBeDone.setTaskAsDone(false);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        assertFalse(isTestTaskDone);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "atharvjoshi": 26
    }
  },
  {
    "path": "src/test/java/util/TaskListTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "package util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "import tasks.Todo;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "class TaskListTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    void isEmptyTest() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        TaskList emptyList \u003d new TaskList();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        int listSize \u003d emptyList.size();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        assertEquals(0, listSize);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        assertTrue(emptyList.isEmpty());"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    void addTest() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        TaskList testList \u003d new TaskList();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        boolean isAdded \u003d testList.add(new Todo(\"dummy\", false));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        assertTrue(isAdded);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "atharvjoshi": 24
    }
  }
]
