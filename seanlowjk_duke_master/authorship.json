[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    id \u0027org.openjfx.javafxplugin\u0027 version \u00270.0.7\u0027"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    id \u0027org.jetbrains.kotlin.jvm\u0027 version \u00271.3.50\u0027"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "javafx {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    version \u003d \"11.0.2\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    modules \u003d [ \u0027javafx.controls\u0027, \u0027javafx.fxml\u0027]"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    implementation \"org.jetbrains.kotlin:kotlin-stdlib-jdk8\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    compile \"org.openjfx:javafx-media:11.0.2\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "}"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "test {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "group \u0027duke\u0027"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    archiveVersion \u003d \"0.1.3\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    // Change this to your main class."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    mainClassName \u003d \"Launcher\""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "compileKotlin {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    kotlinOptions {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        jvmTarget \u003d \"1.8\""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "}"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "compileTestKotlin {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    kotlinOptions {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        jvmTarget \u003d \"1.8\""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanlowjk": 48,
      "-": 14
    }
  },
  {
    "path": "gradlew.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@if \"%DEBUG%\" \u003d\u003d \"\" @echo off"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "@rem ##########################################################################"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "@rem  Gradle startup script for Windows"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "@rem ##########################################################################"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Set local scope for the variables with windows NT shell"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%OS%\"\u003d\u003d\"Windows_NT\" setlocal"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "set DIRNAME\u003d%~dp0"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%DIRNAME%\" \u003d\u003d \"\" set DIRNAME\u003d."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "set APP_BASE_NAME\u003d%~n0"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "set APP_HOME\u003d%DIRNAME%"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "set DEFAULT_JVM_OPTS\u003d\"-Xmx64m\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Find java.exe"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "if defined JAVA_HOME goto findJavaFromJavaHome"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "set JAVA_EXE\u003djava.exe"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "%JAVA_EXE% -version \u003eNUL 2\u003e\u00261"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%ERRORLEVEL%\" \u003d\u003d \"0\" goto init"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "echo."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "echo ERROR: JAVA_HOME is not set and no \u0027java\u0027 command could be found in your PATH."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "echo."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "echo Please set the JAVA_HOME variable in your environment to match the"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "echo location of your Java installation."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "goto fail"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ":findJavaFromJavaHome"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "set JAVA_HOME\u003d%JAVA_HOME:\"\u003d%"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "set JAVA_EXE\u003d%JAVA_HOME%/bin/java.exe"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "if exist \"%JAVA_EXE%\" goto init"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "echo."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "echo."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "echo Please set the JAVA_HOME variable in your environment to match the"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "echo location of your Java installation."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "goto fail"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ":init"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Get command-line arguments, handling Windows variants"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "if not \"%OS%\" \u003d\u003d \"Windows_NT\" goto win9xME_args"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ":win9xME_args"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Slurp the command line arguments."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "set CMD_LINE_ARGS\u003d"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "set _SKIP\u003d2"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ":win9xME_args_slurp"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "if \"x%~1\" \u003d\u003d \"x\" goto execute"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "set CMD_LINE_ARGS\u003d%*"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ":execute"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Setup the command line"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "set CLASSPATH\u003d%APP_HOME%\\gradle\\wrapper\\gradle-wrapper.jar"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Execute Gradle"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "\"%JAVA_EXE%\" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% \"-Dorg.gradle.appname\u003d%APP_BASE_NAME%\" -classpath \"%CLASSPATH%\" org.gradle.wrapper.GradleWrapperMain %CMD_LINE_ARGS%"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ":end"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "@rem End local scope for the variables with windows NT shell"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%ERRORLEVEL%\"\u003d\u003d\"0\" goto mainEnd"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ":fail"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "rem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "rem the _cmd.exe /c_ return code!"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "if  not \"\" \u003d\u003d \"%GRADLE_EXIT_CONSOLE%\" exit 1"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "exit /b 1"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ":mainEnd"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%OS%\"\u003d\u003d\"Windows_NT\" endlocal"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ":omega"
      }
    ],
    "authorContributionMap": {
      "seanlowjk": 1,
      "-": 83
    }
  },
  {
    "path": "src/main/java/DialogBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import javafx.scene.shape.Circle;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": " * An example of a custom control using FXML."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": " * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": " * containing text from the speaker."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    private DialogBox(String text, Image img) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        setMinHeight(Region.USE_PREF_SIZE);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        displayPicture.setImage(img);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        Circle clip \u003d new Circle(50, 50, 50);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        displayPicture.setClip(clip);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        Collections.reverse(tmp);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Gets a string and an image and returns a Dialog Bax based on user input."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @param text The specified user input."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @param img The specified user image."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @return A dialog box with the specific string and image."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public static DialogBox getUserDialog(String text, Image img) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        return new DialogBox(text, img);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Gets a string and an image and returns a Dialog Bax based on duke input."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @param text The specified duke input."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @param img The specified duke image."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @return A dialog box with the specific string and image."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public static DialogBox getDukeDialog(String text, Image img) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        var db \u003d new DialogBox(text, img);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanlowjk": 76
    }
  },
  {
    "path": "src/main/java/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import duke.command.EndCommand;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import duke.parser.DataParser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import duke.parser.DateParser;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": " * Main Class of the Application, which requires the workings of all packages."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Represents the reader and the writer for the output text file."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Represents the list of tasks stored in the application."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    private TaskList taskList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Represents the interface which handles user input and interactions."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Parses out the user input for ui recognition."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    private DataParser parser;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Parses out the date to a readable format for the ui."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    private DateParser dateHelper;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Represents if the boolean has terminated or not."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    protected boolean hasTerminated;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        new Duke().run();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Creates a new Duke class which contains all packages to process user input and file input."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * If no file is found, a new task list is created instead."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * If a file is found, data is retrieved from the file."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public Duke() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        parser \u003d new DataParser();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        dateHelper \u003d new DateParser();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        hasTerminated \u003d false;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        storage \u003d new Storage(\"data/tasks.txt\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            taskList \u003d new TaskList(storage.load());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            ui.showLoadingError();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Main Logic of the Code, which runs based on user input given by the parsers."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Continues to create and execute commands till there is no more user input left."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        ui.sendGreeting();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        while (!hasTerminated) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            if (!parser.hasAnymoreData()) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "                parser.readInput();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "                Command c \u003d parser.findTaskCommand();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "                hasTerminated \u003d c.checkIfExit();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "                c.execute(taskList, ui, storage, parser, dateHelper);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            } catch (AssertionError e) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "                ui.sendErrorMessage(e);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            } catch (DukeException error) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "                ui.sendErrorMessage(error);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        ui.sendFarewell();;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Checks if the storage file is present in the storage or not."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @return false if the storage file is absent."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    protected boolean isStoragePresent() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        return storage.hasStorage();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     *  Takes in a input and returns a response which duke says."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @param input the input received from the user."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @return a response in the form of a String."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    protected String getResponse(String input) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        if (hasTerminated) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            return \".\";"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        ui.reset();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            parser.readInput(input);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            Command c \u003d parser.findTaskCommand();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            if (c instanceof EndCommand) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "                hasTerminated \u003d true;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            c.execute(taskList, ui, storage, parser, dateHelper);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            return ui.print();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        } catch (AssertionError e) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            ui.sendErrorMessage(e);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            return ui.print();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        } catch (DukeException error) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            ui.sendErrorMessage(error);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            return ui.print();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanlowjk": 121,
      "-": 5
    }
  },
  {
    "path": "src/main/java/Launcher.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": " * A launcher class to workaround classpath issues."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        Application.launch(Main.class, args);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanlowjk": 10
    }
  },
  {
    "path": "src/main/java/Main.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": " * A GUI for Duke using FXML."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "public class Main extends Application {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    private Duke duke \u003d new Duke();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            AnchorPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            Scene scene \u003d new Scene(ap);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            stage.setTitle(\"Martin\u0027s Todo Helper\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            stage.getIcons().add(new Image(this.getClass().getResourceAsStream(\"/images/martinicon.png\")));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            stage.setResizable(false);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanlowjk": 34
    }
  },
  {
    "path": "src/main/java/MainWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": " * Controller for MainWindow. Provides the layout for the other controls."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "public class MainWindow extends AnchorPane {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    private Duke duke;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/Martin.png\"));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Initializes the window with a greeting dialog box."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "                DialogBox.getDukeDialog(\"Please include the data folder in the same directory \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "                        + \"as this jar file for storage processing!\", dukeImage),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "                DialogBox.getDukeDialog(\"Hello! Martin here!\\nWhat can I do?\", dukeImage)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        );"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Sets the duke class required for the main to the specific duke instance."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @param d The specified duke instance."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public void setDuke(Duke d) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        duke \u003d d;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Follwong which, appends them to the dialog container."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Clears the user input after processing."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        String in \u003d userInput.getText();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        String out \u003d duke.getResponse(in);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        if (out.equals(\".\")) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            System.exit(0);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            if (duke.isStoragePresent()) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "                dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "                        DialogBox.getUserDialog(in, userImage),"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "                        DialogBox.getDukeDialog(out, dukeImage)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "                );"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "                dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "                        DialogBox.getUserDialog(in, userImage),"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "                        DialogBox.getDukeDialog(\"Please include the data folder in the same directory \""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "                                + \"as this jar file for storage processing!\", dukeImage),"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "                        DialogBox.getDukeDialog(out, dukeImage)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "                );"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            userInput.clear();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanlowjk": 76
    }
  },
  {
    "path": "src/main/java/duke/command/AddDeadlineTaskCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import duke.parser.DataParser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import duke.parser.DateParser;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": " * Represents a Command to add a Deadline Task to the list of tasks."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "public class AddDeadlineTaskCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Constructs a new Command where it does not terminate the Duke Application."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public AddDeadlineTaskCommand() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        super(false);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Executes the specific command based on the type of the command."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * In this case, it adds a new Deadline Task to the TaskList, if there are less than 101 tasks."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @param taskList The List of tasks involved."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @param ui The Interface which deals with user input and interaction."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @param storage The storage to load and save task data into the output file."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @param dataParser Parses user and task data."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @param dateParser Parser date data."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @throws DukeException If there is a problem with data processing, loading or saving."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public void execute(TaskList taskList, Ui ui, Storage storage,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "                        DataParser dataParser, DateParser dateParser) throws DukeException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assert (!TaskList.hasHitTaskLimit()) : \"OOPS! You can only have up to 100 tasks!\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        String[] deadlineData \u003d dataParser.parseDeadlineData();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        dateParser.readInput(deadlineData[1]);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        String dateOutput \u003d dateParser.convertDateToString();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        String nameOutput \u003d deadlineData[0];"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        int taskIndex \u003d taskList.addDeadlineTask(nameOutput, dateOutput);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        ui.showAddedTask(TaskList.getTask(taskIndex));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        storage.save();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Returns a String representation for user guidance."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @return a String representation for user guidance."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        String helper \u003d \"Add a deadline task: \\ndeadline \u003ctaskname\u003e /by \u003cDD/MM/YYYY\u003e \u003chhmm\u003e\\n\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        return helper;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanlowjk": 53
    }
  },
  {
    "path": "src/main/java/duke/command/AddEventTaskCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import duke.parser.DataParser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import duke.parser.DateParser;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": " * Represents a Command to add a ToDo Task to the list of tasks."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "public class AddEventTaskCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Constructs a new Command where it does not terminate the Duke Application."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public AddEventTaskCommand() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        super(false);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Executes the specific command based on the type of the command."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * In this case, it adds a new Event Task to the TaskList, if there are less than 101 tasks."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @param taskList The List of tasks involved."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @param ui The Interface which deals with user input and interaction."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @param storage The storage to load and save task data into the output file."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @param dataParser Parses user and task data."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @param dateParser Parser date data."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @throws DukeException If there is a problem with data processing, loading or saving."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public void execute(TaskList taskList, Ui ui, Storage storage,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "                        DataParser dataParser, DateParser dateParser) throws DukeException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assert (!TaskList.hasHitTaskLimit()) : \"OOPS! You can only have up to 100 tasks!\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        String[] eventData \u003d dataParser.parseEventDate();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        dateParser.readInput(eventData[1]);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        String dateOutput \u003d dateParser.convertDateToString();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        String nameOutput \u003d eventData[0];"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        int taskIndex \u003d taskList.addEventTask(nameOutput, dateOutput);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        ui.showAddedTask(TaskList.getTask(taskIndex));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        storage.save();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Returns a String representation for user guidance."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @return a String representation for user guidance."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        String helper \u003d \"Adds an event task: \\nevent \u003ctaskname\u003e /at \u003cDD/MM/YYYY\u003e \u003chhmm\u003e\\n\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        return helper;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanlowjk": 53
    }
  },
  {
    "path": "src/main/java/duke/command/AddTagCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import duke.parser.DataParser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import duke.parser.DateParser;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import duke.parser.TagParser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": " * Represents a Command to add a tag to a specific task."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "public class AddTagCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Constructs a new Command where it does not terminate the Duke Application."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public AddTagCommand() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        super(false);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Executes the specific command based on the type of the command."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * In this case, it adds a tag to a Task."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @param taskList The List of tasks involved."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @param ui The Interface which deals with user input and interaction."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @param storage The storage to load and save task data into the output file."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @param dataParser Parses user and task data."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @param dateParser Parser date data."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @throws DukeException If there is a problem with data processing, loading or saving."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public void execute(TaskList taskList, Ui ui, Storage storage,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "                        DataParser dataParser, DateParser dateParser) throws DukeException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        String[] tagData \u003d dataParser.parseTagData();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        TagParser tagParser \u003d new TagParser();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        tagParser.createTag(tagData);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        Task task \u003d taskList.addTag(tagParser.getIndex(), tagParser.getTag());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        ui.showTaggedTask(task);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        storage.save();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Returns a String representation for user guidance."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @return a String representation for user guidance."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        String helper \u003d \"Adds a tag to a task: \\ntag \u003ctasknumber\u003e \u003ctag\u003e\\n\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        return helper;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanlowjk": 53
    }
  },
  {
    "path": "src/main/java/duke/command/AddToDoTaskCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import duke.parser.DataParser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import duke.parser.DateParser;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": " * Represents a Command to add a ToDo Task to the list of tasks."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "public class AddToDoTaskCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Constructs a new Command where it does not terminate the Duke Application."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public AddToDoTaskCommand() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        super(false);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Executes the specific command based on the type of the command."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * In this case, it adds a new ToDo Task to the TaskList, if there are less than 101 tasks."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @param taskList The List of tasks involved."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @param ui The Interface which deals with user input and interaction."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @param storage The storage to load and save task data into the output file."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @param dataParser Parses user and task data."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @param dateParser Parser date data."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @throws DukeException If there is a problem with data processing, loading or saving."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public void execute(TaskList taskList, Ui ui, Storage storage,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "                        DataParser dataParser, DateParser dateParser) throws DukeException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assert (!TaskList.hasHitTaskLimit()) : \"OOPS!!! You can only have up to 100 tasks!\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        String[] toDoData \u003d dataParser.parseToDoData();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        int taskIndex \u003d taskList.addTodoTask(toDoData);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        ui.showAddedTask(TaskList.getTask(taskIndex));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        storage.save();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Returns a String representation for user guidance."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @return a String representation for user guidance."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        String helper \u003d \"Adds a todo task: \\ntodo \u003ctaskname\u003e\\n\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        return helper;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanlowjk": 50
    }
  },
  {
    "path": "src/main/java/duke/command/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import duke.parser.DataParser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import duke.parser.DateParser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": " * Represents a Command to be executed during the running of the Duke Application."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    private boolean isExit;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Constructs a new Command where it does not terminate the Duke Application."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @param isExit Represents whether the Application should terminate or not."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public Command(boolean isExit) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        this.isExit \u003d  isExit;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Gets all the commands available."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @return a list of all commands available."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public static ArrayList\u003cCommand\u003e getAllCommands() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        ArrayList\u003cCommand\u003e commands \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        commands.add(new AddDeadlineTaskCommand());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        commands.add(new AddEventTaskCommand());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        commands.add(new AddTagCommand());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        commands.add(new AddToDoTaskCommand());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        commands.add(new CompleteTaskCommand());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        commands.add(new DeleteTaskCommand());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        commands.add(new EditTaskDateCommand());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        commands.add(new EditTaskNameCommand());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        commands.add(new EndCommand());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        commands.add(new FindTaggedTaskCommand());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        commands.add(new FindTaskCommand());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        commands.add(new ListCommandsCommand());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        commands.add(new ListTaskCommand());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        return commands;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Checks if the command signals the exit of a program or not."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @return whether the exit signal is given or not."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public boolean checkIfExit() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        return this.isExit;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Executes the specific command based on the type of the command."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @param taskList The List of tasks involved."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @param ui The Interface which deals with user input and interaction."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @param storage The storage to load and save task data into the output file."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @param dataParser Parses user and task data."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @param dateParser Parser date data."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @throws DukeException If there is a problem with data processing, loading or saving."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public abstract void execute(TaskList taskList, Ui ui, Storage storage,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "                        DataParser dataParser, DateParser dateParser) throws DukeException;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanlowjk": 69
    }
  },
  {
    "path": "src/main/java/duke/command/CompleteTaskCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import duke.parser.DataParser;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import duke.parser.DateParser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": " * Represents a Command to complete one single task."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "public class CompleteTaskCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Constructs a new Command where it does not terminate the Duke Application."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public CompleteTaskCommand() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        super(false);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Executes the specific command based on the type of the command."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * In this case, it completes a task by setting the completion to true."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @param taskList The List of tasks involved."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @param ui The Interface which deals with user input and interaction."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @param storage The storage to load and save task data into the output file."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @param dataParser Parses user and task data."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @param dateParser Parser date data."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @throws DukeException If there is a problem with data processing, loading or saving."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public void execute(TaskList taskList, Ui ui, Storage storage,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "                        DataParser dataParser, DateParser dateParser) throws DukeException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        int taskIndex \u003d dataParser.getTaskIndex();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        taskList.completeTask(taskIndex);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        ui.showCompletedTask(TaskList.getTask(taskIndex));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        storage.save();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Returns a String representation for user guidance."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @return a String representation for user guidance."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        String helper \u003d \"Completes a Task: \\ndone \u003ctasknumber\u003e\\n\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        return helper;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanlowjk": 49
    }
  },
  {
    "path": "src/main/java/duke/command/DeleteTaskCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import duke.parser.DataParser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import duke.parser.DateParser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": " * Represents a Command to delete one single task."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "public class DeleteTaskCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Constructs a new Command where it does not terminate the Duke Application."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public DeleteTaskCommand() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        super(false);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Executes the specific command based on the type of the command."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * In this case, it deletes a task by retrieving its index and removing it from TaskList."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @param taskList The List of tasks involved."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @param ui The Interface which deals with user input and interaction."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @param storage The storage to load and save task data into the output file."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @param dataParser Parses user and task data."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @param dateParser Parser date data."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @throws DukeException If there is a problem with data processing, loading or saving."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public void execute(TaskList taskList, Ui ui, Storage storage,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "                        DataParser dataParser, DateParser dateParser) throws DukeException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        int taskIndex \u003d dataParser.getTaskIndex();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        Task deletedTask \u003d taskList.deleteTask(taskIndex);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        ui.showDeletedTask(deletedTask);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        storage.save();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Returns a String representation for user guidance."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @return a String representation for user guidance."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        String helper \u003d \"Deletes a task from the list: \\ndelete \u003ctasknumber\u003e\\n\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        return helper;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanlowjk": 49
    }
  },
  {
    "path": "src/main/java/duke/command/EditTaskDateCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import duke.parser.DataParser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import duke.parser.DateParser;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": " * Represents a Command that edits the task date."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "public class EditTaskDateCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Constructs a new Command where it does not terminate the Duke Application."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public EditTaskDateCommand() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        super(false);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Executes the specific command based on the type of the command."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * In this case, it edits the task date."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @param taskList The List of tasks involved."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @param ui The Interface which deals with user input and interaction."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @param storage The storage to load and save task data into the output file."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @param dataParser Parses user and task data."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @param dateParser Parser date data."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @throws DukeException If there is a problem with data processing, loading or saving."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public void execute(TaskList taskList, Ui ui, Storage storage,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "                        DataParser dataParser, DateParser dateParser) throws DukeException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        String[] newTaskData \u003d dataParser.parseEditTaskNameData();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        Task task \u003d taskList.editSpecificTaskDate(newTaskData);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        ui.showEditedTask(task);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        storage.save();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Returns a String representation for user guidance."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @return a String representation for user guidance."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        String helper \u003d \"Edits a Task Date: \\nedit date \u003ctasknumber\u003e \u003cDD/MM/YYYY\u003e \u003chhmm\u003e\\n\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        return helper;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanlowjk": 48
    }
  },
  {
    "path": "src/main/java/duke/command/EditTaskNameCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import duke.parser.DataParser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import duke.parser.DateParser;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": " * Represents a Command that edits the task name."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "public class EditTaskNameCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Constructs a new Command where it does not terminate the Duke Application."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public EditTaskNameCommand() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        super(false);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Executes the specific command based on the type of the command."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * In this case, it edits the task name."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @param taskList The List of tasks involved."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @param ui The Interface which deals with user input and interaction."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @param storage The storage to load and save task data into the output file."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @param dataParser Parses user and task data."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @param dateParser Parser date data."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @throws DukeException If there is a problem with data processing, loading or saving."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public void execute(TaskList taskList, Ui ui, Storage storage,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "                        DataParser dataParser, DateParser dateParser) throws DukeException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        String[] newTaskData \u003d dataParser.parseEditTaskNameData();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        Task task \u003d taskList.editSpecificTaskName(newTaskData);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        ui.showEditedTask(task);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        storage.save();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Returns a String representation for user guidance."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @return a String representation for user guidance."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        String helper \u003d \"Edits a Task Name: \\nedit name \u003ctasknumber\u003e \u003cnewtaskname\u003e\\n\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        return helper;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanlowjk": 48
    }
  },
  {
    "path": "src/main/java/duke/command/EndCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import duke.parser.DataParser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import duke.parser.DateParser;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": " * Represents a Command to end the reading of user input and data."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "public class EndCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Constructs a new Command where it does terminate the Duke Application."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public EndCommand() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        super(true);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Executes the specific command based on the type of the command."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * In this case, what it does is to signal the end of input processing."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @param taskList The List of tasks involved."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @param ui The Interface which deals with user input and interaction."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @param storage The storage to load and save task data into the output file."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @param dataParser Parses user and task data."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @param dateParser Parser date data."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @throws DukeException If there is a problem with data processing, loading or saving."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public void execute(TaskList taskList, Ui ui, Storage storage,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "                        DataParser dataParser, DateParser dateParser) throws DukeException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        ui.sendFarewell();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Returns a String representation for user guidance."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @return a String representation for user guidance."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        String helper \u003d \"Ends the program: \\nbye\\n\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        return helper;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanlowjk": 45
    }
  },
  {
    "path": "src/main/java/duke/command/FindTaggedTaskCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import duke.parser.DataParser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import duke.parser.DateParser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": " * Represents a Command find matching tasks based on a specific tag."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "public class FindTaggedTaskCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Constructs a new Command where it does not terminate the Duke Application."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public FindTaggedTaskCommand() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        super(false);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Executes the specific command based on the type of the command."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * In this case, it finds matching tasks which contain a specific tag."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @param taskList The List of tasks involved."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @param ui The Interface which deals with user input and interaction."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @param storage The storage to load and save task data into the output file."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @param dataParser Parses user and task data."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @param dateParser Parser date data."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @throws DukeException If there is a problem with data processing, loading or saving."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public void execute(TaskList taskList, Ui ui, Storage storage,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "                        DataParser dataParser, DateParser dateParser) throws DukeException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        String keyword \u003d dataParser.findTag();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        ArrayList\u003cInteger\u003e taskIndexes \u003d taskList.findMatchingTaggedTasks(keyword);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        ui.showMatchingTasks(taskIndexes);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Returns a String representation for user guidance."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @return a String representation for user guidance."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        String helper \u003d \"Find Tasks with a tag: \\nfindTag \u003ctag\u003e\\n\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        return helper;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanlowjk": 49
    }
  },
  {
    "path": "src/main/java/duke/command/FindTaskCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import duke.parser.DataParser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import duke.parser.DateParser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": " * Represents a Command find matching tasks based on a specific keyword."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "public class FindTaskCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Constructs a new Command where it does not terminate the Duke Application."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public FindTaskCommand() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        super(false);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Executes the specific command based on the type of the command."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * In this case, it finds matching tasks which contain a specific keyword."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @param taskList The List of tasks involved."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @param ui The Interface which deals with user input and interaction."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @param storage The storage to load and save task data into the output file."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @param dataParser Parses user and task data."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @param dateParser Parser date data."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @throws DukeException If there is a problem with data processing, loading or saving."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public void execute(TaskList taskList, Ui ui, Storage storage,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "                        DataParser dataParser, DateParser dateParser) throws DukeException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        String keyword \u003d dataParser.findKeyWord();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        ArrayList\u003cInteger\u003e taskIndexes \u003d taskList.findMatchingTasks(keyword);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        ui.showMatchingTasks(taskIndexes);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Returns a String representation for user guidance."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @return a String representation for user guidance."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        String helper \u003d \"Finds tasks with a keyword\\nfind \u003ckeyword\u003e\\n\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        return helper;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanlowjk": 48
    }
  },
  {
    "path": "src/main/java/duke/command/ListCommandsCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import duke.parser.DataParser;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import duke.parser.DateParser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": " * Represents a Command to list all commands available."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "public class ListCommandsCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Constructs a new Command where it does not terminate the Duke Application."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public ListCommandsCommand() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        super(false);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Executes the specific command based on the type of the command."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * In this case, it asks the ui to list all the comamnds available."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @param taskList The List of tasks involved."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @param ui The Interface which deals with user input and interaction."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @param storage The storage to load and save task data into the output file."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @param dataParser Parses user and task data."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @param dateParser Parser date data."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @throws DukeException If there is a problem with data processing, loading or saving."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public void execute(TaskList taskList, Ui ui, Storage storage,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "                        DataParser dataParser, DateParser dateParser) throws DukeException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        ui.listCommands();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Returns a String representation for user guidance."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @return a String representation for user guidance."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        String helper \u003d \"List all commands: \\nhelp\\n\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        return helper;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanlowjk": 45
    }
  },
  {
    "path": "src/main/java/duke/command/ListTaskCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import duke.parser.DataParser;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import duke.parser.DateParser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": " * Represents a Command to list all tasks in the TaskList."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "public class ListTaskCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Constructs a new Command where it does not terminate the Duke Application."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public ListTaskCommand() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        super(false);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Executes the specific command based on the type of the command."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * In this case, it asks the ui to list all the tasks found in the TaskList, if any."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @param taskList The List of tasks involved."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @param ui The Interface which deals with user input and interaction."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @param storage The storage to load and save task data into the output file."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @param dataParser Parses user and task data."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @param dateParser Parser date data."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @throws DukeException If there is a problem with data processing, loading or saving."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public void execute(TaskList taskList, Ui ui, Storage storage,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "                        DataParser dataParser, DateParser dateParser) throws DukeException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        ui.listTasks();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Returns a String representation for user guidance."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @return a String representation for user guidance."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        String helper \u003d \"List all tasks: \\nlist\\n\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        return helper;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanlowjk": 45
    }
  },
  {
    "path": "src/main/java/duke/exception/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": " * Represents an Exception which is thrown during the running of the Duke Application."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanlowjk": 7
    }
  },
  {
    "path": "src/main/java/duke/exception/InvalidDateInputException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": " * Represents the Exception to be thrown when the date given is not of proper format."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "public class InvalidDateInputException extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    private String message;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public InvalidDateInputException(String message) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        this.message \u003d message;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        return \"OOPS!!! \" + this.message;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanlowjk": 17
    }
  },
  {
    "path": "src/main/java/duke/exception/InvalidDeadlineException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": " * Represents an exception to be thrown when the name or the date of the Deadline Task is not given or valid."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "public class InvalidDeadlineException extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public String message;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public InvalidDeadlineException(String message) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        this.message \u003d message;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        return \"OOPS!!! \" + message;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanlowjk": 18
    }
  },
  {
    "path": "src/main/java/duke/exception/InvalidEditTaskException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": " * Represents an exception to be thrown when the data given to edit the task is invalid."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "public class InvalidEditTaskException extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public String message;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public InvalidEditTaskException(String message) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        this.message \u003d message;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        return \"OOPS!!! \" + message;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanlowjk": 16
    }
  },
  {
    "path": "src/main/java/duke/exception/InvalidEventException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": " * Represents an exception to be thrown when the name or the date of the Event Task is not given or valid."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "public class InvalidEventException extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public String message;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public InvalidEventException(String message) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        this.message \u003d message;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        return \"OOPS!!! \" + message;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanlowjk": 18
    }
  },
  {
    "path": "src/main/java/duke/exception/InvalidKeywordException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "public class InvalidKeywordException extends DukeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        return \"OOPS!!! Please key in a valid keyword!\";"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanlowjk": 9
    }
  },
  {
    "path": "src/main/java/duke/exception/InvalidTagException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": " * Represents the Exception to be thrown when the tag or index given is invalid or not given."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "public class InvalidTagException extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    private String message;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public InvalidTagException(String message) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        this.message \u003d message;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        return \"OOPS!!! \" + this.message;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanlowjk": 16
    }
  },
  {
    "path": "src/main/java/duke/exception/InvalidTaskIndexException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": " * Rerpresents an Exception to be thrown when an invalid task index has been given."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "public class InvalidTaskIndexException extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        return \"OOPS!!! Please key in a valid task index!\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanlowjk": 12
    }
  },
  {
    "path": "src/main/java/duke/exception/InvalidToDoException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": " * Represents an Exception that is thrown when the name of the ToDo Task is not given or valid."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "public class InvalidToDoException extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        return \"OOPS!!! The description of a todo cannot be empty\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanlowjk": 12
    }
  },
  {
    "path": "src/main/java/duke/exception/UnknownCommandException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": " * Represents an Exception that is thrown when the input does not result in the execution of a command."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "public class UnknownCommandException extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        return \"OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanlowjk": 12
    }
  },
  {
    "path": "src/main/java/duke/parser/DataParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "package duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import duke.command.AddDeadlineTaskCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import duke.command.AddEventTaskCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import duke.command.AddTagCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import duke.command.AddToDoTaskCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import duke.command.CompleteTaskCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import duke.command.DeleteTaskCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import duke.command.EditTaskDateCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import duke.command.EditTaskNameCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import duke.command.EndCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import duke.command.FindTaggedTaskCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import duke.command.FindTaskCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import duke.command.ListCommandsCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import duke.command.ListTaskCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import duke.exception.InvalidDeadlineException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import duke.exception.InvalidEditTaskException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import duke.exception.InvalidEventException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import duke.exception.InvalidKeywordException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import duke.exception.InvalidTagException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import duke.exception.InvalidTaskIndexException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import duke.exception.InvalidToDoException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import duke.exception.UnknownCommandException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": " * Represents a Data Parser to parse in all user input provided."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "public class DataParser {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    private Scanner sc;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    private String input;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Constructs a new DataParser to read in the user input."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public DataParser() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        this.sc \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        this.input \u003d \"\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * To check the user has anymore data left unread."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * If there is anymore data left unread, return true."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @return Returns true if there is data left unread."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public boolean hasAnymoreData() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        return sc.hasNextLine();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Reads the input line."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public void readInput() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        this.input \u003d sc.nextLine();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Reads the given input line."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @param input The given input line."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public void readInput(String input) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        this.input \u003d input;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Parses the User Input data and returns a Command based on the first word given by the user."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Inputs should start with \"bye\", \"delete\", \"done\" etc."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @return A Command based on the user input."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @throws DukeException If the user input is invalid."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public Command findTaskCommand() throws DukeException {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        if (shouldEndParsing()) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            return new EndCommand();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        } else if (shouldListTasks()) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            return new ListTaskCommand();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        } else if (shouldCompleteTask()) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            return new CompleteTaskCommand();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        } else if (shouldDeleteTask()) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            return new DeleteTaskCommand();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        } else if (shouldAddToDoTask()) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            return new AddToDoTaskCommand();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        } else if (shouldAddDeadlineTask()) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            return new AddDeadlineTaskCommand();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        } else if (shouldAddEventTask()) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            return new AddEventTaskCommand();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        } else if (shouldFindTask()) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            return new FindTaskCommand();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        } else if (shouldTagTask()) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            return new AddTagCommand();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        } else if (isNotProperEditCommand()) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            throw new UnknownCommandException();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        } else if (shouldEditTaskName()) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            return new EditTaskNameCommand();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        } else if (shouldEditTaskDate()) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            return new EditTaskDateCommand();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        } else if (shouldFindTaggedTask()) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            return new FindTaggedTaskCommand();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        } else if (shouldListCommands()) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            return new ListCommandsCommand();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            throw new UnknownCommandException();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Returns the Index of the Task involved from the user input."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @return The Index of the Task."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @throws InvalidTaskIndexException If no index or invalid index is provided."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public int getTaskIndex() throws InvalidTaskIndexException {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        String[] parsedData \u003d input.split(\" \");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        if (parsedData.length \u003c 2) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            throw new InvalidTaskIndexException();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            String index \u003d parsedData[1];"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            int taskIndex \u003d Integer.parseInt(index) - 1;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            return taskIndex;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Checks if the data given represents a task with no name."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @param data The data provided by the user input."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @return Returns false if the data provided gives a name for the task."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public boolean isEmptyData(String data) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        return data.equals(\"\");"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Checks if the data given does not provide the name to edit the task."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @param data the data provided by the user input."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @return false if the data provided does not give a name to edit the task."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public boolean isNewNameMissing(String data) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        return data.split(\" \").length \u003d\u003d 1;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Checks if the data given does not provide the date to edit the task."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @param data the data provided by the user input."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @return false if the data provided does not give a date to edit the task."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public boolean isNewDateMissing(String data) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        return data.split(\" \").length \u003c\u003d 1;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Checks if the data given does not provide the time to edit the task."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @param data the data provided by the user input."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @return false if the data provided does not give a time to edit the task."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public boolean isNewTimeMissing(String data) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        return data.split(\" \").length \u003c\u003d 2;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Checks if the data given represents an empty input or not."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @param data The data provided by the user input."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @return Returns false if the data provided gives a name for the task."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public boolean isEmptyInput(String data) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        return data.equals(\"\");"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Checks if the user has included the \"/by\" regex to allow parsing of the date for the Deadline Task."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @param data The data provided by the user input."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @return Returns false if the data provided does not contain the \"/by\" regex."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public boolean isDeadlineTaskValid(String data) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        return data.contains(\"/by\");"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Checks if the user has included the \"/att\" regex to allow parsing of the date for the Event Task."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @param data The data provided by the user input."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @return Returns false if the data provided does not contain the \"/at\" regex."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public boolean isEventTaskValid(String data) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        return data.contains(\"/at\");"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Checks if a name is given for the to do task."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @param data the to do data given."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @return if there is a name given."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    private boolean isTodoNameProvided(String[] data) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        return data.length \u003e\u003d 2;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    private boolean isNotProperEditCommand() {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        return input.trim().equals(\"edit\");"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Parses the user input to return the name of the ToDo Task."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @return the name of the ToDo Task."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @throws InvalidToDoException If the name of the task is not provided."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public String[] parseToDoData() throws InvalidToDoException, UnknownCommandException {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        String[] data \u003d this.input.split(\" \");"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        if (!isTodoNameProvided(data)) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            throw new InvalidToDoException();"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        return data;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Prases the input and returns the index and tag as an array of Strings."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @return an array of Strings providing the index and the tag in this order."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @throws InvalidTagException if no data is provided."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public String[] parseTagData() throws InvalidTagException {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        String tagData \u003d input.substring(4).trim();"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        if (isEmptyData(tagData)) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            throw new InvalidTagException(\"Please provide an index and a tag!\");"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        return tagData.split(\" \");"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Parses the edited task data based its name and given index."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @return an array containing the index and the new name of the task."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @throws InvalidEditTaskException if no name or index or invalid index is given."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public String[] parseEditTaskNameData() throws InvalidEditTaskException {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        String data \u003d this.input.substring(9).trim();"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        if (isEmptyInput(data) || isInvalidIndex(data)) {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            throw new InvalidEditTaskException(\"Please key in a valid index!\");"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        } else if (isNewNameMissing(data)) {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            throw new InvalidEditTaskException(\"Please key in a name!\");"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        return data.split(\" \");"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Parses the edited task data based its date and given index."
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @return an array containing the index and the new name of the task."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @throws InvalidEditTaskException if no name or index or invalid index is given."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public String[] parseEditTaskDateData() throws InvalidEditTaskException {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        String data \u003d this.input.substring(9).trim();"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        if (isEmptyInput(data) || isInvalidIndex(data)) {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            throw new InvalidEditTaskException(\"Please key in a valid index!\");"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        } else if (isNewDateMissing(data)) {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            throw new InvalidEditTaskException(\"Please key in a date!\");"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        } else if (isNewTimeMissing(data)) {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            throw new InvalidEditTaskException(\"Please key in a time!\");"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        return data.split(\" \");"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Checks if the data given is a valid index or not."
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @return true if the index is invalid"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    private boolean isInvalidIndex(String data) {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            Integer.parseInt(data.split(\" \")[0]);"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Parses the user input to return the name of the Deadline Task."
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @return the name and the date of the Deadline Task in the form of an array."
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @throws InvalidDeadlineException If the name or the date of the task is not provided."
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public String[] parseDeadlineData() throws InvalidDeadlineException {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        String data \u003d this.input.substring(8).trim();"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        if (isEmptyData(data)) {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            throw new InvalidDeadlineException(\"The description of a deadline cannot be empty.\");"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        } else if (!isDeadlineTaskValid(data)) {"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            throw new InvalidDeadlineException(\"Please include the time of a deadline.\");"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        String[] taskData \u003d data.split(\" /by \");"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        if (taskData.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            throw new InvalidDeadlineException(\"The time of a deadline cannot be empty.\");"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        return taskData;"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Parses the user input to return the name of the Event Task."
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @return the name and the date of the Event Task in the form of an array."
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @throws InvalidEventException If the name or the date of the task is not provided."
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public String[] parseEventDate() throws InvalidEventException {"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        String data \u003d this.input.substring(5).trim();"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        if (isEmptyData(data)) {"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            throw new InvalidEventException(\"The description of an event cannot be empty.\");"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        } else if (!isEventTaskValid(data)) {"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            throw new InvalidEventException(\"Please include the time of an event.\");"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        String[] taskData \u003d data.split(\" /at \");"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        if (taskData.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            throw new InvalidEventException(\"The time of an event cannot be empty.\");"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        return taskData;"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Checks if the user has given a keyword to find matching tasks."
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @param data the keyword data given."
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @return true if there is a keyword given."
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    private boolean hasKeyWord(String[] data) {"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        return data.length \u003e 1;"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Returns the keyword to start the search of matching tasks."
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @return the matching keyword."
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public String findKeyWord() throws InvalidKeywordException {"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        String[] data \u003d this.input.split(\" \");"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        if (!hasKeyWord(data)) {"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            throw new InvalidKeywordException();"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        if (isEmptyData(data[1])) {"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            throw new InvalidKeywordException();"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        return data[1];"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Returns the tag to start the search of matching tasks."
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @return the matching tag."
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public String findTag() throws InvalidKeywordException {"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        String[] data \u003d this.input.split(\" \");"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        if (!hasKeyWord(data)) {"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            throw new InvalidKeywordException();"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        if (isEmptyData(data[1])) {"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            throw new InvalidKeywordException();"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        return data[1];"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public boolean shouldEndParsing() {"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        return input.equals(\"bye\");"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Checks if the user input indicates that the tasks should be listed out."
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @return Returns true if input is \"list\"."
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public boolean shouldListTasks() {"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        return input.equals(\"list\");"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Checks if the user input wishes to complete a task."
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @return Returns true if the input starts with \"done\"."
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public boolean shouldCompleteTask() {"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        return input.split(\" \")[0].equals(\"done\");"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Checks if the user wishes to delete a task."
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @return True if the input starts with \"delete\"."
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public boolean shouldDeleteTask() {"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        return input.split(\" \")[0].equals(\"delete\");"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Checks if the user wishes to add a ToDo Task."
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @return True if the input starts with \"todo\"."
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public boolean shouldAddToDoTask() {"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        return input.split(\" \")[0].equals(\"todo\");"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Checks if the user wishes to add a Deadline Task."
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @return True if the input starts with \"deadline\"."
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public boolean shouldAddDeadlineTask() {"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        return input.split(\" \")[0].equals(\"deadline\");"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Checks if the user wishes to add an Event Task."
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @return True if the input starts with \"event\"."
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public boolean shouldAddEventTask() {"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        return input.split(\" \")[0].equals(\"evemt\");"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Checks if the user wishes to find a task based on a keyword."
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @return True if the input starts with \"find\"."
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public boolean shouldFindTask() {"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        return input.split(\" \")[0].equals(\"find\");"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Checks if the user wishes to find a task based on a tag."
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @return True if the input starts with \"findTag\"."
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public boolean shouldFindTaggedTask() {"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        return input.split(\" \")[0].equals(\"findTag\");"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Checks if the user wishes to tag a task."
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @return true if the input starts with \"tag\"."
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public boolean shouldTagTask() {"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        return input.split(\" \")[0].equals(\"tag\");"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Checks if the user wishes to edit the task name."
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @return true if the input starts with \"edit name\"."
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public boolean shouldEditTaskName() {"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        return input.split(\" \")[0].equals(\"edit\")"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "                \u0026\u0026 input.split(\" \")[1].equals(\"name\");"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Checks if the user wishes to edit a task date or not."
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @return true if the input starts with \"edit date\"."
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public boolean shouldEditTaskDate() {"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        return input.split(\" \")[0].equals(\"edit\")"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "                \u0026\u0026 input.split(\" \")[1].equals(\"date\");"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Checks if the user wishes to list the commands available."
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @return true if the input is \"help\"."
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    private boolean shouldListCommands() {"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        return input.equals(\"help\");"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanlowjk": 460
    }
  },
  {
    "path": "src/main/java/duke/parser/DateChecker.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "package duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": " * Represent a Checker to check the validity of the date provided by the user."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "public class DateChecker {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    private int year;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    private int month;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    private int day;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Constructs a new DateChecker based on the date data given."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @param dateData an array containing the year, month and day stores as strings."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public DateChecker(String[] dateData) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        this.day \u003d Integer.parseInt(dateData[0]);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        this.month \u003d Integer.parseInt(dateData[1]);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        this.year \u003d Integer.parseInt(dateData[2]);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Main method to check if the date given is invalid or not."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @return true if the date given contains an invalid year, month or day."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public boolean containsInvalidDate() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        return containsInvalidYear() || containsInvalidMonth()"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "                || containsInvalidDay()"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "                || containsInvalidDayInMonth();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Checks if the year given is invalid."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @return true if the year given is less than zero."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    private boolean containsInvalidYear() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        return year \u003c 0;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Checks if the month given is invalid."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @return true if the month given is less than 0 or greater than 12."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    private boolean containsInvalidMonth() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        return month \u003c 0 || month \u003e 12;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Checks if the day given is invalid."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @return true if the day given is less than 0 or greater than 31."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    private boolean containsInvalidDay() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        return day \u003c 0 || day \u003e 31;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Checks if the year given is a leap year."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @return true if the year can be divided by 4."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    private boolean isLeapYear() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        return year % 4 \u003d\u003d 0;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Checks if the day given fits in the month provided."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @return true if the day given is not a part of the month provided."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    private boolean containsInvalidDayInMonth() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        if (month \u003d\u003d 1 || month \u003d\u003d 3 || month \u003d\u003d 5 || month \u003d\u003d 7 || month \u003d\u003d 8"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "                || month \u003d\u003d 10 || month \u003d\u003d 12) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            return day \u003e 31;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        } else if (month \u003d\u003d 2) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            if (isLeapYear()) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "                return day \u003e 29;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "                return day \u003e 28;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            return day \u003e 30;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanlowjk": 81
    }
  },
  {
    "path": "src/main/java/duke/parser/DateParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "package duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import duke.exception.InvalidDateInputException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": " * Represents a Date Parser to parse in all String data given into a form readable by the user."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "public class DateParser {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    private SimpleDateFormat formatter \u003d new SimpleDateFormat(\"dd/MM/yyyy hhmm\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    private Date inputParser;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    private String input;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    private Calendar calendar \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    private DateChecker dateChecker;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    private TimeChecker timeChecker;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Reads the input and stores it in the parser."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @param input The input provided by the user."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public void readInput(String input) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        this.input \u003d input;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Reads the month (provided an integer) and returns it as a String."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * For example, 0 represents January, 1 represents February all the way until 11 represents December."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @param month The integer representation of the month."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @return The String representation of the month."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public String monthToString(int month) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        if (month \u003d\u003d 0) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            return \"January\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        } else if (month \u003d\u003d 1) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            return \"February\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        } else if (month \u003d\u003d 2) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            return \"March\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        } else if (month \u003d\u003d 3) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            return \"April\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        } else if (month \u003d\u003d 4) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            return \"May\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        } else if (month \u003d\u003d 5) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            return \"June\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        } else if (month \u003d\u003d 6) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            return \"July\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        } else if (month \u003d\u003d 7) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            return \"August\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        } else if (month \u003d\u003d 8) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            return \"September\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        } else if (month \u003d\u003d 9) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            return \"October\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        } else if (month \u003d\u003d 10) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            return \"November\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            return \"December\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Takes in an array of data which represents the day, month and year of the date."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Following which, checks if the day, month and year are valid."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @param dateData An array of data which contains the day, month and year of the date."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @throws InvalidDateInputException If the day, month or year is invalid."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    private void checkDateData(String[] dateData) throws InvalidDateInputException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        InvalidDateInputException error \u003d new InvalidDateInputException(\"Please key in a valid date in the format:\\n \""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "                + \"dd/MM/yyyy\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        dateChecker \u003d new DateChecker(dateData);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        if (dateChecker.containsInvalidDate()) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            throw error;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Takes in a String which represents the hour and the minutes."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Following which, check if the data is valid or not."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @param time A String representation of the time in the format \"hhmm\"."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @throws InvalidDateInputException If the hour or minutes is invalid."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    private void checkTimeData(String time) throws InvalidDateInputException {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        InvalidDateInputException error \u003d new InvalidDateInputException(\"Please key in \""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "                + \"a valid time in the format:\\n \""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "                + \"hhmm\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        timeChecker \u003d new TimeChecker(time);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        if (timeChecker.containsInvalidTime()) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            throw error;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Checks if the Date and Time are valid in general."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * This is done by splitting the Date and Time and checking them individually."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @throws InvalidDateInputException IF either the Date of Time is invalid."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    private void checkDateTime() throws InvalidDateInputException {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            String[] dateTime \u003d this.input.split(\" \");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            String[] dateData \u003d dateTime[0].split(\"/\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            checkDateData(dateData);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            checkTimeData(dateTime[1]);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        } catch (InvalidDateInputException error) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            throw error;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            throw new InvalidDateInputException(\"Please key in the date in this format:\\n dd/MM/yyyy hhmm\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Converts the time in \"hhmm\" format into a String."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * For example: \"1207\" is converted to \"12:07 pm\"."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @param hour The hour of the time."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @param minutes The minute of the time."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @param timeInString The String representation of the time in \"hhmm\" format to determine am or pm."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @return The String representation fot eh time in the format \"hh:mm pm\" or \"hh:mm am\"."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    private String timeToString(int hour, int minutes, String timeInString) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        if (hour \u003e 12) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            return String.format(\"%02d:%02d pm\", hour - 12, minutes);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        } else if (hour \u003e 0 \u0026\u0026 hour \u003c 12) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            return String.format(\"%02d:%02d am\", hour, minutes);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        } else if (timeInString.substring(0, 2).equals(\"12\")) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            return String.format(\"%02d:%02d pm\", hour + 12, minutes);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            return String.format(\"%02d:%02d am\", hour + 12, minutes);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Converts the date from \"dd/MM/yyyy\" into the format \"dd of mm yyyy\"."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @return The date in the format of \"dd of mm yyyy\"."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @throws InvalidDateInputException If the date, month or year is invalid."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public String convertDateToString() throws InvalidDateInputException {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        checkDateTime();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            inputParser \u003d formatter.parse(input);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            calendar.setTime(inputParser);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            int year \u003d calendar.get(Calendar.YEAR);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            String month \u003d monthToString(calendar.get(Calendar.MONTH));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            int day \u003d calendar.get(Calendar.DAY_OF_MONTH);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            int hour \u003d calendar.get(Calendar.HOUR_OF_DAY);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            int minutes \u003d calendar.get(Calendar.MINUTE);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            return String.format(\"%02d of %s %d %s\", day, month, year, timeToString(hour, minutes,"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "                    (input.split(\" \"))[1]));"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            throw new InvalidDateInputException(\"Please key in the date in this format:\\n dd/MM/yyyy hhmm\");"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanlowjk": 155
    }
  },
  {
    "path": "src/main/java/duke/parser/TagParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "package duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import duke.exception.InvalidTagException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import duke.exception.InvalidTaskIndexException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import duke.tag.Tag;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": " * Represents a Tag Parser to parse in the input to return the tag present."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "public class TagParser {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    private Tag tag;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Checks if the index given is of an integer or not."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @param ind the index given."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @return true if the index given is not an integer."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    private boolean isInvalidIndexGiven(String ind) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            Integer.parseInt(ind);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Checks if the tag given is valid."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @param data the array containing index and tag values."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @return false if more than one tag value is given."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    private boolean isValidTagGiven(String[] data) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        return data.length \u003e 2;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Checks if the index is given."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @param data the array containing index and tag values."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @return false if no index value is given."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    private boolean isIndexNotGiven(String[] data) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        return data.length \u003c 1;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    private boolean isTagNotGiven(String[] data) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        return data.length \u003d\u003d 1;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Creates the index and tag for the tag to be inserted into the task."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @param tagData the array containing tag and index values."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @throws InvalidTagException if the tag is not given or invalid."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @throws InvalidTaskIndexException if the task index is not given or valid."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public void createTag(String[] tagData) throws InvalidTagException, InvalidTaskIndexException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        if (isIndexNotGiven(tagData)) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            throw new InvalidTagException(\"Please key in an index!\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        } else if (isTagNotGiven(tagData)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            throw new InvalidTagException(\"Please key in a tag!\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        } else if (isValidTagGiven(tagData)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            throw new InvalidTagException(\"Please key in only one tag!\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        } else if (isInvalidIndexGiven(tagData[0])) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            throw new InvalidTagException(\"Please key in a valid index!\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            this.index \u003d Integer.parseInt(tagData[0]) - 1;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            if (isIndexOutOfBounds()) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "                throw new InvalidTaskIndexException();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            this.tag \u003d makeTag(tagData[1]);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    private boolean isIndexOutOfBounds() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        return this.index \u003c 0 || this.index \u003e TaskList.getNumberOfTasks();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Takes in a string an returns the tag, if valid."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @param input the input entered by the user."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @return a tag for the specified task."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    private Tag makeTag(String input) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        return new Tag(input);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Returns the index of the task to be given the tag to."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @return the index of the task."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public int getIndex() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        return this.index;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Retruns the tag of the task."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @return the tag of the task."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public Tag getTag() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        return this.tag;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanlowjk": 106
    }
  },
  {
    "path": "src/main/java/duke/parser/TimeChecker.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "package duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": " * Represent a Checker to check the validity of the time provided by the user."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "public class TimeChecker {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    private int hours;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    private int minutes;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    private String timeString;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Constructs a Time Checker which parses the hours and minutes ,"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * denoted by the string input."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @param timeData the time input represented as a String."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public TimeChecker(String timeData) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        this.timeString \u003d timeData;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        this.hours \u003d Integer.parseInt(timeData.substring(0, 2));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        this.minutes \u003d Integer.parseInt(timeData.substring(2));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Main method to check if the time given is valid or not."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @return true if the time given is invalid."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public boolean containsInvalidTime() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        return containsWrongFormat() || containsInvalidHour()"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "                || containsInvalidMinutes();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Checks if the String provided is in the correct format or not."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @return true if the number of characters is less than 4."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    private boolean containsWrongFormat() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        return timeString.length() !\u003d 4;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Checks if the hour provided is valid or not."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @return true if hour is less than 0 or greater than 24."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    private boolean containsInvalidHour() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        return hours \u003c 0 || hours \u003e 24;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Checks if the minute provided is valid or not."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @return true if the minutes are less than 0 or greater than 24."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    private boolean containsInvalidMinutes() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        return minutes \u003c 0 || minutes \u003e 59;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanlowjk": 55
    }
  },
  {
    "path": "src/main/java/duke/storage/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "package duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import java.io.FileReader;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import duke.tag.Tag;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import duke.task.DeadlineTask;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import duke.task.EventTask;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import duke.task.ToDoTask;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": " * Represents a Storage Class which loads and saves data to the output file."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    private BufferedReader reader;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    private FileWriter writer;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * The path of the output file."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    private String filepath;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * The list of the tasks to be uploaded or saved."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    private ArrayList\u003cTask\u003e tasks;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Creates a new Storage based on the filepath provided."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @param filepath the path of the file provided."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public Storage(String filepath) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        this.filepath \u003d filepath;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        this.tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Loads back the Deadline Task based on the task data loaded from the file."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @param task the data from the file."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public void addBackDeadlineTask(String task) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        String[] taskDetails \u003d task.split(\" / \");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        String completion \u003d taskDetails[1];"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        String nameOfTask \u003d taskDetails[2];"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        String deadline \u003d taskDetails[3];"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        String tag \u003d taskDetails[4];"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        if (completion.equals(\"Y\")) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            DeadlineTask theTask \u003d new DeadlineTask(nameOfTask, true, deadline);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            theTask.pushTag(new Tag(tag));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            tasks.add(theTask);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            DeadlineTask theTask \u003d new DeadlineTask(nameOfTask, true, deadline);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            theTask.pushTag(new Tag(tag));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            tasks.add(theTask);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Loads back the Event Task based on the task data loaded from the file."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @param task the data from the file."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public void addBackEventTask(String task) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        String[] taskDetails \u003d task.split(\" / \");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        String completion \u003d taskDetails[1];"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        String nameOfTask \u003d taskDetails[2];"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        String time \u003d taskDetails[3];"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        String tag \u003d taskDetails[4];"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        if (completion.equals(\"Y\")) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            EventTask theTask \u003d new EventTask(nameOfTask, true, time);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            theTask.pushTag(new Tag(tag));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            tasks.add(theTask);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            EventTask theTask \u003d new EventTask(nameOfTask, false, time);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            theTask.pushTag(new Tag(tag));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            tasks.add(theTask);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Loads back the ToDo Task based on the task data loaded from the file."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @param task the data from the file."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public void addBackToDoTask(String task) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        String[] taskDetails \u003d task.split(\" / \");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        String completion \u003d taskDetails[1];"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        String nameOfTask \u003d taskDetails[2];"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        String tag \u003d taskDetails[3];"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        if (completion.equals(\"Y\")) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            ToDoTask theTask \u003d new ToDoTask(nameOfTask, true);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            theTask.pushTag(new Tag(tag));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            tasks.add(theTask);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            ToDoTask theTask \u003d new ToDoTask(nameOfTask, false);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            theTask.pushTag(new Tag(tag));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            tasks.add(theTask);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Checks if the storage file is found or not."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @return false is the storage file is not found."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public boolean hasStorage() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            new FileWriter(filepath);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Loads all the data from the output file."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @return A list of Tasks loaded from the file."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public ArrayList\u003cTask\u003e load() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            reader \u003d new BufferedReader(new FileReader(filepath));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            String task;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            while ((task \u003d reader.readLine()) !\u003d null) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "                if (task.startsWith(\"D\")) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "                    addBackDeadlineTask(task);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "                } else if (task.startsWith(\"E\")) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "                    addBackEventTask(task);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "                    addBackToDoTask(task);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "                }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            reader.close();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            System.out.println(\"Please check if you have your data folder!\");"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        return tasks;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Saves all the tasks from the TaskList into the output file one by one."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public void save() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            writer \u003d new FileWriter(filepath);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            for (int i \u003d 0; i \u003c TaskList.getNumberOfTasks(); i++) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "                Task task \u003d TaskList.getTask(i);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "                if (task instanceof DeadlineTask) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "                    DeadlineTask deadlineTask \u003d (DeadlineTask) task;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "                    if (task.isCompleted) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "                        writer.write(String.format(\"D / Y / %s / %s / %s\", task.todo,"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "                                deadlineTask.deadline, task.getTag().getTagName()));"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "                        writer.write(String.format(\"D / N / %s / %s / %s\", task.todo,"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "                                deadlineTask.deadline, task.getTag().getTagName()));"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "                } else if (task instanceof EventTask) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "                    EventTask eventTask \u003d (EventTask) task;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "                    if (task.isCompleted) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "                        writer.write(String.format(\"E / Y / %s / %s / %s\", task.todo,"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "                                eventTask.time, task.getTag().getTagName()));"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "                        writer.write(String.format(\"E / N / %s / %s / %s\", task.todo,"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "                                eventTask.time, task.getTag().getTagName()));"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "                    ToDoTask todoTask \u003d (ToDoTask) task;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "                    if (task.isCompleted) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "                        writer.write(String.format(\"T / Y / %s / %s\", task.todo,"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "                                task.getTag().getTagName()));"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "                        writer.write(String.format(\"T / N / %s / %s\", task.todo,"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "                                task.getTag().getTagName()));"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "                }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "                writer.write(\"\\n\");"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            writer.close();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            System.out.println(\"Please check if you have your data folder!\");"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Returns the filepath of the storage."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @return The filepath of the storage."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public String getFilePath() {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        return this.filepath;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanlowjk": 197
    }
  },
  {
    "path": "src/main/java/duke/tag/Tag.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "package duke.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": " * Represents a simple tag to a task."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "public class Tag {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Represents the name of the tag."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    private String tagName;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Constructs a new tag with the given tag name."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @param tagName the given tag name."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public Tag(String tagName) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        if (tagName.equals(\"no tag\")) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            this.tagName \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            this.tagName \u003d tagName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Edits the tag with the given tag name."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @param tagName the given tag name."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public void editTag(String tagName) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        this.tagName \u003d tagName;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Gets the tag name."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @return the tag name."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public String getTagName() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        if (this.tagName.equals(\"\")) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            return \"no tag\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        return this.tagName;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Returns a String representation of the tag."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @return a String representation of the tag."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        if (this.tagName.equals(\"\")) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            return \"no tag\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        return \"#\" + this.tagName;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanlowjk": 54
    }
  },
  {
    "path": "src/main/java/duke/task/DeadlineTask.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": " * A Class that represents a Task in which the user wishes to complete by a certain deadline."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "public class DeadlineTask extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public String deadline;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Constructs a Deadline Task which sets the default of isCompleted value to false."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @param todo The name of the deadline task."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @param deadline The time of the deadline task."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public DeadlineTask(String todo, String deadline) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        super(todo);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        this.deadline \u003d deadline;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Constructs a Deadline Task based on the name and the isComplated value given."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @param todo The name of the task."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @param isCompleted Whether the task is Completed or not."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @param deadline The time of the task."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public DeadlineTask(String todo, boolean isCompleted, String deadline) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        super(todo, isCompleted);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        this.deadline \u003d deadline;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Changes the task name to the new task date given."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @param newTaskDate the new task date given."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public void editTaskDate(String newTaskDate) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        this.deadline \u003d  newTaskDate;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Returns a string representation of the Task."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @return A string representation of the Task."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        if (isCompleted) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            return  String.format(\"[D][Y] %s (by: %s)\", this.todo, this.deadline);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            return  String.format(\"[D][N] %s (by: %s)\", this.todo, this.deadline);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanlowjk": 50
    }
  },
  {
    "path": "src/main/java/duke/task/EventTask.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": " * A Class that represents a Task in which the user wishes to complete at a certain time period."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "public class EventTask extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public String time;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Constructs am Event Task which sets the default of isCompleted value to false."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @param todo The name of the event task."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @param time The time of the event task."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public EventTask(String todo, String time) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        super(todo);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Constructs an Event Task based on the name and the isComplated value given."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @param todo The name of the task."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @param isCompleted Whether the task is Completed or not."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @param time The time of the task."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public EventTask(String todo, boolean isCompleted, String time) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        super(todo, isCompleted);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Changes the task name to the new task time given."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @param newTaskDate the new task time given."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public void editTaskDate(String newTaskDate) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        this.time \u003d  newTaskDate;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Returns a string representation of the Task."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @return A string representation of the Task."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        if (isCompleted) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            return  String.format(\"[E][Y] %s (at: %s)\", this.todo, this.time);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            return  String.format(\"[E][N] %s (at: %s)\", this.todo, this.time);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanlowjk": 50
    }
  },
  {
    "path": "src/main/java/duke/task/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import duke.tag.Tag;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": " * A Class that represents a Task in which the user wishes to complete."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public String todo;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public boolean isCompleted;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    private Tag tag;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Constructs a Task which sets the default of isCompleted value to false."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @param todo The name of the task."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public Task(String todo) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        this.todo \u003d todo;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        this.isCompleted \u003d false;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        this.tag \u003d new Tag(\"\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Constructs a Task based on the name and the isComplated value given."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @param todo The name of the task."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @param isCompleted Whether the task is Completed or not."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public Task(String todo, boolean isCompleted) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        this.todo \u003d todo;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        this.isCompleted \u003d isCompleted;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Pushes a new tag to the Task."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @param tag the tag for the task."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public void pushTag(Tag tag) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        this.tag \u003d tag;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Retrieves the tag."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @return the tag."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public Tag getTag() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        return this.tag;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Returns a string representation of the Task."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @return A string representation of the Task."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        if (isCompleted) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            return \"[Y] \" + this.todo;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            return \"[N] \" + this.todo;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Changes the task name to the new task name given."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @param newTaskName the new task name given."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public void editTaskName(String newTaskName) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        this.todo \u003d  newTaskName;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanlowjk": 68
    }
  },
  {
    "path": "src/main/java/duke/task/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import duke.exception.InvalidDateInputException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import duke.exception.InvalidEditTaskException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import duke.exception.InvalidTaskIndexException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import duke.tag.Tag;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import duke.parser.DateParser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": " * A Class that represents a list of all completed and uncompleted Tasks."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Represents the maximum limit of the list of tasks."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    private static final int MAX_LIST_SIZE \u003d 100;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Represents the list of tasks."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    private static ArrayList\u003cTask\u003e tasks;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Constructs a new Task List which reads in 0 tasks."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        this.tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Constructs a new Task List which reads in a list of tasks."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @param tasks The loaded list of tasks."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public TaskList(ArrayList\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        this.tasks \u003d tasks;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public static boolean hasHitTaskLimit() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        return getNumberOfTasks() \u003e\u003d MAX_LIST_SIZE;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Adds the ToDo Task based on the data given, and returns the index of the new task."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @param toDoData The name of the ToDo Task."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @return The index of the new task."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public int addTodoTask(String[] toDoData) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        ToDoTask newTask \u003d new ToDoTask(ToDoTask.getName(toDoData));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        tasks.add(newTask);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        int index \u003d tasks.size() - 1;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        return index;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Adds the Deadline Task based on the data given, and returns the index of the new task."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @param taskName The name of the Deadline Task."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @param taskDate The date of the Deadline Task."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @return The index of the new task."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public int addDeadlineTask(String taskName, String taskDate) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        DeadlineTask newTask \u003d new DeadlineTask(taskName, taskDate);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        tasks.add(newTask);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        int index \u003d tasks.size() - 1;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        return index;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Adds the Event Task based on the data given, and returns the index of the new task."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @param taskName The name of the Deadline Task."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @param taskDate The date of the Deadline Task."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @return The index of the new task."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public int addEventTask(String taskName, String taskDate) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        EventTask newTask \u003d new EventTask(taskName, taskDate);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        tasks.add(newTask);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        int index \u003d tasks.size() - 1;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        return index;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Completes a task based on the index given."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @param index The index of the task."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @throws InvalidTaskIndexException If the index is lees than 0 or the index exceeds the number of tasks."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public void completeTask(int index) throws InvalidTaskIndexException {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        if (index \u003c 0 || index \u003e\u003d tasks.size()) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            throw new InvalidTaskIndexException();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            Task task \u003d tasks.get(index);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            task.isCompleted \u003d true;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Deletes a task based on the index given, returning the Task that was deleted."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @param index The index of the task."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @return The deleted task."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @throws InvalidTaskIndexException If the index is less than 0 or the index exceeds the number of tasks."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public Task deleteTask(int index) throws InvalidTaskIndexException {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        if (index \u003c 0 || index \u003e\u003d tasks.size()) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            throw new InvalidTaskIndexException();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            Task task \u003d tasks.get(index);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            tasks.remove(index);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            return task;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Constructs the new edited name based on the data provided from the parser."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @param nameData an array consisting the words forming the new name."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @return the new name as a String."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    private String constructNewName(String[] nameData) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        String newName \u003d \"\";"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        for (int i \u003d 1; i \u003c nameData.length; i++) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            if (i \u003e 1) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "                newName +\u003d \" \";"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            newName +\u003d nameData[i];"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        return newName;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Edits the specific task based on the name and index given."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @param newTaskData An array which consists the index and new name."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @return the edited task."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @throws InvalidTaskIndexException if the index given is out of bounds."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public Task editSpecificTaskName(String[] newTaskData) throws InvalidTaskIndexException {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        int index \u003d Integer.parseInt(newTaskData[0]) - 1;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        String newName \u003d constructNewName(newTaskData);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        if (index \u003c 0 || index \u003e tasks.size()) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            throw new InvalidTaskIndexException();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            Task task \u003d tasks.get(index);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            task.editTaskName(newName);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            return task;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Edits the specific task based on the name and index given."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @param newTaskData An array which consists the index and new name."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @return the edited task."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @throws InvalidTaskIndexException if the index given is out of bounds."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public Task editSpecificTaskDate(String[] newTaskData) throws"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            InvalidTaskIndexException, InvalidDateInputException, InvalidEditTaskException {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        int index \u003d Integer.parseInt(newTaskData[0]) - 1;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        DateParser parser \u003d new DateParser();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        parser.readInput(newTaskData[1] + \" \" + newTaskData[2]);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        String newDate \u003d parser.convertDateToString();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        if (index \u003c 0 || index \u003e tasks.size()) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            throw new InvalidTaskIndexException();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            Task task \u003d tasks.get(index);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            if (task instanceof ToDoTask) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "                throw new InvalidEditTaskException(\"You cannot change the date of a todo task!\");"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            } else if (task instanceof EventTask) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "                ((EventTask) task).editTaskDate(newDate);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "                return task;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "                ((DeadlineTask) task).editTaskDate(newDate);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "                return task;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Returns a list of indexes of matching tasks which contain specific keywords."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @param keyword The matching keyword or keywords."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @return A list of indexes of tasks containing the keywords."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public ArrayList\u003cInteger\u003e findMatchingTasks(String keyword) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        ArrayList\u003cInteger\u003e matchingIndexes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        for (int i \u003d 0; i \u003c getNumberOfTasks(); i++) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            Task task \u003d tasks.get(i);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            if (task.todo.contains(keyword)) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "                matchingIndexes.add(i);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        return matchingIndexes;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Returns a list of indexes of matching tasks which contain specific tag."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @param tag the matching tag."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @return A list of indexes of tasks containing the tag."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public ArrayList\u003cInteger\u003e findMatchingTaggedTasks(String tag) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        ArrayList\u003cInteger\u003e matchingIndexes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        for (int i \u003d 0; i \u003c getNumberOfTasks(); i++) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            Task task \u003d tasks.get(i);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            if (task.getTag().getTagName().equals(tag)) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "                matchingIndexes.add(i);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        return matchingIndexes;"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Adds a tag to the task at the specified index."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @param index the index of the task."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @param tag the tag of the task."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @return the tagged task."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public Task addTag(int index, Tag tag) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        Task task \u003d this.tasks.get(index);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        task.pushTag(tag);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        return task;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Returns the number of tasks in the list."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @return The number of tasks in the list."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public static int getNumberOfTasks() {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        return tasks.size();"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Returns the task at the index provided."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @param index The index of the task."
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @return The task to be retrieved."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public static Task getTask(int index) {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        return tasks.get(index);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanlowjk": 239
    }
  },
  {
    "path": "src/main/java/duke/task/ToDoTask.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": " * A Class that represents a Task in which the user wishes to do."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "public class ToDoTask extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Constructs a ToDo Task which sets the default of isCompleted value to false."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @param todo The name of the task."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public ToDoTask(String todo) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        super(todo);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Constructs the name of the todo task."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @param todo the array containing the data for the task name."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @return the task name as a String."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public static String getName(String[] todo) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        String taskName \u003d \"\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        for (int i \u003d 1; i \u003c todo.length; i++) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            if (i \u003e 1) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "                taskName +\u003d \" \";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            taskName +\u003d todo[i];"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        return taskName;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Constructs a ToDo Task based on the name and the isComplated value given."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @param todo The name of the task."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @param isCompleted Whether the task is Completed or not."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public ToDoTask(String todo, boolean isCompleted) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        super(todo, isCompleted);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Returns a string representation of the Task."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @return A string representation of the Task."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        if (isCompleted) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            return  String.format(\"[T][Y] %s\", this.todo);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            return  String.format(\"[T][N] %s\", this.todo);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanlowjk": 53
    }
  },
  {
    "path": "src/main/java/duke/ui/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import duke.tag.Tag;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": " * The Class which handles user input and interacts with the user."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    private String output;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Prints the output message to be sent and resets the output message."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public String print() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Resets the output message."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public void reset() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        output \u003d \"\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Appends the string to the output meesage."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public void append(String message) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        output +\u003d (message + \"\\n\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Shows the task which the user has completed."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @param task The completed task."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public void showCompletedTask(Task task) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        append(\"Nice! I\u0027ve marked this task as done:\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        append(task.toString());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Shows the task which the user has deleted."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @param task The deleted task."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public void showDeletedTask(Task task) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        append(\"Noted. I\u0027ve removed this task: \");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        append(task.toString());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        append(\"Now you have \" +  TaskList.getNumberOfTasks() + \" tasks in the list.\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Shows the task which the user has added."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @param task The added task."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public void showAddedTask(Task task) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        append(\"Got it. I\u0027ve added this task: \");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        append(task.toString());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        append(\"Now you have \" + TaskList.getNumberOfTasks() + \" tasks in the list!\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "\u003c\u003c\u003c\u003c\u003c\u003c\u003c HEAD"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Shows the task which the user has tagged."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @param task The tagged task."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public void showTaggedTask(Task task) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        append(\"Got it, I\u0027ve tagged this task: \");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        append(task.toString());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        append(\"Now, it has the tag: \" + task.getTag().toString() + \".\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Shows the task which the user has edited."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @param task The added task."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public void showEditedTask(Task task) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        append(\"Got it. I\u0027ve edited this task: \");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        append(task.toString());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Sends a simple greeting to the user."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public void sendGreeting() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        append(\"Hello! Martin here!\\nWhat can I do\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Sends a simple farewell message to the user."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public void sendFarewell() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        append(\"Bye. Hope to see you again soon!\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        append(\"Press enter to keep the app closed.\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Sends a message to the user."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @param taskIndexes Represents the list of matching tasks indexes."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public void showMatchingTasks(ArrayList\u003cInteger\u003e taskIndexes) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        if (taskIndexes.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            append(\"You have no matching tasks in your list!\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        append(\"Here are the matching tasks in your list:\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        for (int i \u003d 0; i \u003c taskIndexes.size(); i++) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            Task task \u003d TaskList.getTask(taskIndexes.get(i));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            append(task.toString());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Sends a message to the user based on the DukeException given."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @param error The error which has arised."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public void sendErrorMessage(DukeException error) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        append(error.toString());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Sends a message to the user based on the Error given."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @param error The error which has arised."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public void sendErrorMessage(Error error) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        append(error.getMessage());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Sends a Loading error in the event where there is no tasks to be read from the file."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public void showLoadingError() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        append(\"OOPS !!! Loading Error! Creating a New List...\");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Lists all the tasks involved in the TaskList."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public void listTasks() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        if (TaskList.getNumberOfTasks() \u003d\u003d  0) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            append(\"You have no tasks in the list!\");"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            append(\"Here are the tasks in your list:\");"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        for (int tasknum \u003d 0; tasknum \u003c TaskList.getNumberOfTasks(); tasknum++) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            Task task \u003d TaskList.getTask(tasknum);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            Tag tag \u003d task.getTag();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            String todo \u003d task.toString();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            append((tasknum + 1) + \". \" + todo);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            append(\"Tag: \"  + tag);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Lists all the commands available to the user."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public void listCommands() {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        ArrayList\u003cCommand\u003e commands \u003d Command.getAllCommands();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        append(\"Here are the list of commands available: \");"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        for (int i \u003d 0; i \u003c commands.size(); i++) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            append(commands.get(i).toString());"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanlowjk": 170
    }
  },
  {
    "path": "src/main/resources/view/DialogBox.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "\u003c?import java.lang.*?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "\u003c?import javafx.geometry.*?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "\u003c?import javafx.scene.control.*?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "\u003c?import javafx.scene.image.*?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "\u003cfx:root type\u003d\"javafx.scene.layout.HBox\" alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" style\u003d\"-fx-padding: 10;\u0026#10;-fx-border-style: solid inside;\u0026#10;-fx-border-insets: 5;\u0026#10;-fx-border-radius: 15px;\u0026#10;-fx-border-color: #717371;\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" xmlns\u003d\"http://javafx.com/javafx/2.2\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "  \u003cchildren\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    \u003cLabel fx:id\u003d\"dialog\" style\u003d\"\" text\u003d\"Label\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"100.0\" fitWidth\u003d\"100.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" style\u003d\"\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "  \u003c/children\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "  \u003cpadding\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "  \u003c/padding\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "seanlowjk": 17
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "\u003c?import java.lang.*?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "\u003c?import javafx.scene.control.*?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "\u003c?import javafx.scene.layout.*?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "\u003c?import javafx.scene.text.*?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" xmlns\u003d\"http://javafx.com/javafx/2.2\" fx:controller\u003d\"MainWindow\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "  \u003cchildren\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    \u003cTextField fx:id\u003d\"userInput\" layoutX\u003d\"0.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" style\u003d\"\" text\u003d\"\" AnchorPane.bottomAnchor\u003d\"2.0\" /\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"553.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" style\u003d\"\" text\u003d\"Send\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "      \u003cfont\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        \u003cFont name\u003d\"Permanent Marker\" size\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "      \u003c/font\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    \u003c/Button\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "      \u003ccontent\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        \u003cVBox fx:id\u003d\"dialogContainer\" focusTraversable\u003d\"false\" opacity\u003d\"1.0\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "      \u003c/content\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "  \u003c/children\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "seanlowjk": 22
    }
  },
  {
    "path": "src/test/java/DukeTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "public class DukeTest {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public void dummyTest() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanlowjk": 9
    }
  },
  {
    "path": "src/test/java/ToDoTaskTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import duke.task.ToDoTask;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "public class ToDoTaskTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public void dummyTest() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        Task task \u003d new ToDoTask(\"Eat Food\", false);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertTrue(task.toString().equals(\"[T][N] Eat Food\"));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertFalse(task.isCompleted);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanlowjk": 17
    }
  }
]
