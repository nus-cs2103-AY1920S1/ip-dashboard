[
  {
    "path": "README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# Setting up"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "**Prerequisites**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "* JDK 11"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "* Recommended: IntelliJ IDE"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "* Fork this repo to your GitHub account and clone the fork to your computer"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "**Importing the project into IntelliJ**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "1. Open IntelliJ (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "1. Set up the correct JDK version."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "   * Click `Configure` \u003e `Structure for new Projects` (in older versions of Intellij:`Configure` \u003e `Project Defaults` \u003e `Project Structure`)."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "   * If JDK 11 is listed in the drop down, select it. If it is not, click `New...` and select the directory where you installed JDK 11."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "   * Click `OK`."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "1. Click `Import Project`."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "1. Locate the project directory and click `OK`."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "1. Select `Create project from existing sources` and click `Next`."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "1. Rename the project if you want. Click `Next`."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "1. Ensure that your src folder is checked. Keep clicking `Next`."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "1. Click `Finish`."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "# Tutorials "
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "Duke Increment | Tutorial"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "---------------|---------------"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "`A-Gradle` | [Gradle Tutorial](tutorials/gradleTutorial.md)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "`A-TextUiTesting` | [Text UI Testing Tutorial](tutorials/textUiTestingTutorial.md)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "`Level-10` | JavaFX tutorials:\u003cbr\u003e→ [Part 1: Introduction to JavaFX][fx1]\u003cbr\u003e→ [Part 2: Creating a GUI for Duke][fx2]\u003cbr\u003e→ [Part 3: Interacting with the user][fx3]\u003cbr\u003e→ [Part 4: Introduction to FXML][fx4]"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "[fx1]: \u003ctutorials/javaFxTutorialPart1.md\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "[fx2]: \u003ctutorials/javaFxTutorialPart2.md\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "[fx3]: \u003ctutorials/javaFxTutorialPart3.md\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "[fx4]: \u003ctutorials/javaFxTutorialPart4.md\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "# Feedback, Bug Reports"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "* If you have feedback or bug reports, please post in [xinmingzh/duke issue tracker](https://github.com/xinmingzh/duke/issues)."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "* We welcome pull requests too."
      }
    ],
    "authorContributionMap": {
      "xinmingzh": 1,
      "-": 38
    }
  },
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    id \u0027org.openjfx.javafxplugin\u0027 version \u00270.0.7\u0027"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    archiveVersion \u003d \"0.2\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "test {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "group \u0027duke\u0027"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "version \u00270.2\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "javafx {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    version \u003d \"11.0.1\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    modules \u003d [ \u0027javafx.controls\u0027, \u0027javafx.fxml\u0027 ]"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    // Change this to your main class."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    mainClassName \u003d \"Launcher\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "run {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "xinmingzh": 32,
      "-": 16
    }
  },
  {
    "path": "docs/README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "## Features "
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "### Basic CRUD Functions"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "1. Create `Task` of type `Todo`, `Event` or `Deadline`."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "2. View list of tasks."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "3. Mark a `Task` as done."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "4. Mark a `Task` as not done."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "5. Delete a `Task`."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "### Feature 1 : Find Tasks"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "Tasks can be filtered by `description`."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "### Feature 2 : Sort Tasks"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "Tasks can be sorted by `description`, `taskType` or `doneStatus`."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "### Feature 3 : Clear Tasks"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "Tasks can be cleared to give an empty task list."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "## Usage"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "### `list` - List all tasks"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "Shows a list of all tasks."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "`list`"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "`list all tasks`"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "### `todo` - Create A New Todo"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "Create a new todo with description."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "`todo read book`"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "`todo of description \u0027read book\u0027 created`"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "### `deadline` - Create A New Deadline"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "Create a new deadline with description and date."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "`deadline return book /by 10/10/2019 1200`"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "`deadline created with description \u0027return book\u0027 and date \u002710/10/2019 1200\u0027`"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "### `event` - List all tasks"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "Create a new event with description, start date and end date."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "Leave two spaces between the start date and end date."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "`event project meeting /at 10/10/2019 1200  10/10/2019 1400`"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "`event created with description \u0027project meeting\u0027, start date \u002710/10/2019 1200\u0027 "
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "and end date \u002710/10/2019 1400\u0027`"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "### `done` - Mark Task As Done"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "Mark a task as done by its index."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "`done 2`"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "`task at index 2 marked as done`"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "### `notdone` - Mark Task As Not Done"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "Mark a task as not done by its index."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "`notdone 2`"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "`task at index 2 marked as not done`"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "### `delete` - Delete Task"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "Shows a list of all tasks."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "`delete 2`"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "`task at index 2 deleted`"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "### `find` - Find Tasks"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "Filter tasks by `description`."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "`find book`"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "`list tasks that has \u0027book\u0027 in its description`"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "### `sort` - Sort Tasks"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "Sort tasks by `description`, `taskType` or `doneStatus`."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "`sort desc`, `sort tasktype`, `sort done`"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "`sorted list of task`"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "### `clear` - Clear All Tasks"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "Clear the task list."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "`clear`"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "`empty task list`"
      }
    ],
    "authorContributionMap": {
      "xinmingzh": 133,
      "-": 14
    }
  },
  {
    "path": "gradlew.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "@rem Copyright 2015 the original author or authors."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "@rem Licensed under the Apache License, Version 2.0 (the \"License\");"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "@rem you may not use this file except in compliance with the License."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "@rem You may obtain a copy of the License at"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "@rem      https://www.apache.org/licenses/LICENSE-2.0"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "@rem Unless required by applicable law or agreed to in writing, software"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "@rem distributed under the License is distributed on an \"AS IS\" BASIS,"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "@rem WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "@rem See the License for the specific language governing permissions and"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "@rem limitations under the License."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "@if \"%DEBUG%\" \u003d\u003d \"\" @echo off"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "@rem ##########################################################################"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "@rem  Gradle startup script for Windows"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "@rem ##########################################################################"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Set local scope for the variables with windows NT shell"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%OS%\"\u003d\u003d\"Windows_NT\" setlocal"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "set DIRNAME\u003d%~dp0"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%DIRNAME%\" \u003d\u003d \"\" set DIRNAME\u003d."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "set APP_BASE_NAME\u003d%~n0"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "set APP_HOME\u003d%DIRNAME%"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "set DEFAULT_JVM_OPTS\u003d\"-Xmx64m\" \"-Xms64m\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Find java.exe"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "if defined JAVA_HOME goto findJavaFromJavaHome"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "set JAVA_EXE\u003djava.exe"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "%JAVA_EXE% -version \u003eNUL 2\u003e\u00261"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%ERRORLEVEL%\" \u003d\u003d \"0\" goto init"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "echo."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "echo ERROR: JAVA_HOME is not set and no \u0027java\u0027 command could be found in your PATH."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "echo."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "echo Please set the JAVA_HOME variable in your environment to match the"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "echo location of your Java installation."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "goto fail"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ":findJavaFromJavaHome"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "set JAVA_HOME\u003d%JAVA_HOME:\"\u003d%"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "set JAVA_EXE\u003d%JAVA_HOME%/bin/java.exe"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "if exist \"%JAVA_EXE%\" goto init"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "echo."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "echo."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "echo Please set the JAVA_HOME variable in your environment to match the"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "echo location of your Java installation."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "goto fail"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ":init"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Get command-line arguments, handling Windows variants"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "if not \"%OS%\" \u003d\u003d \"Windows_NT\" goto win9xME_args"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ":win9xME_args"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Slurp the command line arguments."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "set CMD_LINE_ARGS\u003d"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "set _SKIP\u003d2"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ":win9xME_args_slurp"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "if \"x%~1\" \u003d\u003d \"x\" goto execute"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "set CMD_LINE_ARGS\u003d%*"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ":execute"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Setup the command line"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "set CLASSPATH\u003d%APP_HOME%\\gradle\\wrapper\\gradle-wrapper.jar"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Execute Gradle"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "\"%JAVA_EXE%\" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% \"-Dorg.gradle.appname\u003d%APP_BASE_NAME%\" -classpath \"%CLASSPATH%\" org.gradle.wrapper.GradleWrapperMain %CMD_LINE_ARGS%"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ":end"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "@rem End local scope for the variables with windows NT shell"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%ERRORLEVEL%\"\u003d\u003d\"0\" goto mainEnd"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ":fail"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "rem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "rem the _cmd.exe /c_ return code!"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "if  not \"\" \u003d\u003d \"%GRADLE_EXIT_CONSOLE%\" exit 1"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "exit /b 1"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ":mainEnd"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%OS%\"\u003d\u003d\"Windows_NT\" endlocal"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ":omega"
      }
    ],
    "authorContributionMap": {
      "xinmingzh": 17,
      "-": 83
    }
  },
  {
    "path": "src/main/java/Launcher.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "import duke.core.Main;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": " * A launcher class to workaround classpath issues."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        Application.launch(Main.class, args);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xinmingzh": 11
    }
  },
  {
    "path": "src/main/java/duke/command/AddCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    Task task;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    public AddCommand(Task task) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        assert !task.equals(null) : \"Task cannot be null\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        this.task \u003d task;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        tasks.add(task);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        storage.save(tasks);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        ui.showAddTaskMsg(task);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xinmingzh": 23
    }
  },
  {
    "path": "src/main/java/duke/command/ByeCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "public class ByeCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "     * Initiate new ByeCommand."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "     * @param commandContent User input string less command word."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "     * @throws DukeException If additional input other than command word detected."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    public ByeCommand(String commandContent) throws DukeException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        super(commandContent);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        if (!commandContent.isEmpty()) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "            throw new DukeException(\"No parameters expected\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        isExit \u003d true;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        ui.showByeMsg();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xinmingzh": 29
    }
  },
  {
    "path": "src/main/java/duke/command/ClearCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "public class ClearCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "     * Initialise a ClearCommand."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "     * @param commandContent User input string less command word."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "     * @throws DukeException If additional input other than command word detected."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    public ClearCommand(String commandContent) throws DukeException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        super(commandContent);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        if (!commandContent.isEmpty()) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "            throw new DukeException(\"No parameters expected\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        tasks.clear();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        storage.save(tasks);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        ui.showClearSuccessMsg();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xinmingzh": 32
    }
  },
  {
    "path": "src/main/java/duke/command/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    private String commandContent;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    protected boolean isExit \u003d false;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    public Command() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    public Command(String commandContent) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        this.commandContent \u003d commandContent;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "     * Getter for variable isExit."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "     * @return Whether program should exit."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        return isExit;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "     * Execute the command."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "     * @param tasks List of tasks in memory"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "     * @param ui Ui instance"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "     * @param storage Storage instance"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "     * @throws DukeException If command word is invalid"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    public abstract void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xinmingzh": 36
    }
  },
  {
    "path": "src/main/java/duke/command/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    protected int index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "     * Initialise a DeleteCommand."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "     * @param commandContent User input string less command word."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "     * @throws DukeException If user input argument is not a single integer."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    public DeleteCommand(String commandContent) throws DukeException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        super(commandContent);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        if (!commandContent.matches(\"(0|[1-9]\\\\d*)\")) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "            throw new DukeException(\"OOPS!!! Index must be a positive integer.\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        index \u003d Integer.parseInt(commandContent);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        assert index \u003e 0 : \"index cannot be a negative integer\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        Task task \u003d tasks.remove(index);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        storage.save(tasks);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        ui.showTaskDelMsg(task);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xinmingzh": 36
    }
  },
  {
    "path": "src/main/java/duke/command/DoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "public class DoneCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    protected int index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "     * Initialise a DoneCommand."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "     * @param commandContent User input string less command word."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "     * @throws DukeException If user input argument is not a single integer."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    public DoneCommand(String commandContent) throws DukeException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        super(commandContent);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        if (!commandContent.matches(\"(0|[1-9]\\\\d*)\")) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "            throw new DukeException(\"OOPS!!! Index must be a positive integer.\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        index \u003d Integer.parseInt(commandContent);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        assert index \u003e 0 : \"index cannot be a negative integer\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        Task task \u003d tasks.get(index);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        task.setDone();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        storage.save(tasks);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        ui.showTaskDoneMsg(task);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xinmingzh": 37
    }
  },
  {
    "path": "src/main/java/duke/command/FindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    private static final Pattern PAT \u003d Pattern.compile(\" \");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    String keyWords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "     * Initialise a FindCommand."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "     * @param commandContent User input string less command word."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "     * @throws DukeException If user input argument is empty."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    public FindCommand(String commandContent) throws DukeException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        if (commandContent.isEmpty()) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "            throw new DukeException(\"OOPS!!! The object to find cannot be empty.\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        keyWords \u003d commandContent;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        List\u003cTask\u003e foundTasks \u003d PAT.splitAsStream(keyWords)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "                .map(x -\u003e tasks.findByKeyword(x))"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "                .flatMap(x -\u003e x.stream())"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "                .distinct()"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        ui.showFoundTasks(foundTasks);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xinmingzh": 42
    }
  },
  {
    "path": "src/main/java/duke/command/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "     * Initialise a ListCommand."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "     * @param commandContent User input string less command word."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "     * @throws DukeException If user input argument is not empty."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    public ListCommand(String commandContent) throws DukeException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        super(commandContent);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        if (!commandContent.isEmpty()) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "            throw new DukeException(\"No parameters expected\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        ui.showTasks();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xinmingzh": 28
    }
  },
  {
    "path": "src/main/java/duke/command/NotDoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "public class NotDoneCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    protected int index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "     * Initialise a NotDoneCommand."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "     * @param commandContent User input string less command word."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "     * @throws DukeException If user input argument is not a single integer."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    public NotDoneCommand(String commandContent) throws DukeException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        super(commandContent);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        if (!commandContent.matches(\"(0|[1-9]\\\\d*)\")) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "            throw new DukeException(\"OOPS!!! Index must be a positive integer.\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        index \u003d Integer.parseInt(commandContent);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        assert index \u003e 0 : \"index cannot be a negative integer\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        Task task \u003d tasks.get(index);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        task.setNotDone();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        storage.save(tasks);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        ui.showTaskNotDoneMsg(task);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xinmingzh": 37
    }
  },
  {
    "path": "src/main/java/duke/command/SortCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "import duke.types.SortType;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "public class SortCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    SortType sortType;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "     * Initialise a SortCommand."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "     * @param commandContent User input string less command word."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "     * @throws DukeException If user input argument is not a valid sort type."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    public SortCommand(String commandContent) throws DukeException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        if (commandContent.isEmpty()) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "            throw new DukeException(\"Description of sort cannot be empty.\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        if (commandContent.split(\" \").length \u003e 1) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "            throw new DukeException(\"Description of sort cannot have more than one word.\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "            sortType \u003d SortType.valueOf(commandContent.toUpperCase());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "            throw new DukeException(\"Invalid sort type.\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        tasks.sort(sortType);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        ui.showSortSuccessMsg(sortType);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xinmingzh": 39
    }
  },
  {
    "path": "src/main/java/duke/command/TagCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "public class TagCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    public TagCommand(String commandContent) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        "
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        ui.addToOutputs(\"Not implemented yet\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xinmingzh": 18
    }
  },
  {
    "path": "src/main/java/duke/core/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "package duke.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "import duke.text.Parser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    protected TaskList tasks;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    protected String output;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    protected boolean isExit \u003d false;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    public Duke() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "     * duke.core.Duke Constructor that takes in a filePath where application data would be stored."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "     * @param filePath Path of storage file."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    public Duke(String filePath) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        storage \u003d new Storage(filePath);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "            tasks \u003d new TaskList(storage.load());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "            ui.showLoadingError();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "            tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        } finally {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "            ui.setTasks(tasks);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        Duke newDuke \u003d new Duke(\"data/duke.txt\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        newDuke.run();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "     * duke.core.Main run method. Application is in a constant loop until bye command changes isExit to true and"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "     * break out of the loop."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        ui.showWelcome();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        while (!isExit) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "                String fullCommand \u003d ui.readCommand();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "                ui.showLine();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "                Command c \u003d Parser.parse(fullCommand);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "                c.execute(tasks, ui, storage);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "                System.out.println(output);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "                isExit \u003d c.isExit();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "            } catch (DukeException e) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "                ui.showError(e.getMessage());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "            } finally {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "                ui.showLine();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "            System.out.println(ui.getOutputStringAndClear());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    public boolean getExit() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        return isExit;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "     * Get ui of duke."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "     * @return ui object."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    public Ui getUi() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        return ui;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "     * You should have your own function to generate a response to user input."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "     * Replace this stub with your completed method."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    public String getResponse(String input) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "            String fullCommand \u003d input;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "            Command c \u003d Parser.parse(fullCommand);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "            c.execute(tasks, ui, storage);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "            isExit \u003d c.isExit();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "            ui.showError(e.getMessage());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        return ui.getOutputStringAndClear();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xinmingzh": 92,
      "-": 2
    }
  },
  {
    "path": "src/main/java/duke/core/Main.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "package duke.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "import duke.ui.MainWindow;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": " * A GUI for duke.core.Duke using FXML."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "public class Main extends Application {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    private Duke duke \u003d new Duke(\"data/duke.txt\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        MainWindow mainWindow \u003d new MainWindow();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        mainWindow.setDuke(duke);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        mainWindow.setHiMsg();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        stage.setScene(new Scene(mainWindow));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        stage.setTitle(\"Duke\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        stage.show();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xinmingzh": 24
    }
  },
  {
    "path": "src/main/java/duke/exception/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "     * Default constructor with error message."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "     * @param msg Error message"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    public DukeException(String msg) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        super(msg);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xinmingzh": 12
    }
  },
  {
    "path": "src/main/java/duke/storage/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "package duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    String filePath;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    File file;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    Ui ui;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "     * Initialize a Storage object."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "     * @param filePath Path of file whether data is stored."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    public Storage(String filePath) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        this.file \u003d new File(filePath);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "     * Load data from file specified by filePath."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "     * @return ArrayList of tasks."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "     * @throws DukeException If no file is found at FilePath."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    public List\u003cTask\u003e load() throws DukeException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "            Scanner sc \u003d new Scanner(file);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "            if (!sc.hasNext()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "                throw new DukeException(\"No records found\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "            List\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "            while (sc.hasNext()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "                tasks.add(Task.parseFromData(sc.nextLine()));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "            return tasks;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "            throw new DukeException(\"Load file not found\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "     * Save program data to file at filePath."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "     * @param taskList List of tasks to be written to file."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    public void save(TaskList taskList) throws DukeException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        if (taskList.isEmpty()) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "            ui.showNothingToSaveMsg();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "            FileWriter fw \u003d new FileWriter(file);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "            List\u003cString\u003e strings \u003d taskList.getTasks()"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "                    .stream()"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "                    .map(Task::toStorageString)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "                    .collect(Collectors.toList());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "            fw.write(String.join(\"\\n\", strings));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "            fw.close();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "            throw new DukeException(\"Error saving to file\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xinmingzh": 78
    }
  },
  {
    "path": "src/main/java/duke/tag/Tag.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "package duke.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "public class Tag {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    String name;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    List\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    public void setName(String name) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    public List\u003cTask\u003e getTasks() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        return tasks;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    public void setTasks(List\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        this.tasks \u003d tasks;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    public void addTask(Task task) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        return \"Tag: \" + getName();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xinmingzh": 36
    }
  },
  {
    "path": "src/main/java/duke/tag/TagList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "package duke.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "public class TagList {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    List\u003cTag\u003e tags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    public List\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        return tags;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    public void setTags(List\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        this.tags \u003d tags;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    public Tag getTag(int index) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        return getTags().get(index);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    public void addTag(Tag tag) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        getTags().add(tag);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    public boolean removeTag(Tag tag) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        return getTags().remove(tag);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    public boolean contains(Tag tag) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        return getTags().contains(tag);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        return \"Tags: \" + String.join(\"|\","
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "                getTags().stream()"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "                        .map(Tag::getName)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "                        .collect(Collectors.toList())"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        );"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xinmingzh": 43
    }
  },
  {
    "path": "src/main/java/duke/task/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "public class Deadline extends Task implements UsingDateTime {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    private static final Pattern PAT \u003d Pattern.compile(\"(.+) /by (.+)\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    protected LocalDateTime by;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "     * Constructor method."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "     * @param desc Task description"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "     * @param by Task deadline"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "     * @param done Task done state"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    public Deadline(String desc, LocalDateTime by, boolean... done) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        super(desc);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        this.by \u003d by;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        if (done.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "            setDone(done[0]);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "     * Getter for by variable."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "     * @return Date of deadline"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    public LocalDateTime getDateBy() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        return by;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "     * Setter for by variable."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "     * @param by Date of deadline"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    public void setDateBy(LocalDateTime by) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        this.by \u003d by;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "     * Parses user input and look for Deadline object."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "     * @param commandContent Input string"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "     * @return Deadline object"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    public static Task parse(String commandContent) throws DukeException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        Matcher matcher \u003d PAT.matcher(commandContent);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "            throw new DukeException(\"OOPS!!! Arguments is in wrong format\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "            LocalDateTime dueDate \u003d LocalDateTime.parse(matcher.group(2), readFormatter);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "            Task task \u003d new Deadline(matcher.group(1), dueDate);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "            return task;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "            throw new DukeException(\"OOPS!!! The date inputted is not in \u0027DD/MM/YYYY HHmm\u0027 format\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "     *  Parses stored data string and look for Deadline object."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "     * @param input Data string from save file."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "     * @return Deadline object"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    public static Deadline parseFromData(String input, boolean... done) throws DukeException {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        String[] inputs \u003d input.split(gap);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "            LocalDateTime dateBy \u003d LocalDateTime.parse(inputs[3]);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "            Deadline deadline \u003d new Deadline(inputs[2], dateBy);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "            if (done.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "                deadline.setDone(done[0]);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "            return deadline;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "            throw new DukeException(\"Invalid data\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    public String toStorageString() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        return \"D\" + gap + super.toStorageString() + gap + getDateBy();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        return \"[D]\" + super.toString() + \" (by: \" + this.getDateBy().format(displayFormatter) + \")\";"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xinmingzh": 98
    }
  },
  {
    "path": "src/main/java/duke/task/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "public class Event extends Task implements UsingDateTime {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    private static final Pattern PAT \u003d Pattern.compile(\"(.+) /at (.+)  (.+)\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    protected LocalDateTime startDate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    protected LocalDateTime endDate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "     * Constructor method."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "     * @param desc Event description"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "     * @param startDate Event start datetime"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "     * @param endDate Event end datetime"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "     * @param done Optional Event done state"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    public Event(String desc, LocalDateTime startDate, LocalDateTime endDate, boolean... done) throws DukeException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        super(desc);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        if (startDate.isAfter(endDate)) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "            throw new DukeException(\"OOPS!!! StartDate \u003e EndDate\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        this.startDate \u003d startDate;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        this.endDate \u003d endDate;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        if (done.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "            setDone(done[0]);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "     * Getter for startDate variable."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "     * @return Start date of event."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    public LocalDateTime getStartDate() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        return startDate;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "     * Setter for startDate variable."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "     * @param startDate Start date of event."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    public void setStartDate(LocalDateTime startDate) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        this.startDate \u003d startDate;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "     * Getter for endDate variable."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "     * @return End date of event."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    public LocalDateTime getEndDate() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        return endDate;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "     * Setter for endDate variable."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "     * @param endDate End date of event."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    public void setEndDate(LocalDateTime endDate) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        this.endDate \u003d endDate;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "     * Parses user input and look for Event object."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "     * @param commandContent Input string"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "     * @return Event object"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    public static Task parse(String commandContent) throws DukeException {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        Matcher matcher \u003d PAT.matcher(commandContent);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "            throw new DukeException(\"OOPS!!! Arguments is in wrong format\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "            LocalDateTime startDate \u003d LocalDateTime.parse(matcher.group(2), readFormatter);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "            LocalDateTime endDate \u003d LocalDateTime.parse(matcher.group(3), readFormatter);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "            return new Event(matcher.group(1), startDate, endDate);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "            throw new DukeException(\"OOPS!!! The date inputted is not in \u0027DD/MM/YYYY HHmm\u0027 format\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "     *  Parses stored data string and look for Event object."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "     * @param input Data string from save file."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "     * @return Event object"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    public static Event parseFromData(String input, boolean... done) throws DukeException {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "            String[] inputs \u003d input.split(gap);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "            LocalDateTime startDate \u003d LocalDateTime.parse(inputs[3]);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "            LocalDateTime endDate \u003d LocalDateTime.parse(inputs[4]);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "            Event event \u003d new Event(inputs[2], startDate, endDate);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "            if (done.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "                event.setDone(done[0]);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "            return event;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "            throw new DukeException(\"Invalid data\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    public String toStorageString() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        return \"E\" + gap + super.toStorageString() + gap + getStartDate() + gap + getEndDate();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        return \"[E]\" + super.toString() + \" (at: \""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "                + this.getStartDate().format(displayFormatter) + \" to \""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "                + this.getEndDate().format(displayFormatter) + \")\";"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xinmingzh": 125
    }
  },
  {
    "path": "src/main/java/duke/task/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    protected static final String gap \u003d \"  \";"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    protected String desc;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "     * Initialize a Task object."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "     * @param desc User inputted description."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "     * @param done Optional, true if task is done, default is false."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    public Task(String desc, boolean... done) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        this.desc \u003d desc;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        if (done.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "            this.isDone \u003d done[0];"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "     * Parse data string to find a task."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "     * @param input Input data string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "     * @return Task found in data string"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "     * @throws DukeException If task cannot be created from input data string"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    public static Task parseFromData(String input) throws DukeException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        String[] inputs \u003d input.split(gap, 3);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        String type \u003d inputs[0];"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        boolean isDone \u003d inputs[1].equals(\"1\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        Task task;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        switch (type) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        case \"T\":"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "            task \u003d Todo.parseFromData(input, isDone);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        case \"D\":"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "            task \u003d Deadline.parseFromData(input, isDone);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        case \"E\":"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "            task \u003d Event.parseFromData(input, isDone);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "            throw new DukeException(\"Invalid data\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        return task;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "     * Getter method for variable desc."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "     * @return Task description."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    public String getDesc() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        return desc;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "     * Setter method for variable desc."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "     * @param desc Task description."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    public void setDesc(String desc) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        this.desc \u003d desc;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "     * Getter method for done variable."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "     * @return True if task is done, false if task is not done."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    public boolean isDone() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        return isDone;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "     * Label task done status as requested in input."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "     * @param done Done state of task."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    public void setDone(boolean done) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        isDone \u003d done;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "     * Label task as done."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    public void setDone() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        setDone(true);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "     * Label task as not done."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    public void setNotDone() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        setDone(false);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "     * Returns done status of task."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "     * @return Tick if done, cross if not done."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    public String getDoneStatus() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        return isDone() ? \"O\" : \"X\"; //\"\\u2714\" : \"\\u2718\";"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    public String toStorageString() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        return (isDone() ? \"1\" : \"0\") + gap + getDesc();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        return \"[\" + this.getDoneStatus() + \"] \" + getDesc();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xinmingzh": 123
    }
  },
  {
    "path": "src/main/java/duke/task/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "import duke.types.SortType;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "import java.util.function.Function;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    protected List\u003cTask\u003e tasks;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "     * Initiate a new TaskList."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "     * @param tasks Optional List of Tasks can be passed to the constructor to initialise TaskList with tasks."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    public TaskList(List\u003cTask\u003e... tasks) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        if (tasks.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "            this.tasks \u003d tasks[0];"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "            this.tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "     * Getter for list of tasks."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "     * @return List of tasks"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    public List\u003cTask\u003e getTasks() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        return tasks;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "     * Getter for size variable."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "     * @return Size of task list"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    public int size() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        return tasks.size();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "     * Returns if TaskList is empty."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "     * @return true if no task in list, true if there are tasks in list"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    public boolean isEmpty() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        return tasks.isEmpty();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "     * Returns index of a task if task is in list."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "     * @param t Task"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "     * @return Index of task"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "     * @throws DukeException If task not in taskList"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    public int indexOf(Task t) throws DukeException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        if (this.getTasks().contains(t)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "            return tasks.indexOf(t);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "            throw new DukeException(\"Task not in taskList.\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "     * Get Task from list at index."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "     * @param index Index of task in list"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "     * @return Task at index"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "     * @throws DukeException If index is out of range of list"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    public Task get(int index) throws DukeException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        if (isValidIndex(index)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "            return tasks.get(index - 1);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "            throw new DukeException(\"OOPS!!! There is no task at index \" + index + \".\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "     * Add task to list."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "     * @param t Task to be added to list"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    public void add(Task t) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        tasks.add(t);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "     * Remove task from task list."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "     * @param t Task to be removed"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "     * @throws DukeException If task is not in task list"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    public void remove(Task t) throws DukeException {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        if (tasks.contains(t)) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "            tasks.remove(t);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "            throw new DukeException(\"OOPS!!! There is no such task in taskList.\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "     * Remove task at index from list."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "     * @param index Index at which to remove task"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "     * @return Removed task"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "     * @throws DukeException If index is out of range of list"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    public Task remove(int index) throws DukeException {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        Task task;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        if (isValidIndex(index)) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "            task \u003d tasks.remove(index - 1);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "            throw new DukeException(\"OOPS!!! There is no such task in taskList.\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        return task;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    private boolean isValidIndex(int index) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        return index \u003e\u003d 1 \u0026\u0026 index \u003c\u003d tasks.size();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "     * Find Tasks by description keywords."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "     * @param keyword Keyword string that is used to search for tasks."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "     * @return List of tasks that matches the keyword passed in."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    public List\u003cTask\u003e findByKeyword(String keyword) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        List\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e("
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "                getTasks().stream()"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "                        .filter(t -\u003e t.getDesc().contains(keyword))"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "                        .collect(Collectors.toList())"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        );"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        return tasks;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "     * Clear TaskList and remove all tasks."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    public void clear() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        getTasks().clear();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "     * Sort the list of tasks by a certain criteria."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "     * @param sortType Type of data by which user want to sort tasks."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "     * @throws DukeException If sort type passed in is not supported (ie. not sortable)."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    public void sort(SortType sortType) throws DukeException {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        Comparator\u003cTask\u003e comparator;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        Function\u003cTask, String\u003e fn;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        switch (sortType) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        case DESC:"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "            fn \u003d Task::getDesc;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        case TASKTYPE:"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "            fn \u003d t -\u003e t.getClass().getName();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        case DONE:"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "            fn \u003d t -\u003e t.getDoneStatus();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "            throw new DukeException(\"Invalid sort type\");"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        getTasks().sort(Comparator.comparing(fn));"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xinmingzh": 174
    }
  },
  {
    "path": "src/main/java/duke/task/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "public class Todo extends Task {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "     * Initialise a new Task."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "     * @param desc Description of the Task."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "     * @param done Whether the task is done."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    public Todo(String desc, boolean... done) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        super(desc);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        if (done.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "            setDone(done[0]);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "     * Parses user input and look for Todo object."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "     * @param commandContent Input string"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "     * @return Todo object"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    public static Todo parse(String commandContent) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        return new Todo(commandContent);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "     *  Parses stored data string and look for Todo object."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "     * @param input Data string from save file."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "     * @param done Optional isDone input"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "     * @return Todo object"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    public static Todo parseFromData(String input, boolean... done) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        String[] inputs \u003d input.split(gap);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        Todo todo \u003d new Todo(inputs[2]);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        if (done.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "            todo.setDone(done[0]);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        return todo;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    public String toStorageString() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        return \"T\" + gap + super.toStorageString();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xinmingzh": 53
    }
  },
  {
    "path": "src/main/java/duke/task/UsingDateTime.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "import java.util.Locale;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "public interface UsingDateTime {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    DateTimeFormatter readFormatter \u003d DateTimeFormatter.ofPattern(\"d/M/yyyy HHmm\", Locale.ENGLISH);"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    DateTimeFormatter displayFormatter \u003d DateTimeFormatter.ofPattern(\"d MMM yy HH:mm\", Locale.ENGLISH);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xinmingzh": 9
    }
  },
  {
    "path": "src/main/java/duke/text/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "package duke.text;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "import duke.types.CommandWord;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "     * Parse input string fullCommand, checks for invalid input format, and return a validated command."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "     * @param fullCommand Raw input string"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "     * @return Initialized Command instance"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "     * @throws DukeException If input string is of an invalid format."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    public static Command parse(String fullCommand) throws DukeException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        String[] inputs \u003d fullCommand.split(\" \", 2);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        String commandWordString \u003d inputs.length \u003e\u003d 1 ? inputs[0].toUpperCase() : \"\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        String commandContent    \u003d inputs.length \u003d\u003d 2 ? inputs[1]               : \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "            Command command \u003d CommandWord.valueOf(commandWordString).parseCommand(commandContent);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "            assert command !\u003d null : \"Command not created\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "            return command;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        } catch (IllegalArgumentException ex) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "            throw new DukeException(\"OOPS!!! No such command\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xinmingzh": 28
    }
  },
  {
    "path": "src/main/java/duke/types/CommandWord.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "package duke.types;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "import duke.command.AddCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "import duke.command.ByeCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "import duke.command.ClearCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "import duke.command.DeleteCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "import duke.command.DoneCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "import duke.command.FindCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "import duke.command.ListCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "import duke.command.NotDoneCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "import duke.command.SortCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "import duke.command.TagCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "import duke.task.Todo;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "public enum CommandWord {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    TODO {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        public Command parseCommand(String commandContent) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "            return new AddCommand(Todo.parse(commandContent));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    },"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    DEADLINE {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        public Command parseCommand(String commandContent) throws DukeException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "            return new AddCommand(Deadline.parse(commandContent));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    },"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    EVENT {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        public Command parseCommand(String commandContent) throws DukeException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "            return new AddCommand(Event.parse(commandContent));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    },"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    LIST {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        public Command parseCommand(String commandContent) throws DukeException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "            return new ListCommand(commandContent);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    },"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    FIND {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        public Command parseCommand(String commandContent) throws DukeException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "            return new FindCommand(commandContent);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    },"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    DONE {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        public Command parseCommand(String commandContent) throws DukeException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "            return new DoneCommand(commandContent);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    },"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    DELETE {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        public Command parseCommand(String commandContent) throws DukeException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "            return new DeleteCommand(commandContent);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    },"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    BYE {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        public Command parseCommand(String commandContent) throws DukeException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "            return new ByeCommand(commandContent);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    },"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    CLEAR {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        public Command parseCommand(String commandContent) throws DukeException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "            return new ClearCommand(commandContent);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    },"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    NOTDONE {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        public Command parseCommand(String commandContent) throws DukeException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "            return new NotDoneCommand(commandContent);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    },"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    TAG {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        public Command parseCommand(String commandContent) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "            return new TagCommand(commandContent);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    },"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    SORT {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        public Command parseCommand(String commandContent) throws DukeException {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "            return new SortCommand(commandContent);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    };"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    public abstract Command parseCommand(String commandContent) throws DukeException;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xinmingzh": 94
    }
  },
  {
    "path": "src/main/java/duke/types/SortType.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "package duke.types;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "public enum SortType {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    DESC,"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    TASKTYPE,"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    DONE"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xinmingzh": 7
    }
  },
  {
    "path": "src/main/java/duke/ui/DialogBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "import javafx.scene.shape.Circle;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": " * An example of a custom control using FXML."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": " * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": " * containing text from the speaker."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    protected Label dialog;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    protected ImageView displayPicture;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    protected DialogBox(String text, Image img) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(getClass().getResource(\"/view/DialogBox.fxml\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        int imageSize \u003d 40;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        displayPicture.setImage(img);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        displayPicture.setFitWidth(imageSize);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        displayPicture.setFitHeight(imageSize);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        displayPicture.setClip(new Circle(imageSize / 2, imageSize / 2, imageSize / 2));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    void flip() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        Collections.reverse(tmp);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xinmingzh": 56
    }
  },
  {
    "path": "src/main/java/duke/ui/LeftDialogBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "public class LeftDialogBox extends DialogBox {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    protected LeftDialogBox(String text, Image img) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        super(text, img);"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        dialog.setText(\"User\\n\" + dialog.getText());"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        this.flip();"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xinmingzh": 11
    }
  },
  {
    "path": "src/main/java/duke/ui/MainWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "import duke.core.Duke;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": " * Controller for duke.ui.MainWindow. Provides the layout for the other controls."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "public class MainWindow extends AnchorPane {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    private Duke duke;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "     * Initialise a new MainWindow."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    public MainWindow() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(getClass().getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    public void setDuke(Duke d) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        duke \u003d d;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "     * appends them to the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        String response \u003d duke.getResponse(input);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "                new LeftDialogBox(input, userImage),"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "                new RightDialogBox(response, dukeImage)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        );"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        if (duke.getExit()) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "            Platform.exit();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "     * Show Hi Msg in app window."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    public void setHiMsg() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        dialogContainer.getChildren().add("
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "                new RightDialogBox(duke.getUi().hiMsg, dukeImage)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        );"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xinmingzh": 84
    }
  },
  {
    "path": "src/main/java/duke/ui/RightDialogBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "public class RightDialogBox extends DialogBox {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    RightDialogBox(String text, Image img) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        super(text, img);"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        dialog.setText(\"Duke\\n\" + dialog.getText());"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xinmingzh": 10
    }
  },
  {
    "path": "src/main/java/duke/ui/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "import duke.types.SortType;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    protected Scanner sc;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    protected TaskList tasks;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    public String line \u003d \"    ____________________________________________________________\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    public String indent \u003d \"     \";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    public String hiMsg \u003d \"Hello! I\u0027m Duke.\\nWhat can I do for you?\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    public String byeMsg \u003d \"Bye. Hope to see you again soon!\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    public String addMsg \u003d \"Got it. I\u0027ve added this task:\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    public String doneMsg \u003d \"Nice! I\u0027ve marked this task as done:\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    public String notDoneMsg \u003d \"Nice! I\u0027ve marked this task as not done:\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    public String delMsg \u003d \"Noted. I\u0027ve removed this task:\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    public String emptyListMsg \u003d \"You have no task in the list\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    public List\u003cString\u003e outputs \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "     * Initialize a Ui object."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    public Ui() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        this.sc \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "     * Getter method for output buffer."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "     * @return Output buffer as a list of output strings"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    public List\u003cString\u003e getOutputs() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        return outputs;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "     * Set output buffer."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "     * @param outputs Output buffer contain list of outputs"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    public void setOutputs(List\u003cString\u003e outputs) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        this.outputs \u003d outputs;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "     * Add string to program output buffer."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "     * @param output Output string"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    public void addToOutputs(String output) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        outputs.add(output);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "     * Get program output string without clearing output buffer."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "     * @return Output string"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    public String getOutputString() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        return String.join(\"\\n\", getOutputs());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "     * Get program output string and clear output buffer."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "     * @return Output String"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    public String getOutputStringAndClear() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        String s \u003d getOutputString();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        getOutputs().clear();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        return s;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "     * Read a line of input."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "     * @return Line of input."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "     * @throws DukeException If no next line."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    public String readCommand() throws DukeException {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        if (sc.hasNext()) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "            return sc.nextLine();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "            throw new DukeException(\"Scanner failed to get next line\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    public void showLine() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        showMsg(line);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    public void showMsg(String msg) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        addToOutputs(msg);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    public void showError(String message) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        showMsg(message);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    public void showHiMsg() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        showMsg(hiMsg);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    public void showByeMsg() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        showMsg(byeMsg);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "     * Show add task message."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "     * @param t Task to be shown"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    public void showAddTaskMsg(Task t) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        showMsg(addMsg);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        showTask(t);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        showListSize();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    public void showTaskDoneMsg(Task t) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        showMsg(doneMsg);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        showTask(t);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    public void showTaskNotDoneMsg(Task t) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        showMsg(notDoneMsg);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        showTask(t);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "     * Show message when task is deleted."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "     * @param t Task to be shown"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    public void showTaskDelMsg(Task t) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        showMsg(delMsg);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        showTask(t);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        showListSize();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    public void showEmptyListMsg() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        showMsg(emptyListMsg);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "     * Show Welcome text."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    public void showWelcome() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        showHiMsg();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "     * Shows all tasks in task list."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "     * @throws DukeException If there is no task in task list"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    public void showTasks() throws DukeException {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        if (!tasks.isEmpty()) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "            showMsg(\"Here are the tasks in your list:\");"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "            for (Task t: tasks.getTasks()) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "                showMsg((tasks.indexOf(t) + 1) + \". \" + t);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "            showEmptyListMsg();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "     * Shows size of list."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    public void showListSize() {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        if (!tasks.isEmpty()) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "            showMsg(\"Now you have \" + tasks.size() + \" task\" + (tasks.size() \u003d\u003d 1 ? \"\" : \"s\") + \" in the list\");"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "            showEmptyListMsg();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    public void showTask(Task task) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        showMsg(\"  \" + task);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    public void setTasks(TaskList tasks) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        this.tasks \u003d tasks;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    public void showLoadTaskMsg() {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        showMsg(\"Loading data from file...\");"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    public void showNoRecordsFoundMsg() {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        showMsg(\"No Records Found\");"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    public void showSaveDataMsg() {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        showMsg(\"Saving data...\");"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    public void showNothingToSaveMsg() {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        showMsg(\"Nothing to save.\");"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    public void showSaveErrMsg() {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        showMsg(\"Error saving to file\");"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    public void showDataSavedMsg() {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        showMsg(\"Data saved successfully\");"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    public void showDataLoadedMsg(int size) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        showMsg(size + \" tasks loaded\");"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    public void showLoadingError() {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        showMsg(\"Error loading tasks from file\");"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "     * Display matching tasks in TaskList."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "     * @param foundTasks List of found tasks."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "     * @throws DukeException If there is no tasks in TaskList."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    public void showFoundTasks(List\u003cTask\u003e foundTasks) throws DukeException {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        if (foundTasks.isEmpty()) {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "            showNothingFoundMsg();"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        showMsg(\"Here are the matching tasks in your list:\");"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        foundTasks.forEach(t -\u003e showMsg((foundTasks.indexOf(t) + 1) + \". \" + t));"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    private void showNothingFoundMsg() {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        showMsg(\"No tasks found.\");"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    public void showClearSuccessMsg() {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        showMsg(\"All tasks cleared.\");"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    public void showSortSuccessMsg(SortType sortType) {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        showMsg(\"Tasks sorted according to \" + sortType.toString());"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xinmingzh": 248
    }
  },
  {
    "path": "src/main/resources/view/DialogBox.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        \u003cLabel fx:id\u003d\"dialog\" text\u003d\"TextArea\" wrapText\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        \u003cImageView fx:id\u003d\"displayPicture\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "xinmingzh": 14
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "\u003cfx:root maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"700.0\" prefWidth\u003d\"600.0\" type\u003d\"AnchorPane\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"523.0\" AnchorPane.bottomAnchor\u003d\"1.0\" AnchorPane.leftAnchor\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" AnchorPane.bottomAnchor\u003d\"1.0\" AnchorPane.rightAnchor\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"657.0\" prefWidth\u003d\"600.0\" vvalue\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "            \u003ccontent\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "                \u003cVBox fx:id\u003d\"dialogContainer\" prefWidth\u003d\"588.0\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "                \u003c/VBox\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "            \u003c/content\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        \u003cURL value\u003d\"@main.css\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "xinmingzh": 24
    }
  },
  {
    "path": "src/test/java/duke/command/CommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "public class CommandTest {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xinmingzh": 4
    }
  },
  {
    "path": "src/test/java/duke/storage/StorageTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "package duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "public class StorageTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xinmingzh": 9
    }
  },
  {
    "path": "src/test/java/duke/task/DeadlineTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "public class DeadlineTest {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xinmingzh": 5
    }
  },
  {
    "path": "src/test/java/duke/task/EventTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "public class EventTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    void event_initialise_success() throws DukeException {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        Event event \u003d new Event(\"test event\","
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "                LocalDateTime.parse(\"2019-07-06T18:00\"),"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "                LocalDateTime.parse(\"2019-07-06T20:00\"));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        assertEquals(LocalDateTime.parse(\"2019-07-06T18:00\"), event.getStartDate());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        assertEquals(LocalDateTime.parse(\"2019-07-06T20:00\"), event.getEndDate());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        event.setStartDate(LocalDateTime.parse(\"2019-08-06T20:00\"));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        event.setEndDate(LocalDateTime.parse(\"2019-09-06T20:00\"));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        assertEquals(LocalDateTime.parse(\"2019-08-06T20:00\"), event.getStartDate());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        assertEquals(LocalDateTime.parse(\"2019-09-06T20:00\"), event.getEndDate());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        assertEquals(\"[E][X] test event (at: 6 Aug 19 20:00 to 6 Sep 19 20:00)\", event.toString());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xinmingzh": 24
    }
  },
  {
    "path": "src/test/java/duke/task/TaskListTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "public class TaskListTest {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xinmingzh": 4
    }
  },
  {
    "path": "src/test/java/duke/task/TaskTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "public class TaskTest {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xinmingzh": 4
    }
  },
  {
    "path": "src/test/java/duke/task/TodoTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "public class TodoTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    void testToString() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        Todo todo \u003d new Todo(\"test\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "        assertEquals(\"[T][X] test\", todo.toString());"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xinmingzh": 13
    }
  },
  {
    "path": "src/test/java/duke/text/ParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "package duke.text;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "public class ParserTest {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xinmingzh": 4
    }
  },
  {
    "path": "src/test/java/duke/ui/UiTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "public class UiTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xinmingzh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xinmingzh": 8
    }
  }
]
