[
  {
    "path": "README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# Setting up"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "**Prerequisites**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "* JDK 11"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "* Recommended: IntelliJ IDE"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "* Fork this repo to your GitHub account and clone the fork to your computer"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "**Importing the project into IntelliJ**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "1. Open IntelliJ (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "1. Set up the correct JDK version."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "   * Click `Configure` \u003e `Structure for new Projects` (in older versions of Intellij:`Configure` \u003e `Project Defaults` \u003e `Project Structure`)."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "   * If JDK 11 is listed in the drop down, select it. If it is not, click `New...` and select the directory where you installed JDK 11."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "   * Click `OK`."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "1. Click `Import Project`."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "1. Locate the project directory and click `OK`."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "1. Select `Create project from existing sources` and click `Next`."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "1. Rename the project if you want. Click `Next`."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "1. Ensure that your src folder is checked. Keep clicking `Next`."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "1. Click `Finish`."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "# Tutorials "
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "Duke Increment | Tutorial"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "---------------|---------------"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "`A-Gradle` | [Gradle Tutorial](tutorials/gradleTutorial.md)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "`A-TextUiTesting` | [Text ui Testing Tutorial](tutorials/textUiTestingTutorial.md)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "`Level-10` | JavaFX tutorials:\u003cbr\u003e→ [Part 1: Introduction to JavaFX][fx1]\u003cbr\u003e→ [Part 2: Creating a GUI for Duke][fx2]\u003cbr\u003e→ [Part 3: Interacting with the user][fx3]\u003cbr\u003e→ [Part 4: Introduction to FXML][fx4]"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "[fx1]: \u003ctutorials/javaFxTutorialPart1.md\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "[fx2]: \u003ctutorials/javaFxTutorialPart2.md\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "[fx3]: \u003ctutorials/javaFxTutorialPart3.md\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "[fx4]: \u003ctutorials/javaFxTutorialPart4.md\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "# Feedback, Bug Reports"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "* If you have feedback or bug reports, please post in [se-edu/duke issue tracker](https://github.com/se-edu/duke/issues)."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "* We welcome pull requests too."
      }
    ],
    "authorContributionMap": {
      "Alvinnyk": 1,
      "-": 38
    }
  },
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    id \u0027org.openjfx.javafxplugin\u0027 version \u00270.0.7\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "group \u0027seedu.duke\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "javafx {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    version \u003d \"11.0.2\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    modules \u003d [\u0027javafx.controls\u0027, \u0027javafx.fxml\u0027]"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "}"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    // Change this to your main class."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    mainClassName \u003d \"Launcher\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-media\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-media\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-media\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-web\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-web\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-web\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    "
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    archiveVersion \u003d \"0.1.3\""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "}"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "run {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Alvinnyk": 47,
      "-": 18
    }
  },
  {
    "path": "src/main/java/DialogBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import javafx.scene.shape.Circle;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import javafx.scene.text.Font;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import javafx.scene.text.FontWeight;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    private final Circle circleDisplay \u003d new Circle(50, 50, 50);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    private Label text;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public DialogBox(Label l, ImageView iv) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        text \u003d l;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        displayPicture \u003d iv;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        Label indentation \u003d new Label(\"    \");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        indentation.setFont(Font.font(\"Courier New\",15));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        text.setWrapText(true);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        displayPicture.setFitWidth(100.0);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        displayPicture.setFitHeight(100.0);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        displayPicture.setImage(iv.getImage());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        displayPicture.setClip(circleDisplay);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        this.setAlignment(Pos.TOP_RIGHT);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        this.getChildren().addAll(text, indentation, displayPicture);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        this.setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        FXCollections.reverse(tmp);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        this.getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public static DialogBox getUserDialog(Label l, ImageView iv) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        l.setFont(Font.font(\"Courier New\",15));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        var db \u003d new DialogBox(l, iv);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        db.setStyle(\"-fx-background-color: #E0E0E0\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public static DialogBox getDukeDialog(Label l, ImageView iv) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        l.setFont(Font.font(\"Courier New\", 15));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        var db \u003d new DialogBox(l, iv);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        db.setStyle(\"-fx-background-color: #F4F4F4\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public static DialogBox getWelcomeDialog(Label l, ImageView iv){"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        l.setFont(Font.font(\"Courier New\", FontWeight.BOLD, 20));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        var db \u003d new DialogBox(l, iv);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        db.setStyle(\"-fx-background-color: #F4F4F4\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Alvinnyk": 67
    }
  },
  {
    "path": "src/main/java/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import logic.Command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import logic.CommandParser;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import model.Tasklist;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import ui.UI;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import ui.UI_CLI;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    private Tasklist tasks;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    private UI ui;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    private final String INPUT_DELIMITER \u003d \" \";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    private CommandParser commandParser \u003d new CommandParser(INPUT_DELIMITER);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    private boolean isExit;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        new Duke(\"duke.txt\", false).run();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * Creates an instance of Duke with CLI or GUI. Duke will load and save data into the filepath"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * @param filepath the path of which data is saved and loaded from"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * @param isGUI    determines if GUI or CLI is loaded"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public Duke(String filepath, boolean isGUI) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        if (isGUI) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            ui \u003d new UI_GUI();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            ui \u003d new UI_CLI();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        assert ui !\u003d null: \"UI not initiated\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        storage \u003d new Storage(Paths.get(filepath));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        tasks \u003d storage.load();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * Runs the program with CLI interface"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        ui.printWelcome();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        isExit \u003d false;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        while (!isExit) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            String userInput \u003d ui.getUserInput();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            String response \u003d runCommand(userInput);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            ui.printContent(response);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * Takes in input from user, parses the command, and executes it"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * @param userInput input from the user"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * @return output of the command"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public String runCommand(String userInput) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        Command command \u003d commandParser.parseCommand(userInput);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        String response \u003d command.execute(tasks, ui, storage);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        isExit \u003d command.isExit();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        return response;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * Checks if the program has exited"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * @return true if exited, false otherwise"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        return isExit;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Alvinnyk": 72,
      "-": 4
    }
  },
  {
    "path": "src/main/java/Launcher.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": " * A launcher class to workaround classpath issues."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        Application.launch(UI_GUI.class, args);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Alvinnyk": 10
    }
  },
  {
    "path": "src/main/java/UI_GUI.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import javafx.scene.layout.Background;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import javafx.stage.StageStyle;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import ui.UI;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "public class UI_GUI extends Application implements UI {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    private Duke duke;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    private Image user \u003d new Image(this.getClass().getResourceAsStream(\"/images/User.jpg\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    private Image duke_image \u003d new Image(this.getClass().getResourceAsStream(\"/images/Duke.jpg\"));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    private Scene scene;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    private boolean isExit;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public void printWelcome() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        String welcome \u003d \"Hello! I\u0027m Duke!\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                + \"What can I do for you? :)\\n\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        Label dukeText \u003d new Label(welcome);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                DialogBox.getWelcomeDialog(dukeText, new ImageView(duke_image))"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        );"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public String getUserInput() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public void printContent(String s) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        duke \u003d new Duke(\"duke.txt\", true);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        //The container for the content of the chat to scroll."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        scrollPane \u003d new ScrollPane();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        dialogContainer \u003d new VBox();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        scrollPane.setContent(dialogContainer);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        userInput \u003d new TextField();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        sendButton \u003d new Button(\"Send\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        AnchorPane mainLayout \u003d new AnchorPane();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        mainLayout.getChildren().addAll(scrollPane, userInput, sendButton);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        mainLayout.setStyle(\"-fx-background-color: #C0C0C0\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        scene \u003d new Scene(mainLayout);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        //Step 2. Formatting the window to look as expected"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        stage.setTitle(\"Duke\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        stage.setResizable(false);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        stage.setMinHeight(800.0);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        stage.setMinWidth(1100.0);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        mainLayout.setPrefSize(1100.0, 800.0);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        scrollPane.setPrefSize(1085, 735);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        scrollPane.setHbarPolicy(ScrollPane.ScrollBarPolicy.NEVER);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        scrollPane.setVbarPolicy(ScrollPane.ScrollBarPolicy.ALWAYS);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        scrollPane.setVvalue(1.0);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        scrollPane.setFitToWidth(true);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        // You will need to import `javafx.scene.layout.Region` for this."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        dialogContainer.setPrefHeight(Region.USE_COMPUTED_SIZE);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        userInput.setPrefWidth(1025.0);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        sendButton.setPrefWidth(55.0);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        AnchorPane.setTopAnchor(scrollPane, 1.0);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        AnchorPane.setBottomAnchor(sendButton, 1.0);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        AnchorPane.setRightAnchor(sendButton, 1.0);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        AnchorPane.setLeftAnchor(userInput, 1.0);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        AnchorPane.setBottomAnchor(userInput, 1.0);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        //Step 3. Add functionality to handle user input."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        sendButton.setOnMouseClicked((event) -\u003e {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            dialogContainer.getChildren().add(getDialogLabel(userInput.getText()));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            userInput.clear();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        });"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        userInput.setOnAction((event) -\u003e {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            dialogContainer.getChildren().add(getDialogLabel(userInput.getText()));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            userInput.clear();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        });"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        dialogContainer.heightProperty().addListener((observable) -\u003e scrollPane.setVvalue(1.0));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        //Part 3. Add functionality to handle user input."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        sendButton.setOnMouseClicked((event) -\u003e {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            isExit \u003d handleUserInput();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            if (duke.isExit()) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                    Thread.sleep(1000);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                } catch (Exception E) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                    System.out.println(\"Wait failed\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                Platform.exit();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        });"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        userInput.setOnAction((event) -\u003e {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            isExit \u003d handleUserInput();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            if (duke.isExit()) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                    Thread.sleep(1000);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                } catch (Exception E) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                    System.out.println(\"Wait failed\");"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                Platform.exit();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        });"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        stage.setScene(scene);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        stage.show();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        printWelcome();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    private Label getDialogLabel(String text) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        // You will need to import `javafx.scene.control.Label`."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        Label textToAdd \u003d new Label(text);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        textToAdd.setWrapText(true);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        return textToAdd;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    private boolean handleUserInput() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        Label userText \u003d new Label(userInput.getText());"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        Label dukeText \u003d new Label(getResponse(userInput.getText()));"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                DialogBox.getUserDialog(userText, new ImageView(user)),"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                DialogBox.getDukeDialog(dukeText, new ImageView(duke_image))"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        );"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        return duke.isExit();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    private String getResponse(String input) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        String response \u003d duke.runCommand(input);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        return response;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Alvinnyk": 166
    }
  },
  {
    "path": "src/main/java/logic/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "package logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import model.Tasklist;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import ui.UI;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "public interface Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * Executes the Command"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * @param tasks   the TaskList of Tasks"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * @param ui      The User Interface"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * @param storage Storage"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * @return a String that represents the response of the executed command"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    String execute(Tasklist tasks, UI ui, Storage storage);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * Checks if the Command executes would result in an exit"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * @return true if it is an exit command, false otherwise"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    boolean isExit();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Alvinnyk": 26
    }
  },
  {
    "path": "src/main/java/logic/CommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "package logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "public class CommandParser {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    private final String DELIMITER;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    private final String TODO \u003d \"todo\";"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    private final String EVENT \u003d \"event\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    private final String DEADLINE \u003d \"deadline\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    private final String EXIT \u003d \"bye\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    private final String LIST \u003d \"list\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    private final String DONE \u003d \"done\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    private final String DELETE \u003d \"delete\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    private final String FIND \u003d \"find\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    private final String HELP \u003d \"help\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * Creates an instance of CommandParser with a specified delimiter"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * @param delimiter a string at which command arguments are separated by"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public CommandParser(String delimiter) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        this.DELIMITER \u003d delimiter;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * Parses the command string and outputs the resulting command"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * @param s String to be pared"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * @return resulting Command"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public Command parseCommand(String s) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            String[] sp \u003d s.split(DELIMITER, 2);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            return parseName(sp[0], sp[1]);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        } catch(Exception E){"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            return parseName(s, null);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * Parses the command type and its arguments and outputs the corresponding Command"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * @param commandType type of the command as a String"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * @param arguments   arguments of that command"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * @return the resulting Command"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    private Command parseName(String commandType, String arguments) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        assert commandType !\u003d null: \"commandType should not be null\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        if (commandType.equals(EXIT)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        } else if (commandType.equals(LIST)) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        } else if (commandType.equals(DONE)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            return new DoneCommand(arguments);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        } else if (commandType.equals(DELETE)) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            return new DeleteCommand(arguments);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        } else if (commandType.equals(TODO)) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            return new TodoCommand(arguments);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        } else if (commandType.equals(EVENT)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            return new EventCommand(arguments);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        } else if (commandType.equals(DEADLINE)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            return new DeadlineCommand(arguments);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        } else if (commandType.equals(FIND)) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            return new FindCommand(arguments);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        } else if (commandType.equals(HELP)) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            return new WrongCommand();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Alvinnyk": 74
    }
  },
  {
    "path": "src/main/java/logic/DeadlineCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "package logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import model.Tasklist;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import model.deadline;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import ui.UI;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "public class DeadlineCommand implements Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    private static final DateTimeFormatter DATE_TIME_FORMATTER \u003d DateTimeFormatter.ofPattern(\"dd/MM/yyyy HHmm\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    private String arguments;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    private String details;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * Creates an instance of DeadlineCommand with its arguments"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * @param arguments arguments of the Command"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public DeadlineCommand(String arguments) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        this.arguments \u003d arguments;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            String[] sp \u003d arguments.split(\"/by\", 2);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            this.description \u003d sp[0].trim();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            this.details \u003d sp[1].trim();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        } catch (Exception E) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            this.description \u003d arguments;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            this.details \u003d null;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * Parses the arguments of the Command and executes it"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * @param tasks   the TaskList of Tasks"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * @param ui      The User Interface"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * @param storage Storage"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public String execute(Tasklist tasks, UI ui, Storage storage) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        String content \u003d \"\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            if (arguments \u003d\u003d null || arguments.trim().equals(\"\")) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                content \u003d \"OOPS! The description of a deadline cannot be empty.\\n\" +"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                            \"Usage: Deadline \u003cdescription\u003e /by \u003ctime or details\u003e\\n\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                deadline task \u003d new deadline(description, details);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                tasks.add(task);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                content +\u003d \"Got it. I\u0027ve added this task:\\n\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                if (details !\u003d null) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                    content +\u003d \"[\" + task.getSymbol() + \"][\" + task.getIsDoneSymbol() + \"] \" + task.getDescription() + \" (by: \" + task.getTime() + \")\\n\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                    content +\u003d \"[\" + task.getSymbol() + \"][\" + task.getIsDoneSymbol() + \"] \" + task.getDescription() + \"\\n\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                content +\u003d \"Now you have \" + tasks.size() + \" tasks in this list\\n\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        } catch (Exception E){"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            content \u003d \"Ohno something went wrong! :(\\n\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        return content;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Alvinnyk": 71
    }
  },
  {
    "path": "src/main/java/logic/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "package logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import model.Tasklist;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import ui.UI;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "public class DeleteCommand implements Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    private String arguments;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * Creates an instance of DeleteCommand with its arguments"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * @param arguments arguments of the Command"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public DeleteCommand(String arguments) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        this.arguments \u003d arguments;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * Parses the arguments of the Command and executes it"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * @param tasks   the TaskList of Tasks"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * @param ui      The User Interface"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * @param storage Storage"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public String execute(Tasklist tasks, UI ui, Storage storage) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        String content \u003d \"\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            int index \u003d Integer.parseInt(arguments.trim());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            if (tasks.size() \u003e\u003d index) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                content +\u003d \"Noted. I\u0027ve removed this task:\\n\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                content +\u003d \"[\" + tasks.get(index - 1).getSymbol() + \"][\" + tasks.get(index - 1).getIsDoneSymbol() + \"] \" + tasks.get(index - 1).getDescription();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                if (tasks.get(index - 1).getSymbol() \u003d\u003d \u0027D\u0027) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                    if(tasks.get(index - 1).getDetails() !\u003d null){"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                        content +\u003d \" (by: \" + tasks.get(index - 1).getTime() + \")\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                } else if (tasks.get(index - 1).getSymbol() \u003d\u003d \u0027E\u0027) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                    if(tasks.get(index - 1).getDetails() !\u003d null) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                        content +\u003d \" (at: \" + tasks.get(index - 1).getDetails() + \")\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                content +\u003d \"\\n\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                tasks.remove(index - 1);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                content +\u003d \"You now have \" + tasks.size() + \" tasks in this list\\n\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                content +\u003d \"Failed to delete Task!\\n\""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                         + \"No such Task found!\\n\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        } catch (Exception E){"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            content \u003d \"Ohno! You have entered an invalid argument!\\n\""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                    + \"Usage: delete \u003cid\u003e\\n\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        return content;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Alvinnyk": 65
    }
  },
  {
    "path": "src/main/java/logic/DoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "package logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import model.Tasklist;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import ui.UI;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "public class DoneCommand implements Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    private String arguments;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * Creates an instance of DoneCommand with its arguments"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * @param arguments arguments of the Command"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public DoneCommand(String arguments) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        this.arguments \u003d arguments;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * Parses the arguments of the Command and executes it"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * @param tasks   the TaskList of Tasks"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * @param ui      The User Interface"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * @param storage Storage"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public String execute(Tasklist tasks, UI ui, Storage storage) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        String content \u003d \"\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            int index \u003d Integer.parseInt(arguments.trim());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            tasks.get(index - 1).markAsDone();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            content +\u003d \"Nice! I\u0027ve marked this task as done:\\n\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                     + \"[\" + tasks.get(index - 1).getSymbol() + \"]\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                     + \"[\" + tasks.get(index - 1).getIsDoneSymbol() + \"] \" + tasks.get(index - 1).getDescription();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            if (tasks.get(index - 1).getSymbol() \u003d\u003d \u0027D\u0027) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                if(tasks.get(index - 1).getDetails() !\u003d null){"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                    content +\u003d \" (by: \" + tasks.get(index - 1).getTime() + \")\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            } else if (tasks.get(index - 1).getSymbol() \u003d\u003d \u0027E\u0027) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                if(tasks.get(index - 1).getDetails() !\u003d null) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                    content +\u003d \" (at: \" + tasks.get(index - 1).getDetails() + \")\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            content +\u003d \"\\n\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        } catch (Exception E){"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            content \u003d \"Ohno! You have entered an invalid argument!\\n\" +"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                    \"Usage: done \u003cid\u003e\\n\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        return content;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Alvinnyk": 61
    }
  },
  {
    "path": "src/main/java/logic/EventCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "package logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import model.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import model.Tasklist;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import model.event;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import ui.UI;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "public class EventCommand implements Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    private String arguments;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    private String details;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * Creates an instance of EventCommand with its arguments"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * @param arguments arguments of the Command"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public EventCommand(String arguments) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        this.arguments \u003d arguments;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            String[] sp \u003d arguments.split(\" /at \", 2);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            this.description \u003d sp[0].trim();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            this.details \u003d sp[1].trim();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        } catch (Exception E) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            this.description \u003d arguments;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            this.details \u003d null;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * Parses the arguments of the Command and executes it"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * @param tasks   the TaskList of Tasks"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * @param ui      The User Interface"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * @param storage Storage"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public String execute(Tasklist tasks, UI ui, Storage storage) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        String content \u003d \"\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            if (arguments \u003d\u003d null || arguments.trim().equals(\"\")) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                content \u003d \"OOPS!!! The description of a event cannot be empty.\\n\" +"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                            \"Usage: event \u003cdescription\u003e /at \u003cdetails\u003e\\n\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                Task task \u003d new event(description, details);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                tasks.add(task);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                content +\u003d \"Got it. I\u0027ve added this task:\\n\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                if (details !\u003d null) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                    content +\u003d \"[\" + task.getSymbol() + \"][\" + task.getIsDoneSymbol() + \"] \" + task.getDescription() + \" (at: \" + task.getDetails() + \")\\n\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                    content +\u003d \"[\" + task.getSymbol() + \"][\" + task.getIsDoneSymbol() + \"] \" + task.getDescription() + \"\\n\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                content +\u003d \"Now you have \" + tasks.size() + \" tasks in this list\\n\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        } catch (Exception E){"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            content \u003d \"Ohno something went wrong! :(\\n\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        return content;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Alvinnyk": 69
    }
  },
  {
    "path": "src/main/java/logic/ExitCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "package logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import model.Tasklist;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import ui.UI;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "public class ExitCommand implements Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * Creates an instance of ExitCommand"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public ExitCommand() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * Parses the arguments of the Command and executes it"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * @param tasks   the TaskList of Tasks"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * @param ui      The User Interface"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * @param storage Storage"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public String execute(Tasklist tasks, UI ui, Storage storage) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        String content \u003d \"Bye. Hope to see you again soon!\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        return content;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Alvinnyk": 35
    }
  },
  {
    "path": "src/main/java/logic/FindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "package logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import model.Tasklist;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import ui.UI;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "public class FindCommand implements Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    private String arguments;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * Creates an instance of FindCommand with its arguments"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * @param arguments arguments of the Command"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public FindCommand(String arguments) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        this.arguments \u003d arguments;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * Parses the arguments of the Command and executes it"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * @param tasks   the TaskList of Tasks"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * @param ui      The User Interface"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * @param storage Storage"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public String execute(Tasklist tasks, UI ui, Storage storage) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        String content \u003d \"\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        if (this.arguments \u003d\u003d null || this.arguments.trim().equals(\"\")) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            content \u003d \"OOPS!!! The description of a find cannot be empty.\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            ArrayList\u003cInteger\u003e indexes \u003d new ArrayList\u003cInteger\u003e();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            int i;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            for (i \u003d 0; i \u003c tasks.size(); i++) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                if (tasks.get(i).getDescription().contains(this.arguments)) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                    indexes.add(i);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            if(indexes.size() \u003d\u003d 0){"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                content +\u003d \"There are no Tasks that fits your description\\n\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            for (i \u003d 0; i \u003c indexes.size(); i++) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                content +\u003d (indexes.get(i) + 1) + \". \";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                content +\u003d \"[\" + tasks.get(indexes.get(i)).getSymbol() + \"]\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                content +\u003d \"[\" + tasks.get(indexes.get(i)).getIsDoneSymbol() + \"]\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                content +\u003d \" \" + tasks.get(indexes.get(i)).getDescription();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                if (tasks.get(indexes.get(i)).getSymbol() \u003d\u003d \u0027D\u0027) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                    if (tasks.get(indexes.get(i)).getDetails() !\u003d null) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                        content +\u003d \" (by: \" + tasks.get(indexes.get(i)).getTime() + \")\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                } else if (tasks.get(indexes.get(i)).getSymbol() \u003d\u003d \u0027E\u0027) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                    if (tasks.get(indexes.get(i)).getDetails() !\u003d null) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                        content +\u003d \" (at: \" + tasks.get(indexes.get(i)).getDetails() + \")\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                content +\u003d \"\\n\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        return content;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Alvinnyk": 71
    }
  },
  {
    "path": "src/main/java/logic/HelpCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "package logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import model.Tasklist;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import ui.UI;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "public class HelpCommand implements Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * Creates an instance of HelpCommand"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public HelpCommand() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * Parses the arguments of the Command and executes it"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * @param tasks   the TaskList of Tasks"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * @param ui      The User Interface"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * @param storage Storage"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public String execute(Tasklist tasks, UI ui, Storage storage) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        String content \u003d \"list      Usage: list                                     Lists out and saves all tasks\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                       + \"todo      Usage: todo \u003cdescription\u003e                       Adds a todo task\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                       + \"event     Usage: event \u003cdescription\u003e /at \u003cdetails\u003e        adds an event task\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                       + \"deadline  Usage: deadline \u003cdescription\u003e /by \u003cdetails\u003e     adds a deadline task\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                       + \"find      Usage: find \u003cname\u003e                              searches for a task that matches the name\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                       + \"done      Usage: done \u003cid\u003e                                marks the task at id as done\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                       + \"delete    Usage: delete \u003cid\u003e                              removes the task at id\\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                       + \"help      Usage: help                                     brings out the help menu\\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                       + \"bye       Usage: bye                                      Exits the program\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        return content;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Alvinnyk": 42
    }
  },
  {
    "path": "src/main/java/logic/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "package logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import model.Tasklist;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import ui.UI;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "public class ListCommand implements Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * Creates an instance of ListCommand"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public ListCommand() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * Parses the arguments of the Command and executes it"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * @param tasks   the TaskList of Tasks"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * @param ui      The User Interface"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * @param storage Storage"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public String execute(Tasklist tasks, UI ui, Storage storage) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        int i;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        String content \u003d \"\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        if(tasks.size() \u003d\u003d 0){"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            content +\u003d \"There are currently no tasks!\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        for (i \u003d 0; i \u003c tasks.size(); i++) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            content +\u003d (i + 1) + \". \";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            content +\u003d \"[\" + tasks.get(i).getSymbol() + \"]\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            content +\u003d \"[\" + tasks.get(i).getIsDoneSymbol() + \"]\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            content +\u003d \" \" + tasks.get(i).getDescription();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            if (tasks.get(i).getSymbol() \u003d\u003d \u0027D\u0027) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                if (tasks.get(i).getDetails() !\u003d null) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                    content +\u003d \" (by: \" + tasks.get(i).getTime() + \")\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            } else if (tasks.get(i).getSymbol() \u003d\u003d \u0027E\u0027) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                if (tasks.get(i).getDetails() !\u003d null) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                    content +\u003d \" (at: \" + tasks.get(i).getDetails() + \")\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            content +\u003d \"\\n\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        storage.save(tasks);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        return content;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Alvinnyk": 58
    }
  },
  {
    "path": "src/main/java/logic/TodoCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "package logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import model.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import model.Tasklist;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import model.todo;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import ui.UI;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "public class TodoCommand implements Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    private String arguments;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * Creates an instance of TodoCommand with its arguments"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * @param arguments arguments of the Command"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public TodoCommand(String arguments) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        this.arguments \u003d arguments;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * Parses the arguments of the Command and executes it"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * @param tasks   the TaskList of Tasks"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * @param ui      The User Interface"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * @param storage Storage"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public String execute(Tasklist tasks, UI ui, Storage storage) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        String content \u003d \"\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            if (arguments \u003d\u003d null || arguments.trim().equals(\"\")) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                content \u003d \"OOPS! The description of a todo cannot be empty.\\n\" +"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                            \"Usage: todo \u003cdescription\u003e\\n\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                Task task \u003d new todo(arguments.trim());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                tasks.add(task);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                content +\u003d \"Got it. I\u0027ve added this task:\\n\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                content +\u003d \"[\" + task.getSymbol() + \"][\" + task.getIsDoneSymbol() + \"] \" + task.getDescription() + \u0027\\n\u0027;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                content +\u003d \"Now you have \" + tasks.size() + \" tasks in this list\\n\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        } catch (Exception E) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            content \u003d \"Ohno something went wrong! :(\\n\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        return content;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Alvinnyk": 55
    }
  },
  {
    "path": "src/main/java/logic/WrongCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "package logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import model.Tasklist;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import ui.UI;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "public class WrongCommand implements Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public String execute(Tasklist tasks, UI ui, Storage storage) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        String content \u003d \"OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\\n\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        return content;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Alvinnyk": 18
    }
  },
  {
    "path": "src/main/java/model/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "package model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "public abstract class Task {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    private boolean isDone;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        return this.description;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public boolean isDone() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        return this.isDone;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public char getIsDoneSymbol() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        if (isDone) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            return \u0027\\u2714\u0027;    //check mark symbol"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            return \u0027\\u2718\u0027;    //cross mark symbol"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public void setIsDone(boolean isDone) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        this.isDone \u003d isDone;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public boolean markAsDone() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        return this.isDone \u003d true;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public boolean markAsUndone() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        return this.isDone \u003d false;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public char getSymbol() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        return \u0027?\u0027;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public String getDetails() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public abstract String getTime();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Alvinnyk": 49
    }
  },
  {
    "path": "src/main/java/model/Tasklist.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "package model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "public class Tasklist extends ArrayList\u003cTask\u003e {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public Tasklist() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public Tasklist(List\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        super(tasks);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Alvinnyk": 14
    }
  },
  {
    "path": "src/main/java/model/deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "package model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "public class deadline extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    private final char symbol \u003d \u0027D\u0027;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    private String details;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    private static final DateTimeFormatter DATE_TIME_FORMATTER \u003d DateTimeFormatter.ofPattern(\"dd/MM/yyyy HHmm\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    private LocalDateTime time;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public deadline(String description, String details) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        this.details \u003d details;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            System.out.println(details);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            this.time \u003d LocalDateTime.parse(details.trim(), DATE_TIME_FORMATTER);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        } catch (Exception E) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            this.time \u003d null;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public deadline(String description, Boolean isDone, String details) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        this.details \u003d details;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            this.time \u003d LocalDateTime.parse(details.trim(), DATE_TIME_FORMATTER);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        } catch (Exception E) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            this.time \u003d null;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        this.setIsDone(isDone);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public char getSymbol() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        return this.symbol;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public String getDetails() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        return this.details;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public String getTime() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        if (this.time \u003d\u003d null) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            return getDetails();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            return this.time.toString();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Alvinnyk": 51
    }
  },
  {
    "path": "src/main/java/model/event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "package model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "public class event extends Task {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    private final char symbol \u003d \u0027E\u0027;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    private String details;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public event(String description, String details) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        this.details \u003d details;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public event(String description, Boolean isDone, String details) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        this.details \u003d details;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        this.setIsDone(isDone);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public char getSymbol() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        return this.symbol;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public String getDetails() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        return this.details;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public String getTime() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        return getDetails();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Alvinnyk": 34
    }
  },
  {
    "path": "src/main/java/model/todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "package model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "public class todo extends Task {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    private final char symbol \u003d \u0027T\u0027;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public todo(String description) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public todo(String description, boolean isDone) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        this.setIsDone(isDone);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public char getSymbol() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        return this.symbol;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public String getTime() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        return getDescription();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Alvinnyk": 24
    }
  },
  {
    "path": "src/main/java/storage/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "package storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import model.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import model.Tasklist;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import model.deadline;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import model.event;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import model.todo;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import java.io.PrintWriter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import java.io.Reader;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import java.util.StringJoiner;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    private final Path filePath;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    private final String DELIMITER \u003d \"//\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * Creates an instance of Storage to save and load data into the filepath"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * @param filePath path of which data is saved and loaded from"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public Storage(Path filePath) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * Creates and instance of Storage with no filepath"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public Storage() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        this.filePath \u003d null;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * Loads data from the filepath and outputs the TaskList of Tasks"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * @return a TaskList of Tasks"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public Tasklist load() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        return parseFromFile(this.filePath);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * Saves the current TaskList into the filepath"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * @param tasks TaskList to be saved"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public void save(Tasklist tasks) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            serializeToFile(filePath, tasks);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        } catch (Exception E) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            System.out.println(\"Failed to save file\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * Attempts to read from filepath and returns it as a TaskList."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * It returns an empty TaskList if no filepath is specified or filepath is inaccessible"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * @param filepath filepath in which it is loaded from"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * @return Resulting TaskList"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public Tasklist parseFromFile(Path filepath) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        Tasklist tasks \u003d new Tasklist();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            Reader reader \u003d Files.newBufferedReader(filepath);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            Scanner sc \u003d new Scanner(reader);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            while (sc.hasNextLine()) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                tasks.add(parseLine(sc.nextLine()));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        } catch (Exception E) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            System.out.println(\"Error in parsing file! Returning empty TaskList\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        return tasks;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * Parses the command and returns the resulting Task"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * @param line input command to be parsed"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * @return resulting Task"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public Task parseLine(String line) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        assert line !\u003d null: \"input string cannot be null\";"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        "
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        String[] sp \u003d line.split(DELIMITER);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        Class\u003c? extends Task\u003e taskType \u003d parseTaskType(sp[0]);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        String taskDescription \u003d parseTaskDescription(sp[1]);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        boolean taskIsDone \u003d parseTaskIsDone(sp[2]);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        Task task \u003d null;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        if (taskType.equals(todo.class)) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            task \u003d new todo(taskDescription, taskIsDone);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        } else if (taskType.equals(deadline.class)) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            String taskDetails \u003d parseTaskDetails(sp[3]);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            task \u003d new deadline(taskDescription, taskIsDone, taskDetails);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        } else if (taskType.equals(event.class)) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            String taskDetails \u003d parseTaskDetails(sp[3]);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            task \u003d new event(taskDescription, taskIsDone, taskDetails);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        return task;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * Parses a string and outputs the corresponding task type"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * @param s string to be parsed into the corresponding task type"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * @return resulting task type"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    private Class\u003c? extends Task\u003e parseTaskType(String s) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        if (s.equals(\"T\")) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            return todo.class;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        } else if (s.equals(\"D\")) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            return deadline.class;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        } else if (s.equals(\"E\")) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            return event.class;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            System.out.println(\"Error in resolving task type\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * Parses a string and outputs the corresponding task description"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * @param s string to be parsed into the corresponding task description"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * @return resulting task description"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    private String parseTaskDescription(String s) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        return s;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * Parses a string and outputs the corresponding task isDone"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * @param s string to be parsed into the corresponding task isDone"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * @return resulting task isDone"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    private boolean parseTaskIsDone(String s) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        if (s.equals(\"Y\")) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        } else if (s.equals(\"N\")) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            System.out.println(\"Error in resolving task done\");"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * Parses a string and outputs the corresponding task details"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * @param s string to be parsed into the corresponding task details"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * @return resulting task details"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    private String parseTaskDetails(String s) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        if (s.equals(\"null\")) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            return s;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * writes data into the file"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * @param filePath filepath to write to"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * @param tasks    tasks to be written to filepath"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    private void serializeToFile(Path filePath, Tasklist tasks) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            PrintWriter writer \u003d new PrintWriter(filePath.toFile(), \"UTF-8\");"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            int i;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            for (i \u003d 0; i \u003c tasks.size(); i++) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                writer.write(serializeLine(tasks.get(i)));"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                writer.println();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            writer.close();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        } catch (Exception E) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            System.out.println(\"Unable to write to file\");"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * Formats and serializes a task into a String"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * @param task task to be formatted to a String"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * @return a String that repersents the Task"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    private String serializeLine(Task task) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        StringJoiner sj \u003d new StringJoiner(DELIMITER);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        String taskType \u003d serializeTaskType(task);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        sj.add(taskType);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        String taskDescription \u003d serializeTaskDescription(task);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        sj.add(taskDescription);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        String taskIsDone \u003d serializeTaskIsDone(task);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        sj.add(taskIsDone);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        if (taskType.equals(\"D\")) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            String taskDetails \u003d serializeTaskDetails(task);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            sj.add(taskDetails);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        } else if (taskType.equals(\"E\")) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            String taskDetails \u003d serializeTaskDetails(task);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            sj.add(taskDetails);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        return sj.toString();"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * Serializes the Task type into a String"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * @param task Task to be serialized"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * @return resulting String"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    private String serializeTaskType(Task task) {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        if (task instanceof todo) {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            return \"T\";"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        } else if (task instanceof deadline) {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            return \"D\";"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        } else if (task instanceof event) {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            return \"E\";"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * Serializes the Task isDone into a String"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * @param task Task to be serialized"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * @return resulting String"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    private String serializeTaskIsDone(Task task) {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        if (task.isDone()) {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            return \"Y\";"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        } else if (!task.isDone()) {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            return \"N\";"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "            return \"X\";"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * Serializes the Task description into a String"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * @param task Task to be serialized"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * @return resulting String"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    private String serializeTaskDescription(Task task) {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        return task.getDescription();"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * Serializes the Task details into a String"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * @param task Task to be serialized"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     * @return resulting String"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    private String serializeTaskDetails(Task task) {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        return task.getDetails();"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Alvinnyk": 270
    }
  },
  {
    "path": "src/main/java/ui/UI.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "package ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "public interface UI {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    void printWelcome();"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    String getUserInput();"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    void printContent(String s);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Alvinnyk": 10
    }
  },
  {
    "path": "src/main/java/ui/UI_CLI.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "package ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "public class UI_CLI implements UI {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    private final Scanner sc;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    private final PrintStream output \u003d System.out;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public UI_CLI() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        sc \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public void printWelcome() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        String logo \u003d \" ____        _        \\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                + \"|  _ \\\\ _   _| | _____ \\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                + \"| | | | | | | |/ / _ \\\\\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                + \"| |_| | |_| |   \u003c  __/\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        println(\"Hello from\\n\" + logo);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        printContent(\"Hello! I\u0027m Duke\\n\" +"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                \"What can I do for you?\\n\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    private void println(String s) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        output.println(s);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public void printContent(String content) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        printHorizontalLine();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        println(content);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        printHorizontalLine();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public void printHorizontalLine() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        output.println(\"____________________________________________________________\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    public String getUserInput() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        return sc.nextLine();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Alvinnyk": 45
    }
  },
  {
    "path": "src/test/java/DeleteCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import logic.Command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import logic.DeleteCommand;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import model.Tasklist;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import model.todo;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import ui.UI;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import ui.UI_CLI;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "public class DeleteCommandTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    void execute_delete_test() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        UI ui \u003d new UI_CLI();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        Storage storage \u003d new Storage();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        Tasklist actualTasks \u003d new Tasklist();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        actualTasks.add(new todo(\"Borrow a Book\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        Command command \u003d new DeleteCommand(\"1\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        String actualOutput \u003d command.execute(actualTasks, ui, storage);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        String expectedOutput \u003d \"Noted. I\u0027ve removed this task:\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                + \"[T][x] Borrow a Book\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                + \"You now have 0 tasks in this list\\n\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        assertEquals(expectedOutput, actualOutput);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Alvinnyk": 30
    }
  },
  {
    "path": "src/test/java/TodoCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import logic.Command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import logic.TodoCommand;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import model.Tasklist;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import model.todo;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import ui.UI;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import ui.UI_CLI;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "public class TodoCommandTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    void execute_todo_test() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        UI ui \u003d new UI_CLI();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        Storage storage \u003d new Storage();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        Tasklist expectedTasks \u003d new Tasklist();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        expectedTasks.add(new todo(\"Borrow a Book\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        Tasklist actualTasks \u003d new Tasklist();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        Command command \u003d new TodoCommand(\"Borrow a Book\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        String actualOutput \u003d command.execute(actualTasks, ui, storage);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        String expectedOutput \u003d \"Got it. I\u0027ve added this task:\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                + \"[T][x] Borrow a Book\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "                + \"Now you have 1 tasks in this list\\n\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        assertEquals(expectedTasks.get(0).getDetails(), actualTasks.get(0).getDetails());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        assertEquals(actualOutput, expectedOutput);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Alvinnyk": 34
    }
  },
  {
    "path": "src/test/java/WrongCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import logic.Command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import logic.CommandParser;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import model.Tasklist;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import model.todo;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import ui.UI;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import ui.UI_CLI;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "public class WrongCommandTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    void execute_wrong_test() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        UI ui \u003d new UI_CLI();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        Storage storage \u003d new Storage();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        Tasklist expectedTasks \u003d new Tasklist();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        Tasklist actualTasks \u003d new Tasklist();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        actualTasks.add(new todo(\"Borrow a Book\"));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        CommandParser commandParser \u003d new CommandParser(\" \");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        Command command \u003d commandParser.parseCommand(\"This is a invalid command\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        String actualOutput \u003d command.execute(actualTasks, ui, storage);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        String expectedOutput \u003d \"OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\\n\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "        assertEquals(actualOutput, expectedOutput);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Alvinnyk": 31
    }
  },
  {
    "path": "tutorials/javaFxTutorialPart2.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# JavaFX Tutorial Part 2 - Creating a GUI for Duke"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "In this tutorial, we will be creating a GUI for Duke from scratch based on the following mockup."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "![Mockup for Duke](assets/DukeMockup.png)"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "## JavaFX controls"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "Controls are reusable ui elements. Refer to the [JavaFX\u0027s official documentation](https://openjfx.io/javadoc/11/javafx.controls/javafx/scene/control/package-summary.html) for a list of controls available."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "From the mockup above, can you identify the controls that we will need to use? "
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "Mockup | Control "
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "------ | :---: |"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "![ImageView](assets/MockupImageView.png) | ImageView"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "![Label](assets/MockupLabel.png) | Label"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "![Button](assets/MockupButton.png) | Button"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "![TextField](assets/MockupTextField.png) | TextField"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "![ScrollPane](assets/MockupScrollPane.png) | ScrollPane"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "## Designing the Layout"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "Now that we know what controls we need to implement our ui, let’s start programming! We quickly run into a problem: how do we show all of them on the screen at once? "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "Each scene is initialized with a root `Node`. In the previous tutorial, our root `Node` was a `Label`."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "What happens when we need to display more than one `Node` on the `Scene`? For that, we need to understand the JavaFX hierarchy. Recall from the previous tutorial:"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "![Hierarchy of Objects in JavaFX](assets/JavaFxHierarchy.png)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " "
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "From the diagram, you see that the root `Node` can contain many other `Nodes` and similarly, each of those `Nodes` can contain many other `Nodes`. This means that if we can find a _container_ to set as our root `Node`, we can place all our other `Nodes` in it."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "But how do we get the exact layout we want in the ui? JavaFX provides that functionality in the form of **layout panes** in `javafx.scene.layouts`. Each layout pane follows a _layout policy_ to decide how to arrange its children. For example, the `VBox` lays out its children in a single vertical column and its counterpart, the `HBox` lays out its children in a single horizontal row. "
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ":bulb: A comprehensive list of layouts and how they behave is available here from the [official documentation](https://openjfx.io/javadoc/11/javafx.graphics/javafx/scene/layout/package-summary.html)."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "One way to obtain the layout in the mockup is as follows. "
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "![Duke\u0027s layout](assets/DukeSceneGraph.png) "
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "To get that layout, we create a new `AnchorPane` and add our controls to it. Similarly, we create a new `VBox` to hold the contents of the `ScrollPane`. The code should look something like this:"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke extends Application {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    private Scene scene;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // ... "
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "         //Step 1. Setting up required components"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "         "
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        //The container for the content of the chat to scroll."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "         scrollPane \u003d new ScrollPane();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "         dialogContainer \u003d new VBox();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "         scrollPane.setContent(dialogContainer);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "         userInput \u003d new TextField();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "         sendButton \u003d new Button(\"Send\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     "
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "         AnchorPane mainLayout \u003d new AnchorPane();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "         mainLayout.getChildren().addAll(scrollPane, userInput, sendButton);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "         scene \u003d new Scene(mainLayout);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     "
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "         stage.setScene(scene);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "         stage.show();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // more code to be added here later"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "Run the application and you should see something like this:"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "![Duke\u0027s raw layout](assets/RawLayout.png)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": " "
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "That is not what we were expecting, what did we forget to do?"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "## Styling the Controls"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "Almost every JavaFX object offer properties that you can set to customize its look and feel. For example, the `Stage` allows you to set its preferred size and title. Again, refer to the official JavaFX documentation for a comprehensive list of properties that you can modify. Here’s how you can get the application to look like the mockup:"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "Add the following code to the bottom of the `start` method. You\u0027ll have to add `import javafx.scene.layout.Region;` to the imports too."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        //Step 1. Formatting the window to look as expected."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "         "
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        //..."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        //Step 2. Formatting the window to look as expected"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        stage.setTitle(\"Duke\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        stage.setResizable(false);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        stage.setMinHeight(600.0);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        stage.setMinWidth(400.0);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        mainLayout.setPrefSize(400.0, 600.0);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        scrollPane.setPrefSize(385, 535);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        scrollPane.setHbarPolicy(ScrollPane.ScrollBarPolicy.NEVER);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        scrollPane.setVbarPolicy(ScrollPane.ScrollBarPolicy.ALWAYS);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        scrollPane.setVvalue(1.0);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        scrollPane.setFitToWidth(true);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        // You will need to import `javafx.scene.layout.Region` for this. "
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        dialogContainer.setPrefHeight(Region.USE_COMPUTED_SIZE);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput.setPrefWidth(325.0);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        sendButton.setPrefWidth(55.0);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        AnchorPane.setTopAnchor(scrollPane, 1.0);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        AnchorPane.setBottomAnchor(sendButton, 1.0);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        AnchorPane.setRightAnchor(sendButton, 1.0);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        AnchorPane.setLeftAnchor(userInput , 1.0);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        AnchorPane.setBottomAnchor(userInput, 1.0);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        // more code to be added here later"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "Run the application again. It should now look like this:"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "![Duke\u0027s Final layout](assets/FinalLayout.png)"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "## Exercises"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "1. In the tutorial, we used an `AnchorPane` to achieve the desired layout.  "
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Can you find other ways to obtain a similar layout? "
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "   1. What are the advantages and disadvantages of your layout?"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "1. Try interacting with the application"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "   1. What happens when you press the `Enter` key or left-click the send button?"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Why?"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "**Authors:**"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "* Initial Version: Jeffry Lum"
      }
    ],
    "authorContributionMap": {
      "Alvinnyk": 3,
      "-": 155
    }
  },
  {
    "path": "tutorials/javaFxTutorialPart3.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# JavaFX Tutorial 3 – Interacting with the user"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "Picking up from where we left off last tutorial, we have successfully achieved the desired layout. Now let’s make the application respond to user input. "
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "Rather than to do everything in one try, let’s iterate and build up towards our final goal. "
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "## Iteration 1 – Echoing the User"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "JavaFX has an _event-driven architecture style_. As such, we programmatically define _handler_ methods to execute as a response to certain _events_. When an event is detected, JavaFX will call the respective handlers."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "For Duke, there are two events that we want to respond to, namely the user pressing `Enter` in the `TextField` and left-clicking the `Button`. These are the `onAction` event for the `TextField` and the `onMouseClicked` event for the `Button`."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "For now, let’s have the application add a new `Label` with the text from the `TextField`. Update the `Main` class as follows. You\u0027ll need to add an `import javafx.scene.control.Label;` too."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "@Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public void start(Stage stage) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    // Step 1 code here"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    //Step 2 code here"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    //Step 3. Add functionality to handle user input."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    sendButton.setOnMouseClicked((event) -\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        dialogContainer.getChildren().add(getDialogLabel(userInput.getText()));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    });"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    "
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    userInput.setOnAction((event) -\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        dialogContainer.getChildren().add(getDialogLabel(userInput.getText()));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    });"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": " * Iteration 1:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": " * Creates a label with the specified text and adds it to the dialog container."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": " * @param text String containing text to add"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": " * @return a label with the specified text that has word wrap enabled."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "private Label getDialogLabel(String text) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    // You will need to import `javafx.scene.control.Label`."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    Label textToAdd \u003d new Label(text);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    textToAdd.setWrapText(true);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    return textToAdd;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "Run the program and give it a whirl!"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "![Echo not scrolling as intended](assets/EchoNotScrolling.png)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "At first glance everything appears to work perfectly. However, when the `VBox` stretches beyond the confines of the `ScrollPane`, the `ScrollPane` does not scroll down automatically as expected. We can remedy this by attaching a handler on the `VBox` to react to its own size changing and scrolling the `ScrollPane` down."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "Update the `start` method as shown below."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "public void start(Stage stage) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    // current code ..."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": " "
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    //Scroll down to the end every time dialogContainer\u0027s height changes."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    dialogContainer.heightProperty().addListener((observable) -\u003e scrollPane.setVvalue(1.0));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "Verify that the `ScrollPane` scrolls as intended."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "## Iteration 2 – Adding Dialog Boxes"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "In the mockup of the ui, notice that the dialog boxes are composed of two different controls (`ImageView` and `Label`) and reused multiple times. In situations like this, it is often beneficial to create our own custom control."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s create our custom control `DialogBox`:"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label text;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public DialogBox(Label l, ImageView iv) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        text \u003d l;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        displayPicture \u003d iv;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        text.setWrapText(true);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        displayPicture.setFitWidth(100.0);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        displayPicture.setFitHeight(100.0);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        this.setAlignment(Pos.TOP_RIGHT);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        this.getChildren().addAll(text, displayPicture);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "We use the code in our main class just like any other control. Here are the steps to update the code to use the custom control in `Main.java`."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "First, add these imports:"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "Next, add two images to the `main/resources/images` folder."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "For this tutorial, we have two images `DaUser.png` and `DaDuke.png` to represent the user avatar and Duke\u0027s avatar respectively but you can use any image you want."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "Image|Filename"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "---|---"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "![DaDuke](assets/DaUser.png) | `DaUser.png`"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "![DaUser](assets/DaDuke.png) | `DaDuke.png`"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke extends Application {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    // ..."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image user \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image duke \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    // ..."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "Add a new method to handle user input:"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": " * Iteration 2:"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": " * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": " * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "private void handleUserInput() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    Label userText \u003d new Label(userInput.getText());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    Label dukeText \u003d new Label(getResponse(userInput.getText()));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            new DialogBox(userText, new ImageView(user)),"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            new DialogBox(dukeText, new ImageView(duke))"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    );"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    userInput.clear();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": " * You should have your own function to generate a response to user input."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": " * Replace this stub with your completed method."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "private String getResponse(String input) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    return \"Duke heard: \" + input;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "Update the event handler code in the `start` method to use the new `handleUserInput` method:"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "@Override"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "public void start(Stage stage) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    //..."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    //Part 3. Add functionality to handle user input."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    sendButton.setOnMouseClicked((event) -\u003e {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        handleUserInput();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    });"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    userInput.setOnAction((event) -\u003e {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        handleUserInput();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    });"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "Run the program and see how it works."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "![DialogBoxes Iteration 2](assets/DialogBoxesIteration2.png) "
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "## Iteration 3 – Adding custom behavior to DialogBox"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "One additional benefit of defining a custom control is that we can add behavior specific to our `DialogBox`. Let’s add a method to flip a dialog box such that the image on the left to differentiate between user input and Duke’s output."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": " * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "private void flip() {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    this.setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    FXCollections.reverse(tmp);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    this.getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "public static DialogBox getUserDialog(Label l, ImageView iv) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    return new DialogBox(l, iv);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "public static DialogBox getDukeDialog(Label l, ImageView iv) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    var db \u003d new DialogBox(l, iv);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    db.flip();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    return db;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "You\u0027ll need to update the imports as follows:"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "Now, we can go back to the `Main` class and change the event handler to use our new `DialogBox`. "
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "private void handleUserInput() {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    Label userText \u003d new Label(userInput.getText());"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    Label dukeText \u003d new Label(getResponse(userInput.getText()));"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "            DialogBox.getUserDialog(userText, new ImageView(user)),"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "            DialogBox.getDukeDialog(dukeText, new ImageView(duke))"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    );"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    userInput.clear();"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "Run the application and play around with it. "
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "![DialogBoxes Iteration 3](assets/DialogBoxesIteration3.png)"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "Congratulations! "
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "You have successfully implemented a fully functional GUI for Duke!  "
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "## Exercises"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "1. While the GUI looks similar to the mockup, there are still parts that need to be refined. Try your hand at some of these tasks:"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "   * Add padding between each DialogBox"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "   * Add padding between each ImageView and its Label"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "   * Clip the ImageView into a circle"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "   * Add background color to each dialog box"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "1. After attempting the changes, reflect critically on the following:"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "   * What was the development workflow like?"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "   * Is the code base well-organized?"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "**Authors:**"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "* Initial Version: Jeffry Lum"
      }
    ],
    "authorContributionMap": {
      "Alvinnyk": 1,
      "-": 242
    }
  },
  {
    "path": "tutorials/javaFxTutorialPart4.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# JavaFX Tutorial 4 – FXML "
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "While we have produced a fully functional prototype, there are a few major problems with our application."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "1. The process of visually enhancing the GUI is long and painful:"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "   * Does the `TextField` need to be 330px or 325px wide? "
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "   * How much padding is enough padding to look good?"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "   Every small change requires us to rebuild and run the application.  "
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "1. Components are heavily dependent on each other:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "   Why does `Main` need to know that `DialogBox` needs a `Label`? "
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "   What happens if we change the `Label` to a custom `ColoredLabel` in the future?  "
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    "
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    We need to minimize the amount of information each control needs to know about another."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    Otherwise, making changes in the future will break existing features."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "1. The code is untidy and long:"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "   Why is all the code in one place?"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "   The `Main` class attempts to do it all. "
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "   Code for visual tweaks, listeners and even utility methods are all in one file."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "   This makes it difficult to find and make changes to existing code."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "FXML is a XML-based language that allows us to define our user interface. Properties of JavaFX objects can be defined in the FXML file. For example:  "
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "```xml"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "The FXML snippet define a TextField similar to the one that we programmatically defined previous in Tutorial 2. Notice how concise FXML is compared to the plain Java version."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s return to Duke and convert it to use FXML instead."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "# Rebuilding the Scene using FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "Scene Builder is a tool developed by Oracle and currently maintained by Gluon. It is a What-You-See-Is-What-You-Get GUI creation tool. [Download](https://gluonhq.com/products/scene-builder/#download) the appropriate version for your OS and install it."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "Create the following files in `src/main/resources/view`:"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "**MainWindow.fxml**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "```xml"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"MainWindow\"\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "         \u003ccontent\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" /\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "         \u003c/content\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "**DialogBox.fxml**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "```xml"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003cpadding\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003c/padding\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "1. Let’s explore the provided FXML files in Scene Builder. "
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    "
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    Running the tool brings up the main screen."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    Select `Open Project` \u003e `src/main/resources/view/MainWindow.fxml`. Inspect each control and its properties."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "   ![SceneBuilder opening MainWindow.fxml](assets/SceneBuilder.png)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "1. On the right accordion pane, you can modify the properties of the control that you have selected. Try changing the various settings and see what they do!"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": " "
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "1. On the left accordion, you can see that we have set the controller class to `MainWindow`. "
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "We will get to that later."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": " "
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "   ![Controller for MainWindow](assets/MainWindowController.png)"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "1. Let’s repeat the process for `DialogBox`."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "   The main difference here is that DialogBox checks `Use fx:root construct` and _does not define a controller class_. "
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "   ![Settings for DialogBox](assets/DialogBoxController.png)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "## Using Controllers"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "As part of the effort to separate the code handling Duke\u0027s logic and ui, let\u0027s _refactor_ the ui-related code to its own class."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "We call these ui classes _controllers_. "
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s implement the `MainWindow` controller class that we specified in `MainWindow.fxml`."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "**MainWindow.java**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": " * Controller for MainWindow. Provides the layout for the other controls."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends AnchorPane {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    private Duke duke;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setDuke(Duke d) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        duke \u003d d;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        String response \u003d duke.getResponse(input);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "                DialogBox.getUserDialog(input, userImage),"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "                DialogBox.getDukeDialog(response, dukeImage)"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        );"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "The `@FXML` annotation marks a `private` or `protected` member and makes it accessible to FXML despite its modifier."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "Without the annotation, we will have to make everything `public` and expose our ui to unwanted changes."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "The `FXMLLoader` will map the a control with a `fx:id` defined in FXML to a variable with the same name in its controller."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "Notice how in `MainWindow`, we can invoke `TextField#clear()` on `userInput` and access its content just as we did in the previous example."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "Similarly, methods like private methods like `handleUserInput` can be used in FXML when annotated by `@FXML`. "
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "## Using FXML in our application"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "Let\u0027s create a new `Main` class as the bridge between the existing logic in `Duke` and the ui in `MainWindow`."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "**Main.java**"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "@Override"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": " * A GUI for Duke using FXML."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "public class Main extends Application {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    private Duke duke \u003d new Duke();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "            AnchorPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "            Scene scene \u003d new Scene(ap);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "Again, we can interact with the `AnchorPane` defined in the FXML as we would have if we created the `AnchorPane` ourselves."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "For our custom `DialogBox`, we did not define a controller so let\u0027s create a controller for it."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "**DialogBox.java**"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": " * An example of a custom control using FXML."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": " * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": " * containing text from the speaker."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    private DialogBox(String text, Image img) {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "        displayPicture.setImage(img);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "        Collections.reverse(tmp);"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "        getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "        setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "    public static DialogBox getUserDialog(String text, Image img) {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "        return new DialogBox(text, img);"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "    public static DialogBox getDukeDialog(String text, Image img) {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "        var db \u003d new DialogBox(text, img);"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "When we create a new instance of `DialogBox`, we set both the controller and root Node to `DialogBox`. "
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "From this point onwards we can interact with `DialogBox` as we have in the previous tutorials."
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "The last change that we have to make is to point our `Launcher` class in the right direction:"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "In `Launcher.java`"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "//...    "
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "Application.launch(Main.class, args);"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "//..."
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "[todo]: # (Discussion on the fx:root pattern.)"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "## Exercises"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "1. Convert `MainWindow` to use the `fx:root` construct."
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "1. Extend `MainWindow` to have a `Stage` as a root Node."
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "1. Customize the appearance of the application further with CSS."
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "**Authors:**"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "* Initial Version: Jeffry Lum"
      }
    ],
    "authorContributionMap": {
      "Alvinnyk": 4,
      "-": 290
    }
  },
  {
    "path": "tutorials/textUiTestingTutorial.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Alvinnyk"
        },
        "content": "# Text ui Testing Tutorial"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "1. Create a folder `[project root]\\text-ui-test`"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "1. Add a `runtest.bat` (if you are on Windows) or `runtest.sh` (if you are on a *nix OS) into the folder, containing the script below.\u003cbr\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "  `runtest.bat`:"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "   @ECHO OFF"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "   "
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "   REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "   if not exist ..\\bin mkdir ..\\bin"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "   "
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "   REM delete output from previous run"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "   del ACTUAL.TXT"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "   "
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "   REM compile the code into the bin folder"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "   javac  -cp ..\\src -Xlint:none -d ..\\bin ..\\src\\main\\java\\Duke.java"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "   IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "       echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "       exit /b 1"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "   )"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "   REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "   "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "   REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "   java -classpath ..\\bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "   "
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "   REM compare the output to the expected output"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "   FC ACTUAL.TXT EXPECTED.TXT"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "   "
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "   `runtest.sh`:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "   ```shell"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "   #!/usr/bin/env bash"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "   "
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "   # create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "   if [ ! -d \"../bin\" ]"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "   then"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "       mkdir ../bin"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "   fi"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "   "
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "   # delete output from previous run"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "   if [ -e \"./ACTUAL.TXT\" ]"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "   then"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "       rm ACTUAL.TXT"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "   fi"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "   "
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "   # compile the code into the bin folder, terminates if error occurred"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "   if ! javac -cp ../src -Xlint:none -d ../bin ../src/main/java/Duke.java"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "   then"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "       echo \"********** BUILD FAILURE **********\""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "       exit 1"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "   fi"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "   "
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "   # run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "   java -classpath ../bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "   "
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "   # compare the output to the expected output"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "   diff ACTUAL.TXT EXPECTED.TXT"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "   if [ $? -eq 0 ]"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "   then"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "       echo \"Test result: PASSED\""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "       exit 0"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "   else"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "       echo \"Test result: FAILED\""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "       exit 1"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "   fi"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "1. Update the `javac` and `java` commands in the script to match the name/location of your main class."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "1. Add an `EXPECTED.txt` to the same folder, containing the expected output."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "1. Add an `input.txt` containing the input commands."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "1. Run the `.bat`/`.sh` file to execute the test."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "**Authors:**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "* Initial Version: based on se-edu/addressbook-level2, adapted by Jeffry Lum"
      }
    ],
    "authorContributionMap": {
      "Alvinnyk": 1,
      "-": 73
    }
  }
]
