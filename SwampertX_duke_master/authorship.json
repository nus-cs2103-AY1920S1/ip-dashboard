[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SwampertX"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "group \u0027seedu.duke\u0027"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "version \u00270.2.0a\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SwampertX"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    archiveVersion \u003d \"0.2.0a\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    mainClassName \u003d \"seedu.duke.gui.Launcher\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SwampertX"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SwampertX"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "test {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SwampertX": 36,
      "-": 13
    }
  },
  {
    "path": "docs/README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "## Features "
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "### Feature 1 "
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "Record Todos, Events and Deadlines."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "## Usage"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "```"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "todo \u003cdesc\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "event \u003cdesc\u003e at \u003cdd/mm/yy hhmm\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "deadline \u003cdesc\u003e by \u003cdd/mm/yy hhmm\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "```"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "### Example of usage: "
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "```"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "todo finish up 2103 ip duke"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "deadline submit post lecture quiz by 22/11/2019 2359"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "event prom at 11/11/2011 2000"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "```"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SwampertX"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "A confirmation message about the item being recorded."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "### Feature 2 "
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "List all todos/events/deadlines"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SwampertX"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "## Usage"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "```"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "ls|list"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "```"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "A list of recorded items, in ascending chronological order."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SwampertX"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "### Feature 3 "
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "Mark an item as done, and remove it"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SwampertX"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "## Usage"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "```"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "done \u003cindex\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "delete|rm \u003cindex\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "```"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SwampertX"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "### Example of usage: "
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SwampertX"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "```bash"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "list     # a list of items shown"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "done 2"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "rm 2     # an alias"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "remove 1 # even if not done"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "ls       # 1 and 2 gone."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "```"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SwampertX"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SwampertX"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "Item is deleted from memory."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SwampertX"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "SwampertX": 47,
      "-": 14
    }
  },
  {
    "path": "src/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "list"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "help"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "event a /at tonight"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "deadline b /at tonight"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "todo hahahahahaha"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "list"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "done 1"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "done 2"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "done 2"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "done 3"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "SwampertX": 11
    }
  },
  {
    "path": "src/main/java/seedu/duke/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SwampertX"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "import seedu.duke.command.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "import seedu.duke.task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SwampertX"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SwampertX"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SwampertX"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     * Create a new Duke instance."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     * "
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     * @param filePath the path to the data file to save sata in."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    public Duke(String filePath) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        ui \u003d new Ui(new Scanner(System.in));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        storage \u003d new Storage(filePath);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "            tasks \u003d new TaskList(storage.load());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "            ui.showLoadingError();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "            tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SwampertX"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    public Duke() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        this(\"data/tasks.txt\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SwampertX"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     * Runs the Duke chatbot."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        ui.showWelcome();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        boolean isExit \u003d false;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        while (!isExit) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "                String fullCommand \u003d ui.readCommand();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "                ui.showLine(); // show the divider line (\"_______\")"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "                Command c \u003d Parser.parse(fullCommand);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "                ui.show(c.execute(tasks, ui, storage));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "                isExit \u003d c.isExit();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "            } catch (DukeException e) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "                ui.showError(e.getMessage());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "            } finally {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "                ui.showLine();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "            }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SwampertX"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     * Given input, gets response as string."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     * "
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     * @param input input as multiline string"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     * @return A multiline string output"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    public String getResponse(String input) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "            Command c \u003d Parser.parse(input);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "            return c.execute(tasks, ui, storage);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        } catch (DukeException ex) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "            return ex.getMessage();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SwampertX"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     * Main function that runs the cli."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     *"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     * @param args command line arguments"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        if (args.length !\u003d 0) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "            // gui by default"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "            new Duke(\"data/tasks.txt\").run();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SwampertX": 82
    }
  },
  {
    "path": "src/main/java/seedu/duke/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SwampertX"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    public DukeException() {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SwampertX"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    public DukeException(String s) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        super(s);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SwampertX": 11
    }
  },
  {
    "path": "src/main/java/seedu/duke/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SwampertX"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SwampertX"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "import seedu.duke.command.AddCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "import seedu.duke.command.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "import seedu.duke.command.DeleteCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "import seedu.duke.command.DoneCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "import seedu.duke.command.ExitCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "import seedu.duke.command.GreetCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "import seedu.duke.command.HelpCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "import seedu.duke.command.ListCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "import seedu.duke.command.SearchCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "import seedu.duke.task.Deadline;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "import seedu.duke.task.Event;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "import seedu.duke.task.Task;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "import seedu.duke.task.ToDo;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SwampertX"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     * Given a command string, return a command object."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     * "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     * @param fullCommand a String containing the full command"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     * @return Command a command object"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     * @throws DukeException if any error occurs parsing the command"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    public static Command parse(String fullCommand) throws DukeException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "            String[] commandTokens \u003d Utils.trimAll(fullCommand.split(\" \", 2));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "            switch (commandTokens[0]) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "            case \"todo\":"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "            case \"deadline\":"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "            case \"event\":"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "                return parseAddCommand(fullCommand);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "            case \"delete\":"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "            case \"rm\":"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "                return parseDeleteCommand(commandTokens);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "            case \"list\":"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "            case \"ls\":"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "                return new ListCommand();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "            case \"done\":"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "                return parseDoneCommand(commandTokens);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "            case \"bye\":"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "            case \"exit\":"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "            case \":q\":"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "                return new ExitCommand();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "            case \"search\":"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "                return parseSearchCommand(commandTokens);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "            case \"hi\":"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "            case \"hello\":"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "                return new GreetCommand();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "            case \"help\":"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "            case \"h\":"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "                return new HelpCommand();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "                throw new DukeException(\"Are you lost? You can checkout the \u0027help\u0027 command.\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "            }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "            throw new DukeException(e.getMessage());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SwampertX"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     * Takes in a line and returns a Optional Task. The Optional task is empty if the line is"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     * malformed."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     * "
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     * @param line the line from text file to be parsed into task."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     * @return an Optional Task object parsed from the input line"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    public static Optional\u003cTask\u003e parseLineToTask(String line) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        String[] tokens \u003d Utils.trimAll(line.split(\"\\\\|\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        if (line.length() \u003c 1) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "SwampertX"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "            switch (tokens[0]) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "            case \"E\":"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "                return Optional.of(Event.fromFormattedString(tokens));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "            case \"D\":"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "                return Optional.of(Deadline.fromFormattedString(tokens));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "            case \"T\":"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "                return Optional.of(ToDo.fromFormattedString(tokens));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "                // impossible."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "                assert false;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "                return Optional.empty();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "            }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        } catch (Exception ex) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "            ex.printStackTrace();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "SwampertX"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    // something else: help message"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    // done \u003cnumber\u003e"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    // todo \u003cdesc\u003e"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    // deadline \u003cdesc\u003e /by \u003ctime\u003e"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    // event desc /at \u003ctime\u003e"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "SwampertX"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    private static AddCommand parseAddCommand(String fullCommand) throws DukeException {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        String[] commandTokens \u003d fullCommand.split(\" \", 2);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        switch (commandTokens[0]) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        case \"todo\":"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "            return parseNewTodoCommand(fullCommand);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        case \"deadline\":"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "            return parseNewDeadlineCommand(fullCommand);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        case \"event\":"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "            return parseNewEventCommand(fullCommand);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "            assert false;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "            throw new DukeException(\"Neither todo, event nor deadline.\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "SwampertX"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    // event desc /at \u003ctime\u003e"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    private static AddCommand parseNewEventCommand(String fullCommand) throws DukeException {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        String descAtTime \u003d fullCommand.split(\" \", 2)[1];"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        String[] descTime \u003d Utils.trimAll(descAtTime.split(\" */?at *\"));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        if (descTime.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "            throw new DukeException(\"An event must have a \u0027/at\u0027 delimiter separating \""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "                    + \"description and time!\\n\" + \"Proper format: \u0027event desc /at time\");"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        } else if (descTime[0].equals(\"\")) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "            throw new DukeException(\"Description missing!\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        return new AddCommand(new Event(descTime[0], descTime[1]));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "SwampertX"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    // deadline \u003cdesc\u003e /by \u003ctime\u003e"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    private static AddCommand parseNewDeadlineCommand(String fullCommand) throws DukeException {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        String descByTime \u003d fullCommand.split(\" \", 2)[1];"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        String[] descTime \u003d Utils.trimAll(descByTime.split(\" */?by *\"));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        if (descTime.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "            throw new DukeException(\"A deadline must have a \u0027/by\u0027 delimiter separating \""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "                    + \"description and time!\\n\" + \"Proper format: \u0027event desc /at time\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        } else if (descTime[0].equals(\"\")) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "            throw new DukeException(\"Description missing!\");"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        return new AddCommand(new Deadline(descTime[0], descTime[1]));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "SwampertX"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    private static boolean todoMissingDescription(String[] commandTokens) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        return commandTokens.length !\u003d 2 || commandTokens[1].equals(\"\");"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "SwampertX"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    // todo \u003cdesc\u003e"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    private static AddCommand parseNewTodoCommand(String fullCommand) throws DukeException {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        String[] commandTokens \u003d fullCommand.split(\" \", 2);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        if (todoMissingDescription(commandTokens)) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "            throw new DukeException(\"A todo must have a non-empty description!\");"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        return new AddCommand(new ToDo(commandTokens[1]));"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "SwampertX"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    // (probably) delete number"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    private static DeleteCommand parseDeleteCommand(String[] commandTokens) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        Integer number \u003d Integer.parseInt(commandTokens[1].trim());"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        return new DeleteCommand(number);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "SwampertX"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    private static DoneCommand parseDoneCommand(String[] commandTokens) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        return new DoneCommand(Integer.parseInt(commandTokens[1]));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "SwampertX"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    private static SearchCommand parseSearchCommand(String[] commandTokens) throws DukeException {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "            String keyword \u003d commandTokens[1];"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "            return new SearchCommand(keyword);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "            throw new DukeException(\"Please enter keyword to search for!\");"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SwampertX": 173
    }
  },
  {
    "path": "src/main/java/seedu/duke/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SwampertX"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "import java.io.BufferedWriter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "import java.io.FileReader;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SwampertX"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "import seedu.duke.task.TaskList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SwampertX"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    // save"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    // read"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    private String filePath;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SwampertX"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     * Instantiate a Storage object."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     * @param filePath the path to the file where data is stored and read."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    public Storage(String filePath) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        if (!(new File(filePath)).exists()) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "            createFile();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SwampertX"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     * Returns an array of String that is loaded from the file as specified by the"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     * Storage object, each containing one line."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     * "
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     * @return a stream of strings, each string is a line in the file"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    public String[] load() throws DukeException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        // load tasks from SAVE_LOCATION into the arraylist of tasks, cache."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        try (BufferedReader br \u003d new BufferedReader(new FileReader(filePath))) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "            return br.lines().toArray(String[]::new);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "            throw new DukeException(\"The data file cannot be found!\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "            throw new DukeException(\"The data file cannot be read!\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SwampertX"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    private void createFile() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        File file \u003d new File(filePath);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        if (file.getParent() !\u003d null) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "            File parent \u003d new File(file.getParent());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "            if (!parent.exists()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "                parent.mkdirs();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "            }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SwampertX"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     * Saves the current tasklist into a text file."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     * "
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     * @param tasks TaskList to be saved"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     * @throws IOException if the file is not found"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    public void store(TaskList tasks) throws IOException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        BufferedWriter bw \u003d new BufferedWriter(new FileWriter(filePath));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        bw.write(tasks.getSaveString());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        bw.close();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SwampertX": 68
    }
  },
  {
    "path": "src/main/java/seedu/duke/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SwampertX"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SwampertX"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "import seedu.duke.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SwampertX"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    // listen for input"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    // pass to the parser"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    // get info from parser"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    // show to the user"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    private static final String LINE \u003d \"-------------------------\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    private static final String LOGO \u003d \" ____ _ \\n\" + \"| _ \\\\ _ _| | _____ \\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "            + \"| | | | | | | |/ / _ \\\\\\n\" + \"| |_| | |_| | \u003c __/\\n\" + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    private static final String LOADING_ERROR_MESSAGE \u003d"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "            \"Sorry, we encountered error loading your data. \" + \"You will be using Duke fresh.\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    private static final String HELP_MESSAGE \u003d \"todo \u003cdesc\u003e\\n\" + \"event \u003cdesc\u003e at dd/mm/yyyy hhmm\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "            + \"deadline \u003cdesc\u003e by dd/mm/yyyy hhmm\" + \"list\\n\" + \"delete \u003cnumber\u003e\\n\" + \"exit\\n\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    private Scanner sc;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SwampertX"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     * Creates a Ui object with a scanner."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     * @param sc Scanner for the Ui object"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    public Ui(Scanner sc) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        this.sc \u003d sc;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SwampertX"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     * Reads a line of command from stdin."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     * "
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     * @return the line of command read."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    public String readCommand() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        System.out.printf(\"\u003e\u003e\u003e \");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        String fullCommand \u003d sc.nextLine();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        return fullCommand.trim();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SwampertX"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    public static String getWelcome() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        return String.format(\"%s\\nHello! I\u0027m Duke\\n\", LOGO);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SwampertX"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    public void showWelcome() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        show(getWelcome());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SwampertX"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    public static String getLine() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        return LINE;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SwampertX"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    public void showLine() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        show(getLine());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SwampertX"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    public static String getLoadingError() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        return LOADING_ERROR_MESSAGE;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SwampertX"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    public void showLoadingError() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        show(getLoadingError());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SwampertX"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    public void showError(String errorMessage) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        show(errorMessage);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SwampertX"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    public String getSuccessMessage(String action, Task t) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        return String.format(\"%s %s successful!\\n\", action, t);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SwampertX"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    public void showSuccessMessage(String action, Task t) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        show(getSuccessMessage(action, t));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "SwampertX"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    public void show(String s) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        System.out.println(s);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "SwampertX"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    public static String getHelpMessage() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        return HELP_MESSAGE;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "SwampertX"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    public void showHelpMessage() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        show(HELP_MESSAGE);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SwampertX": 88
    }
  },
  {
    "path": "src/main/java/seedu/duke/Utils.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SwampertX"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SwampertX"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "public class Utils {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     * Takes in an array of strings and returns a copy of that array with each"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     * element string trimmed."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     * "
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     * @param array an input array of strings"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     * @return a copy of the input array, each element trimmed"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    public static String[] trimAll(String[] array) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        String[] arrayCopy \u003d Arrays.copyOf(array, array.length);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        for (int i \u003d 0; i \u003c arrayCopy.length; i++) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "            arrayCopy[i] \u003d arrayCopy[i].trim();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        return arrayCopy;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SwampertX": 20
    }
  },
  {
    "path": "src/main/java/seedu/duke/command/AddCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SwampertX"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "import seedu.duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "import seedu.duke.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "import seedu.duke.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "import seedu.duke.task.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "import seedu.duke.task.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SwampertX"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    private Task task;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SwampertX"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     * Creates a new AddCommand with a task."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     * "
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     * @param task The task to be added in the command."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    public AddCommand(Task task) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        this.task \u003d task;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SwampertX"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     * Executes the add command, which saves the task into the given task list. Displays status"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     * message on ui, and stores (if applicable) in storage"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     * @param tasks   the task list to add to"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     * @param ui      the user interface to show information"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     * @param storage the storage to update task list in"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    public String execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "            tasks.add(task);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "            storage.store(tasks);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "            return ui.getSuccessMessage(\"adding\", task);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "            throw new DukeException(e.getMessage());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SwampertX": 38
    }
  },
  {
    "path": "src/main/java/seedu/duke/command/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SwampertX"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "import seedu.duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "import seedu.duke.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "import seedu.duke.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "import seedu.duke.task.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SwampertX"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "public class Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    public String execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        return \"\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SwampertX"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SwampertX": 16
    }
  },
  {
    "path": "src/main/java/seedu/duke/command/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SwampertX"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SwampertX"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "import seedu.duke.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "import seedu.duke.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "import seedu.duke.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "import seedu.duke.task.Task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "import seedu.duke.task.TaskList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SwampertX"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    int number;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SwampertX"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    public DeleteCommand(int number) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        this.number \u003d number;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SwampertX"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    public String execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "            Task task \u003d tasks.remove(number);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "            storage.store(tasks);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "            return ui.getSuccessMessage(\"deleting\", task);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "            return \"There has been a problem saving the deletion.\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SwampertX"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SwampertX": 29
    }
  },
  {
    "path": "src/main/java/seedu/duke/command/DoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SwampertX"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SwampertX"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "import seedu.duke.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "import seedu.duke.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "import seedu.duke.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "import seedu.duke.task.Task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "import seedu.duke.task.TaskList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SwampertX"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "public class DoneCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    int taskNumber;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SwampertX"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    public DoneCommand(int i) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        taskNumber \u003d i;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SwampertX"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SwampertX"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    public String execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "            Task taskDone \u003d tasks.markAsDone(taskNumber);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "            String s \u003d ui.getSuccessMessage(\"marked as done\", taskDone);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "            storage.store(tasks);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "            return s;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        } catch (Exception ex) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "            return \"Whoops, cannot be saved.\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SwampertX": 30
    }
  },
  {
    "path": "src/main/java/seedu/duke/command/ExitCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SwampertX"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "import seedu.duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "import seedu.duke.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "import seedu.duke.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "import seedu.duke.task.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SwampertX"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    public ExitCommand() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SwampertX"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    public String execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        return \"Exiting duke. Your tasks will be saved.\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SwampertX"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    // @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    // public boolean isExit() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    // return true;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    // }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SwampertX": 22
    }
  },
  {
    "path": "src/main/java/seedu/duke/command/GreetCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SwampertX"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "import seedu.duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "import seedu.duke.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "import seedu.duke.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "import seedu.duke.task.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SwampertX"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "public class GreetCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    public GreetCommand() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SwampertX"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    public String execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        return \"Hello! How can I help you?\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SwampertX": 17
    }
  },
  {
    "path": "src/main/java/seedu/duke/command/HelpCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SwampertX"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "import seedu.duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "import seedu.duke.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "import seedu.duke.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "import seedu.duke.task.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SwampertX"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    public String execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        return ui.getHelpMessage();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SwampertX": 13
    }
  },
  {
    "path": "src/main/java/seedu/duke/command/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SwampertX"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "import seedu.duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "import seedu.duke.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "import seedu.duke.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "import seedu.duke.task.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SwampertX"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    public ListCommand() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SwampertX"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    public String execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        return tasks.toString();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SwampertX": 16
    }
  },
  {
    "path": "src/main/java/seedu/duke/command/SearchCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SwampertX"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "import seedu.duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "import seedu.duke.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "import seedu.duke.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "import seedu.duke.task.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SwampertX"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "public class SearchCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    private final String keyword;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SwampertX"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    public SearchCommand(String keyword) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        this.keyword \u003d keyword;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SwampertX"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    public String execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        TaskList relevantTaskList \u003d tasks.search(keyword);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        return relevantTaskList.toString();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SwampertX": 20
    }
  },
  {
    "path": "src/main/java/seedu/duke/gui/DialogBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "package seedu.duke.gui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SwampertX"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SwampertX"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SwampertX"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SwampertX"
        },
        "content": " * An example of a custom control using FXML. This control represents a dialog box consisting of an"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SwampertX"
        },
        "content": " * ImageView to represent the speaker\u0027s face and a label containing text from the speaker."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SwampertX"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SwampertX"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    private DialogBox(String text, Image img) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "            FXMLLoader fxmlLoader \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "                    new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SwampertX"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        displayPicture.setImage(img);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SwampertX"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        Collections.reverse(tmp);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SwampertX"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    public static DialogBox getUserDialog(String text, Image img) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        return new DialogBox(text, img);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SwampertX"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     * Creates a new dialog box based on the text and image given."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     *"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     * @param text text in dialog box"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     * @param img  avatar"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     * @return DialogBox object"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    public static DialogBox getDukeDialog(String text, Image img) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        var db \u003d new DialogBox(text, img);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SwampertX": 68
    }
  },
  {
    "path": "src/main/java/seedu/duke/gui/Launcher.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "package seedu.duke.gui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SwampertX"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SwampertX"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        Application.launch(Main.class, args);"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SwampertX": 9
    }
  },
  {
    "path": "src/main/java/seedu/duke/gui/Main.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "package seedu.duke.gui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SwampertX"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SwampertX"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "import seedu.duke.Duke;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SwampertX"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SwampertX"
        },
        "content": " * A GUI for Duke using FXML."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SwampertX"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "public class Main extends Application {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SwampertX"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    private Duke duke \u003d new Duke();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SwampertX"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "            AnchorPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "            Scene scene \u003d new Scene(ap);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SwampertX": 32
    }
  },
  {
    "path": "src/main/java/seedu/duke/gui/MainWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "package seedu.duke.gui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SwampertX"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "import java.util.concurrent.Executors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "import java.util.concurrent.ScheduledExecutorService;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "import java.util.concurrent.TimeUnit;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "import seedu.duke.Duke;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "import seedu.duke.Ui;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SwampertX"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SwampertX"
        },
        "content": " * Controller for MainWindow. Provides the layout for the other controls."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SwampertX"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "public class MainWindow extends AnchorPane {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SwampertX"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    private Duke duke;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SwampertX"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/user.png\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/duke.png\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SwampertX"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     * Initializes the main window."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        // show welcome message"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        dialogContainer.getChildren().add(DialogBox.getDukeDialog(Ui.getWelcome(), dukeImage));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SwampertX"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    public void setDuke(Duke d) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        duke \u003d d;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SwampertX"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     * then appends them to the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        String input \u003d userInput.getText().trim();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        Set\u003cString\u003e exitingCommands \u003d"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "                Stream.of(\"bye\", \"exit\", \":q\").collect(Collectors.toUnmodifiableSet());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        // get response normally"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        String response \u003d duke.getResponse(input);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        dialogContainer.getChildren().addAll(DialogBox.getUserDialog(input, userImage),"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "                DialogBox.getDukeDialog(response, dukeImage));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        // handles exit"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        if (exitingCommands.contains(input)) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "            System.out.println(\"Exiting.\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "            ScheduledExecutorService executor \u003d Executors.newSingleThreadScheduledExecutor();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "            // schedule a exit task"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "            Runnable task \u003d () -\u003e System.exit(0);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "            executor.schedule(task, 1, TimeUnit.SECONDS);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "            executor.shutdown();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SwampertX": 76
    }
  },
  {
    "path": "src/main/java/seedu/duke/task/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "package seedu.duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SwampertX"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SwampertX"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SwampertX"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    protected LocalDateTime by;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SwampertX"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     * Creates a deadline object."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     * "
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     * @param done        a boolean denoting the status of the task"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     * @param description a string describing the deadline"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     * @param by          a string following \"dd/mm/yyyy hh:mm\" denoting the deadline"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     * @throws DateTimeParseException if the format is not as above"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    public Deadline(boolean done, String description, String by) throws DateTimeParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        this(done, description, parseTime(by));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SwampertX"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     * Creates a deadline object."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     * "
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     * @param done        a boolean denoting the status of the task"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     * @param description a string describing the deadline"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     * @param by          a string following \"dd/mm/yyyy hh:mm\" denoting the deadline"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    public Deadline(boolean done, String description, LocalDateTime by) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        this.by \u003d by;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        this.isDone \u003d done;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SwampertX"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     * Creates a deadline object."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     * "
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     * @param description a string describing the deadline"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     * @param by          a string following \"dd/mm/yyyy hh:mm\" denoting the deadline"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     * @throws DateTimeParseException if the format is not as above"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    public Deadline(String description, String by) throws DateTimeParseException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        this(false, description, by);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SwampertX"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        return \"[D]\" + super.toString() + \" (by: \" + by + \")\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SwampertX"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    public String saveFormat() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        return String.format(\" D | %d | %s | %s\\n\", isDone ? 1 : 0, getDesc(), by);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SwampertX"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     * Takes in an array of string, consist of space-split strings from a saved input. Returns a"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     * Deadline object."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     * "
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     * @param tokens an array of strings"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     * @return an {@link Optional} {@link Deadline}."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     *"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     * @throws NumberFormatException  if the number representing done is not 1 or 0"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     * @throws DateTimeParseException if the date format is illegal"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    public static Deadline fromFormattedString(String[] tokens)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "            throws NumberFormatException, DateTimeParseException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        boolean done \u003d Integer.parseInt(tokens[1]) \u003d\u003d 1;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        LocalDateTime by \u003d LocalDateTime.parse(tokens[3]);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        Deadline deadline \u003d new Deadline(done, tokens[2], by);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        return deadline;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SwampertX": 73
    }
  },
  {
    "path": "src/main/java/seedu/duke/task/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "package seedu.duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SwampertX"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SwampertX"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SwampertX"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    protected LocalDateTime at;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SwampertX"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     * Creates an Event object with status, description, and time."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     * "
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     * @param done        a boolean denoting the state of the object"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     * @param description a String describing the event"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     * @param at          a string following \"dd/mm/yyyy hh:mm\" denoting the event time"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     * @throws DateTimeParseException if the time format is not as above"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    public Event(boolean done, String description, String at) throws DateTimeParseException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        this(done, description, parseTime(at));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SwampertX"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     * Creates an Event object with status, description, and time."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     * "
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     * @param done        a boolean denoting the state of the object"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     * @param description a String describing the event"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     * @param at          a LocalDateTime object denoting the event time"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    public Event(boolean done, String description, LocalDateTime at) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        this.at \u003d at;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        this.isDone \u003d done;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SwampertX"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    public Event(String description, String at) throws DateTimeParseException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        this(false, description, at);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SwampertX"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        return \"[E]\" + super.toString() + \" (at: \" + at + \")\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SwampertX"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    public String saveFormat() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        return String.format(\"E | %d | %s | %s\\n\", isDone ? 1 : 0, getDesc(), at);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SwampertX"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     * Takes in an array of string, consist of space-split strings from a saved input. Returns a"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     * Event object."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     * "
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     * @param tokens an array of strings"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     * @return an {@link Optional} {@link Event}."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     * @throws NumberFormatException  if the number representing done is not 1 or 0"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     * @throws DateTimeParseException if the date format is illegal"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    public static Event fromFormattedString(String[] tokens)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "            throws NumberFormatException, DateTimeParseException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        boolean done \u003d Integer.parseInt(tokens[1]) \u003d\u003d 1;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        LocalDateTime at \u003d LocalDateTime.parse(tokens[3]);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        Event event \u003d new Event(done, tokens[2], at);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        return event;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SwampertX": 65
    }
  },
  {
    "path": "src/main/java/seedu/duke/task/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "package seedu.duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SwampertX"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SwampertX"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "import seedu.duke.DukeException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SwampertX"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    protected static final DateTimeFormatter dtf \u003d DateTimeFormatter.ofPattern(\"dd/MM/uuuu HHmm\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SwampertX"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    public Task(boolean done, String description) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        this.isDone \u003d done;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SwampertX"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SwampertX"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    public Task() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        this(\"\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SwampertX"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     * Marks the task as done. Returns the task if successful, else throws a"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     * {@link DukeException}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     * "
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     * @return the successfully marked-as-done task."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     * @throws DukeException if task is already done."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    public Task markAsDone() throws DukeException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        if (this.isDone) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "            throw new DukeException(String.format(\"Task %s is already done!\", this));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SwampertX"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    public String getDesc() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SwampertX"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        return (isDone ? \"\\u2713\" : \"\\u2718\"); // return tick or X symbols"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SwampertX"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        return String.format(\"[%s] %s\", getStatusIcon(), getDesc());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SwampertX"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    public String saveFormat() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        return String.format(\"| %d | %s\\n\", isDone ? 1 : 0, getDesc());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SwampertX"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    public static LocalDateTime parseTime(String time) throws DateTimeParseException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        return LocalDateTime.parse(time, dtf);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SwampertX"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    boolean containKeyword(String keyword) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        return description.contains(keyword);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SwampertX": 66
    }
  },
  {
    "path": "src/main/java/seedu/duke/task/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "package seedu.duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SwampertX"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SwampertX"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "import seedu.duke.DukeException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "import seedu.duke.Parser;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SwampertX"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SwampertX"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    // the list of tasks is padded."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    // user tasks start from index 1."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    List\u003cTask\u003e tasks;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SwampertX"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    public TaskList(List\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        this.tasks \u003d tasks;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        this.tasks.add(0, new Task());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SwampertX"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        this(new ArrayList\u003cTask\u003e());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SwampertX"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     * Create a tasklist object with from lines of formatted save data, each line"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     * saved as an element in String array."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     * "
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     * @param fileContent lines of formatted task strings."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    public TaskList(String[] fileContent) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        this(Arrays.stream(fileContent).map(Parser::parseLineToTask).filter(optionalTask -\u003e !optionalTask.isEmpty())"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "                .map(optionalTask -\u003e optionalTask.get()).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SwampertX"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    public String getSaveString() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        return tasks.stream().map(task -\u003e task.saveFormat()).collect(Collectors.joining());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SwampertX"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     * Adds a task to the task list."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     * "
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     * @param task Task to be added."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    public void add(Task task) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        tasks.add(task);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SwampertX"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     * Searches for tasks in the list that contains the given keyword."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     * "
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     * @param keyword to sear the list with"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     * @return a new {@link TaskList} containing all the relevant tasks."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    public TaskList search(String keyword) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        List\u003cTask\u003e relevantTasks \u003d tasks.stream().filter(task -\u003e task.containKeyword(keyword))"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        return new TaskList(relevantTasks);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SwampertX"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     * Marks a single task, denoted by its index in the internal list, as done."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     * "
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     * "
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     * @param taskNumber the index of the Task to be marked as done."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     * @return the task that is marked as done successfully."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     * "
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     * @throws IndexOutOfBoundsException if the index given is greater that the"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     *                                   number of tasks"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     * @throws DukeException             if the task is already done."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    public Task markAsDone(int taskNumber) throws IndexOutOfBoundsException, DukeException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        Task task \u003d tasks.get(taskNumber);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        task.markAsDone();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        return task;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "SwampertX"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    public Task remove(int taskNumber) throws IndexOutOfBoundsException, DukeException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        return tasks.remove(taskNumber);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "SwampertX"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        for (int i \u003d 1; i \u003c tasks.size(); i++) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "            if (i !\u003d 1) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "                sb.append(\"\\n\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "            sb.append(String.format(\"%d. %s\", i, tasks.get(i)));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SwampertX": 94
    }
  },
  {
    "path": "src/main/java/seedu/duke/task/ToDo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "package seedu.duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SwampertX"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SwampertX"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "public class ToDo extends Task {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SwampertX"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    public ToDo(boolean done, String description) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        this.isDone \u003d done;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SwampertX"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    public ToDo(String description) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SwampertX"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SwampertX"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    public String saveFormat() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        return String.format(\" T | %d | %s\\n\", isDone ? 1 : 0, getDesc());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SwampertX"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     * Takes in an array of string, consist of space-split strings from a saved"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     * input. Returns a ToDo object."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     * "
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     * @param tokens an array of strings"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     * @return an {@link Optional} {@link ToDo}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     * @throws NumberFormatException  if the number representing done is not 1 or 0"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     * @throws DateTimeParseException if the date format is illegal"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    public static ToDo fromFormattedString(String[] tokens) throws NumberFormatException, DateTimeParseException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        boolean done \u003d Integer.parseInt(tokens[1]) \u003d\u003d 1;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        ToDo todo \u003d new ToDo(done, tokens[2]);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "        return todo;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SwampertX": 40
    }
  },
  {
    "path": "src/main/resources/view/DialogBox.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SwampertX"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SwampertX"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "      \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "      \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "   \u003cpadding\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "      \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "   \u003c/padding\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "SwampertX": 16
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SwampertX"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SwampertX"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"seedu.duke.gui.MainWindow\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "      \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" promptText\u003d\"type something\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "      \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "      \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "         \u003ccontent\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "            \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "         \u003c/content\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "      \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "SwampertX": 19
    }
  },
  {
    "path": "src/runtest.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "#!/usr/bin/env bash"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SwampertX"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "# create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "if [ ! -d \"../bin\" ]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "then"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    mkdir ../bin"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "fi"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SwampertX"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "# delete output from previous run"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "if [ -e \"./ACTUAL.TXT\" ]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "then"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    rm ACTUAL.TXT"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "fi"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SwampertX"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "# compile the code into the bin folder, terminates if error occurred"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "if ! javac -cp ../src -Xlint:none -d ../bin ../src/main/java/Duke.java"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "then"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    echo \"********** BUILD FAILURE **********\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "fi"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SwampertX"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "java -classpath ../bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SwampertX"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "# compare the output to the expected output"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "diff ACTUAL.TXT EXPECTED.TXT"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "if [ $? -eq 0 ]"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "then"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    echo \"Test result: PASSED\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    exit 0"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "else"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    echo \"Test result: FAILED\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SwampertX"
        },
        "content": "fi"
      }
    ],
    "authorContributionMap": {
      "SwampertX": 34
    }
  }
]
