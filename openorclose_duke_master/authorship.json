[
  {
    "path": "src/main/java/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package main.java;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import main.java.task.DeadlineTask;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import main.java.task.EventTask;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import main.java.task.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import main.java.task.ToDoTask;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "  private Scanner scanner \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "  private ArrayList\u003cTask\u003e list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  private Parser parser \u003d new Parser();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "  public static void main(String[] args) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    String logo \u003d \" ____        _        \\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"|  _ \\\\ _   _| | _____ \\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"| | | | | | | |/ / _ \\\\\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"| |_| | |_| |   \u003c  __/\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    System.out.println(\"Hello from\\n\" + logo);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    System.out.println(\"What can I do for you?\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    Duke duke \u003d new Duke();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    duke.startRepl();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "  }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "  public Duke() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    parser.addCommand(\"bye\", unused -\u003e {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "openorclose"
        },
        "content": "      System.out.println(\"Bye. Hope to see you again soon!\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "openorclose"
        },
        "content": "      System.exit(0);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    });"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    parser.addCommand(\"list\", unused -\u003e printList());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    parser.addCommand(\"done\", Parser.generateConsumerExpectingInteger(oneBasedIndex -\u003e {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "openorclose"
        },
        "content": "      try {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        findInListThenMarkAsDone(oneBasedIndex);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "openorclose"
        },
        "content": "      } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        System.out.printf(\"Opps! I could not find item %d in your list.\\n\","
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "openorclose"
        },
        "content": "            oneBasedIndex);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "openorclose"
        },
        "content": "      }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    }));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    parser.addCommand(\"delete\", Parser.generateConsumerExpectingInteger(oneBasedIndex -\u003e {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "openorclose"
        },
        "content": "      try {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        findInListThenDelete(oneBasedIndex);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "openorclose"
        },
        "content": "      } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        System.out.printf(\"Opps! I could not delete item %d in your list as it does not exist.\\n\","
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "openorclose"
        },
        "content": "            oneBasedIndex);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "openorclose"
        },
        "content": "      }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    }));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    parser.addCommand(\"todo\", description -\u003e {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "openorclose"
        },
        "content": "      if (description.equals(\"\")) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        System.out.println(\"Opps! I expected a description of your todo task.\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "      } else {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        addTaskToList(new ToDoTask(description));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "      }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    });"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    parser.addCommand(\"event\","
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        Parser.generateConsumerToParseTwoArguments(\"/at\","
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "openorclose"
        },
        "content": "            (description, at) -\u003e addTaskToList(new EventTask(description, at))));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    parser.addCommand(\"deadline\","
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        Parser.generateConsumerToParseTwoArguments(\"/by\","
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "openorclose"
        },
        "content": "            (description, by) -\u003e addTaskToList(new DeadlineTask(description, by))));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  private void startRepl() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    while (true) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "openorclose"
        },
        "content": "      parser.parseAndExecuteCommand(scanner.nextLine().trim());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "  }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "  private void findInListThenMarkAsDone(int oneBasedIndex) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    int itemIndex \u003d oneBasedIndex - 1;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    list.get(itemIndex).markAsDoneAndPrint();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "  }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  private void addTaskToList(Task task) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    list.add(task);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    System.out.println(\"Got it. I\u0027ve added this task: \");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    System.out.println(task);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  private void findInListThenDelete(int oneBasedIndex) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    int itemIndex \u003d oneBasedIndex - 1;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    Task taskToDelete \u003d list.remove(itemIndex);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    System.out.println(\"Noted. I\u0027ve removed this task: \");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    System.out.println(taskToDelete);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    printNumberOfItemsInList();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  private void printNumberOfItemsInList() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    System.out.printf(\"Now you have %d task(s) in the list.\\n\", list.size());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "  }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "  private void printList() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    int length \u003d list.size();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    if (length \u003d\u003d 0) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "openorclose"
        },
        "content": "      System.out.println(\"Yay! You don\u0027t have any tasks!\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    } else if (length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "openorclose"
        },
        "content": "      System.out.println(\"You have one task in your list:\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "openorclose"
        },
        "content": "      System.out.println(\"1. \" + list.get(0));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    } else {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "openorclose"
        },
        "content": "      System.out.println(\"Here are the tasks in your list:\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "openorclose"
        },
        "content": "      for (int itemIndex \u003d 0; itemIndex \u003c length; itemIndex +\u003d 1) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        int oneBasedIndex \u003d itemIndex + 1;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        System.out.printf(\"%d. %s\\n\", oneBasedIndex, list.get(itemIndex));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "openorclose"
        },
        "content": "      }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "  }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "openorclose": 71,
      "-": 41
    }
  },
  {
    "path": "src/main/java/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "openorclose"
        },
        "content": "package main.java;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import java.util.function.BiConsumer;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import java.util.function.Consumer;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "openorclose"
        },
        "content": "class Parser {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  private HashMap\u003cString, Consumer\u003cString\u003e\u003e commands \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  void addCommand(String name, Consumer\u003cString\u003e evaluator) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    commands.put(name, evaluator);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  void parseAndExecuteCommand(String userInput) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    String trimmedInput \u003d userInput.trim();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    String command \u003d trimmedInput.split(\" \")[0];"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    if (commands.containsKey(command)) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "openorclose"
        },
        "content": "      commands.get(command).accept(trimmedInput.substring(command.length()).trim());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    } else {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "openorclose"
        },
        "content": "      System.out"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "openorclose"
        },
        "content": "          .printf(\"Opps! I did not understand what you meant by \u0027%s\u0027\\n\", trimmedInput);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  static Consumer\u003cString\u003e generateConsumerExpectingInteger(Consumer\u003cInteger\u003e consumer) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    return integerString -\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "openorclose"
        },
        "content": "      try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        consumer.accept(Integer.parseInt(integerString));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "openorclose"
        },
        "content": "      } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        System.out"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "openorclose"
        },
        "content": "            .println(\"Opps! I expected an integer as the argument\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "openorclose"
        },
        "content": "      }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    };"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  static Consumer\u003cString\u003e generateConsumerToParseTwoArguments(String splitAt,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "openorclose"
        },
        "content": "      BiConsumer\u003cString, String\u003e consumer) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    return argumentString -\u003e {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "openorclose"
        },
        "content": "      if (!argumentString.contains(splitAt)) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        System.out.printf(\"Opps! I expected two arguments separated by \u0027%s\u0027.\\n\", splitAt);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        return;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "openorclose"
        },
        "content": "      }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "openorclose"
        },
        "content": "      argumentString +\u003d \" \";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "openorclose"
        },
        "content": "      String[] arguments \u003d argumentString.split(splitAt);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "openorclose"
        },
        "content": "      int length \u003d arguments.length;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "openorclose"
        },
        "content": "      if (length \u003e 2) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        String first \u003d arguments[0];"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        String last \u003d arguments[length - 1];"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        String allButFirst \u003d argumentString.substring(first.length() + splitAt.length());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        String allButLast \u003d argumentString"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "openorclose"
        },
        "content": "            .substring(0, argumentString.length() - last.length() - splitAt.length());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        System.out.printf(\"Opps! I see %d \u0027%s\u0027s, and cannot be sure what you wanted. \\n\""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "openorclose"
        },
        "content": "                + \"For example, you could mean:\\n\\n\""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "openorclose"
        },
        "content": "                + \"\\t%s\\n\\t%s\\n\\t%s\\n\\n\""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "openorclose"
        },
        "content": "                + \"\\t---OR---\\n\\n\""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "openorclose"
        },
        "content": "                + \"\\t%s\\n\\t%s\\n\\t%s\\n\\n\""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "openorclose"
        },
        "content": "                + \"Do not use \u0027%s\u0027 in your arguments to avoid this issue.\\n\","
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "openorclose"
        },
        "content": "            length - 1, splitAt, first.trim(), splitAt, allButFirst.trim(), allButLast.trim(),"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "openorclose"
        },
        "content": "            splitAt,"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "openorclose"
        },
        "content": "            last.trim(), splitAt);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "openorclose"
        },
        "content": "      } else {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        String left \u003d arguments[0].trim();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        String right \u003d arguments[1].trim();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        if (\"\".equals(left + right)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "openorclose"
        },
        "content": "          System.out.printf("
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "openorclose"
        },
        "content": "              \"Opps! I could not find anything to the left and right of \u0027%s\u0027.\\n\","
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "openorclose"
        },
        "content": "              splitAt);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        } else if (left.equals(\"\")) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "openorclose"
        },
        "content": "          System.out.printf("
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "openorclose"
        },
        "content": "              \"Opps! I could not find anything to the left of \u0027%s\u0027.\\n\","
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "openorclose"
        },
        "content": "              splitAt);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        } else if (right.equals(\"\")) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "openorclose"
        },
        "content": "          System.out.printf("
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "openorclose"
        },
        "content": "              \"Opps! I could not find anything to the right of \u0027%s\u0027.\\n\","
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "openorclose"
        },
        "content": "              splitAt);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "openorclose"
        },
        "content": "          consumer.accept(left, right);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "openorclose"
        },
        "content": "      }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    };"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "openorclose"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "openorclose": 83
    }
  },
  {
    "path": "src/main/java/task/DeadlineTask.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "openorclose"
        },
        "content": "package main.java.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "openorclose"
        },
        "content": "public class DeadlineTask extends Task {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  private String by;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  public DeadlineTask(String description, String by) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    super(description);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    this.by \u003d by;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  @Override"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  public String toString() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    return String.format(\"[D]%s (:by %s)\", super.toString(), by);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "openorclose"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "openorclose": 16
    }
  },
  {
    "path": "src/main/java/task/EventTask.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "openorclose"
        },
        "content": "package main.java.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "openorclose"
        },
        "content": "public class EventTask extends Task {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  private String at;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  public EventTask(String description, String at) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    super(description);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    this.at \u003d at;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  @Override"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  public String toString() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    return String.format(\"[E]%s (:at %s)\", super.toString(), at);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "openorclose"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "openorclose": 16
    }
  },
  {
    "path": "src/main/java/task/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "openorclose"
        },
        "content": "package main.java.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "  private static char DONE_SYMBOL \u003d \u0027\\u2713\u0027; // tick"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "  private static char NOT_DONE_SYMBOL \u003d \u0027\\u2718\u0027; //cross"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "  private boolean isDone \u003d false;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "  private String description;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "  Task(String description) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    this.description \u003d description;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "  }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  public void markAsDoneAndPrint() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    this.isDone \u003d true;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    System.out.println(\"Nice! I\u0027ve marked this task as done:\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    System.out.println(this);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "  }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "  public String toString() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    return String.format(\"[%c] %s\", getStatusIcon(), description);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "  }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "  private char getStatusIcon() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    return isDone ? DONE_SYMBOL : NOT_DONE_SYMBOL;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "  }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "openorclose": 4,
      "-": 24
    }
  },
  {
    "path": "src/main/java/task/ToDoTask.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "openorclose"
        },
        "content": "package main.java.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "openorclose"
        },
        "content": "public class ToDoTask extends Task {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  public ToDoTask(String description) {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    super(description);"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  @Override"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  public String toString() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "openorclose"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "openorclose": 13
    }
  }
]
