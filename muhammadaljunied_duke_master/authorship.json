[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    archiveVersion \u003d \"0.1.3\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "test {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "group \u0027seedu.duke\u0027"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    // Change this to your main class."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    mainClassName \u003d \"seedu.duke.Duke\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "run {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "muhammadaljunied": 22,
      "-": 20
    }
  },
  {
    "path": "src/main/java/seedu/duke/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import seedu.duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import seedu.duke.helpers.Parser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import seedu.duke.storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import seedu.duke.storage.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     * Constructs a new Duke Object by instantiating the TaskList by loading from Storage."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    public Duke() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        // Load from file"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            tasks \u003d Storage.getInstance().loadFromDisk();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        } catch (Storage.StorageOperationException e) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            Ui.printError(e);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            Ui.printLoadingError();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     * Main Method."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     * @param args string arguments for console."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        new Duke().run();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     * Executes the Duke Assistant."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        Ui.greet();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        //noinspection InfiniteLoopStatement"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        while (true) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            String input \u003d Ui.nextLine();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "                Parser.parseCommand(input).execute(tasks);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            } catch (DukeException e) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "                Ui.printError(e);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "muhammadaljunied": 53,
      "-": 2
    }
  },
  {
    "path": "src/main/java/seedu/duke/commands/AddCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "package seedu.duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import seedu.duke.storage.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import seedu.duke.trackables.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    public AddCommand(String description) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    public void execute(TaskList tasks) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        Task task \u003d new Task(description);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        tasks.add(task);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        Ui.printMessages(\"added: \" + task.toString());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "muhammadaljunied": 23
    }
  },
  {
    "path": "src/main/java/seedu/duke/commands/ByeCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "package seedu.duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import seedu.duke.storage.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import seedu.duke.storage.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import seedu.duke.trackables.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "public class ByeCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    private Task task;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    public void execute(TaskList tasks) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        Ui.printMessages(\"\\t\" + \"Bye. Hope to see you again soon!\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            Storage.getInstance().saveToDisk(tasks);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        } catch (Storage.StorageOperationException e) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            Ui.printError(e);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        System.exit(0);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "}"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "muhammadaljunied": 25
    }
  },
  {
    "path": "src/main/java/seedu/duke/commands/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "package seedu.duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import seedu.duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import seedu.duke.storage.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import seedu.duke.trackables.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    public void execute(TaskList tasks) throws DukeException {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "muhammadaljunied": 15
    }
  },
  {
    "path": "src/main/java/seedu/duke/commands/DeadlineCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "package seedu.duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import seedu.duke.exceptions.InvalidArgumentException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import seedu.duke.storage.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import seedu.duke.trackables.Deadline;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import seedu.duke.trackables.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "public class DeadlineCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    private String dateString;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    public DeadlineCommand(String description, String dateString) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        this.dateString \u003d dateString;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    public void execute(TaskList tasks) throws InvalidArgumentException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            SimpleDateFormat dateFormat \u003d new SimpleDateFormat(\"d/MM/yyyy HHmm\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            dateFormat.setLenient(false);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            Date date \u003d dateFormat.parse(dateString);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            Deadline deadline \u003d new Deadline(description, date);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            tasks.add(deadline);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            Ui.printMessages(\"Got it. I\u0027ve added this task:\","
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "                \"  \" + deadline.toString(),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "                \"Now you have \" + tasks.size() + \" tasks in the list.\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            throw new InvalidArgumentException(\"Date input is not in the right format d/MM/yyyy HHmm\", pe);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "muhammadaljunied": 40
    }
  },
  {
    "path": "src/main/java/seedu/duke/commands/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "package seedu.duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import seedu.duke.exceptions.InvalidArgumentException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import seedu.duke.storage.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import seedu.duke.trackables.Deadline;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import seedu.duke.trackables.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    private int taskId;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    public DeleteCommand(int taskId) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        this.taskId \u003d taskId - 1;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    public void execute(TaskList tasks) throws InvalidArgumentException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        Task taskToRemove \u003d tasks.remove(taskId);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        Ui.printMessages(\"Noted. I\u0027ve removed this task:\","
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            \"  \" + taskToRemove.toString(),"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            \"Now you have \" + tasks.size() + \" tasks in the list.\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "muhammadaljunied": 26
    }
  },
  {
    "path": "src/main/java/seedu/duke/commands/DoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "package seedu.duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import seedu.duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import seedu.duke.exceptions.InvalidArgumentException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import seedu.duke.storage.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import seedu.duke.trackables.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "public class DoneCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    private int taskId;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    public DoneCommand(int taskId) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        this.taskId \u003d taskId - 1;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    public void execute(TaskList tasks) throws InvalidArgumentException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        tasks.get(taskId).markAsDone();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        Ui.printMessages(\"Nice! I\u0027ve marked this task as done:\","
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            \"  \" + tasks.get(taskId).toString());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "muhammadaljunied": 25
    }
  },
  {
    "path": "src/main/java/seedu/duke/commands/ErrorCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "package seedu.duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import seedu.duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import seedu.duke.storage.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "public class ErrorCommand extends Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    private DukeException exception;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    public ErrorCommand(DukeException dukeException) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        this.exception \u003d dukeException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    public void execute(TaskList tasks) throws DukeException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        throw exception;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "muhammadaljunied": 18
    }
  },
  {
    "path": "src/main/java/seedu/duke/commands/EventCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "package seedu.duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import seedu.duke.exceptions.InvalidArgumentException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import seedu.duke.storage.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import seedu.duke.trackables.Event;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import seedu.duke.trackables.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "public class EventCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    private String dateString;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    public EventCommand(String description, String date) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        this.dateString \u003d date;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    public void execute(TaskList tasks) throws InvalidArgumentException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            SimpleDateFormat dateFormat \u003d new SimpleDateFormat(\"d/MM/yyyy HHmm\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            dateFormat.setLenient(false);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            Date date \u003d dateFormat.parse(dateString);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            Event event \u003d new Event(description, date);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            tasks.add(event);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            Ui.printMessages(\"Got it. I\u0027ve added this task:\","
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "                \"  \" + event.toString(),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "                \"Now you have \" + tasks.size() + \" tasks in the list.\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            throw new InvalidArgumentException(\"Date input is not in the right format d/MM/yyyy HHmm\", pe);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "muhammadaljunied": 40
    }
  },
  {
    "path": "src/main/java/seedu/duke/commands/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "package seedu.duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import seedu.duke.exceptions.InvalidArgumentException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import seedu.duke.storage.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import seedu.duke.trackables.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    public ListCommand() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    public void execute(TaskList tasks) throws InvalidArgumentException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        String[] message \u003d new String[tasks.size()];"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        for (int i \u003d 0; i \u003c tasks.size(); i++) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            message[i] \u003d \"\\t\" + (i + 1) + \".\" + tasks.get(i).toString();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        Ui.printMessages(message);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "muhammadaljunied": 24
    }
  },
  {
    "path": "src/main/java/seedu/duke/commands/TodoCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "package seedu.duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import seedu.duke.storage.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import seedu.duke.trackables.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import seedu.duke.trackables.Todo;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "public class TodoCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    public TodoCommand(String description) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    public void execute(TaskList tasks) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        Todo todo \u003d new Todo(description);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        tasks.add(todo);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        Ui.printMessages(\"Got it. I\u0027ve added this task:\","
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            \"  \" + todo.toString(),"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            \"Now you have \" + tasks.size() + \" tasks in the list.\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "muhammadaljunied": 26
    }
  },
  {
    "path": "src/main/java/seedu/duke/exceptions/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "package seedu.duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    public DukeException() {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    public  DukeException(String message) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    public DukeException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        return super.getMessage();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "muhammadaljunied": 21
    }
  },
  {
    "path": "src/main/java/seedu/duke/exceptions/InvalidArgumentException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "package seedu.duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "public class InvalidArgumentException extends DukeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    public InvalidArgumentException() {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    public InvalidArgumentException(String message) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    public InvalidArgumentException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        super(message,cause);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        return super.getMessage();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "muhammadaljunied": 21
    }
  },
  {
    "path": "src/main/java/seedu/duke/exceptions/InvalidCommandException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "package seedu.duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "public class InvalidCommandException extends DukeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    public InvalidCommandException() {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        super(\"No such command found.\");"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    public InvalidCommandException(String message) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    public InvalidCommandException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        return super.getMessage();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "muhammadaljunied": 21
    }
  },
  {
    "path": "src/main/java/seedu/duke/helpers/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "package seedu.duke.helpers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import seedu.duke.Duke;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import seedu.duke.commands.AddCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import seedu.duke.commands.ByeCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import seedu.duke.commands.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import seedu.duke.commands.DeadlineCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import seedu.duke.commands.DeleteCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import seedu.duke.commands.DoneCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import seedu.duke.commands.ErrorCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import seedu.duke.commands.EventCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import seedu.duke.commands.ListCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import seedu.duke.commands.TodoCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import seedu.duke.exceptions.InvalidArgumentException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import seedu.duke.exceptions.InvalidCommandException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    enum CommandName {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        LIST(\"list\"),"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        ADD(\"add\"),"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        DONE(\"done\"),"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        TODO(\"todo\"),"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        DEADLINE(\"deadline\"),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        EVENT(\"event\"),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        DELETE(\"delete\"),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        BYE(\"bye\"),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        ERROR(\"\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        private final String command;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        CommandName(String command) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            this.command \u003d command;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    private static final String LIST_PATTERN \u003d \"(list)\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    private static final String ADD_PATTERN \u003d \"(add)(?\u003d\\\\s)\\\\s([\\\\w\\\\D]+)\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    private static final String DONE_PATTERN \u003d \"(done)(?\u003d\\\\s)\\\\s([\\\\d]+)\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    private static final String TODO_PATTERN \u003d \"(todo)(?\u003d\\\\s)\\\\s([\\\\w\\\\D]+)\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    private static final String DEADLINE_PATTERN \u003d \"(deadline)(?\u003d\\\\s)\\\\s([\\\\w\\\\D]+(?\u003d\\\\s/by\\\\s))\\\\s/by\\\\s([\\\\w\\\\D]+)\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    private static final String EVENT_PATTERN \u003d \"(event)(?\u003d\\\\s)\\\\s([\\\\w\\\\D]+(?\u003d\\\\s/at\\\\s))\\\\s/at\\\\s([\\\\w\\\\D]+)\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    private static final String DELETE_PATTEN \u003d \"(delete)(?\u003d\\\\s)\\\\s([\\\\d]+)\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    private static final String BYE_PATTERN \u003d \"(bye)\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     * Parses command inputs using regular expressions to extract commands and arguments."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     * @param input Command input from the user."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     * @return Returns the Command to be executed. An ErrorCommand will be returned should the command"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     *         be invalid or contain invalid arguments."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    public static Command parseCommand(String input) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        CommandName command \u003d identifyCommandName(input);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        // Exit if CommandName cannot be identified"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        if (command \u003d\u003d CommandName.ERROR) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            return new ErrorCommand(new InvalidCommandException());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        // Extract arguments from input."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        Command commandToExecute \u003d null;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        String pattern \u003d getPattern(command);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        Matcher matcher \u003d Pattern.compile(pattern).matcher(input);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        // Exit if arguments cannot be matched."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            commandToExecute \u003d new ErrorCommand("
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "                new InvalidArgumentException(\"Invalid or missing arguments in command \""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "                    + command.name() + \".\"));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            return commandToExecute;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        if (command \u003d\u003d CommandName.LIST) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            commandToExecute \u003d new ListCommand();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        } else if (command \u003d\u003d CommandName.ADD) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            commandToExecute \u003d new AddCommand(matcher.group(2));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        } else if (command \u003d\u003d CommandName.DONE) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            int taskId \u003d Integer.parseInt(matcher.group(2));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            commandToExecute \u003d new DoneCommand(taskId);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        } else if (command \u003d\u003d CommandName.TODO) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            commandToExecute \u003d new TodoCommand(matcher.group(2));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        } else if (command \u003d\u003d CommandName.EVENT) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            commandToExecute \u003d new EventCommand(matcher.group(2), matcher.group(3));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        } else if (command \u003d\u003d CommandName.DEADLINE) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            commandToExecute \u003d new DeadlineCommand(matcher.group(2), matcher.group(3));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        } else if (command \u003d\u003d CommandName.DELETE) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            int taskId \u003d Integer.parseInt(matcher.group(2));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            commandToExecute \u003d new DeleteCommand(taskId);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        } else if (command \u003d\u003d CommandName.BYE) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            commandToExecute \u003d new ByeCommand();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        return commandToExecute;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     * Identifies the CommandName from the input."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     *"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     * @param input The complete command input from the user."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     * @return Returns the respective CommandName Enum if a match is found, otherwise the Error CommandName"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     *         is returned."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    public static CommandName identifyCommandName(String input) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        CommandName commandName;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            String extractedCommand \u003d input.split(\" \")[0].toUpperCase();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            commandName \u003d CommandName.valueOf(extractedCommand);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        } catch (IllegalArgumentException iae) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            commandName \u003d CommandName.ERROR;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        return commandName;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     * Returns the pattern to use based on the CommandName Enum."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     *"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     * @param commandName The CommandName Enum once identified."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    private static String getPattern(CommandName commandName) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        String pattern \u003d \"\";"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        switch (commandName) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        case LIST:"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            pattern \u003d LIST_PATTERN;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        case ADD:"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            pattern \u003d ADD_PATTERN;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        case DONE:"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            pattern \u003d DONE_PATTERN;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        case TODO:"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            pattern \u003d TODO_PATTERN;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        case EVENT:"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            pattern \u003d EVENT_PATTERN;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        case DEADLINE:"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            pattern \u003d DEADLINE_PATTERN;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        case DELETE:"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            pattern \u003d DELETE_PATTEN;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        case BYE:"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            pattern \u003d BYE_PATTERN;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        return pattern;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "muhammadaljunied": 158
    }
  },
  {
    "path": "src/main/java/seedu/duke/storage/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "package seedu.duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import seedu.duke.Duke;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import seedu.duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import seedu.duke.trackables.Deadline;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import seedu.duke.trackables.Event;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import seedu.duke.trackables.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import seedu.duke.trackables.Todo;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import java.nio.file.attribute.FileAttribute;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     * Default file path used if the user doesn\u0027t provide the file name."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    private static final String DEFAULT_STORAGE_PATH \u003d \"/data/tasksfile.txt\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    private static Storage instance;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    private final Path path;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    private Storage() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        path \u003d Paths.get(System.getProperty(\"user.dir\") + DEFAULT_STORAGE_PATH);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     * Gets the Singleton instance of the Storage Object."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     * @return the Storage instance."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    public static Storage getInstance() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        if (instance \u003d\u003d null) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            instance \u003d new Storage();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        return instance;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     * Saves the list of tasks to the storage file."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     * @throws StorageOperationException if there were errors converting and/or storing data to file."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    public void saveToDisk(TaskList tasks) throws StorageOperationException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            if (!Files.exists(path)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "                Files.createDirectories(path.getParent());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "                Files.createFile(path);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            List\u003cString\u003e tasksAsString \u003d getStringsFromTasks(tasks);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            Files.write(path, tasksAsString);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            throw new StorageOperationException(\"Error writing to file: \" + path, ioe);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     * Loads the Tasks data from the storage file, and then returns it."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     * Returns an empty {@code AddressBook} if the file does not exist, or is not a regular file."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     *"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     * @throws StorageOperationException if there were errors reading and/or converting data from file."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    public TaskList loadFromDisk() throws StorageOperationException {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        if (!Files.exists(path)) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            return new TaskList();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            return new TaskList(getTasksFromStrings(Files.readAllLines(path)));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            throw new StorageOperationException(\"Error writing to file: \" + path, ioe);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            throw new StorageOperationException(\"Fatal error occurred. Cloud not load tasks.\", e);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     * Converts all the {@code tasks} as their equivalent Strings."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     *"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     * @param tasks Lists containing all the tasks to convert."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     * @return Returns a list of Tasks in their String equivalent form."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    private List\u003cString\u003e getStringsFromTasks(TaskList tasks) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        return tasks.getList().stream().map(Task::getAsString).collect(Collectors.toList());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     * Converts all the {@code stringTasks} as their equivalent Task Objects."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     *"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     * @param stringTasks List containing all tasks in their string forms."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    private List\u003cTask\u003e getTasksFromStrings(List\u003cString\u003e stringTasks) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        return stringTasks.stream()"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            .map(identifyTask -\u003e identifyTask.split(\" \\\\| \"))        // Split String"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            .map(this::stringArgsToTask).collect(Collectors.toList());     // Run each String[] through stringToTask()"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     * Converts a single set of String Arguments into their respective Task subclass."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     *"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     * @param args Contains the task data."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     * @return Returns the populated task subclass."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    private Task stringArgsToTask(String... args) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        switch (args[0]) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        case \"T\":"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            return new Todo(args);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        case \"E\":"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            return new Event(args);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        case \"D\":"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            return new Deadline(args);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            return new Task(args);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    public String getPath() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        return path.toString();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     * Signals that some error has occurred while trying to convert and read/write data between the application"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     * and the storage file."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    public static class StorageOperationException extends DukeException {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        public StorageOperationException() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            super();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        public StorageOperationException(String message) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            super(message);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        public StorageOperationException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            super(message, cause);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "muhammadaljunied": 154
    }
  },
  {
    "path": "src/main/java/seedu/duke/storage/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "package seedu.duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import seedu.duke.Duke;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import seedu.duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import seedu.duke.exceptions.InvalidArgumentException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import seedu.duke.exceptions.InvalidCommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import seedu.duke.trackables.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import java.util.InvalidPropertiesFormatException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    private List\u003cTask\u003e tasks;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        this.tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    public TaskList(List\u003cTask\u003e newTaskList) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        this.tasks \u003d newTaskList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    // CRUD Tasks"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    public void add(Task newTask) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        this.tasks.add(newTask);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     * Retrieves the Task at the given index."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     * @param index The index of the task to retrieve."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     * @return The Task at the given index."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     * @throws InvalidArgumentException Thrown when the index is out of range."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    public Task get(int index) throws InvalidArgumentException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        if (!isValidIndex(index)) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            throw new InvalidArgumentException(\"No task with id \" + index + \" exists.\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        return this.tasks.get(index);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    public List\u003cTask\u003e getList() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        return this.tasks;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     * Substitutes the task at the given index with a new task."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     * @param index Index of task to replace."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     * @param newTask Task to use as replacement."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     * @throws InvalidArgumentException Thrown when the index is out of range."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    public void update(int index, Task newTask) throws InvalidArgumentException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        if (!isValidIndex(index)) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            throw new InvalidArgumentException(\"No task with id \" + index + \" exists.\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        this.tasks.set(index, newTask);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     * Removes the Task from the list at the specified index."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     * @param index The index of the task to delete."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     * @return The task that is removed."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     * @throws InvalidArgumentException Thrown when the index is out of range."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    public Task remove(int index) throws InvalidArgumentException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        if (!isValidIndex(index)) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            throw new InvalidArgumentException(\"No task with id \" + index + \" exists.\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        return tasks.remove(index);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    public int size() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        return this.tasks.size();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    private boolean isValidIndex(int index) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        return index \u003e\u003d 0 \u0026\u0026 index \u003c this.tasks.size();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "muhammadaljunied": 80
    }
  },
  {
    "path": "src/main/java/seedu/duke/trackables/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "package seedu.duke.trackables;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    private Date by;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    public Deadline(String description, Date by) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        this.by \u003d by;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     * Constructs a new Deadline using string arguments. Typically used when restoring Deadline from Storage."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     * @param args String arguments containing Deadline data from Storage."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    public Deadline(String... args) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        super(args);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            this.by \u003d new SimpleDateFormat(\"d/MM/yyyy HHmm\").parse(args[3]);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    public String getByAsFormattedString() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        return new SimpleDateFormat(\"d/MM/yyyy HHmm\").format(by);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        return \"[D]\" + super.toString() + \" (by: \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            + getByAsFormattedString() + \")\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    public String getAsString() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        final StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        sb.append(\"D\").append(\" | \")"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            .append(isDone ? \"1\" : \"0\")"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            .append(\" | \").append(this.description)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            .append(\" | \").append(getByAsFormattedString());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "muhammadaljunied": 49
    }
  },
  {
    "path": "src/main/java/seedu/duke/trackables/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "package seedu.duke.trackables;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import seedu.duke.exceptions.InvalidArgumentException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    private Date at;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    public Event(String description, Date at)  {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        this.at \u003d at;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     * Constructs a new Event using string arguments. Typically used when restoring Event from Storage."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     * @param args String arguments containing Event data from Storage."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    public Event(String... args) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        super(args);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            this.at \u003d new SimpleDateFormat(\"d/MM/yyyy HHmm\").parse(args[3]);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    private String getAtAsFormatedDate() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        return new SimpleDateFormat(\"d/MM/yyyy HHmm\").format(at);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        return \"[E]\" + super.toString() + \" (at: \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            + getAtAsFormatedDate() + \")\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    public String getAsString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        final StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        sb.append(\"E\").append(\" | \")"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            .append(isDone ? \"1\" : \"0\")"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            .append(\" | \").append(this.description)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            .append(\" | \").append(getAtAsFormatedDate());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "muhammadaljunied": 51
    }
  },
  {
    "path": "src/main/java/seedu/duke/trackables/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "package seedu.duke.trackables;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    public Task() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    public Task(String... args) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        this.isDone \u003d !args[1].equals(\"0\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        this.description \u003d args[2];"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    private String getStatusIcon() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        //return tick or X symbols"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        return (this.isDone ? \"\\u2713\" : \"\\u2718\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    public boolean isDone() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        return this.isDone;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    public void markAsDone() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        return \"[\" + getStatusIcon() + \"] \" + description;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     * Gets the Task in its String equivalent form."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    public String getAsString() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        final StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        sb.append(isDone ? \"1\" : \"0\").append(\" | \").append(this.description);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "muhammadaljunied": 49
    }
  },
  {
    "path": "src/main/java/seedu/duke/trackables/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "package seedu.duke.trackables;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "public class Todo extends Task {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    public Todo(String description) {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    public Todo(String... args) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        super(args);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    public String getAsString() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        final StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        sb.append(\"T\").append(\" | \").append(isDone ? \"1\" : \"0\").append(\" | \").append(this.description);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "muhammadaljunied": 25
    }
  },
  {
    "path": "src/main/java/seedu/duke/ui/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "package seedu.duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import seedu.duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": " * The Ui Class is static as there is exactly one Ui in Duke, and more should not be instantiated."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": " * A Singleton implementation would have been excessive for a utility class."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    private static final String HORIZONTAL_LINE \u003d \"______________________________\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        + \"______________________________\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    private static final String LOGO \u003d \"\\t ____        _        \\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        + \"\\t|  _ \\\\ _   _| | _____ \\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        + \"\\t| | | | | | | |/ / _ \\\\\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        + \"\\t| |_| | |_| |   \u003c  __/\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        + \"\\t|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    private static Scanner scanner \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     * Prints the greeting message."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    public static void greet() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        System.out.println(LOGO);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        printMessages(\"Hello! I\u0027m Duke\", \"What can I do for you?\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     * Prints out the variable message arguments, each on its own line."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     * @param messages The variable message arguments to print."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    public static void printMessages(String... messages) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        for (String message : messages) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "            System.out.println(\"\\t\" + message);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    public static void printLoadingError() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        printMessages(\"Creating a new taskList for you...\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    public static void printError(DukeException e) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        printMessages(e.getMessage());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    public static String nextLine() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        return scanner.nextLine();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     * Print horizontal line."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    private static void printLine() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        System.out.println(\"\\t\" + HORIZONTAL_LINE);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "muhammadaljunied": 63
    }
  },
  {
    "path": "src/test/java/DukeTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import static org.junit.jupiter.api.Assertions.*;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "public class DukeTest {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    void runTest() {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "muhammadaljunied": 9
    }
  },
  {
    "path": "src/test/java/seedu/duke/commands/DeleteCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "package seedu.duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import seedu.duke.exceptions.InvalidArgumentException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import seedu.duke.exceptions.InvalidCommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import seedu.duke.storage.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import seedu.duke.trackables.Todo;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "public class DeleteCommandTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    TaskList tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    DeleteCommandTest() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        tasks.add(new Todo(\"Task A\"));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        tasks.add(new Todo(\"Task B\"));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        tasks.add(new Todo(\"Task C\"));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    void deleteCommand_ShouldThrowInvalidArgumentException() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        assertThrows(InvalidArgumentException.class, () -\u003e tasks.remove(5));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    void deleteCommand_ShouldDeleteTask() throws InvalidArgumentException{"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        int size \u003d tasks.size();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        tasks.remove(0);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        assertNotEquals(size, tasks.size());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "muhammadaljunied": 33
    }
  },
  {
    "path": "src/test/java/seedu/duke/commands/DoneCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "package seedu.duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import org.junit.jupiter.params.ParameterizedTest;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import seedu.duke.trackables.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import seedu.duke.trackables.Todo;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import static org.junit.jupiter.api.Assertions.*;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "public class DoneCommandTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    void markIsDone_ShouldBeDone() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        Task task \u003d new Todo(\"Something\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        task.markAsDone();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        assertTrue(task.isDone());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "muhammadaljunied": 19
    }
  },
  {
    "path": "src/test/java/seedu/duke/helpers/ParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "package seedu.duke.helpers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import org.junit.jupiter.params.ParameterizedTest;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import org.junit.jupiter.params.provider.ValueSource;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import seedu.duke.commands.AddCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import seedu.duke.commands.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import seedu.duke.commands.ListCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import seedu.duke.commands.TodoCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "public class ParserTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    @ParameterizedTest"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    @ValueSource(strings \u003d {\"list\", \"add\", \"done\", \"todo\", \"event\", \"deadline\", \"delete\", \"bye\", \"add something\","
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "                            \"done 1, todo something else\"})"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    void identifyCommandName_ShouldReturnCommandName(String input) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        assertEquals(Parser.CommandName.valueOf(input.split(\" \")[0].toUpperCase()), Parser.identifyCommandName(input));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    @ParameterizedTest"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    @ValueSource(strings \u003d {\"remove\", \"create\", \"something\", \"else\", \"not\", \"command\"})"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    void identifyCommandName_ShouldReturnCommandNameError(String input) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        assertEquals(Parser.CommandName.ERROR, Parser.identifyCommandName(input));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    @ParameterizedTest"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    @ValueSource(strings \u003d {\"list\", \"add something\", \"todo something\", \"event sometthing123* /at 21/12/2019 2345\","
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        \"deadline something456% /by 23/12/2019 1234\", \"done 3\", \"delete 5\", \"bye\"})"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    void parseCommand_ShouldReturnCommand(String input) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        assertEquals(Command.class, Parser.parseCommand(input).getClass().getSuperclass());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    @ParameterizedTest"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    @ValueSource(strings \u003d {\"list\"})"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    void parseCommand_ShouldReturnListCommand(String input) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        assertEquals(ListCommand.class, Parser.parseCommand(input).getClass());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    @ParameterizedTest"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    @ValueSource(strings \u003d {\"add something\", \"add something123\", \"add something else 123\"})"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    void parseCommand_ShouldReturnAddCommand(String input) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        assertEquals(AddCommand.class, Parser.parseCommand(input).getClass());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    @ParameterizedTest"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    @ValueSource(strings \u003d {\"todo something\", \"todo something123\", \"todo something else 123\"})"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    void parseCommand_ShouldReturnTodoCommand(String input) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "        assertEquals(TodoCommand.class, Parser.parseCommand(input).getClass());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "muhammadaljunied": 57
    }
  },
  {
    "path": "text-ui-test/runtest.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "#!/usr/bin/env bash"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "# create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "if [ ! -d \"../bin\" ]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "then"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    mkdir ../bin"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "fi"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "# delete output from previous run"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "if [ -e \"./ACTUAL.TXT\" ]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "then"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    rm ACTUAL.TXT"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "fi"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "# compile the code into the bin folder, terminates if error occurred"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "if ! javac -cp ../src -Xlint:none -d ../bin ../src/main/java/Duke.java"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "then"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    echo \"********** BUILD FAILURE **********\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "fi"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "java -classpath ../bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "# compare the output to the expected output"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "diff ACTUAL.TXT EXPECTED.TXT"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "if [ $? -eq 0 ]"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "then"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    echo \"Test result: PASSED\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    exit 0"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "else"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    echo \"Test result: FAILED\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "muhammadaljunied"
        },
        "content": "fi"
      }
    ],
    "authorContributionMap": {
      "muhammadaljunied": 34
    }
  }
]
