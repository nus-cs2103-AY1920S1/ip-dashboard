[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    id \u0027org.openjfx.javafxplugin\u0027 version \u00270.0.7\u0027"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "junnbang"
        },
        "content": "}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "junnbang"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "junnbang"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "junnbang"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    archiveVersion \u003d \"0.2.0\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "junnbang"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "junnbang"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "junnbang"
        },
        "content": "}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "junnbang"
        },
        "content": "test {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "junnbang"
        },
        "content": "javafx {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    version \u003d \"11.0.2\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    modules \u003d [ \u0027javafx.controls\u0027, \u0027javafx.fxml\u0027 ]"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "junnbang"
        },
        "content": "}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "group \u0027seedu.duke\u0027"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    // Change this to your main class."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    mainClassName \u003d \"Launcher\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "junnbang": 28,
      "-": 15
    }
  },
  {
    "path": "docs/README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junnbang"
        },
        "content": "# Duke - User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "junnbang"
        },
        "content": "![Image of Task Manager](Ui.png)"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "junnbang"
        },
        "content": "## Table of Content"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "junnbang"
        },
        "content": "1. [Introduction](#introduction)"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "junnbang"
        },
        "content": "2. [Get Started](#get-started)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "junnbang"
        },
        "content": "3. [Features](#features)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "junnbang"
        },
        "content": "4. [FAQ](#faq)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "junnbang"
        },
        "content": "5. [Command Summary](#command-summary)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "junnbang"
        },
        "content": "## Introduction"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "junnbang"
        },
        "content": "Duke is a desktop application that helps users to manage their day-to-day tasks."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "junnbang"
        },
        "content": "It has a Graphical User Interface (GUI) that allows user-friendly interaction "
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "junnbang"
        },
        "content": "and uses Command Line Interface (CLI) for data entries."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "junnbang"
        },
        "content": "## Get Started"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "junnbang"
        },
        "content": "1. Download Java Runtime environment to run `duke.jar` file [here](https://www.java.com/en/download/)."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "junnbang"
        },
        "content": "2. Download the latest release of `duke.jar` [here](https://github.com/junnbang/duke/releases)."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "junnbang"
        },
        "content": "3. To start the application, double-click on `duke.jar`"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "## Features"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "junnbang"
        },
        "content": "*Command Format ðŸŒŸðŸŒŸðŸŒŸ*"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "junnbang"
        },
        "content": "- *`\u003caction\u003e \u003cparameter1\u003e \u003cparameter2\u003e \u003cparameter3\u003e`* \u003cbr /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "junnbang"
        },
        "content": "E.g. event SkillsFuture Seminar /at 15/9/2019 1400"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "junnbang"
        },
        "content": "- **Order of parameter** is **IMPORTANT**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "junnbang"
        },
        "content": "- Commands are **CASE-SENSITIVE**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "junnbang"
        },
        "content": "- Date format **MUST** be followed strictly."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "junnbang"
        },
        "content": "### 1. To view all tasks: **`list`**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "junnbang"
        },
        "content": "Format: `list`"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "junnbang"
        },
        "content": "### 2. To add a new task: **`todo`**, **`event`**, **`deadline`**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "junnbang"
        },
        "content": "Adds a new task into the task manager. \u003cbr /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "junnbang"
        },
        "content": "#### There are 3 types of tasks you can add into Duke:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "junnbang"
        },
        "content": "1. `todo` task - A to-do task which requires description only."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    - Format: `todo \u003cdescription\u003e`"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "junnbang"
        },
        "content": "2. `deadline` task - A deadline to meet which requires a description and datetime."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    - Format: `deadline \u003cdescription\u003e /by \u003cdate \u0026 time\u003e`"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "junnbang"
        },
        "content": "3. `event` task - An event which requires a description and datetime."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    - Format: `event \u003cdescription\u003e /at \u003cdate \u0026 time`"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    "
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "junnbang"
        },
        "content": "#### Examples:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "junnbang"
        },
        "content": "1. `todo return storybook`"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "junnbang"
        },
        "content": "2. `deadline Submission of Maths Worksheet /by 29/9/2019 1300`"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "junnbang"
        },
        "content": "3. `event John\u0027s birthday /at 1/8/2020 1800`"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "junnbang"
        },
        "content": "### 3. Find task using a keyword: **`find`**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "junnbang"
        },
        "content": "Format: `find \u003ckeyword\u003e`"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "junnbang"
        },
        "content": "#### Examples:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "junnbang"
        },
        "content": "1. `find workshop`"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "junnbang"
        },
        "content": "2. `find Project work`"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "junnbang"
        },
        "content": "### 4. Mark a task as done: **`done`**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "junnbang"
        },
        "content": "Format: `done \u003cindex of task on list\u003e`"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "junnbang"
        },
        "content": "#### Example:"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "junnbang"
        },
        "content": "1. done 3"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "junnbang"
        },
        "content": "### 5. Delete a task: **`delete`**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "junnbang"
        },
        "content": "Format: `delete \u003cindex of task on list\u003e`"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "junnbang"
        },
        "content": "#### Example:"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "junnbang"
        },
        "content": "1. delete 2"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "junnbang"
        },
        "content": "### 6. Save your progress: **`bye`**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "junnbang"
        },
        "content": "Format: `bye`"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "junnbang"
        },
        "content": "### 7. View your schedule for a specific date: **`view`**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "junnbang"
        },
        "content": "Format: `view \u003cdate\u003e` (date format: dd/mm/yyyy)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "junnbang"
        },
        "content": "#### Examples:"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "junnbang"
        },
        "content": "1. `view 29/10/2019`"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "junnbang"
        },
        "content": "2. `view 1/2/2019`"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "junnbang"
        },
        "content": "## FAQ"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "junnbang"
        },
        "content": "*Q*: Where is the tasks file saved at? \u003cbr /\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "junnbang"
        },
        "content": "*A*: Go to the directory where you put your `duke.jar` at. "
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "junnbang"
        },
        "content": "There is a `data` folder created and it contains your `tasks.txt` file."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "junnbang"
        },
        "content": "## Command Summary"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "junnbang"
        },
        "content": "1. To view tasks: `list`"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "junnbang"
        },
        "content": "2. To add a new task:"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "junnbang"
        },
        "content": "\t- `todo \u003cdescription\u003e`"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "junnbang"
        },
        "content": "\t- `deadline \u003cdescription\u003e /by \u003cdate \u0026 time\u003e`"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "junnbang"
        },
        "content": "\t- `event \u003cdescription\u003e /at \u003cdate \u0026 time`"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "junnbang"
        },
        "content": "3. Find: `find \u003ckeyword\u003e`"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "junnbang"
        },
        "content": "4. Mark task as done: `done \u003cindex of task on list\u003e`"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "junnbang"
        },
        "content": "5. Delete task: `delete \u003cindex of task on list\u003e`"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "junnbang"
        },
        "content": "6. Save: `bye`"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "junnbang"
        },
        "content": "7. View schedule by date: `view \u003cdate\u003e`"
      }
    ],
    "authorContributionMap": {
      "junnbang": 73,
      "-": 18
    }
  },
  {
    "path": "src/main/java/AddCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junnbang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "junnbang"
        },
        "content": " * Represent user command to add tasks into their task list."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "junnbang"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "junnbang"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    protected String desc;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    protected String dateTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    private Task newTask;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * Represents an action to add tasks that does not require date and time."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * @param command Type of task"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * @param desc Description of task"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public AddCommand(String command, String desc) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        super(command);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        this.desc \u003d desc;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * Represents action to add tasks that require date and time."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * @param command Type of task"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * @param desc Description of task"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * @param dateTime Date and Time of event"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public AddCommand(String command, String desc, String dateTime) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        super(command);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        this.desc \u003d desc;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        this.dateTime \u003d dateTime;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public String getDesc() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        return this.desc;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public String getDateTime() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        return this.dateTime;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * Creates and adds the specific type of task into the task list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * @param tasks List of tasks."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * @param ui User Interface."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * @param storage Storage of tasks.txt files."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public void execute(TaskList tasks, UI ui, Storage storage) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        String cmd \u003d this.getCommand();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        Task newTask;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        if (cmd.equals(\"deadline\")) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            newTask \u003d new Deadline(this.getDesc(), this.getDateTime());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        } else if (cmd.equals(\"event\")) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            newTask \u003d new Event(this.getDesc(), this.getDateTime());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            newTask \u003d new ToDo(this.getDesc());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        tasks.addTask(newTask);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        this.newTask \u003d newTask;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        this.tasks \u003d tasks;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        StringBuilder printStr \u003d new StringBuilder();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        printStr.append(\"Got it. I\u0027ve added this task:\\n\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        printStr.append(\"  \" + newTask + \"\\n\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        printStr.append(\"Now you have \" + tasks.getTaskCount() + \" tasks in the list.\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        return printStr.toString();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "junnbang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "junnbang": 77
    }
  },
  {
    "path": "src/main/java/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junnbang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "junnbang"
        },
        "content": " * Represent user command."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "junnbang"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "junnbang"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    protected String command;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * Represents an action taken by the user."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * @param command User Action"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public Command(String command) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        this.command \u003d command;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public String getCommand() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        return this.command;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public abstract void execute(TaskList tasks, UI ui, Storage storage) throws DukeException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public abstract boolean isExit();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "junnbang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "junnbang": 24
    }
  },
  {
    "path": "src/main/java/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junnbang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "junnbang"
        },
        "content": " * Represents a task that has a deadline which a user is to meet."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "junnbang"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "junnbang"
        },
        "content": "public class Deadline extends TaskWithDateTime {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * Construct a task object that has a deadline to meet."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * @param description Description of task"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * @param dateTime    Date and time to be due"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public Deadline(String description, String dateTime) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        super(description, dateTime);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        return \"[D]\" + super.toString() + \" (by: \" + this.getDateTimePrint() + \")\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "junnbang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "junnbang": 21
    }
  },
  {
    "path": "src/main/java/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junnbang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "junnbang"
        },
        "content": " * Represent user command to delete tasks from their task list."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "junnbang"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "junnbang"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    protected int index;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    private Task deletedTask;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * Represents an action to delete task using the index in their task list."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * @param command Type of task"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * @param index Task Index on their task list"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public DeleteCommand(String command, int index) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        super(command);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public int getIndex() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        return this.index - 1;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * Deletes a specific task from the task list."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * @param tasks List of tasks."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * @param ui User Interface."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * @param storage Storage of tasks.txt files."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * @throws DukeException If index is not within the list."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public void execute(TaskList tasks, UI ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        if (this.getIndex() \u003e\u003d tasks.getTaskCount()) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            throw new DukeException(\"Index is not within the list. Please enter a index within the list.\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        Task deletedTask \u003d tasks.getTask(this.getIndex());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        tasks.deleteTask(this.getIndex());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        this.deletedTask \u003d deletedTask;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        this.tasks \u003d tasks;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        String printStr \u003d \"Noted. I\u0027ve removed this task:\\n\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                + \"  \" + deletedTask + \"\\n\""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                + \"Now you have \" + tasks.getTaskCount() + \" tasks in the list.\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        return printStr;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "junnbang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "junnbang": 56
    }
  },
  {
    "path": "src/main/java/DialogBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import javafx.scene.layout.Background;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import javafx.scene.layout.BackgroundFill;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import javafx.scene.layout.CornerRadii;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import javafx.scene.text.Font;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import javafx.geometry.Insets;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import javafx.scene.paint.Color;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import javafx.scene.shape.Circle;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "junnbang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "junnbang"
        },
        "content": " * An example of a custom control using FXML."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "junnbang"
        },
        "content": " * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "junnbang"
        },
        "content": " * containing text from the speaker."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "junnbang"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "junnbang"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    private DialogBox(String text, Image img) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        //adding font"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        dialog.setFont(new Font(\"Arial\", 16));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        displayPicture.setImage(img);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        //adding padding"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        this.setPadding(new Insets(10, 10, 10, 10));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        dialog.setPadding(new Insets(10, 10, 10, 10));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        //change image view to circle"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        Circle clip \u003d new Circle(50,50,50);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        displayPicture.setClip(clip);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        //Show overflow"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        dialog.setMinSize(Label.USE_COMPUTED_SIZE, Label.USE_PREF_SIZE);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        //add border"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        setStyle(\"-fx-border-insets: 5px;\""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                + \"-fx-border-style: solid inside;\""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                + \"-fx-border-width: 1;\""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                + \"-fx-border-radius: 5;\""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                + \"-fx-effect: dropshadow(three-pass-box, black, 10, 0, 0, 0);\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        Collections.reverse(tmp);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * Contains the image and message of the user."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * @param text Text to display."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * @param img Icon for User."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * @return Dialog box."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public static DialogBox getUserDialog(String text, Image img) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        var db \u003d new DialogBox(text, img);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        db.setBackground(new Background(new BackgroundFill("
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                Color.LIGHTGREY,"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                CornerRadii.EMPTY,"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                new Insets(5))));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * Contains the image and message of Duke."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * @param text Text to display."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * @param img Icon for Duke."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * @return Flipped horizontal dialog box."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public static DialogBox getDukeDialog(String text, Image img) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        var db \u003d new DialogBox(text, img);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        db.setBackground(new Background(new BackgroundFill(Color.LIGHTBLUE,"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                CornerRadii.EMPTY,"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                new Insets(5))));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "junnbang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "junnbang": 110
    }
  },
  {
    "path": "src/main/java/DoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junnbang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "junnbang"
        },
        "content": " * Represent user command to mark their task as completed in their task list."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "junnbang"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "junnbang"
        },
        "content": "public class DoneCommand extends Command {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    protected int index;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    private Task doneTask;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * Represents an action to mark task as done in their task list."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * @param command Type of task"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * @param index Task Index on their task list"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public DoneCommand(String command, int index) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        super(command);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public int getIndex() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        return this.index - 1;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * Marks the specific task that is done."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * @param tasks List of tasks."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * @param ui User Interface."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * @param storage Storage of tasks.txt files."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * @throws DukeException If index is not within the list."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public void execute(TaskList tasks, UI ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        if (this.getIndex() \u003e\u003d tasks.getTaskCount()) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            throw new DukeException(\"Index is not within the list. Please enter a index within the list.\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        Task doneTask \u003d tasks.getTask(this.getIndex());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        tasks.markTaskDone(this.getIndex());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        this.doneTask \u003d doneTask;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        String printStr \u003d \"Nice! I\u0027ve marked this task as done:\\n  \" + doneTask;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        return printStr;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "junnbang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "junnbang": 51
    }
  },
  {
    "path": "src/main/java/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junnbang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "junnbang"
        },
        "content": " * A Task Manager that allows users to record their tasks."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "junnbang"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    private UI ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * Construct a object to run the whole task manager."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * @param filePath Directory of the file for saving and loading"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public Duke(String filePath) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        ui \u003d new UI();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        storage \u003d new Storage(filePath);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        //load previous task list. If not found, create a new one"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            tasks \u003d new TaskList(storage.load());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            ui.showLoadingSuccessful();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            ui.showLoadingError();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * You should have your own function to generate a response to user input."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * Replace this stub with your completed method."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public String getResponse(String input) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        String reply;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            Command c \u003d Parser.parse(input);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            c.execute(tasks, ui, storage);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            assert c.toString() !\u003d \"\" : \"Response from Duke cannot be empty!\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            return c.toString();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            reply \u003d e.toString();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        return reply;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "junnbang": 43,
      "-": 3
    }
  },
  {
    "path": "src/main/java/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junnbang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "junnbang"
        },
        "content": " * Describes the error that occurs from the user interaction."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "junnbang"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "junnbang"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * An Exception that entails the reason of error."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * @param message Error Message for the user to know what went wrong"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public DukeException(String message) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        String emoji \u003d \"\\uD83D\\uDE41\"; // unicode represents frowning sad face"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        String errMessage \u003d emoji + \" \" + this.getMessage();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        return errMessage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "junnbang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "junnbang": 22
    }
  },
  {
    "path": "src/main/java/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junnbang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "junnbang"
        },
        "content": " * Represent an event that the user wants to attend."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "junnbang"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "junnbang"
        },
        "content": "public class Event extends TaskWithDateTime {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * Construct a task object that has a time to attend."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * @param description Description of task"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * @param dateTime    Date and Time of the event"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public Event(String description, String dateTime) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        super(description, dateTime);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        return \"[E]\" + super.toString() + \" (at: \" + this.getDateTimePrint() + \")\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "junnbang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "junnbang": 21
    }
  },
  {
    "path": "src/main/java/ExitCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junnbang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "junnbang"
        },
        "content": " * Represent user command to to exit the program."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "junnbang"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "junnbang"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * Represents an action to close their user interface."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * @param command Type of task"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public ExitCommand(String command) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        super(command);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public void execute(TaskList tasks, UI ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        storage.save(tasks);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        return \"Bye. Your tasks have been saved. Hope to see you again soon!\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "junnbang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "junnbang": 27
    }
  },
  {
    "path": "src/main/java/FindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "junnbang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "junnbang"
        },
        "content": " * Represent user command to find tasks using keyword provided."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "junnbang"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "junnbang"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    protected String keyword;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    private TaskList tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * Represents an action to find specific tasks using keyword provided."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * @param command Type of task"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * @param keyword Used as keyword for searching."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public FindCommand(String command, String keyword) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        super(command);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        this.keyword \u003d keyword;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public String getKeyword() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        return this.keyword;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * Finds all the tasks that contains the word provided."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * @param tasks List of tasks."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * @param ui User Interface."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * @param storage Storage of tasks.txt files."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public void execute(TaskList tasks, UI ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        String word \u003d keyword.trim().toLowerCase();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        ArrayList\u003cTask\u003e taskArr \u003d tasks.getTaskArr();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        ArrayList\u003cTask\u003e filteredTasks \u003d taskArr"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                                            .stream()"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                                            .filter(task -\u003e task.getDescription().toLowerCase().contains(word))"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                                            .collect(Collectors.toCollection(ArrayList\u003cTask\u003e::new));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        if (filteredTasks.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            throw new DukeException(\"Cannot find any tasks that match your keyword.\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        this.tasks \u003d new TaskList(filteredTasks);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        StringBuilder printStr \u003d new StringBuilder();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        printStr.append(\"Here are the matching tasks in your list:\\n\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        for (int i \u003d 0; i \u003c tasks.getTaskCount(); i++) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            if (i \u003d\u003d tasks.getTaskCount() - 1) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                printStr.append((i + 1) + \". \" + tasks.getTask(i));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            printStr.append((i + 1) + \". \" + tasks.getTask(i) + \"\\n\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        return printStr.toString();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "junnbang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "junnbang": 64
    }
  },
  {
    "path": "src/main/java/Launcher.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "junnbang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "junnbang"
        },
        "content": " * A launcher class to workaround classpath issues."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "junnbang"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "junnbang"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        Application.launch(Main.class, args);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "junnbang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "junnbang": 10
    }
  },
  {
    "path": "src/main/java/LoadFile.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import java.io.FileReader;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "junnbang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "junnbang"
        },
        "content": " * Handles loading of file from specified directory."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "junnbang"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "junnbang"
        },
        "content": "public class LoadFile {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    private String filePath;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * Construct a object to specific the location for loading of file."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * @param filePath Directory of the file"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public LoadFile(String filePath) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public String getFilePath() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        return this.filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * Loads the tasks.txt file via the file path."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * @return List of tasks."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * @throws DukeException If file cannot be found."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public ArrayList\u003cTask\u003e loadTaskFromFile() throws DukeException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            File savedFile \u003d new File(this.getFilePath());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            Scanner sc \u003d new Scanner(new FileReader(savedFile));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            ArrayList\u003cTask\u003e taskArr \u003d changeTextToTask(new ArrayList\u003cTask\u003e(), sc);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            return taskArr;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        } catch (IOException err) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            throw new DukeException(\"Unable to load file.\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    private ArrayList\u003cTask\u003e changeTextToTask(ArrayList\u003cTask\u003e taskArr, Scanner sc) throws IOException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        while (sc.hasNextLine()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            String line \u003d sc.nextLine();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            String[] lineArr \u003d line.split(\" \\\\| \");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            String typeOfTask \u003d lineArr[0];"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            String isDone \u003d lineArr[1];"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            String desc \u003d lineArr[2];"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            String date \u003d \"\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            if (typeOfTask.equals(\"E\") || typeOfTask.equals(\"D\")) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                date \u003d lineArr[3];"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            //create each task base on txt, and add into list"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            Task newTask \u003d new Task(\"\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            switch (typeOfTask) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            case \"T\":"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                newTask \u003d new ToDo(desc);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                taskArr.add(newTask);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            case \"D\":"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                newTask \u003d new Deadline(desc, date);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                taskArr.add(newTask);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            case \"E\":"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                newTask \u003d new Event(desc, date);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                taskArr.add(newTask);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            //check if Task is done"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            if (isDone.equals(\"1\")) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                newTask.markAsDone();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        return taskArr;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "junnbang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "junnbang": 84
    }
  },
  {
    "path": "src/main/java/Main.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "junnbang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "junnbang"
        },
        "content": " * A GUI for Duke using FXML."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "junnbang"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "junnbang"
        },
        "content": "public class Main extends Application {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    private Duke duke \u003d new Duke(\"data/tasks.txt\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            AnchorPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            Scene scene \u003d new Scene(ap);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            //add title"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            stage.setTitle(\"Duke\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            //format the window"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            stage.setResizable(false);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "junnbang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "junnbang": 33
    }
  },
  {
    "path": "src/main/java/MainWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "junnbang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "junnbang"
        },
        "content": " * Controller for MainWindow. Provides the layout for the other controls."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "junnbang"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "junnbang"
        },
        "content": "public class MainWindow extends AnchorPane {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    private Duke duke;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * Starts the task manager."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        //adding start up message"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        String message \u003d \"Hello! I\u0027m Duke!\\n\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                + \"What can I do for you?\\n\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                + \"Remember to type \u0027bye\u0027 to save before exiting!\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        dialogContainer.getChildren().add(DialogBox.getDukeDialog(message, dukeImage));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public void setDuke(Duke d) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        duke \u003d d;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        String response \u003d duke.getResponse(input);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                DialogBox.getUserDialog(input, userImage),"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                DialogBox.getDukeDialog(response, dukeImage)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        );"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "junnbang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "junnbang": 59
    }
  },
  {
    "path": "src/main/java/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "junnbang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "junnbang"
        },
        "content": " * Handles the data validation of user commands."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "junnbang"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "junnbang"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * Interprets the user input and returns a specific command."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * @param input User input."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * @return Specific command in relation to user input."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * @throws DukeException if user input fields are incorrect."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public static Command parse(String input) throws DukeException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        String trimmedInput \u003d input.trim();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        String[] inputArr \u003d trimmedInput.split(\" \", 2);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        //Check what type of command is it"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        String cmd \u003d inputArr[0];"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        Command nextCommand \u003d new ExitCommand(cmd);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            if (cmd.equals(\"list\")) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                nextCommand \u003d new ShowCommand(cmd);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            } else if (cmd.equals(\"find\")) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                String desc \u003d inputArr[1].trim();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                nextCommand \u003d new FindCommand(cmd, desc);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            } else if (cmd.equals(\"view\")) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                String date \u003d inputArr[1].trim();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                if (!isDateValid(date)) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                    throw new DukeException(\"Please enter a valid date. Eg. 29/8/2019\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                nextCommand \u003d new ViewCommand(cmd, date);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            } else if (cmd.equals(\"todo\")) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                String desc \u003d inputArr[1].trim();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                assert desc.length() \u003e 0 : \"Description of todo task should not be empty!\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                nextCommand \u003d new AddCommand(cmd, desc);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            } else if (cmd.equals(\"deadline\")) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                String errorMessage \u003d \"Incorrect format. Eg. deadline Do Project /by 29/8/2019 1800\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                String desc \u003d getDesc(inputArr[1], \" /by \", errorMessage);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                String dateTime \u003d getDateTime(inputArr[1], \" /by \", errorMessage);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                assert desc !\u003d \"\" : \"Description of deadline should not be empty!\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                assert dateTime !\u003d \"\" : \"dateTime variable for deadline should not be empty!\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                nextCommand \u003d new AddCommand(cmd, desc, dateTime);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            } else if (cmd.equals(\"event\")) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                String errorMessage \u003d \"Incorrect format. Eg. event Talk Show /at 29/8/2019 1800\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                String desc \u003d getDesc(inputArr[1], \" /at \", errorMessage);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                String dateTime \u003d getDateTime(inputArr[1], \" /at \", errorMessage);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                assert desc !\u003d \"\" : \"Description of event should not be empty!\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                assert dateTime !\u003d \"\" : \"dateTime variable for event should not be empty!\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                nextCommand \u003d new AddCommand(cmd, desc, dateTime);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            } else if (cmd.equals(\"done\")) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                int index \u003d getIndex(inputArr[1]);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                nextCommand \u003d new DoneCommand(cmd, index);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            } else if (cmd.equals(\"delete\")) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                int index \u003d getIndex(inputArr[1]);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                nextCommand \u003d new DeleteCommand(cmd, index);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            } else if (cmd.equals(\"bye\")) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                //go with default command"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                //if command can\u0027t be recognised"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                throw new DukeException(\"OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            throw new DukeException(\"Incorrect input fields.\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        return nextCommand;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    private static String getDesc(String details, String delimiter, String errorMessage) throws DukeException {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        if (details.contains(delimiter)) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            int index \u003d details.indexOf(delimiter);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            String desc \u003d details.substring(0, index).trim();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            return desc;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            throw new DukeException(errorMessage);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    private static String getDateTime(String details, String delimiter, String errorMessage) throws DukeException {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        int index \u003d details.indexOf(delimiter);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        String dateTime \u003d details.substring(index + delimiter.length()).trim();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        if (isDateTimeValid(dateTime)) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            return dateTime;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            throw new DukeException(errorMessage);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    private static boolean isDateTimeValid(String dateTime) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"d/M/yyyy HHmm\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            LocalDateTime tempDateTime \u003d LocalDateTime.parse(dateTime, formatter);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    private static boolean isDateValid(String date) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"d/M/yyyy\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            LocalDate tempDateTime \u003d LocalDate.parse(date, formatter);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    private static int getIndex(String indexStr) throws DukeException {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            return Integer.parseInt(indexStr);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            throw new DukeException(\"Please enter a valid number.\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "junnbang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "junnbang": 130
    }
  },
  {
    "path": "src/main/java/ShowCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junnbang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "junnbang"
        },
        "content": " * Represent user command to display their task list."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "junnbang"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "junnbang"
        },
        "content": "public class ShowCommand extends Command {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * Represents an action to display their tasks."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * @param command Type of task"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public ShowCommand(String command) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        super(command);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * Shows all the tasks."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * @param tasks List of tasks."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * @param ui User Interface."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * @param storage Storage of tasks.txt files."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public void execute(TaskList tasks, UI ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        if (tasks.getTaskCount() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            throw new DukeException(\"No tasks available.\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        this.tasks \u003d tasks;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        StringBuilder printStr \u003d new StringBuilder();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        printStr.append(\"Here are the tasks in your list:\\n\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        for (int i \u003d 0; i \u003c tasks.getTaskCount(); i++) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            if (i \u003d\u003d tasks.getTaskCount() - 1) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                printStr.append((i + 1) + \". \" + tasks.getTask(i));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            printStr.append((i + 1) + \". \" + tasks.getTask(i) + \"\\n\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        return printStr.toString();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "junnbang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "junnbang": 49
    }
  },
  {
    "path": "src/main/java/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "junnbang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "junnbang"
        },
        "content": " * Handles saving and loading of file locally."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "junnbang"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "junnbang"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    private String filePath;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * Construct a object that streamlines loading and saving of file."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * @param filePath Directory of the file."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public Storage(String filePath) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public String getFilePath() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        return this.filePath;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * Loads tasks.txt file from the directory given."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * @return List of tasks."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * @throws DukeException If file cannot be found."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public ArrayList\u003cTask\u003e load() throws DukeException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        assert this.getFilePath() !\u003d \"\" : \"File path should not be empty!\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        LoadFile lf \u003d new LoadFile(this.getFilePath());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        ArrayList\u003cTask\u003e taskArr \u003d lf.loadTaskFromFile();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        return taskArr;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * Saves the tasks into a text file format in the file path allocated."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * @param tasks List of tasks."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public void save(TaskList tasks) throws DukeException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        assert this.getFilePath() !\u003d \"\" : \"File path should not be empty!\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        WriteFile wf \u003d new WriteFile(this.getFilePath());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        wf.writeTaskToFile(tasks.getTaskArr());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "junnbang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "junnbang": 49
    }
  },
  {
    "path": "src/main/java/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junnbang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "junnbang"
        },
        "content": " * Represents a task that a user is to do."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "junnbang"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "junnbang"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * Construct a task object that specifics its details."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * @param description Description of task"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public boolean isDone() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        return this.isDone;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        return (isDone ? \"\\u2713\" : \"\\u2718\"); //return tick or X symbols"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        return this.description;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    //set methods"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public void markAsDone() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        String printTask \u003d \"[\" + this.getStatusIcon() + \"] \" + this.getDescription();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        return printTask;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "junnbang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "junnbang": 40
    }
  },
  {
    "path": "src/main/java/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "junnbang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "junnbang"
        },
        "content": " * Manages users\u0027 task."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "junnbang"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "junnbang"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    private ArrayList\u003cTask\u003e taskArr;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * Construct a list to record the tasks."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        this.taskArr \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public TaskList(ArrayList\u003cTask\u003e taskArr) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        this.taskArr \u003d new ArrayList\u003cTask\u003e(taskArr);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public ArrayList\u003cTask\u003e getTaskArr() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        return this.taskArr;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public int getTaskCount() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        return this.getTaskArr().size();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * Marks a specific task as done."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * @param index Task index in task list."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * @throws DukeException If the task is already marked."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public void markTaskDone(int index) throws DukeException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        Task task \u003d this.getTaskArr().get(index);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        if (task.isDone()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            throw new DukeException(\"The task is already marked done.\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        this.getTaskArr().get(index).markAsDone();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public Task getTask(int index) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        return this.getTaskArr().get(index);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public void addTask(Task task) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        this.getTaskArr().add(task);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public void deleteTask(int index) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        this.getTaskArr().remove(index);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "junnbang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "junnbang": 56
    }
  },
  {
    "path": "src/main/java/TaskWithDateTime.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "junnbang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "junnbang"
        },
        "content": " * Represents a task that has a date and time requirement."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "junnbang"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "junnbang"
        },
        "content": "public class TaskWithDateTime extends Task {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public static String DATE_FORMAT_FOR_INPUT \u003d \"d/M/yyyy HHmm\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public static String DATE_FORMAT_FOR_PRINT \u003d \"d MMMM yyyy, h:mma\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    protected String dateTime;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * Construct a task object that has date and time requirement."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * @param description Description of task"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * @param dateTime Date and time to be due"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public TaskWithDateTime(String description, String dateTime) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        this.dateTime \u003d dateTime;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public String getDate() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        return this.dateTime;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * Returns a date and time object of the specific date."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * @return Date and time Object."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public LocalDateTime getLocalDateTime() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        String dateStr \u003d this.getDate();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(DATE_FORMAT_FOR_INPUT);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        LocalDateTime dateTime \u003d LocalDateTime.parse(dateStr, formatter);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        return dateTime;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * Returns a formatted date and time for printing."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * @return Formatted date and time."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public String getDateTimePrint() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        LocalDateTime dateTime \u003d this.getLocalDateTime();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(DATE_FORMAT_FOR_PRINT);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        String formattedDateTime \u003d dateTime.format(formatter);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        return formattedDateTime;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "junnbang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "junnbang": 54
    }
  },
  {
    "path": "src/main/java/ToDo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junnbang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "junnbang"
        },
        "content": " * Represents a task that the user wants to do."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "junnbang"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "junnbang"
        },
        "content": "public class ToDo extends Task {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * Construct a task object that the user wants to do."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * @param description Description of task"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public ToDo(String description) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "junnbang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "junnbang": 19
    }
  },
  {
    "path": "src/main/java/UI.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "junnbang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "junnbang"
        },
        "content": " * Handles the user interface that the user interact with."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "junnbang"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "junnbang"
        },
        "content": "public class UI {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public static final String divider \u003d \"\\t____________________________________________________________\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public static final String messageFrontInden \u003d \"\\t  \";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    private Scanner sc;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * Construct a user interface object for the user to interact."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public UI() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        this.sc \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * Scans for the next line of user input."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * @return User input."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public String readCommand() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        String inputStr \u003d sc.nextLine();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        return inputStr;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * Shows the welcome message."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public void showWelcome() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        this.showLine();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        String logo \u003d \"\\t   ____        _        \\n\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                + \"\\t  |  _ \\\\ _   _| | _____ \\n\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                + \"\\t  | | | | | | | |/ / _ \\\\\\n\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                + \"\\t  | |_| | |_| |   \u003c  __/\\n\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                + \"\\t  |____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        System.out.println(logo);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        printWithInden(\"Hello! I\u0027m Duke\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        printWithInden(\"What can I do for you?\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        this.showLine();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public void showLine() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        System.out.println(divider);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public void showLoadingError() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        System.out.println(\"Unable to load previous data! A new task list is created.\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public void showLoadingSuccessful() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        System.out.println(\"Previous task list loaded successfully.\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public void showError(String message) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        printWithInden(message);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public void printWithInden(String message) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        System.out.println(messageFrontInden + message);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * Displays the list of tasks."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * @param tasks List of tasks."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public void showList(TaskList tasks) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        printWithInden(\"Here are the tasks in your list:\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        for (int i \u003d 0; i \u003c tasks.getTaskCount(); i++) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            printWithInden((i + 1) + \". \" + tasks.getTask(i));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * Filters and displays the list of tasks based on keyword."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * @param tasks List of tasks."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * @param keyword Word that the user wants to find."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public void showListWithKeyword(TaskList tasks, String keyword) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        printWithInden(\"Here are the matching tasks in your list:\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        String word \u003d keyword.trim();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        int count \u003d 1;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        for (int i \u003d 0; i \u003c tasks.getTaskCount(); i++) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            Task task \u003d tasks.getTask(i);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            String desc \u003d task.getDescription();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            if (desc.contains(word)) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                printWithInden((count) + \". \" + tasks.getTask(i));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                count++;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public void showExitMessage() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        printWithInden(\"Bye. Hope to see you again soon!\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public void showDoneMessage(Task doneTask) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        printWithInden(\"Nice! I\u0027ve marked this task as done:\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        printWithInden(\"  \" + doneTask);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * Displays the result after deletion of task."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * @param deletedTask Task that is deleted from the task list."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * @param tasks List of tasks."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public void showDeleteMessage(Task deletedTask, TaskList tasks) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        printWithInden(\"Noted. I\u0027ve removed this task:\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        printWithInden(\"  \" + deletedTask);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        printWithInden(\"Now you have \" + tasks.getTaskCount() + \" tasks in the list.\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * Displays the result after adding a task."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * @param addedTask Task that is added into the task list."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * @param tasks List of tasks."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public void showAddMessage(Task addedTask, TaskList tasks) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        printWithInden(\"Got it. I\u0027ve added this task:\");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        printWithInden(\"  \" + addedTask);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        printWithInden(\"Now you have \" + tasks.getTaskCount() + \" tasks in the list.\");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "junnbang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "junnbang": 134
    }
  },
  {
    "path": "src/main/java/ViewCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "junnbang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "junnbang"
        },
        "content": " * Represent user command to find tasks using keyword provided."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "junnbang"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "junnbang"
        },
        "content": "public class ViewCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    protected LocalDate date;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    private static String DATE_FORMAT_FOR_VIEW \u003d \"d/M/yyyy\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * Represents an action to find tasks of a specific date."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * @param command Type of task"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * @param date    Date and time."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public ViewCommand(String command, String date) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        super(command);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        this.date \u003d LocalDate.parse(date, DateTimeFormatter.ofPattern(DATE_FORMAT_FOR_VIEW));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * Finds all tasks for a specific date."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * @param tasks   List of tasks."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * @param ui      User Interface."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * @param storage Storage of tasks.txt files."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public void execute(TaskList tasks, UI ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        ArrayList\u003cTask\u003e filteredTasks \u003d tasks.getTaskArr()"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                                                .stream()"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                                                .filter(this::hasSameDate)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                                                .collect(Collectors.toCollection(ArrayList\u003cTask\u003e::new));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        if (filteredTasks.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            throw new DukeException(\"There is no tasks on \" + date + \".\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        this.tasks \u003d new TaskList(filteredTasks);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    private boolean hasSameDate(Task task) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        if (!(task instanceof TaskWithDateTime)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        TaskWithDateTime taskWithDateTime \u003d (TaskWithDateTime) task;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        LocalDate dateOfTask \u003d taskWithDateTime.getLocalDateTime().toLocalDate();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        return dateOfTask.isEqual(date);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        StringBuilder printStr \u003d new StringBuilder();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        printStr.append(\"Schedule for \" + date + \":\\n\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        for (int i \u003d 0; i \u003c tasks.getTaskCount(); i++) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            if (i \u003d\u003d tasks.getTaskCount() - 1) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                printStr.append((i + 1) + \". \" + tasks.getTask(i));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            printStr.append((i + 1) + \". \" + tasks.getTask(i) + \"\\n\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        return printStr.toString();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "junnbang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "junnbang": 73
    }
  },
  {
    "path": "src/main/java/WriteFile.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import java.io.PrintWriter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "junnbang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "junnbang"
        },
        "content": " * Handles saving of file to specified directory."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "junnbang"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "junnbang"
        },
        "content": "public class WriteFile {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    private String filePath;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * Construct a object to specific the location for saving of file."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * @param filePath Directory of the file"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public WriteFile(String filePath) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public String getPath() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        return this.filePath;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * Saves list of tasks into a text file."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     * @param taskArr List of tasks."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "junnbang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public void writeTaskToFile(ArrayList\u003cTask\u003e taskArr) throws DukeException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            //create a new file or overwrite existing file"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            File file \u003d new File(this.getPath());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            File targetFile \u003d getTargetFile(file);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            FileWriter fw \u003d new FileWriter(targetFile);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            PrintWriter pw \u003d new PrintWriter(fw);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            this.appendTaskToPrintWriter(pw, taskArr);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            pw.close();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        } catch (IOException err) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            System.err.println(err);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    private File getTargetFile(File file) throws DukeException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        if (file.exists()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            return file;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        if (!file.getParentFile().mkdir()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            throw new DukeException(\"Unable to create new directory to save task file.\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            file.createNewFile();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            throw new DukeException(\"Unable to create new file.\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        return file;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    private void appendTaskToPrintWriter(PrintWriter pw, ArrayList\u003cTask\u003e taskArr) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        //loop through the array and append each String to each line"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        for (int x \u003d 0; x \u003c taskArr.size(); x++) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            Task task \u003d taskArr.get(x);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            String typeOfTask \u003d String.valueOf(task.toString().charAt(1));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            String status \u003d task.isDone() ? \"1\" : \"0\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            String desc \u003d task.getDescription();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            pw.printf(typeOfTask + \" | \" + status + \" | \" + desc);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            //check if there is date exist"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            if (task instanceof Deadline) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                Deadline deadlineTask \u003d (Deadline) task;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                String taskDate \u003d deadlineTask.getDate();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                pw.printf(\" | \" + taskDate);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            } else if (task instanceof Event) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                Event eventTask \u003d (Event) task;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                String taskDate \u003d eventTask.getDate();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                pw.printf(\" | \" + taskDate);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            pw.printf(\"%n\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "junnbang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "junnbang": 87
    }
  },
  {
    "path": "src/main/resources/view/DialogBox.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junnbang"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "junnbang"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "junnbang"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "junnbang"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "junnbang"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "junnbang"
        },
        "content": "\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    \u003cpadding\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    \u003c/padding\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "junnbang"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "junnbang": 16
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junnbang"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "junnbang"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "junnbang"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "junnbang"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "junnbang"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "junnbang"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "junnbang"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"550.0\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"MainWindow\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.6\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"42.0\" prefWidth\u003d\"470.0\" AnchorPane.bottomAnchor\u003d\"-1.0\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"470.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"42.0\" prefWidth\u003d\"80.0\" text\u003d\"Send\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"558.0\" prefWidth\u003d\"550.0\" vvalue\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            \u003ccontent\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "junnbang"
        },
        "content": "                \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"534.0\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            \u003c/content\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "junnbang"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "junnbang": 19
    }
  },
  {
    "path": "src/test/java/AddCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "junnbang"
        },
        "content": "public class AddCommandTest {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public void check_getDesc() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        AddCommand c \u003d new AddCommand(\"todo\", \"Project\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        assertEquals(\"Project\", c.getDesc());"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public void check_getDateTime() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        AddCommand c \u003d new AddCommand(\"event\", \"Workshop\", \"23/3/2019 1200\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        assertEquals(\"23/3/2019 1200\", c.getDateTime());"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public void check_isExit() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        AddCommand c \u003d new AddCommand(\"deadline\", \"Submit Quiz\", \"23/3/2019 1200\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        assertEquals(false, c.isExit());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "junnbang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "junnbang": 23
    }
  },
  {
    "path": "src/test/java/ParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "junnbang"
        },
        "content": "public class ParserTest {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public void write_wrongCommand() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            String input \u003d \"todoo Do Project\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            Command c \u003d Parser.parse(input);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            assertEquals(\"OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\", e.getMessage());"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public void write_wrongFields() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            String input \u003d \"deadline do project\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            Command c \u003d Parser.parse(input);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            assertEquals(\"Incorrect format. Eg. deadline Do Project /by 29/8/2019 1800\", e.getMessage());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            String input \u003d \"event do project /at \";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            Command c \u003d Parser.parse(input);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            assertEquals(\"Incorrect format. Eg. event Talk Show /at 29/8/2019 1800\", e.getMessage());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "junnbang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "junnbang": 31
    }
  },
  {
    "path": "src/test/java/TaskListTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "junnbang"
        },
        "content": "public class TaskListTest {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public void check_addTask() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        TaskList tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        Task newTask \u003d new ToDo(\"wash clothes\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        tasks.addTask(newTask);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        assertEquals(1, tasks.getTaskCount());"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public void check_deleteTask() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        TaskList tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        Task newTask \u003d new ToDo(\"wash clothes\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        tasks.addTask(newTask);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        tasks.deleteTask(0);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        assertEquals(0, tasks.getTaskCount());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public void mark_doneTask() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            TaskList tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            Task newTask \u003d new ToDo(\"wash clothes\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            newTask.markAsDone();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            tasks.addTask(newTask);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            tasks.markTaskDone(0);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "junnbang"
        },
        "content": "            assertEquals(\"The task is already marked done.\", e.getMessage());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "junnbang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "junnbang": 36
    }
  },
  {
    "path": "src/test/java/ToDoTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "junnbang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "junnbang"
        },
        "content": "public class ToDoTest {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public void check_undoneTask_toString() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        Task task1 \u003d new ToDo(\"Do Project\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        assertEquals(\"[T][\\u2718] Do Project\", task1.toString()); // unicode represent cross"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    public void check_doneTask_toString() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        Task task2 \u003d new ToDo(\"Do Project Completed\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        task2.markAsDone();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "junnbang"
        },
        "content": "        assertEquals(\"[T][\\u2713] Do Project Completed\", task2.toString()); // unicode represent tick"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "junnbang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "junnbang": 18
    }
  },
  {
    "path": "text-ui-test/EXPECTED.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junnbang"
        },
        "content": "hello from"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "junnbang"
        },
        "content": " ____        _        "
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "junnbang"
        },
        "content": "|  _ \\ _   _| | _____ "
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "junnbang"
        },
        "content": "| | | | | | | |/ / _ \\"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "junnbang"
        },
        "content": "| |_| | |_| |   \u003c  __/"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "junnbang"
        },
        "content": "|____/ \\__,_|_|\\_\\___|"
      }
    ],
    "authorContributionMap": {
      "junnbang": 6
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junnbang"
        },
        "content": "abc"
      }
    ],
    "authorContributionMap": {
      "junnbang": 1
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junnbang"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "junnbang"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "junnbang"
        },
        "content": "if not exist ..\\bin mkdir ..\\bin"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "junnbang"
        },
        "content": "REM delete output from previous run"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "junnbang"
        },
        "content": "del ACTUAL.TXT"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "junnbang"
        },
        "content": "REM compile the code into the bin folder"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "junnbang"
        },
        "content": "javac  -cp ..\\src -Xlint:none -d ..\\bin ..\\src\\main\\java\\Duke.java"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "junnbang"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "junnbang"
        },
        "content": "    exit /b 1"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "junnbang"
        },
        "content": ")"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "junnbang"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "junnbang"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "junnbang"
        },
        "content": "java -classpath ..\\bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "junnbang"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "junnbang"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "junnbang"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT"
      }
    ],
    "authorContributionMap": {
      "junnbang": 21
    }
  }
]
