[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    id \u0027org.openjfx.javafxplugin\u0027 version \u00270.0.7\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "group \u0027seedu.duke\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "test {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "javafx {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    version \u003d \"11.0.2\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    modules \u003d [ \u0027javafx.controls\u0027, \u0027javafx.fxml\u0027 ]"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    // Change this to your main class."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    mainClassName \u003d \"Main\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    archiveVersion \u003d \"0.1.3\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mrchensheng21": 23,
      "-": 15
    }
  },
  {
    "path": "build/resources/main/view/DialogBox.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "      \u003cLabel fx:id\u003d\"dialog\" alignment\u003d\"CENTER\" text\u003d\"Label\" textAlignment\u003d\"CENTER\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "      \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"122.0\" fitWidth\u003d\"144.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "   \u003cpadding\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "      \u003cInsets bottom\u003d\"15.0\" left\u003d\"15.0\" right\u003d\"15.0\" top\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "   \u003c/padding\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "mrchensheng21": 16
    }
  },
  {
    "path": "build/resources/main/view/MainWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"586.0\" prefWidth\u003d\"461.0\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"MainWindow\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "      \u003cTextField fx:id\u003d\"userInput\" layoutX\u003d\"7.0\" layoutY\u003d\"538.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"44.0\" prefWidth\u003d\"329.0\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "      \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"346.0\" layoutY\u003d\"538.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"44.0\" prefWidth\u003d\"109.0\" text\u003d\"Send\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "      \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" layoutX\u003d\"-4.0\" prefHeight\u003d\"535.0\" prefWidth\u003d\"465.0\" vvalue\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "         \u003ccontent\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "            \u003cVBox fx:id\u003d\"dialogContainer\" alignment\u003d\"TOP_CENTER\" prefHeight\u003d\"537.0\" prefWidth\u003d\"448.0\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "         \u003c/content\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "      \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "      \u003cFlowPane /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "mrchensheng21": 21
    }
  },
  {
    "path": "src/main/java/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": " * Creates a Deadline object which extends from the Task class."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": " * A \u003ccode\u003edescription\u003c/code\u003e is passed into this class to"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": " * instantiate a Deadline task."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    private String[] deadline;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    private String[] datetime;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     * Instantiate a Events object by passing a String of description and time"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     * @param description Description of the deadline task."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     * @param by The date and time of the deadline."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    protected Deadline(String description, String by) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        this.deadline \u003d by.split(\" \", 2);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        this.datetime \u003d deadline[1].split(\" \");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    public String getNumericalDate() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        return this.datetime[0];"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    public String formatString() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        return \"D-\" + super.checkStatus() + \"-\" + super.getDescription().trim() + \"-\" + this.deadline[1];"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "            return \"[D]\" + super.toString() +"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                    \"(by: \" + super.getDate(this.datetime) + \", \" + super.getTime(this.datetime) + \")\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        } catch (ParseException parseError) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "            return parseError.toString();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mrchensheng21": 44
    }
  },
  {
    "path": "src/main/java/DialogBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "import javafx.geometry.Insets;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "import javafx.scene.layout.Background;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "import javafx.scene.layout.BackgroundFill;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "import javafx.scene.layout.CornerRadii;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "import javafx.scene.paint.Color;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "import javafx.scene.shape.Circle;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "import javafx.scene.shape.Rectangle;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "import javafx.scene.text.Font;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": " * An example of a custom control using FXML."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": " * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": " * containing text from the speaker."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    private Rectangle fill;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    private DialogBox(String text, Image img) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        dialog.setFont(new Font(\"dialog\", 12));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        dialog.setTextFill(Color.BLACK);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        dialog.setPadding(new Insets(10));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        displayPicture.setImage(img);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        displayPicture.setClip(new Circle(50, 50, 50));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        Collections.reverse(tmp);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        setAlignment(Pos.CENTER_LEFT);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     * Present the User\u0027s dialog in the dialog box."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     * @param text User\u0027s input"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     * @param img User\u0027s image"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     * @return new DialogBox object."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    public static DialogBox getUserDialog(String text, Image img) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        var db \u003d new DialogBox(text, img);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        db.setAlignment(Pos.CENTER_RIGHT);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     * Present the Duke\u0027s dialog in the dialog box."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     * @param text Duke\u0027s input"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     * @param img Duke\u0027s image"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     * @return new DialogBox object."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    public static DialogBox getDukeDialog(String text, Image img) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        var db \u003d new DialogBox(text, img);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        db.dialog.setMinHeight(Label.USE_PREF_SIZE);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        db.setBackground(new Background("
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                new BackgroundFill(Color.WHITE, CornerRadii.EMPTY,"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                        Insets.EMPTY)));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mrchensheng21": 93
    }
  },
  {
    "path": "src/main/java/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": " * The main class for managing all the java files."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    private Parser parser;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     * Instantiate a Duke object when a directory parameter is passed"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     * into it. Will also instantiate the Ui, Storage and TaskList objects."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     * @param filePath the directory for the designated path to store the tasks."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    protected Duke(String filePath) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        storage \u003d new Storage(filePath);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "            tasks \u003d new TaskList(storage.load());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "            ui.showLoadingError(e);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "            tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     * Initialise the Parser class to interpret User\u0027s command."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    protected void setParser() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        parser \u003d new Parser(tasks, ui);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     * Project the welcome message when User start the application."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     * @return Welcome message."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    protected String getWelcomeMessage() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        return ui.showWelcome();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     * Duke response to User after User\u0027s input."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     * @param input User\u0027s input."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     * @return The response of Duke."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    protected String getResponse(String input) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        return parser.parse(input);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     * Save the task list into the designated .txt file"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    protected void saveList() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        storage.save(parser.retrieveTasks());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mrchensheng21": 55,
      "-": 3
    }
  },
  {
    "path": "src/main/java/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": " * This exception is used when there is an empty file"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": " * in the save .txt file. If there are no tasks in the save file,"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": " * it will print an error message."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    private String errorMessage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     * An DukeException object will be instantiated and will be thrown to"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     * Duke main class."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     * @param errorMessage a String to display the error."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    protected DukeException(String errorMessage) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        this.errorMessage \u003d errorMessage;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        return this.errorMessage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mrchensheng21": 22
    }
  },
  {
    "path": "src/main/java/Events.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": " * Creates a Events object which extends from the Task class."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": " * A \u003ccode\u003edescription\u003c/code\u003e is passed into this class to"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": " * instantiate a Events task."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "public class Events extends Task {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    private String event[];"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    private String[] datetime;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     * Instantiate a Events object by passing a String of description and time"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     * @param description Description of the event task."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     * @param at The date and time of the event."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    protected Events(String description, String at) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        this.event \u003d at.split(\" \", 2);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        this.datetime \u003d event[1].split(\" \");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    public String getNumericalDate() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        return this.datetime[0];"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    public String formatString() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        return \"E-\" + super.checkStatus() + \"-\" + super.getDescription().trim() + \"-\" + this.event[1];"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "            return \"[E]\" + super.toString() +"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                    \"(at: \" + super.getDate(this.datetime) + \", \" + super.getTime(this.datetime) + \")\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        } catch (ParseException parseError) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "            return parseError.toString();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mrchensheng21": 42
    }
  },
  {
    "path": "src/main/java/IllegalCommandException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": " * This exception is used when User enters an invalid command."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "public class IllegalCommandException extends Exception {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    private String errorMessage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     * An IllegalCommandException is instantiated when an error message"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     * parameter is being passed through."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     * @param errorMessage a String to display the error."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    protected IllegalCommandException (String errorMessage) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        this.errorMessage \u003d errorMessage;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        return  \" OOPS!!! \" + this.errorMessage;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mrchensheng21": 20
    }
  },
  {
    "path": "src/main/java/Launcher.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": " * A launcher class to workaround classpath issues."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        Application.launch(Main.class, args);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mrchensheng21": 10
    }
  },
  {
    "path": "src/main/java/Main.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": " * A GUI for Duke using FXML."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "public class Main extends Application {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    private Duke duke \u003d new Duke(\"/Users/kchensheng/Documents/NUS/Y2\" +"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "            \"/Sem1/CS2103/kwan_chen_sheng_duke/data/data.txt\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "            AnchorPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "            Scene scene \u003d new Scene(ap);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().run();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "            duke.setParser();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mrchensheng21": 31
    }
  },
  {
    "path": "src/main/java/MainWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": " * Controller for MainWindow. Provides the layout for the other controls."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "public class MainWindow extends AnchorPane {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    private Duke duke;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        scrollPane.setStyle(\"-fx-background: rgb(80, 80, 80, .9);\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    public void setDuke(Duke d) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        duke \u003d d;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                DialogBox.getDukeDialog(duke.getWelcomeMessage(), dukeImage)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        );"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        if (input.equals(\"bye\")) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "            duke.saveList();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "            Platform.exit();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        String response \u003d duke.getResponse(input);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                DialogBox.getUserDialog(input, userImage),"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                DialogBox.getDukeDialog(response, dukeImage)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        );"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mrchensheng21": 62
    }
  },
  {
    "path": "src/main/java/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": " * This class is created to make sense of the User commands and input."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    private TaskList tasksList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     * Parser class is instantiated by passing TaskList and Ui class parameters."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     * @param tasksList TaskList class."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     * @param ui Ui class."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    protected Parser(TaskList tasksList, Ui ui) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        this.tasksList \u003d tasksList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        this.ui \u003d ui;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     * Making sense of the User\u0027s input, and to throw an IllegalCommandException when User enter an invalid"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     * command."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     * @param command Inputs of the User."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    protected String parse(String command) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "            if (command.contains(\"todo\") || command.contains(\"deadline\") || command.contains(\"event\")) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                this.tasksList.addTask(command);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                return ui.getAddedMessage(this.tasksList.getTaskList());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "            } else if (command.contains(\"delete\")) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                String deletedTask \u003d this.tasksList.deleteTask(command); // retrieve the deleted task."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                 return ui.getDeletedMessage(this.tasksList.getTaskList(), deletedTask);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "            } else if (command.contains(\"done\")) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                String taskDoneStr \u003d this.tasksList.doneTask(command);  // retrieve the task that is done."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                return ui.getDoneMessage(taskDoneStr);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "            } else if (command.contains(\"list\")) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                return ui.showList(this.tasksList.getTaskList());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "            } else if (command.contains(\"find\")) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                ArrayList\u003cTask\u003e foundTask \u003d this.tasksList.findTasks(command);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                return ui.showFoundMessage(foundTask);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "            } else if (command.contains(\"view\")) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                ArrayList\u003cTask\u003e viewTaskOnDay \u003d this.tasksList.viewTasks(command);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                return ui.showViewMessage(viewTaskOnDay);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                return \"I\u0027m sorry, but I don\u0027t know what that means :-(\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "            }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        } catch (IllegalCommandException errorMsg) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "            return errorMsg.toString();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     * To retrieve the taskList."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     * @return The stored taskList."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    protected ArrayList\u003cTask\u003e retrieveTasks() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        return this.tasksList.getTaskList();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mrchensheng21": 60
    }
  },
  {
    "path": "src/main/java/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": " * Store the tasks list into a .txt file after User exits the Duke application."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": " * It also loads up the tasks list from the selected .txt file when User starts up"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": " * the Duke application."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    private String filepath;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    private ArrayList\u003cTask\u003e taskList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     * Load the file contents of the .txt file and to input the saved tasks into"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     * an Arraylist."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     * @param filePath Directory of the .txt file."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     * @param storingList An Arraylist to store the tasks in the .txt save file."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     * @throws FileNotFoundException if there are no .txt file found in the directory"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     * @throws DukeException if the .txt file is an empty file"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    private static void loadFileContents(String filePath, ArrayList\u003cTask\u003e storingList)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "            throws FileNotFoundException, DukeException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        File f \u003d new File(filePath); // create a File for the given file path"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        Scanner s \u003d new Scanner(f); // create a Scanner using the File as the source"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        while (s.hasNextLine()) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "            String currentLine \u003d s.nextLine();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "            processTaskFile(currentLine, storingList);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     * Method from processing the information from each Task to instantiate"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     * each Task object instance."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     * @param currentLine Selected line of task."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     * @param storingList ArrayList to store the task."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    private static void processTaskFile (String currentLine, ArrayList\u003cTask\u003e storingList) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        String[] splitCurrentLine \u003d currentLine.split(\"-\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        if (splitCurrentLine[0].equals(\"D\")) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "            storingList.add(new Deadline(splitCurrentLine[2],"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                    \"by \" + splitCurrentLine[3]));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "            storingList.get(storingList.size()-1).recoverStatus(splitCurrentLine[1]);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        } else if (splitCurrentLine[0].equals(\"E\")) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "            storingList.add(new Events(splitCurrentLine[2],"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                    \"at \" + splitCurrentLine[3]));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "            storingList.get(storingList.size()-1).recoverStatus(splitCurrentLine[1]);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        } else if (splitCurrentLine[0].equals(\"T\"))  {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "            storingList.add(new ToDos(splitCurrentLine[2]));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "            storingList.get(storingList.size()-1).recoverStatus(splitCurrentLine[1]);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     * Save the tasks into the .txt file allocated in the directory."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     * @param filepath Directory for the .txt file."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     * @param taskList ArrayList of tasks that the User inputs."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     * @throws IOException if there is an error of copying the list to the file."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    private static void WriteTextToFile(String filepath, ArrayList\u003cTask\u003e taskList)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "            throws IOException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        FileWriter fileOut \u003d new FileWriter(filepath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        storeTask(fileOut, taskList);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     * Process of storing each tasks into the .txt file"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     * @param fileOut File storing the tasks."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     * @param taskList ArrayList of tasks User inputs."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     * @throws IOException If there is an error closing the file."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    private static void storeTask(FileWriter fileOut, ArrayList\u003cTask\u003e taskList)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "            throws IOException {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        for (int i \u003d 0; i \u003c taskList.size(); i++) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "            writeTask(fileOut, i, taskList);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        fileOut.close();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     * Write the formatted task into the .txt file."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     * @param fileOut File storing the tasks."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     * @param index of the task."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     * @param taskList ArrayList of tasks User inputs."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     * @throws IOException If there is an error writing the file."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    private static void writeTask (FileWriter fileOut,int index, ArrayList\u003cTask\u003e taskList)"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "            throws IOException {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "            if (index \u003d\u003d taskList.size() - 1) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                fileOut.write(taskList.get(index).formatString());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                fileOut.write(taskList.get(index).formatString() + \"\\n\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "            }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     * Instantiate a Storage object."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     * @param filepath the directory for the allocated .txt file."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    protected Storage(String filepath) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        this.filepath \u003d filepath;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        this.taskList \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     * A method to save the tasks that is being keyed in by the User"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     * @param taskList the list of tasks User inputs"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    protected void save(ArrayList\u003cTask\u003e taskList) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "            Storage.WriteTextToFile(this.filepath, taskList);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "            System.err.println(\"Something went wrong!\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     * A method to load the .txt file and to store the tasks into"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     * an ArrayList."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     * @return the Arraylist of tasks."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     * @throws DukeException if there are no tasks found in the .txt file."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    protected ArrayList\u003cTask\u003e load() throws DukeException {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "            Storage.loadFileContents(this.filepath, this.taskList);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "            System.err.println(\"No file found, creating new file\");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "            File file \u003d new File(this.filepath);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        return this.taskList;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mrchensheng21": 135
    }
  },
  {
    "path": "src/main/java/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "import java.text.DateFormat;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "import java.util.IllformedLocaleException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": " * An abstract class to instantiate all the Task objects."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "public abstract class Task {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    protected Boolean taskIsDone;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     * Task object is instantiated when User enters the description of task."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     * @param description Description of tasks."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    protected Task (String description) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        this.taskIsDone \u003d false;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     * For other classes to retrieve the description information."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     * @return Description of task."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    protected String getDescription() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        return this.description;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     * For other classes to retrieve the status of task whether if its"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     * completed or not."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     * @return Status of task."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    protected String getStatusIcon() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        return (taskIsDone ? \"\\u2713\" : \"\\u2718\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     * A method to check the status when saving the tasks into the .txt file."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     * @return Status of task, \"1\" means its done and \"0\" means its yet to be completed."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    protected String checkStatus() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        String statusWhenSavingTask \u003d \"\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        if (taskIsDone \u003d\u003d true) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "            statusWhenSavingTask \u003d \"1\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "            statusWhenSavingTask \u003d \"0\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        return statusWhenSavingTask;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     * A method to revert the numerical status back to the boolean."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     * @param status The number \"1\" or \"0\"."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    protected void recoverStatus(String status) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        if (status.equals(\"1\")) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "            taskIsDone \u003d true;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "            taskIsDone \u003d false;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     * A flag to toggle when a task is done."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    protected void markAsDone() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        taskIsDone \u003d true;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     * Get the date from a numeric format eg. (23/05/2019) and convert it"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     * into words (23rd of May 2019)."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     * @return a String consisting the date in wording format"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    protected String getDate(String[] datetime) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        String[] splitDates \u003d datetime[0].split(\"/\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        String day \u003d splitDates[0];"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        String month \u003d splitDates[1];"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        String year \u003d splitDates[2];"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "            return this.getDay(day) + \" of \" + this.getMonth(month) + \" \" + year;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        } catch (ParseException parseError) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "            return parseError.toString();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     * Get the formatted day."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     * @param day The numerical format of day."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     * @return The formatted word of day."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    private String getDay(String day) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        String editedDay \u003d \"\";"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        if (day.equals(\"1\") || day.equals(\"01\")) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "            editedDay \u003d \"1st\";"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        } else if (day.equals(\"2\") || day.equals(\"02\")) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "            editedDay \u003d \"2nd\";"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        } else if (day.equals(\"3\") || day.equals(\"03\")) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "            editedDay \u003d \"3rd\";"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        } else if (day.equals(\"21\")) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "            editedDay \u003d \"21st\";"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        } else if (day.equals(\"22\")) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "            editedDay \u003d \"22nd\";"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        } else if (day.equals(\"23\")) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "            editedDay \u003d \"23rd\";"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        } else if (day.equals(\"31\")) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "            editedDay \u003d \"31st\";"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        } else if (Integer.valueOf(day) \u003c 31) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "            editedDay \u003d day + \"th\";"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        return editedDay;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     * Get the formatted month."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     * @param month Numerical month."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     * @return Formatted word of month."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    private String getMonth(String month) throws ParseException {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        DateFormat df \u003d new SimpleDateFormat(\"MM\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        DateFormat outputFormat \u003d new SimpleDateFormat(\"MMMM\");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "            Date strToMonth \u003d df.parse(month);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "            String monthFormat \u003d outputFormat.format(strToMonth);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "            return monthFormat;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        } catch (ParseException parseError) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "            return parseError.toString();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     * Get the time format from 24Hr eg.(2300) to a 12Hr HH:MM format"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     * eg.(11.00pm)."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     * @return Time in 12Hr HH:MM format."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    protected String getTime(String[] datetime) throws ParseException {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        DateFormat df \u003d new SimpleDateFormat(\"HHmm\");"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        DateFormat outputFormat \u003d new SimpleDateFormat(\"h:mm a\");"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "            Date strToTime \u003d df.parse(datetime[1]);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "            String timeFormat \u003d outputFormat.format(strToTime);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "            return timeFormat;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        } catch (ParseException parseError) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "            return parseError.toString();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    public abstract String getNumericalDate();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     * Format the String into a save file format."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     * @return Formatted String for the .txt file."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     */"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    public abstract String formatString();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        return \"[\" + this.getStatusIcon() + \"] \" + description;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mrchensheng21": 171
    }
  },
  {
    "path": "src/main/java/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": " * TaskList is a class to process all the commands and adds them into"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": " * the tasklist. It is to split the Strings and allocate them accordingly"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": " * to the different Task classes."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    protected ArrayList\u003cTask\u003e taskList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     * Instantiate the TaskList class by passing an Arraylist as a parameter."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     * @param taskList A list to store all the tasks written by the User."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    protected TaskList(ArrayList\u003cTask\u003e taskList) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        this.taskList \u003d taskList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     * Instantiate the TaskList class when there are no existing tasks in the .txt file."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     * A new Arraylist is created to store the tasks."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    protected TaskList() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        this.taskList \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     * Add tasks to the tasks list"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     * @param command The description of task and date/time(if applicable) from the User"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     * @throws IllegalCommandException If the User inputs a wrong/invalid command."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    protected void addTask(String command) throws IllegalCommandException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        if (!command.contains(\" \")) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "            throw new IllegalCommandException(\"The description of a todo cannot be empty.\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        } else if (command.contains(\"todo\")) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "            String[] splitCommand \u003d command.split(\" \", 2);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "            taskList.add(new ToDos(splitCommand[1]));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        } else if (command.contains(\"event\")) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "            String[] splitCommand \u003d command.split(\" \", 2);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "            String[] splitEvent \u003d (splitCommand[1].split(\"/\", 2));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "            if (validDate(splitEvent[1])) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                taskList.add(new Events(splitEvent[0], splitEvent[1]));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                throw new IllegalCommandException(\"Wrong date! Enter again\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        } else if (command.contains(\"deadline\")) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "            String[] splitCommand \u003d command.split(\" \", 2);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "            String[] splitDeadline \u003d (splitCommand[1].split(\"/\", 2));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "            if (validDateTime(splitDeadline[1])) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                taskList.add(new Events(splitDeadline[0], splitDeadline[1]));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                throw new IllegalCommandException(\"Wrong date! Enter again\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "            }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "            taskList.add(new Deadline(splitDeadline[0], splitDeadline[1]));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     * Check if the date is valid."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     * @param dateTime the date and time input by User."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     * @return true if the date is valid."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    protected boolean validDateTime (String dateTime) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        String[] getDateTime \u003d dateTime.split(\" \");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        String[] getDate \u003d getDateTime[1].split(\"/\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        String day \u003d getDate[0];"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        String month \u003d getDate[1];"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        String time \u003d getDateTime[2];"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        if (Integer.valueOf(day) \u003e 31 || Integer.valueOf(month) \u003e 12 ||"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "            Integer.valueOf(time) \u003e 2359) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     * Check if the date is valid."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     * @param date the date input by User."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     * @return true if the date is valid."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    protected boolean validDate (String date) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        String[] getDate \u003d date.split(\"/\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        String day \u003d getDate[0];"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        String month \u003d getDate[1];"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        if (Integer.valueOf(day) \u003e 31 || Integer.valueOf(month) \u003e 12) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     * Delete the task that the User inputs in number. Eg. (User types \"delete 3\" means to"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     * delete the task 3 from the tasks list)."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     * @param command The command delete and the number of the task User wants to delete"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     * @return the updated tasks list after deletion"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     * @throws IllegalCommandException if User did not enter a number after delete or invalid"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     * command."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    protected String deleteTask(String command) throws IllegalCommandException {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        if (!command.contains(\" \")) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "            throw new IllegalCommandException(\"Give a task to delete.\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        } else  {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "            String[] splitCommand \u003d command.split(\" \");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "            int taskDelete \u003d Integer.valueOf(splitCommand[1]);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "            String deleted \u003d taskList.get(taskDelete - 1).getDescription();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "            taskList.remove(taskDelete-1);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "            return deleted;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     * Set the status of the selected task to be done. Eg. (User inputs \"done 3\" means User"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     * wants to indicate that task 3 in the list is completed)."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     * @param command The command done and the number of the task User set as done."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     * @return Updated tasks list with the selected task being marked done."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     * @throws IllegalCommandException if User did not enter a number after delete or invalid"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     * command."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    protected String doneTask(String command) throws IllegalCommandException {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        if (!command.contains(\" \")) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "            throw new IllegalCommandException(\"There must be a number after done.\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "            String[] splitString \u003d command.split(\" \");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "            int taskDone \u003d Integer.valueOf(splitString[1]);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "            if (taskDone \u003c taskList.size()) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                taskList.get(taskDone - 1).markAsDone();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                return taskList.get(taskDone - 1).getDescription();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                throw new IllegalCommandException(\"Invalid Task !\");"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "            }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     * Other classes can retrieve the tasks list"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     * @return The tasks list."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    protected ArrayList\u003cTask\u003e getTaskList() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        return this.taskList;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    protected ArrayList\u003cTask\u003e findTasks(String command) throws IllegalCommandException {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        if (!command.contains(\" \")) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "            throw new IllegalCommandException(\"There must be an input to find.\");"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "            String[] splitString \u003d command.split(\" \",  2);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "            ArrayList\u003cTask\u003e foundTasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "            for (Task task : this.taskList) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                if (task.toString().contains(splitString[1])) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                    foundTasks.add(task);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "            }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "            return foundTasks;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     * A method to view date and add the tasks to a list when the date matches."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     * @param command the date input by user."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     * @return A list of tasks that matches the date."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     * @throws IllegalCommandException When user did not input a date."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    protected ArrayList\u003cTask\u003e viewTasks(String command) throws  IllegalCommandException {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        if (!command.contains(\" \")) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "            throw new IllegalCommandException(\"There must be a date input\");"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "            String[] splitString \u003d command.split(\" \", 2);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "            if (validDate(splitString[1])) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                ArrayList\u003cTask\u003e viewTasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                for (Task task : this.taskList) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                    processViewTasks(task, viewTasks, splitString[1]);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                return viewTasks;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                throw new IllegalCommandException(\"Invalid date to search!\");"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "            }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     * A method to add task when the task date matches the input date."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     * @param task Selected task."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     * @param viewTasks List of tasks that matches the input date"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     * @param date date input by User."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     */"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    protected static void processViewTasks"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "            (Task task, ArrayList\u003cTask\u003e viewTasks, String date) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        if (task.getNumericalDate().contains(date)) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "            viewTasks.add(task);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mrchensheng21": 197
    }
  },
  {
    "path": "src/main/java/ToDos.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": " * Creates a ToDos object which extends from the Task class."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": " * A \u003ccode\u003edescription\u003c/code\u003e is passed into this class to"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": " * instantiate a todos task."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "public class ToDos extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     * Instantiate a ToDos object by passing a String of description"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     * @param description Description of the todos task."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    protected ToDos (String description) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    public String getNumericalDate() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        return \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    public String formatString() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        return \"T-\" + super.checkStatus().trim() + \"-\" + super.getDescription();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mrchensheng21": 30
    }
  },
  {
    "path": "src/main/java/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": " * This class is responsible of taking in User inputs and to display information"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": " * after the User\u0027s command."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    private Scanner scanner;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     * Instantiate a Ui object."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    protected Ui() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        scanner \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     * Display a welcome message for the User."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    protected String showWelcome() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        String logo \u003d \"  ____        _        \\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                + \" |  _ \\\\ _   _| | _____ \\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                + \" | | | | | | | |/ / _ \\\\\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                + \" | |_| | |_| |   \u003c  __/\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                + \" |____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        String welcome \u003d logo"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                + \"\\n Hello! I\u0027m Duke\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                + \" What can I do for you?\\n\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        return welcome;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     * Prompt the user to enter command."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     * @return the Users command."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    protected String enterCommand() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        return scanner.nextLine();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     * Display the list of tasks to the User."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     * @param taskList The tasks list."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     * @return the tasks list."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    protected String showList(ArrayList\u003cTask\u003e taskList) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        String showList \u003d \"\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        for (int x \u003d 0; x \u003c taskList.size(); x++) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "            showList \u003d showList + (x + 1) + \". \" + taskList.get(x) + \"\\n\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        return showList;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     * Display the error when there is an empty .txt file."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     * @param e Loading error when no task is found."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    protected String showLoadingError(DukeException e) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        return e.toString();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     * Display message when a task is added."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     * @param taskList The tasks list."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     * @return the UI message shown to the User."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    protected String getAddedMessage(ArrayList\u003cTask\u003e taskList) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        String addedMessage \u003d \" Got it. I\u0027ve added this task:\\n\""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                + \"   \" + taskList.get(taskList.size()-1)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                + \"\\n Now you have \" + taskList.size() + \" tasks in the list.\";"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        return addedMessage;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     * Display message when a task is deleted."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     * @param taskList The tasks list."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     * @param deleted The task deleted."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     * @return the UI message shown to the User."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    protected String getDeletedMessage(ArrayList\u003cTask\u003e taskList, String deleted) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        String deletedMessage \u003d \" Got it. I\u0027ve added this task:\\n\""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                + \"   \" + deleted"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                + \"\\n Now you have \" + taskList.size() + \" tasks in the list.\";"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        return deletedMessage;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     * Display message and also the change in status icon to show the task is done."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     * @param taskDoneStr String of the task done."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    protected String getDoneMessage(String taskDoneStr) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        String doneMessage \u003d \" Nice! I\u0027ve marked this tasked as done:\\n\""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                + taskDoneStr;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        return doneMessage;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     * Find the task that the User inputs."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     * @param foundTasklist"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     * @return List of tasks found."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    protected String showFoundMessage(ArrayList\u003cTask\u003e foundTasklist) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        String foundMessage \u003d \"\";"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        for (int x \u003d 0; x \u003c foundTasklist.size(); x++) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "            foundMessage \u003d foundMessage + 1 + \". \" + foundTasklist.get(x) + \"\\n\";"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        return foundMessage;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    protected String showViewMessage(ArrayList\u003cTask\u003e viewTasklist) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        String viewMessage \u003d \"\";"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        for (int x \u003d 0; x \u003c viewTasklist.size(); x++) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "            viewMessage \u003d viewMessage+ 1 + \". \" + viewTasklist.get(x) + \"\\n\";"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        if (viewMessage.equals(\"\")) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "            viewMessage \u003d \"No task found\";"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        return viewMessage;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mrchensheng21": 130
    }
  },
  {
    "path": "src/main/resources/view/DialogBox.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "      \u003cLabel fx:id\u003d\"dialog\" alignment\u003d\"CENTER\" text\u003d\"Label\" textAlignment\u003d\"CENTER\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "      \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"122.0\" fitWidth\u003d\"144.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "   \u003cpadding\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "      \u003cInsets bottom\u003d\"15.0\" left\u003d\"15.0\" right\u003d\"15.0\" top\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "   \u003c/padding\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "mrchensheng21": 16
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"586.0\" prefWidth\u003d\"461.0\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"MainWindow\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "      \u003cTextField fx:id\u003d\"userInput\" layoutX\u003d\"7.0\" layoutY\u003d\"538.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"44.0\" prefWidth\u003d\"329.0\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "      \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"346.0\" layoutY\u003d\"538.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"44.0\" prefWidth\u003d\"109.0\" text\u003d\"Send\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "      \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" layoutX\u003d\"-4.0\" prefHeight\u003d\"535.0\" prefWidth\u003d\"465.0\" vvalue\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "         \u003ccontent\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "            \u003cVBox fx:id\u003d\"dialogContainer\" alignment\u003d\"TOP_CENTER\" prefHeight\u003d\"537.0\" prefWidth\u003d\"448.0\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "         \u003c/content\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "      \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "      \u003cFlowPane /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "mrchensheng21": 21
    }
  },
  {
    "path": "src/test/java/EventsTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "public class EventsTest {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    public void EventTestOutput(){"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        assertEquals(\"[E][\\u2718] CS2103 project meet(at: 23rd of April 2019, 3:00 pm)\","
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                new Events(\"CS2103 project meet\", \"at 23/04/2019 1500\").toString());"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mrchensheng21": 11
    }
  },
  {
    "path": "src/test/java/ToDosTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "public class ToDosTest {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    public void ToDosTestFormatstringOutput() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "        assertEquals(\"T-0-submit 2103 assignment\","
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "                new ToDos(\"submit 2103 assignment\").formatString());"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mrchensheng21": 12
    }
  },
  {
    "path": "text-ui-test/EXPECTED.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "____________________________________________________________"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "  ____        _        "
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": " |  _ \\ _   _| | _____ "
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": " | | | | | | | |/ / _ \\"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": " | |_| | |_| |   \u003c  __/"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": " |____/ \\__,_|_|\\_\\___|"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": " Hello! I\u0027m Duke"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": " What can I do for you?"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "____________________________________________________________"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "____________________________________________________________"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": " Got it. I\u0027ve added this task:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "   [D][✘] return book (by: Sunday)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": " Now you have 1 tasks in the list."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "____________________________________________________________"
      }
    ],
    "authorContributionMap": {
      "mrchensheng21": 15
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "deadline return book /by Sunday"
      }
    ],
    "authorContributionMap": {
      "mrchensheng21": 1
    }
  },
  {
    "path": "text-ui-test/runtest.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "#!/usr/bin/env bash"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "# create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "if [ ! -d \"../bin\" ]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "then"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    mkdir ../bin"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "fi"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "# delete output from previous run"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "if [ -e \"./ACTUAL.TXT\" ]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "then"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    rm ACTUAL.TXT"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "fi"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "# compile the code into the bin folder, terminates if error occurred"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "if ! javac -cp ../src/main/java -Xlint:none -d ../bin ../src/main/java/Duke.java"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "then"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    echo \"********** BUILD FAILURE **********\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "fi"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "java -classpath ../src/main/java Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "# compare the output to the expected output"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "diff ACTUAL.TXT EXPECTED.TXT"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "if [ $? -eq 0 ]"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "then"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    echo \"Test result: PASSED\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    exit 0"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "else"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    echo \"Test result: FAILED\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mrchensheng21"
        },
        "content": "fi"
      }
    ],
    "authorContributionMap": {
      "mrchensheng21": 34
    }
  }
]
