[
  {
    "path": "duke.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "T | 0 | eat lunch"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "D | 0 | project | tomorrow"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "E | 0 | hackathon | orchard central"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "E | 0 | school trip | sentosa"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "D | 0 | work | tomorrow"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "E | 1 | tomorrowland | korea"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "T | 1 | workout crossfit"
      }
    ],
    "authorContributionMap": {
      "limxuanhui": 7
    }
  },
  {
    "path": "src/main/java/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    private char taskType \u003d \u0027D\u0027;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    protected String by;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    public Deadline(String description, String by) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "        this.by \u003d by;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    public Deadline(String status, String description, String by) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "        this.setStatus(status);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "        this.by \u003d by;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "        return String.format(\"[D][%s] \" + super.toString() + \" (by: \" + by + \")\", super.getStatusIcon());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    public char getTaskType() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "        return taskType;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    public String getDate() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "        return by;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limxuanhui": 31
    }
  },
  {
    "path": "src/main/java/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "import java.io.*;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    public static void main(String[] args) throws DukeException,IOException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "        String logo \u003d \" ____        _        \\n\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"|  _ \\\\ _   _| | _____ \\n\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"| | | | | | | |/ / _ \\\\\\n\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"| |_| | |_| |   \u003c  __/\\n\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(\"Hello from\\n\" + logo);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "        System.out.println(\"Hello! I\u0027m Duke\" + \"\\n\" + \"What can I do for you?\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "        Scanner scanner \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "        BufferedReader reader \u003d new BufferedReader(new FileReader(\"duke.txt\"));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "        ArrayList\u003cTask\u003e tasks \u003d readDataFromFile(reader);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "        while(true) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "                String line \u003d scanner.nextLine().toLowerCase();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "                ///////////////// BYE //////////////////////////////"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "                if (line.length() \u003e\u003d 3 \u0026\u0026 line.substring(0, 3).equals(\"bye\")) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "                    System.out.println(\"Bye. Hope to see you again soon!\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "                    ///////////////// LIST /////////////////////////////////"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "                } else if (line.length() \u003e\u003d 4 \u0026\u0026 line.substring(0, 4).equals(\"list\")) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "                    System.out.println(\"Here are the tasks in your list:\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "                    for (int i \u003d 1; i \u003c tasks.size() + 1; i++) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "                        Task currentTask \u003d tasks.get(i - 1);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "                        System.out.println(String.format(i + \".\" + currentTask.toString(), currentTask.getStatusIcon()));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "                    ///////////////// DELETE //////////////////////////////"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "                } else if (line.length() \u003e\u003d 6 \u0026\u0026 line.substring(0, 6).equals(\"delete\")) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "                    int taskIndex \u003d Integer.parseInt(line.replaceAll(\"\\\\D+\",\"\")) - 1;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "                    Task currentTask \u003d tasks.get(taskIndex);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "                    System.out.println(\"Noted. I\u0027ve removed this task:\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "                    System.out.println(currentTask.toString());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "                    tasks.remove(taskIndex);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "                    System.out.println(String.format(\"Now you have %d tasks in the list.\", tasks.size()));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "                    //////////////// DONE ///////////////////////////////////"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "                } else if (line.length() \u003e\u003d 4 \u0026\u0026 line.substring(0, 4).equals(\"done\")) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "                    int taskIndex \u003d Integer.parseInt(line.replaceAll(\"\\\\D+\",\"\")) - 1;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "                    Task currentTask \u003d tasks.get(taskIndex);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "                    currentTask.setIsDone(); // set current task to done (opposite of current state of isDone)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "                    System.out.println(currentTask.getStatusIcon());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "                    System.out.println(\"Nice! I\u0027ve marked this task as done:\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "                    System.out.println(String.format(currentTask.toString(), currentTask.getStatusIcon()));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "                    Task newTask \u003d null;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "                    if (line.length() \u003e\u003d 4 \u0026\u0026 line.substring(0, 4).equals(\"todo\")) { // task is a todo"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "                        String newLine \u003d line.substring(5);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "                        // if description is empty, throw exception"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "                        if (newLine.length() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "                            throw new DukeException(\"☹ OOPS!!! The description of a todo cannot be empty.\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "                        } else {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "                            newTask \u003d new ToDo(newLine);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "                            informUserOfUpdate(tasks, newTask);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "                    } else if (line.length() \u003e\u003d 8 \u0026\u0026 line.substring(0, 8).equals(\"deadline\")) { // task is a deadline"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "                        int index \u003d line.indexOf(\"/by \"); // index of end of \u0027\\by \u0027, which is \u0027 \u0027"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "                        // if no \u0027/by\u0027 or no description or no deadline date, throw exception"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "                        if (index \u003d\u003d -1 || line.substring(9, index).length() \u003d\u003d 0 || line.substring(index + 3).length() \u003d\u003d 0 ) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "                            throw new DukeException(\"☹ OOPS!!! Please specify a [description of deadline] /by [date of deadline].\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "                        } else {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "                            String description \u003d line.substring(9, index - 1); // from word after \u0027deadline\u0027 to \u0027 \u0027 before \u0027/by\u0027"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "                            String by \u003d line.substring(index + 4, line.length()); // from \u0027 \u0027 after \u0027\\by\u0027 to end of input"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "                            newTask \u003d new Deadline(description, by);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "                            informUserOfUpdate(tasks, newTask);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "                    } else if (line.length() \u003e\u003d 5 \u0026\u0026 line.substring(0, 5).equals(\"event\")){ // task is an event"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "                        int index \u003d line.indexOf(\"/at \");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "                        if (index \u003d\u003d -1 || line.substring(6, index).length() \u003d\u003d 0 || line.substring(index + 3).length() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "                            throw new DukeException(\"☹ OOPS!!! Please specify a [description of event] /at [date of event]\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "                        } else {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "                            String description \u003d line.substring(6, index - 1); // from word after \u0027event\u0027 to \u0027 \u0027 before \u0027/at\u0027"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "                            String at \u003d line.substring(index + 4, line.length()); // from \u0027 \u0027 after \u0027\\at\u0027 to end of input"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "                            newTask \u003d new Event(description, at);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "                            informUserOfUpdate(tasks, newTask);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "                        // invalid input"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "                        throw new DukeException(\"☹ OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "                }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "            } catch (DukeException e) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "                System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "            }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "        writeDataToFile(tasks);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "        scanner.close();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    "
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    public static void informUserOfUpdate(ArrayList\u003cTask\u003e tasks, Task newTask) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "        tasks.add(newTask);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "        System.out.println(\"Got it. I\u0027ve added this task:\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "        System.out.println(newTask.toString());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "        System.out.println(String.format(\"Now you have %d tasks in the list.\", tasks.size()));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    public static void writeDataToFile(ArrayList\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "            BufferedWriter writer \u003d new BufferedWriter(new FileWriter(\"duke.txt\"));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "            for (Task task : tasks) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "                char type \u003d task.getTaskType();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "                String status \u003d (task.getStatusIcon().equals(\"\\u2713\")) ? \"1\" : \"0\";"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "                String description \u003d task.getDescription();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "                String date \u003d (type \u003d\u003d \u0027T\u0027) ? \"\" : \" | \" + task.getDate();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "                writer.write(type + \" | \" + status + \" | \" + description + date);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "                writer.newLine();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "            }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "            writer.close();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "        } catch (IOException e){"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    public static ArrayList\u003cTask\u003e readDataFromFile(BufferedReader reader) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "        ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "            String line;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "            while ((line \u003d reader.readLine()) !\u003d null) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "                String[] readData \u003d line.split(\" \\\\| \");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "                Task newTask \u003d null;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "                if (readData[0].equals(\"T\")) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "                    newTask \u003d new ToDo(readData[1], readData[2]);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "                } else if (readData[0].equals(\"D\")) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "                    newTask \u003d new Deadline(readData[1], readData[2], readData[3]);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "                } else if (readData[0].equals(\"E\")) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "                    newTask \u003d new Event(readData[1], readData[2], readData[3]);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "                }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "                if (newTask !\u003d null) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "                    tasks.add(newTask);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "                }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "            }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "            reader.close();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "        return tasks;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limxuanhui": 136,
      "-": 9
    }
  },
  {
    "path": "src/main/java/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    public DukeException(String message) {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limxuanhui": 5
    }
  },
  {
    "path": "src/main/java/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    private char taskType \u003d \u0027E\u0027;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    protected String at;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    public Event(String description, String at) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "        this.at \u003d at;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    public Event(String status, String description, String at) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "        this.setStatus(status);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "        this.at \u003d at;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "        return String.format(\"[E][%s] \" + super.toString() + \" (at: \" + at + \")\", super.getStatusIcon());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    public char getTaskType() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "        return taskType;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    public String getDate() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "        return at;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limxuanhui": 31
    }
  },
  {
    "path": "src/main/java/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "        return (isDone ? \"\\u2713\" : \"\\u2718\"); //return tick or X symbols"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    public void setStatus(String status) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "        this.isDone \u003d (status.equals(\"1\")) ? true : false;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    public void setIsDone() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    public char getTaskType() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "        return \u0027n\u0027;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    public String getDate() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "        return \"\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limxuanhui": 37
    }
  },
  {
    "path": "src/main/java/ToDo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "public class ToDo extends Task {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    private char taskType \u003d \u0027T\u0027;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    public ToDo(String description) {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    public ToDo(String status, String description) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "        this.setStatus(status);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "        return String.format(\"[T][%s] \" + super.toString(), super.getStatusIcon());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    public char getTaskType() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "        return taskType;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limxuanhui": 23
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "todo 1"
      }
    ],
    "authorContributionMap": {
      "limxuanhui": 1
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "if not exist ..\\bin mkdir ..\\bin"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "REM delete output from previous run"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "del ACTUAL.TXT"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "REM compile the code into the bin folder"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "javac  -cp ..\\src -Xlint:none -d ..\\bin ..\\src\\main\\java\\Duke.java"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "    exit /b 1"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": ")"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "java -classpath ..\\bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limxuanhui"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT"
      }
    ],
    "authorContributionMap": {
      "limxuanhui": 21
    }
  }
]
