[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    id \u0027org.openjfx.javafxplugin\u0027 version \u00270.0.7\u0027"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "crazoter"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "crazoter"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "crazoter"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    archiveVersion \u003d \"0.1.3\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "crazoter"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "crazoter"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "crazoter"
        },
        "content": "}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "crazoter"
        },
        "content": "test {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "crazoter"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "crazoter"
        },
        "content": "group \u0027duke\u0027"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "crazoter"
        },
        "content": "javafx {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    version \u003d \"11.0.2\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    modules \u003d [ \u0027javafx.controls\u0027, \u0027javafx.fxml\u0027 ]"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "crazoter"
        },
        "content": "}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    mainClassName \u003d \"duke.Duke\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "crazoter": 29,
      "-": 13
    }
  },
  {
    "path": "gradlew.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "crazoter"
        },
        "content": "@rem Copyright 2015 the original author or authors."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "crazoter"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "crazoter"
        },
        "content": "@rem Licensed under the Apache License, Version 2.0 (the \"License\");"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "crazoter"
        },
        "content": "@rem you may not use this file except in compliance with the License."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "crazoter"
        },
        "content": "@rem You may obtain a copy of the License at"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "crazoter"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "crazoter"
        },
        "content": "@rem      https://www.apache.org/licenses/LICENSE-2.0"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "crazoter"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "crazoter"
        },
        "content": "@rem Unless required by applicable law or agreed to in writing, software"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "crazoter"
        },
        "content": "@rem distributed under the License is distributed on an \"AS IS\" BASIS,"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "crazoter"
        },
        "content": "@rem WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "crazoter"
        },
        "content": "@rem See the License for the specific language governing permissions and"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "crazoter"
        },
        "content": "@rem limitations under the License."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "crazoter"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "@if \"%DEBUG%\" \u003d\u003d \"\" @echo off"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "@rem ##########################################################################"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "@rem  Gradle startup script for Windows"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "@rem ##########################################################################"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Set local scope for the variables with windows NT shell"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%OS%\"\u003d\u003d\"Windows_NT\" setlocal"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "set DIRNAME\u003d%~dp0"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%DIRNAME%\" \u003d\u003d \"\" set DIRNAME\u003d."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "set APP_BASE_NAME\u003d%~n0"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "set APP_HOME\u003d%DIRNAME%"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "crazoter"
        },
        "content": "set DEFAULT_JVM_OPTS\u003d\"-Xmx64m\" \"-Xms64m\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Find java.exe"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "if defined JAVA_HOME goto findJavaFromJavaHome"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "set JAVA_EXE\u003djava.exe"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "%JAVA_EXE% -version \u003eNUL 2\u003e\u00261"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%ERRORLEVEL%\" \u003d\u003d \"0\" goto init"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "echo."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "echo ERROR: JAVA_HOME is not set and no \u0027java\u0027 command could be found in your PATH."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "echo."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "echo Please set the JAVA_HOME variable in your environment to match the"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "echo location of your Java installation."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "goto fail"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ":findJavaFromJavaHome"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "set JAVA_HOME\u003d%JAVA_HOME:\"\u003d%"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "set JAVA_EXE\u003d%JAVA_HOME%/bin/java.exe"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "if exist \"%JAVA_EXE%\" goto init"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "echo."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "echo."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "echo Please set the JAVA_HOME variable in your environment to match the"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "echo location of your Java installation."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "goto fail"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ":init"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Get command-line arguments, handling Windows variants"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "if not \"%OS%\" \u003d\u003d \"Windows_NT\" goto win9xME_args"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ":win9xME_args"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Slurp the command line arguments."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "set CMD_LINE_ARGS\u003d"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "set _SKIP\u003d2"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ":win9xME_args_slurp"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "if \"x%~1\" \u003d\u003d \"x\" goto execute"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "set CMD_LINE_ARGS\u003d%*"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ":execute"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Setup the command line"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "set CLASSPATH\u003d%APP_HOME%\\gradle\\wrapper\\gradle-wrapper.jar"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Execute Gradle"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "\"%JAVA_EXE%\" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% \"-Dorg.gradle.appname\u003d%APP_BASE_NAME%\" -classpath \"%CLASSPATH%\" org.gradle.wrapper.GradleWrapperMain %CMD_LINE_ARGS%"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ":end"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "@rem End local scope for the variables with windows NT shell"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%ERRORLEVEL%\"\u003d\u003d\"0\" goto mainEnd"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ":fail"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "rem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "rem the _cmd.exe /c_ return code!"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "if  not \"\" \u003d\u003d \"%GRADLE_EXIT_CONSOLE%\" exit 1"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "exit /b 1"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ":mainEnd"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%OS%\"\u003d\u003d\"Windows_NT\" endlocal"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ":omega"
      }
    ],
    "authorContributionMap": {
      "crazoter": 17,
      "-": 83
    }
  },
  {
    "path": "save.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "todo|todo lmao|true"
      }
    ],
    "authorContributionMap": {
      "crazoter": 1
    }
  },
  {
    "path": "src/main/java/duke/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import java.util.InvalidPropertiesFormatException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "crazoter"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    static final String WORKING_DIRECTORY \u003d System.getProperty(\"user.dir\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    static final String SAVE_FILE_NAME \u003d \"save.txt\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    static final String ABSOLUTE_PATH_TO_SAVE_FILE \u003d WORKING_DIRECTORY + File.separator + SAVE_FILE_NAME;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        new Duke(ABSOLUTE_PATH_TO_SAVE_FILE).run();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    private Storage storage \u003d null;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    private TaskList taskList \u003d null;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    private Ui ui \u003d null;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    private Parser parser \u003d null;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    private boolean isRunning \u003d true;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Creates an instance of Duke which runs the program. Uses the default path to save file."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Required for Launcher.java to work."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public Duke() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        this(ABSOLUTE_PATH_TO_SAVE_FILE);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Creates an instance of Duke which runs the program."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * @param saveFilePath Save file path to be used for saving / loading tasks"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public Duke(String saveFilePath) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        storage \u003d new Storage(saveFilePath);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            taskList \u003d storage.loadTaskListFromSaveFile(ui);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            ui.storageFileNotFoundError();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        } catch (InvalidPropertiesFormatException e) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            ui.storageInvalidLineError();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            ui.storageIoExceptionError();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            ui.printError(e);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        } finally {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            if (taskList \u003d\u003d null) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        parser \u003d new Parser();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Run the Duke instance."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        ui.setEnabled(true);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        ui.printGreeting();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        while (isRunning()) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                String line \u003d ui.readLine();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                Command cmd \u003d parser.parse(line);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                cmd.execute(this, taskList, ui, storage);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            } catch (DukeException e) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                ui.printError(e);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Initialize duke and return initial greeting (for GUI implementation)."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * @return greeting"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public String init() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        ui.setEnabled(true);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        ui.printGreeting();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        return ui.flushBuffer();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public boolean isRunning() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        return isRunning;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public void setRunning(boolean running) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        isRunning \u003d running;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public Ui getUi() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        return ui;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Function to generate response to user input."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public String getResponse(String input) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            Command cmd \u003d parser.parse(input);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            cmd.execute(this, taskList, ui, storage);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            ui.printError(e);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        return ui.flushBuffer();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "crazoter"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "crazoter": 109
    }
  },
  {
    "path": "src/main/java/duke/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "crazoter"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public DukeException(String message) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "crazoter"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "crazoter": 7
    }
  },
  {
    "path": "src/main/java/duke/Launcher.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import duke.gui.Main;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "crazoter"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "crazoter"
        },
        "content": " * A launcher class to workaround classpath issues."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "crazoter"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "crazoter"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        Application.launch(Main.class, args);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "crazoter"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "crazoter": 13
    }
  },
  {
    "path": "src/main/java/duke/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import duke.command.AddDeadlineCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import duke.command.AddEventCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import duke.command.AddTodoCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import duke.command.ClearCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import duke.command.DeleteCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import duke.command.DoneCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import duke.command.ExitCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import duke.command.FindCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import duke.command.HelpCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import duke.command.ListCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "crazoter"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Parses the line from a scanner, returns a Command based on the line."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * @param line line from scanner (see ui.readLine())"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * @return Command subclass based on line"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * @throws DukeException generic exception that contains error message"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public Command parse(String line) throws DukeException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        switch (line) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        case \"help\":"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        case \"clear\":"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            return new ClearCommand();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        case \"exit\":"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        case \"bye\"://exit"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        case \"list\"://list"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            if (line.indexOf(\"done \") \u003d\u003d 0) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                //Set task to done"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                return new DoneCommand(line);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            } else if (line.indexOf(\"delete \") \u003d\u003d 0) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                return new DeleteCommand(line);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            } else if (line.indexOf(\"todo \") \u003d\u003d 0) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                return new AddTodoCommand(line);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            } else if (line.indexOf(\"event \") \u003d\u003d 0) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                return new AddEventCommand(line);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            } else if (line.indexOf(\"deadline \") \u003d\u003d 0) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                return new AddDeadlineCommand(line);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            } else if (line.indexOf(\"find \") \u003d\u003d 0) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                return new FindCommand(line);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                throw new DukeException(\"I\u0027m sorry, but I don\u0027t know what that means :-(\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "crazoter"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "crazoter": 52
    }
  },
  {
    "path": "src/main/java/duke/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import duke.task.TaskWithDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import java.io.FileReader;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import java.io.PrintWriter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "crazoter"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    static final int NUMBER_OF_SAVE_PARAMS_TASK \u003d 3;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    protected String path;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public Storage(String path) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        this.path \u003d path;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Load from save file (txt file in hard disk) (path currently hardcoded)."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * @param ui ui object"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * @return list of tasks"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * @throws IOException IO exception"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * @throws DukeException generic exception with error message"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public TaskList loadTaskListFromSaveFile(Ui ui) throws IOException, DukeException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        TaskList results \u003d new TaskList();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        // read the content from file"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        BufferedReader bufferedReader \u003d new BufferedReader("
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                new FileReader(path));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        String line \u003d bufferedReader.readLine();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        while (line !\u003d null) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            //Process"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            processLineFromSaveFile(results, ui, line);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            line \u003d bufferedReader.readLine();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        //Return this by default"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        return results;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Process line(s) obtained from loadFromSaveFile."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * @param taskList List of tasks"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * @param ui  ui object"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * @param line String, a line from the save text file"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * @throws DukeException generic exception with error message"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public void processLineFromSaveFile(TaskList taskList, Ui ui, String line) throws DukeException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        String[] data \u003d line.split(\"\\\\|\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        if (data.length \u003d\u003d NUMBER_OF_SAVE_PARAMS_TASK) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            taskList.insertByCommand(ui, data[0], data[1]);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            taskList.get(taskList.size() - 1).markAsDone(data[2].equals(\"true\"));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            throw new DukeException(\"Error in parsing line from save file\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Save task list to txt file in hard disk (path currently hardcoded)."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * @param taskList List of tasks"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * @throws DukeException generic exception with error message"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public void saveTaskListToFile(TaskList taskList) throws DukeException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        PrintWriter writer \u003d null;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            writer \u003d new PrintWriter(path, \"UTF-8\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            for (Task task : taskList) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                String taskCommand \u003d task.getTaskName().toLowerCase();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                sb.append(taskCommand)"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                        .append(\"|\")"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                        .append(taskCommand)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                        .append(\" \")"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                        .append(task.getDescription());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                if (task instanceof Event) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                    sb.append(\" /at \")"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                            .append(((TaskWithDate) task).getParseableDateToString());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                } else if (task instanceof Deadline) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                    sb.append(\" /by \")"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                            .append(((TaskWithDate) task).getParseableDateToString());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                sb.append(\"|\")"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                        .append(task.isDone());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                writer.println(sb);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            throw new DukeException(\"An exception occurred when saving to file.\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        } finally {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            if (writer !\u003d null) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                writer.close();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "crazoter"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "crazoter": 97
    }
  },
  {
    "path": "src/main/java/duke/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import duke.task.TaskWithDate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import duke.task.Todo;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "crazoter"
        },
        "content": "public class TaskList extends ArrayList\u003cTask\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Old implementation without the use of Commands."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Currently in use by Storage to import tasks from text file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * @param ui ui object"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * @param taskName name of task e.g. todo, event"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * @param line line (e.g. event dancing /at date)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * @throws DukeException generic exception with error message"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public void insertByCommand(Ui ui, String taskName, String line) throws DukeException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        String data \u003d line.replaceFirst(\"^.*?\\\\s\",\"\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        //If no change, then it\u0027s either empty, or invalid command"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        if (line.equals(data)) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            if (line.equals(\"todo\") || line.equals(\"event\") || line.equals(\"deadline\")) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                data \u003d \"\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                throw new DukeException(\"I\u0027m sorry, but I don\u0027t know what that means :-(\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        String[] splitData;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            switch (taskName) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            case \"todo\":"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                if (Task.validateData(data, \"todo\")) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                    insertNewTask(ui, new Todo(data));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            case \"event\":"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                splitData \u003d TaskWithDate.extractDataFromLine(data, \" /at \");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                if (TaskWithDate.validateData(splitData, \"event\")) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                    insertNewTask(ui, new Event(splitData[0], splitData[1]));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            case \"deadline\":"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                splitData \u003d TaskWithDate.extractDataFromLine(data, \" /by \");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                if (TaskWithDate.validateData(splitData, \"deadline\")) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                    insertNewTask(ui, new Deadline(splitData[0], splitData[1]));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                throw new DukeException(\"Invalid command.\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            throw new DukeException(\"Failed to add task because date is not in the right format \""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                    + \"(should be in dd/MM/yyyy HHmm)\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Insert a new task into the task list."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * @param ui ui object"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * @param taskToInsert task to insert"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * @throws DukeException generic exception with error message"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public void insertNewTask(Ui ui, Task taskToInsert) throws DukeException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        if (taskToInsert !\u003d null) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            this.add(taskToInsert);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            ui.println(\"Got it. I\u0027ve added this task: \");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            ui.println(\"  \" + taskToInsert.toString());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            ui.println(\"Now you have \" + this.size() + \" tasks in the list.\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            throw new DukeException(\"Task to insert is undefined\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "crazoter"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "crazoter": 79
    }
  },
  {
    "path": "src/main/java/duke/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "crazoter"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    private boolean isEnabled;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    private boolean errorLogsEnabled;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    private Scanner scanner;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    private StringBuilder outputBuffer \u003d new StringBuilder();"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Creates a Ui object that controls I/O for user."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public Ui() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        isEnabled \u003d false;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        errorLogsEnabled \u003d true;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        scanner \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Read line using private scanner."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * @return line input by user"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public String readLine() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        return scanner.nextLine();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Prints greeting."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public void printGreeting() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        String logo \u003d \" ____        _        \\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                + \"|  _ \\\\ _   _| | _____ \\n\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                + \"| | | | | | | |/ / _ \\\\\\n\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                + \"| |_| | |_| |   \u003c  __/\\n\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        println(\"Hello from\\n\" + logo);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        println(\"Hello! I\u0027m Duke\\nWhat can I do for you?\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Prints help."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public void printHelp() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        println(\"Here is the list of instructions: list, bye, done {index}, \""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                + \"delete {index}, clear, todo {description}, event {description} /at \""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                + \"{date}, deadline {description} /by {date}\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Prints bye."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public void printBye() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        println(\"Bye. Hope to see you again soon!\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Prints storage file not found error."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public void storageFileNotFoundError() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        //println(\"Error: Save found not found.\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Prints IO exception error."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public void storageIoExceptionError() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        println(\"Error: Unable to load save file.\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Prints storage invalid line error."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public void storageInvalidLineError() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        println(\"Error: Save file is corrupted.\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public void storageSaveFileError() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        println(\"Error: Failed to save file\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Prints line if ui is isEnabled."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * @param line line to be printed"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public void println(String line) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        if (isEnabled) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            //System.out.println(line);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            outputBuffer.append(line).append(\u0027\\n\u0027);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Print error if errorLogsEnabled."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * @param e DukeException error"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public void printError(DukeException e) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        if (errorLogsEnabled) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            //System.out.println(\"☹ OOPS!!! \" + e.getMessage());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            outputBuffer.append(\"\\u2639\")"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                    .append(\"OOPS!!! \")"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                    .append(e.getMessage())"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                    .append(\u0027\\n\u0027);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public boolean isEnabled() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        return isEnabled;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public void setEnabled(boolean isEnabled) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        this.isEnabled \u003d isEnabled;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Whenever UI \"prints\" something it puts it into the outputBuffer (StringBuilder). This also resets the buffer."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * @return string ui output"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public String flushBuffer() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        String result \u003d outputBuffer.toString();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        //Set length to 0 (resetting buffer)"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        outputBuffer.setLength(0);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "crazoter"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "crazoter": 127
    }
  },
  {
    "path": "src/main/java/duke/command/AddDeadlineCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import duke.Duke;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import duke.task.TaskWithDate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "crazoter"
        },
        "content": "public class AddDeadlineCommand extends TextBasedCommand {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public static final String COMMAND \u003d \"deadline\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public static final String DISPLAY_COMMAND \u003d COMMAND;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Add a deadline command (extended from text based command)."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * @param line line of input"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * @throws DukeException generic error with message"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public AddDeadlineCommand(String line) throws DukeException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        super(line, COMMAND);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public void execute(Duke duke, TaskList taskList, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            String[] splitData \u003d TaskWithDate.extractDataFromLine(remainingLine, \" /by \");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            if (TaskWithDate.validateData(splitData, DISPLAY_COMMAND)) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                taskList.insertNewTask(ui, new Event(splitData[0], splitData[1]));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            storage.saveTaskListToFile(taskList);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        } catch (ParseException | IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            throw new DukeException(\"Deadline is ill formatted. Example: deadline return book /by 2/12/2019 1800\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "crazoter"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "crazoter": 39
    }
  },
  {
    "path": "src/main/java/duke/command/AddEventCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import duke.Duke;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import duke.task.TaskWithDate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "crazoter"
        },
        "content": "public class AddEventCommand extends TextBasedCommand {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public static final String COMMAND \u003d \"event\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public static final String DISPLAY_COMMAND \u003d COMMAND;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Create event command (extended from text based command)."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * @param line line of user input"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * @throws DukeException generic error with message"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public AddEventCommand(String line) throws DukeException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        super(line, COMMAND);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public void execute(Duke duke, TaskList taskList, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            String[] splitData \u003d TaskWithDate.extractDataFromLine(remainingLine, \" /at \");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            if (TaskWithDate.validateData(splitData, DISPLAY_COMMAND)) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                taskList.insertNewTask(ui, new Event(splitData[0], splitData[1]));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            storage.saveTaskListToFile(taskList);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        } catch (ParseException | IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            throw new DukeException(\"Event is ill formatted. Example: event dancing /at 2/12/2019 1800\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "crazoter"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "crazoter": 38
    }
  },
  {
    "path": "src/main/java/duke/command/AddTodoCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import duke.Duke;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import duke.task.Todo;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "crazoter"
        },
        "content": "public class AddTodoCommand extends TextBasedCommand {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public static final String COMMAND \u003d \"todo\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Create todo command (extended from text based command)."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * @param line line of user input"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * @throws DukeException generic error with message"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public AddTodoCommand(String line) throws DukeException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        super(line, COMMAND);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public void execute(Duke duke, TaskList taskList, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        taskList.insertNewTask(ui, new Todo(remainingLine));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        storage.saveTaskListToFile(taskList);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "crazoter"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "crazoter": 27
    }
  },
  {
    "path": "src/main/java/duke/command/ClearCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import duke.Duke;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "crazoter"
        },
        "content": "public class ClearCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public void execute(Duke duke, TaskList taskList, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        taskList.clear();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        ui.println(\"Emptied task list\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        storage.saveTaskListToFile(taskList);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "crazoter"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "crazoter": 17
    }
  },
  {
    "path": "src/main/java/duke/command/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import duke.Duke;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "crazoter"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public abstract void execute(Duke duke, TaskList taskList, Ui ui, Storage storage) throws DukeException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "crazoter"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "crazoter": 11
    }
  },
  {
    "path": "src/main/java/duke/command/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import duke.Duke;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "crazoter"
        },
        "content": "public class DeleteCommand extends IndexBasedCommand {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public DeleteCommand(String line) throws IndexOutOfBoundsException, NumberFormatException, DukeException {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        super(line);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public void execute(Duke duke, TaskList taskList, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            Task t \u003d taskList.remove(index);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            ui.println(\"Noted. I\u0027ve removed this task: \");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            ui.println(\"  \" + t.toString());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            ui.println(\"Now you have \" + taskList.size() + \" tasks in the list.\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            storage.saveTaskListToFile(taskList);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            throw new DukeException(\"The index is invalid.\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "crazoter"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "crazoter": 28
    }
  },
  {
    "path": "src/main/java/duke/command/DoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import duke.Duke;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "crazoter"
        },
        "content": "public class DoneCommand extends IndexBasedCommand {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public DoneCommand(String line) throws IndexOutOfBoundsException, NumberFormatException, DukeException {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        super(line);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public void execute(Duke duke, TaskList taskList, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            Task t \u003d taskList.get(index);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            t.markAsDone(true);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            ui.println(\"Nice! I\u0027ve marked this task as done: \");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            ui.println(\"  \" + t);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            storage.saveTaskListToFile(taskList);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            throw new DukeException(\"The index is invalid.\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "crazoter"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "crazoter": 28
    }
  },
  {
    "path": "src/main/java/duke/command/ExitCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import duke.Duke;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "crazoter"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public void execute(Duke duke, TaskList taskList, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        ui.printBye();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        duke.setRunning(false);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "crazoter"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "crazoter": 14
    }
  },
  {
    "path": "src/main/java/duke/command/FindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import duke.Duke;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import duke.task.Todo;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "crazoter"
        },
        "content": "public class FindCommand extends TextBasedCommand {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public static final String COMMAND \u003d \"find\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Find command for finding a particular string in tasks in the task list."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * @param line entire line of input by user."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * @throws DukeException generic exception with error message"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public FindCommand(String line) throws DukeException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        super(line, COMMAND);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public void execute(Duke duke, TaskList taskList, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        ui.println(\"____________________________________________________________\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                + \"Here are the matching tasks in your list:\\n\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        //I\u0027m assuming index matches the index in the list"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        for (int i \u003d 0; i \u003c taskList.size(); i++) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            String taskDetails \u003d taskList.get(i).toString();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            if (taskDetails.contains(remainingLine)) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                ui.println((i + 1) + \".\" + taskDetails);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        ui.println(\"____________________________________________________________\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "crazoter"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "crazoter": 36
    }
  },
  {
    "path": "src/main/java/duke/command/HelpCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import duke.Duke;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "crazoter"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public void execute(Duke duke, TaskList taskList, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        ui.printHelp();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "crazoter"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "crazoter": 13
    }
  },
  {
    "path": "src/main/java/duke/command/IndexBasedCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "crazoter"
        },
        "content": "public abstract class IndexBasedCommand extends Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    //protected String command; //unnecessary, commented out for potential future use"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    protected int index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Create Index based command (e.g. done 1)."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * @param line line of input by user"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * @throws IndexOutOfBoundsException index out of bounds exception which may occur"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * @throws NumberFormatException may occur when parsing int from the string arr after splitting line"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * @throws DukeException generic exception with error message"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public IndexBasedCommand(String line) throws IndexOutOfBoundsException, NumberFormatException, DukeException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        String[] data \u003d line.split(\" \");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        if (data.length !\u003d 2) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            throw new DukeException(\"Invalid number of arguments in an index based command\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        //command \u003d data[0];"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        index \u003d Integer.parseInt(data[1].trim()) - 1;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "crazoter"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "crazoter": 25
    }
  },
  {
    "path": "src/main/java/duke/command/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import duke.Duke;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "crazoter"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public void execute(Duke duke, TaskList taskList, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        if (taskList.size() \u003e 0) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            ui.println(\"Here are the tasks in your list:\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            for (int i \u003d 0; i \u003c taskList.size(); i++) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                Task t \u003d taskList.get(i);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                sb.append(i + 1).append(\" \").append(t);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                ui.println(sb.toString());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            ui.println(\"There are no tasks in your list.\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "crazoter"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "crazoter": 24
    }
  },
  {
    "path": "src/main/java/duke/command/TextBasedCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "crazoter"
        },
        "content": "public abstract class TextBasedCommand extends Command {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    protected String line;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    protected String remainingLine;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Creates a text based command e.g. todo event deadline."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * @param line entire input line by user"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * @param command extracted command"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * @throws DukeException generic exception with error message"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public TextBasedCommand(String line, String command) throws DukeException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        this.line \u003d line;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        remainingLine \u003d line.replaceFirst(command + \" \",\"\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        if (remainingLine.length() \u003c\u003d 0) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            throw new DukeException(command + \" cannot have an empty description\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "crazoter"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "crazoter": 22
    }
  },
  {
    "path": "src/main/java/duke/gui/DialogType.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "package duke.gui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "crazoter"
        },
        "content": "public enum DialogType {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    USER, DUKE"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "crazoter"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "crazoter": 5
    }
  },
  {
    "path": "src/main/java/duke/gui/Main.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "package duke.gui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import duke.Duke;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import duke.gui.controllers.MainWindow;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "crazoter"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "crazoter"
        },
        "content": " * A GUI for Duke using FXML."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "crazoter"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "crazoter"
        },
        "content": "public class Main extends Application {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    private Duke duke \u003d new Duke();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        MainWindow mainWindow \u003d new MainWindow(duke);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        Scene scene \u003d new Scene(mainWindow);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        stage.setScene(scene);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        stage.show();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "crazoter"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "crazoter": 23
    }
  },
  {
    "path": "src/main/java/duke/gui/controllers/DialogBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "package duke.gui.controllers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "crazoter"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "crazoter"
        },
        "content": " * An example of a custom control using FXML."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "crazoter"
        },
        "content": " * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "crazoter"
        },
        "content": " * containing text from the speaker."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "crazoter"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "crazoter"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    private DialogBox(String text, Image img) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        displayPicture.setImage(img);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        Collections.reverse(tmp);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Return user dialog (GUI) object"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * @param text text to display"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * @param img user image to display"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * @return DialogBox user dialog"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public static DialogBox getUserDialog(String text, Image img) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        return new DialogBox(text, img);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Return duke dialog (GUI) object but flipped"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * @param text text to display"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * @param img duke image to display"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * @return DialogBox duke dialog"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public static DialogBox getDukeDialog(String text, Image img) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        var db \u003d new DialogBox(text, img);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "crazoter"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "crazoter": 73
    }
  },
  {
    "path": "src/main/java/duke/gui/controllers/MainWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "package duke.gui.controllers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import duke.Duke;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import duke.gui.DialogType;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "crazoter"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "crazoter"
        },
        "content": " * Controller for MainWindow. Provides the layout for the other controls."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "crazoter"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "crazoter"
        },
        "content": "public class MainWindow extends AnchorPane {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    private Duke duke;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public MainWindow(Duke duke) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        this.duke \u003d duke;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        //Add initial dialog from duke"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        String initGreeting \u003d duke.init();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        addDialog(DialogType.DUKE, initGreeting);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    protected MainWindow() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public void setDuke(Duke d) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        duke \u003d d;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        String response \u003d duke.getResponse(input);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                DialogBox.getUserDialog(input, userImage),"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                DialogBox.getDukeDialog(response, dukeImage)"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        );"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Add a dialog box."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * @param type type of dialog (enum)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * @param text Text to add"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    private void addDialog(DialogType type, String text) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        DialogBox dialogBox;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        switch (type) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        case USER:"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            dialogBox \u003d DialogBox.getUserDialog(text, userImage);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            dialogBox \u003d DialogBox.getDukeDialog(text, dukeImage);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        dialogContainer.getChildren().add(dialogBox);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "crazoter"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "crazoter": 95
    }
  },
  {
    "path": "src/main/java/duke/task/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import duke.task.TaskWithDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "crazoter"
        },
        "content": "public class Deadline extends TaskWithDate {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public Deadline(String description, String date) throws ParseException {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        super(description, date);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        return \"[D]\" + super.toString() + \" (by: \" + TASK_WITH_DATE_FORMATTER.format(date) + \")\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public String getTaskName() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        return \"deadline\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "crazoter"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "crazoter": 22
    }
  },
  {
    "path": "src/main/java/duke/task/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "crazoter"
        },
        "content": "public class Event extends TaskWithDate {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public Event(String description, String date) throws ParseException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        super(description, date);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        return \"[E]\" + super.toString() + \" (at: \" + TASK_WITH_DATE_FORMATTER.format(date) + \")\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public String getTaskName() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        return \"event\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "crazoter"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "crazoter": 20
    }
  },
  {
    "path": "src/main/java/duke/task/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "crazoter"
        },
        "content": "public abstract class Task {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public Task(String description, boolean isDone) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        this.isDone \u003d isDone;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        return (isDone ? \"\\u2713\" : \"\\u2718\"); //return tick or X symbols"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public void setDescription(String description) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public boolean isDone() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        return isDone;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public void markAsDone(boolean done) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        isDone \u003d done;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public String getStatusWithDescription() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        return \"[\" + getStatusIcon() + \"] \" + getDescription();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Validate the input from the user."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * @param description Description of the task"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * @param taskName Name of the task e.g. event or deadline"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public static boolean validateData(String description, String taskName) throws DukeException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        if (description.length() \u003c\u003d 0) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            throw new DukeException(\"The description of a \" + taskName + \" cannot be empty.\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        return getStatusWithDescription();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Gets the task name, used by storage to identify tasks."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * @return String denoting task name e.g. todo, event, deadline. In low caps;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public abstract String getTaskName();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "crazoter"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "crazoter": 66
    }
  },
  {
    "path": "src/main/java/duke/task/TaskWithDate.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "crazoter"
        },
        "content": "public abstract class TaskWithDate extends Task {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    static final SimpleDateFormat TASK_WITH_DATE_FORMATTER \u003d new SimpleDateFormat(\"dd \u0027of\u0027 MMMM yyyy, K:mma\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    static final SimpleDateFormat TASK_WITH_DATE_PARSER \u003d new SimpleDateFormat(\"dd/MM/yyyy HHmm\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    protected Date date;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public TaskWithDate(String description, boolean isDone, String date) throws ParseException {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        super(description, isDone);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        this.date \u003d TASK_WITH_DATE_PARSER.parse(date);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public TaskWithDate(String description, String date) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        this.date \u003d TASK_WITH_DATE_PARSER.parse(date);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * The current format of input for a task with date is to add a /at or /on. This extracts the data from that format."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * @param line Line of input"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * @param delimiter delimiter provided [\" /at \" or \" /on \"]"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public static String[] extractDataFromLine(String line, String delimiter) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        return line.split(delimiter);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * Verify that the data is correct before creating a task with data."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * @param data the data as extracted from extractDataFromLine"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * @param taskName Name of the task e.g. event or deadline"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "crazoter"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public static boolean validateData(String[] data, String taskName) throws DukeException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        if (data[0].length() \u003c\u003d 0) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            throw new DukeException(\"The description of a \" + taskName + \" cannot be empty.\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        } else if (data.length \u003c\u003d 1 || data[1].length() \u003c\u003d 0) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            throw new DukeException(\"The date of a \" + taskName + \" cannot be empty.\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public Date getDate() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        return date;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public String getFormattedDateToString() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        return TASK_WITH_DATE_FORMATTER.format(date);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public String getParseableDateToString() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        return TASK_WITH_DATE_PARSER.format(date);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public void setDate(Date date) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "crazoter"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "crazoter": 64
    }
  },
  {
    "path": "src/main/java/duke/task/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "crazoter"
        },
        "content": "public class Todo extends Task {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public Todo(String description, boolean isDone) {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        super(description, isDone);"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public Todo(String description) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public String getTaskName() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        return \"todo\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "crazoter"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "crazoter": 22
    }
  },
  {
    "path": "src/main/resources/view/DialogBox.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "crazoter"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "crazoter"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "crazoter"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "crazoter"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "crazoter"
        },
        "content": "\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    \u003cpadding\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    \u003c/padding\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "crazoter"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "crazoter": 16
    }
  },
  {
    "path": "src/main/resources/view/MainScene.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "crazoter"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "crazoter"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "crazoter"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "crazoter"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "crazoter"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "crazoter"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "crazoter"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "crazoter"
        },
        "content": "\u003cStage xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"duke.gui.controllers.Main\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    \u003cscene\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        \u003cScene\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            \u003croot\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                \u003cfx:include source\u003d\"MainWindow.fxml\" fx:id\u003d\"mainWindow\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            \u003c/root\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        \u003c/Scene\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    \u003c/scene\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "crazoter"
        },
        "content": "\u003c/Stage\u003e"
      }
    ],
    "authorContributionMap": {
      "crazoter": 19
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "crazoter"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "crazoter"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "crazoter"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "crazoter"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "crazoter"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "crazoter"
        },
        "content": "\u003c?import duke.gui.controllers.MainWindow?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "crazoter"
        },
        "content": "\u003cfx:root maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" type\u003d\"duke.gui.controllers.MainWindow\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            \u003ccontent\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "crazoter"
        },
        "content": "                \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "crazoter"
        },
        "content": "            \u003c/content\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "crazoter"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "crazoter": 20
    }
  },
  {
    "path": "src/test/java/duke/DukeTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "crazoter"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "crazoter"
        },
        "content": "public class DukeTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    public void dummyTest() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "crazoter"
        },
        "content": "        assertEquals(2, 2);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "crazoter"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "crazoter": 12
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "todo"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "crazoter"
        },
        "content": "event"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "crazoter"
        },
        "content": "deadline"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "crazoter"
        },
        "content": "done"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "crazoter"
        },
        "content": "done -1"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "crazoter"
        },
        "content": "done 1"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "crazoter"
        },
        "content": "list"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "crazoter"
        },
        "content": "todo1"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "crazoter"
        },
        "content": "todo something"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "crazoter"
        },
        "content": "event dinner /at mondays"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "crazoter"
        },
        "content": "deadline project /by thursdays"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "crazoter"
        },
        "content": "list"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "crazoter"
        },
        "content": "done 2"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "crazoter"
        },
        "content": "list"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "crazoter"
        },
        "content": "done 3"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "crazoter"
        },
        "content": "delete 1"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "crazoter"
        },
        "content": "list"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "crazoter"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "crazoter": 18
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "crazoter"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "crazoter"
        },
        "content": "if not exist ..\\bin mkdir ..\\bin"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "crazoter"
        },
        "content": "REM delete output from previous run"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "crazoter"
        },
        "content": "del ACTUAL.TXT"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "crazoter"
        },
        "content": "REM compile the code into the bin folder"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "crazoter"
        },
        "content": "javac -cp ..\\src\\main\\java -d ..\\bin ..\\src\\main\\java\\Duke.java"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "crazoter"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    exit /b 1"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "crazoter"
        },
        "content": ")"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "crazoter"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "crazoter"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "crazoter"
        },
        "content": "java -Dfile.encoding\u003dUTF-8 -classpath ..\\bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "crazoter"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "crazoter"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT"
      }
    ],
    "authorContributionMap": {
      "crazoter": 21
    }
  },
  {
    "path": "text-ui-test/runtest.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "crazoter"
        },
        "content": "#!/usr/bin/env bash"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "crazoter"
        },
        "content": "# create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "crazoter"
        },
        "content": "if [ ! -d \"../bin\" ]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "crazoter"
        },
        "content": "then"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    mkdir ../bin"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "crazoter"
        },
        "content": "fi"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "crazoter"
        },
        "content": "# delete output from previous run"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "crazoter"
        },
        "content": "if [ -e \"./ACTUAL.TXT\" ]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "crazoter"
        },
        "content": "then"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    rm ACTUAL.TXT"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "crazoter"
        },
        "content": "fi"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "crazoter"
        },
        "content": "# compile the code into the bin folder, terminates if error occurred"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "crazoter"
        },
        "content": "if ! javac -cp ../src -Xlint:none -d ../bin ../src/main/java/Duke.java"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "crazoter"
        },
        "content": "then"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    echo \"********** BUILD FAILURE **********\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "crazoter"
        },
        "content": "fi"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "crazoter"
        },
        "content": "# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "crazoter"
        },
        "content": "java -classpath ../bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "crazoter"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "crazoter"
        },
        "content": "# compare the output to the expected output"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "crazoter"
        },
        "content": "diff ACTUAL.TXT EXPECTED.TXT"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "crazoter"
        },
        "content": "if [ $? -eq 0 ]"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "crazoter"
        },
        "content": "then"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    echo \"Test result: PASSED\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    exit 0"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "crazoter"
        },
        "content": "else"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    echo \"Test result: FAILED\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "crazoter"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "crazoter"
        },
        "content": "fi"
      }
    ],
    "authorContributionMap": {
      "crazoter": 34
    }
  },
  {
    "path": "tutorials/javaFxTutorialPart1.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# JavaFX Tutorial Part 1 – Introduction"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "## JavaFX lifecycle of an application"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "Imagine yourself as a director of a play. First you provision the props that you will feature in your play. These can be hand props for your actors to interact with or even set dressings just to liven up the background. You then decide where to layout the props for every scene. With a proper script in hand, you can finally approach a theatre and request for a stage. There on, it’s just a matter of pulling the curtains on your masterpiece."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "![Hierarchy of Objects in JavaFX](assets/JavaFxHierarchy.png)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "A JavaFX application is like a play you are directing. Instead of creating props, you create `Nodes` (`Nodes` are the fundamental building blocks of a JavaFX application), and place them onto a `Scene` (a scene is a graph of `Node`s). Then, you set your `Scene` on a `Stage` provided by JavaFX. When you call `Stage#show()` method, JavaFX renders a window with your `Stage` on it."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "## Setting up Java FX"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "### If you are not using Gradle"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "1. Download the [JavaFX 11 SDK](https://gluonhq.com/products/javafx/) and unzip it."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "1. Import the `libs` folder from the SDK into your project (note: `JAVAFX_HOME` is the directory in which you have unzipped the JavaFX SDK). "
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "   `File` \u003e `Project Structure` \u003e `Libraries` \u003e `+` \u003e `Java` \u003e `{JAVAFX_HOME}/lib`"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "1. From `Run` \u003e `Edit Configurations`, add the following line into your `VM options` for each of the `main` classes."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "   `--module-path {JAVAFX_HOME}/lib --add-modules javafx.controls,javafx.fxml`\u003cbr\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "   e.g., `--module-path C:/javafx-sdk-11.0.2/lib --add-modules javafx.controls,javafx.fxml`"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "### If you are using Gradle"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "Update your `build.gradle` to include the following lines:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "```groovy"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027org.openjfx.javafxplugin\u0027 version \u00270.0.7\u0027"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "javafx {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    version \u003d \"11.0.2\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    modules \u003d [ \u0027javafx.controls\u0027, \u0027javafx.fxml\u0027 ]"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "## Writing your first program"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "As customary, let’s start off with a simple “Hello World” program. Modify your `Duke` class to extend `javafx.application.Application`. This requires you to override the `Application#start()` method and provide a concrete implementation. Notice that the method signature for `Application#start()` has a parameter `Stage`. This is the _primary stage_ that JavaFX provides."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke extends Application {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    "
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    // ..."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        Label helloWorld \u003d new Label(\"Hello World!\"); // Creating a new Label control"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        Scene scene \u003d new Scene(helloWorld); // Setting the scene to be our Label"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        stage.setScene(scene); // Setting the stage to show our screen"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        stage.show(); // Render the stage."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "Note how we have created a `Label` to contain the text that we want to show. We then create the `Scene` and set its content. Finally, we set the stage and show it. "
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "crazoter"
        },
        "content": "Next, we create another Java class, `duke.Launcher`, as an entry point to our application."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "crazoter"
        },
        "content": "The `duke.Launcher` class is reproduced below in its entirety."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": " * A launcher class to workaround classpath issues."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "crazoter"
        },
        "content": "public class duke.Launcher {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        Application.launch(Duke.class, args);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "crazoter"
        },
        "content": "Run `duke.Launcher` and you should see something like this:"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "![Hello World](assets/HelloWorld.png) "
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "Congratulations! You have created your first GUI application!"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "## Exercises"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "1. We mentioned that `Node`s are the fundamental building blocks of JavaFX and used a `Label` as our root node in the HelloWorld application."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "   1. What are some of the other types of `Node`s?"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "   1. How does JavaFX group them?"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "1. `Node`s can be interacted with like Plain Old Java Objects (POJO)."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "   1. What properties of a `Label` can you change programmatically?"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Try changing the `Label` to have a font of Arial at size 50."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "1. You’ve learnt that a `Stage` can be thought of as a window. "
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Can you have more than one `Stage` an application?"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Try creating another stage and showing it! What happens?"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "**Authors:**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "* Initial Version: Jeffry Lum"
      }
    ],
    "authorContributionMap": {
      "crazoter": 4,
      "-": 106
    }
  },
  {
    "path": "tutorials/javaFxTutorialPart4.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# JavaFX Tutorial 4 – FXML "
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "While we have produced a fully functional prototype, there are a few major problems with our application."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "1. The process of visually enhancing the GUI is long and painful:"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "   * Does the `TextField` need to be 330px or 325px wide? "
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "   * How much padding is enough padding to look good?"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "   Every small change requires us to rebuild and run the application.  "
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "1. Components are heavily dependent on each other:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "   Why does `Main` need to know that `DialogBox` needs a `Label`? "
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "   What happens if we change the `Label` to a custom `ColoredLabel` in the future?  "
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    "
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    We need to minimize the amount of information each control needs to know about another."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    Otherwise, making changes in the future will break existing features."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "1. The code is untidy and long:"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "   Why is all the code in one place?"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "   The `Main` class attempts to do it all. "
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "   Code for visual tweaks, listeners and even utility methods are all in one file."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "   This makes it difficult to find and make changes to existing code."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "FXML is a XML-based language that allows us to define our user interface. Properties of JavaFX objects can be defined in the FXML file. For example:  "
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "```xml"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "The FXML snippet define a TextField similar to the one that we programmatically defined previous in Tutorial 2. Notice how concise FXML is compared to the plain Java version."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s return to Duke and convert it to use FXML instead."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "# Rebuilding the Scene using FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "Scene Builder is a tool developed by Oracle and currently maintained by Gluon. It is a What-You-See-Is-What-You-Get GUI creation tool. [Download](https://gluonhq.com/products/scene-builder/#download) the appropriate version for your OS and install it."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "Create the following files in `src/main/resources/view`:"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "**MainWindow.fxml**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "```xml"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"MainWindow\"\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "         \u003ccontent\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" /\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "         \u003c/content\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "**DialogBox.fxml**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "```xml"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003cpadding\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003c/padding\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "1. Let’s explore the provided FXML files in Scene Builder. "
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    "
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    Running the tool brings up the main screen."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    Select `Open Project` \u003e `src/main/resources/view/MainWindow.fxml`. Inspect each control and its properties."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "   ![SceneBuilder opening MainWindow.fxml](assets/SceneBuilder.png)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "1. On the right accordion pane, you can modify the properties of the control that you have selected. Try changing the various settings and see what they do!"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": " "
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "1. On the left accordion, you can see that we have set the controller class to `MainWindow`. "
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "We will get to that later."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": " "
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "   ![Controller for MainWindow](assets/MainWindowController.png)"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "1. Let’s repeat the process for `DialogBox`."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "   The main difference here is that DialogBox checks `Use fx:root construct` and _does not define a controller class_. "
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "   ![Settings for DialogBox](assets/DialogBoxController.png)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "## Using Controllers"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "As part of the effort to separate the code handling Duke\u0027s logic and UI, let\u0027s _refactor_ the UI-related code to its own class."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "We call these UI classes _controllers_. "
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s implement the `MainWindow` controller class that we specified in `MainWindow.fxml`."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "**MainWindow.java**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": " * Controller for MainWindow. Provides the layout for the other controls."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends AnchorPane {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    private Duke duke;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setDuke(Duke d) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        duke \u003d d;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        String response \u003d duke.getResponse(input);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "                DialogBox.getUserDialog(input, userImage),"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "                DialogBox.getDukeDialog(response, dukeImage)"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        );"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "The `@FXML` annotation marks a `private` or `protected` member and makes it accessible to FXML despite its modifier."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "Without the annotation, we will have to make everything `public` and expose our UI to unwanted changes."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "The `FXMLLoader` will map the a control with a `fx:id` defined in FXML to a variable with the same name in its controller."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "Notice how in `MainWindow`, we can invoke `TextField#clear()` on `userInput` and access its content just as we did in the previous example."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "Similarly, methods like private methods like `handleUserInput` can be used in FXML when annotated by `@FXML`. "
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "## Using FXML in our application"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s create a new `Main` class as the bridge between the existing logic in `Duke` and the UI in `MainWindow`."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "**Main.java**"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "@Override"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": " * A GUI for Duke using FXML."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "public class Main extends Application {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    private Duke duke \u003d new Duke();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "            AnchorPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "            Scene scene \u003d new Scene(ap);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "Again, we can interact with the `AnchorPane` defined in the FXML as we would have if we created the `AnchorPane` ourselves."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "For our custom `DialogBox`, we did not define a controller so let\u0027s create a controller for it."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "**DialogBox.java**"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": " * An example of a custom control using FXML."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": " * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": " * containing text from the speaker."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    private DialogBox(String text, Image img) {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "        displayPicture.setImage(img);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "        Collections.reverse(tmp);"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "        getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "        setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "    public static DialogBox getUserDialog(String text, Image img) {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "        return new DialogBox(text, img);"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "    public static DialogBox getDukeDialog(String text, Image img) {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "        var db \u003d new DialogBox(text, img);"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "When we create a new instance of `DialogBox`, we set both the controller and root Node to `DialogBox`. "
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "From this point onwards we can interact with `DialogBox` as we have in the previous tutorials."
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "crazoter"
        },
        "content": "The last change that we have to make is to point our `duke.Launcher` class in the right direction:"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "crazoter"
        },
        "content": "In `duke.Launcher.java`"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "//...    "
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "Application.launch(Main.class, args);"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "//..."
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "[todo]: # (Discussion on the fx:root pattern.)"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "## Exercises"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "1. Convert `MainWindow` to use the `fx:root` construct."
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "1. Extend `MainWindow` to have a `Stage` as a root Node."
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "1. Customize the appearance of the application further with CSS."
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "**Authors:**"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "* Initial Version: Jeffry Lum"
      }
    ],
    "authorContributionMap": {
      "crazoter": 2,
      "-": 292
    }
  }
]
