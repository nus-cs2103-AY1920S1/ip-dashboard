[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "group \u0027seedu.duke\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "version \u00270.1.4\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    mainClassName \u003d \"duke.Duke\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "run {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    archiveVersion \u003d \"0.1.4\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "}"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "test {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dorcastan": 23,
      "-": 17
    }
  },
  {
    "path": "src/main/java/duke/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dorcastan"
        },
        "content": " * Main class for the Duke application."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dorcastan"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    private TextUi ui;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * Initialises Duke by setting up user interface, storage, and tasks."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * @param filePath  Path to data file"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public Duke(String filePath) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        ui \u003d new TextUi();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        storage \u003d new HardDiskStorage(filePath);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            tasks \u003d new TaskList(storage.load());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            ui.showLoadingError();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * Runs the main application by handling user input."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * \u003cp\u003eDuke begins by printing a welcome message. Subsequently, it repeatedly"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * scans for user input, then validates and processes it accordingly. The"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * function returns when the command to exit (\"bye\") is received.\u003c/p\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        ui.showWelcomeMessage();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        boolean isExit \u003d false;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        while (!isExit) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                String fullCommand \u003d ui.readCommand();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                ui.showLine();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                Command c \u003d Parser.parse(fullCommand);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                c.execute(tasks, ui, storage);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                isExit \u003d c.isExit();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            } catch (DukeException e) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                ui.showErrorMessage(e.getMessage());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                // TODO: Add \"help\" feature: list all supported commands"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            } finally {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                ui.showLine();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * Initialises and runs the Duke application."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * @param args  Standard arguments"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        new Duke(\"data/duke.txt\").run();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dorcastan": 60,
      "-": 3
    }
  },
  {
    "path": "src/main/java/duke/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public DukeException(String errorMessage) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        super(errorMessage);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dorcastan": 7
    }
  },
  {
    "path": "src/main/java/duke/HardDiskStorage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import duke.task.Todo;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "public class HardDiskStorage implements Storage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    private static File dataFile;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * Creates a Storage object that can read and write from a hard disk file."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * @param filePath  Relative path to data file"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public HardDiskStorage(String filePath) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        dataFile \u003d new File(filePath);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * Loads tasks from a (valid) data file, adds them to a new list, then"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * returns that list."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * @return                  List of tasks that were loaded from file"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * @throws DukeException    If tasks cannot be loaded from file"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public List\u003cTask\u003e load() throws DukeException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        List\u003cTask\u003e taskList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            Scanner fileScanner \u003d new Scanner(dataFile);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            while (fileScanner.hasNext()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                String task \u003d fileScanner.nextLine();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                String[] details \u003d task.split(\" \\\\| \");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                boolean isDone \u003d details[1].equals(\"+\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                if (details[0].equals(\"T\")) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                    taskList.add(new Todo(details[2], isDone));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                } else if (details[0].equals(\"E\")) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                    taskList.add(new Event(details[2], details[3], isDone));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                } else if (details[0].equals(\"D\")) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                    taskList.add(new Deadline(details[2], details[3], isDone));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                    taskList.add(new Task(\"Task could not be parsed.\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                    // TODO: Find better way to handle parsing error."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            return taskList;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            throw new DukeException(\"No such file was found.\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * Writes the tasks in the given list to an external data file."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * @param tasks             List of tasks to be written."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * @throws IOException      If file cannot be found, etc."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public void writeToFile(TaskList tasks) throws IOException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        if (!dataFile.exists()) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            dataFile.getParentFile().mkdirs();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            dataFile.createNewFile();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        FileWriter fileWriter \u003d new FileWriter(dataFile);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        fileWriter.write(tasks.toString());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        fileWriter.close();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dorcastan": 78
    }
  },
  {
    "path": "src/main/java/duke/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import duke.command.ByeCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import duke.command.DeadlineCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import duke.command.DeleteCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import duke.command.DoneCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import duke.command.EventCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import duke.command.ListCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import duke.command.TodoCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * Parses the input string and returns a Command corresponding to the"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * required action."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * @param input             String representation of the desired command"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * @return                  Command"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * @throws DukeException    If input is invalid, etc."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public static Command parse(String input) throws DukeException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        String command \u003d input.strip();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        validate(command);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        if (command.startsWith(\"done\")) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            return new DoneCommand(command.substring(5), true);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        } else if (command.startsWith(\"undo\")) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            return new DoneCommand(command.substring(5), false);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        } else if (command.startsWith(\"delete\")) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            return new DeleteCommand(command.substring(7));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        } else if (command.startsWith(\"todo\")) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            return new TodoCommand(command.substring(5));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        } else if (command.startsWith(\"event\")) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            return new EventCommand(command.substring(6));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        } else if (command.startsWith(\"deadline\")) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            return new DeadlineCommand(command.substring(9));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        } else if (command.equals(\"list\")) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        } else { // input is \"bye\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            return new ByeCommand();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * Throws an exception if the given input does not have a valid format."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * Valid formats are: 1. \"list\""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     *                    2. \"done [taskIndex]\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     *                    3. \"undo [taskIndex]\""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     *                    4. \"todo [description]\""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     *                    5. \"deadline [description] /by [time]\""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     *                    6. \"event [description] /at [time]\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     *                    7. \"delete [taskIndex]\""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     *                    8. \"bye\""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * @param input             Text input to be validated"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * @throws DukeException    An exception with a message describing Duke\u0027s"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     *                          response to the problem"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    private static void validate(String input) throws DukeException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        if (input.startsWith(\"done\") || input.startsWith(\"undo\")) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            if (input.length() \u003c 6) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                throw new DukeException(\"what\u0027s the task number again?\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        } else if (input.startsWith(\"delete\")) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            if (input.length() \u003c 8) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                throw new DukeException(\"I couldn\u0027t find a task to delete.\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        } else if (input.startsWith(\"todo\")) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            if (input.length() \u003c 6) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                throw new DukeException(\"I can\u0027t see the description of your todo.\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        } else if (input.startsWith(\"event\")) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            if (input.length() \u003c 7) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                throw new DukeException(\"I need to know the event description.\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            } else if (!input.contains(\" /at \")) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                throw new DukeException(\"I also need to know when your event is.\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        } else if (input.startsWith(\"deadline\")) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            if (input.length() \u003c 10) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                throw new DukeException(\"I didn\u0027t catch what you need to do.\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            } else if (!input.contains(\" /by \")) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                throw new DukeException(\"what\u0027s the deadline for this?\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        } else if (!input.equals(\"list\") \u0026\u0026 !input.equals(\"bye\")) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            throw new DukeException(\"I don\u0027t know what that means... :(\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        // TODO: Case insensitive commands"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        // TODO: Validate format of \"event\" and \"deadline\" date/time"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        // TODO: Use better control flow (not exceptions)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        // TODO: Add alternative commands e.g. \"exit\""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dorcastan": 91
    }
  },
  {
    "path": "src/main/java/duke/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "public interface Storage {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * Loads tasks from external storage to a new list, then returns that list."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * @return                  List of tasks that were loaded from file"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * @throws DukeException    If tasks cannot be loaded from file"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public List\u003cTask\u003e load() throws DukeException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * Writes the tasks in the given list into external storage."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * @param tasks             List of tasks to be written."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * @throws IOException      If file cannot be found, etc."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public void writeToFile(TaskList tasks) throws IOException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dorcastan": 23
    }
  },
  {
    "path": "src/main/java/duke/TextUi.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dorcastan"
        },
        "content": " * This class handles the user interface – all activities relating to input and"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dorcastan"
        },
        "content": " * output, including format or printing."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dorcastan"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "public class TextUi {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    /* STATIC VARIABLES */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    private static final Scanner scanner \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    private static final String LOGO \u003d \" ____        _        \\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            + \"|  _ \\\\ _   _| | _____ \\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            + \"| | | | | | | |/ / _ \\\\\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            + \"| |_| | |_| |   \u003c  __/\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    private static final String HORIZONTAL_LINE \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            \"____________________________________________________________\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    private static final String INDENT \u003d \"    \";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    /* METHODS TO READ INPUT */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * Reads a command from standard input. If user input is terminated,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * automatically returns an exit command."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * @return  String representing a user-given command"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public String readCommand() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        return scanner.hasNext() ? scanner.nextLine() : \"bye\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    /* METHODS TO DISPLAY OUTPUT */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * Prints the given text with indentation of five spaces."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * @param text      Single line of text to be printed"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    // TODO: Wrap text for longer lines"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    private void show(String text) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        System.out.println(INDENT + \" \" + text);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * Prints a horizontal line of width 60 characters."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public void showLine() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        System.out.println(INDENT + HORIZONTAL_LINE);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * Prints the items in the given list with their corresponding index"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * numbers. A horizontal line is printed above and below the list, and"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * output is indented throughout."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * @param list      A task list to be printed"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public void showList(TaskList list) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        for (int i \u003d 1; i \u003c\u003d list.size(); i++) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            show(i + \".\" + list.get(i - 1).toString());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * Prints the given text with a horizontal line above and below the text"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * and appropriate indentation."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * @param text      Formatted text with appropriate line breaks. Maximum"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     *                  width for each line is 58 characters."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public void showText(String text) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        String[] lines \u003d text.split(\"\\n\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        for (String line : lines) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            show(line);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * Prints an apology followed by details of the given exception."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * @param message   Error message from exception that caused the error"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public void showErrorMessage(String message) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        showText(\"Sorry, \" + message);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * Prints a welcome message that consists of the Duke logo and a greeting."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public void showWelcomeMessage() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        showLine();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        showText(LOGO"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                + \"\\n\""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                + \"Hello! I\u0027m Duke\\n\""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                + \"What can I do for you?\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        showLine();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * Prints a message indicating that tasks could not be loaded from storage."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public void showLoadingError() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        showLine();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        showText(\"Sorry, I could not retrieve your previous tasks.\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dorcastan": 109
    }
  },
  {
    "path": "src/main/java/duke/command/AddCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import duke.TextUi;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dorcastan"
        },
        "content": " * Wrapper for commands to add tasks. Should not be instantiated."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dorcastan"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "class AddCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    AddCommand(String details) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        super(details);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public void execute(TaskList tasks, TextUi ui, Storage storage) throws"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            DukeException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        int numberOfTasks \u003d tasks.size();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        ui.showText(\"Got it. I\u0027ve added this task:\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                + \"\\n  \" + tasks.get(numberOfTasks - 1)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                + \"\\nNow you have \" + numberOfTasks + \" tasks in the list.\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        save(tasks, storage);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dorcastan": 25
    }
  },
  {
    "path": "src/main/java/duke/command/ByeCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import duke.TextUi;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "public class ByeCommand extends Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public ByeCommand() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        super(\"\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        this.isExit \u003d true;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public void execute(TaskList tasks, TextUi ui, Storage storage) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        ui.showText(\"Bye. Hope to see you again soon!\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dorcastan": 18
    }
  },
  {
    "path": "src/main/java/duke/command/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import duke.TextUi;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    protected String details;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    protected boolean isExit;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    Command(String details) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        this.details \u003d details;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        this.isExit \u003d false;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * Returns the details associated with this command."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * @return  Command details"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public String getDetails() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        return details;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        return isExit;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public boolean isDone() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        return isDone;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * Executes the current command using the given resources."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * @param tasks             List of tasks"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * @param ui                User interface"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * @param storage           Hard disk storage"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * @throws DukeException    If command details are invalid, etc."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public abstract void execute(TaskList tasks, TextUi ui, Storage storage) throws"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            DukeException;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * Saves the current task list in the file `[root]/data/duke.txt`."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * @throws DukeException    If file does not get written properly"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    void save(TaskList tasks, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            storage.writeToFile(tasks);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            throw new DukeException("
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                    \"oops! I encountered an error when saving your tasks.\\n\""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                            + \"    \" + e.getMessage() + \"\\n\""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                            + \"If you say bye now, you may not be able to access this\\n\""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                            + \" list in future.\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * Returns the taskList index of the task with the given number if such a"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * task exists, and throws an exception otherwise. Note that taskList is"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * zero-indexed, whereas the input number is one-indexed."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * @param number            String that should contain a number"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * @param numberOfTasks     Number of tasks in the list currently"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * @return                  The requested task index"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * @throws DukeException    Exception message indicating task not found"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    int getTaskIndex(String number, int numberOfTasks) throws DukeException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            int taskIndex \u003d Integer.parseInt(number);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            if (taskIndex \u003c 1 || taskIndex \u003e numberOfTasks) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                throw new DukeException(\"I couldn\u0027t find the task you requested!\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            return taskIndex - 1; // taskList is zero-indexed"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            throw new DukeException(\"I couldn\u0027t find the task you requested!\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dorcastan": 83
    }
  },
  {
    "path": "src/main/java/duke/command/DeadlineCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import duke.TextUi;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "public class DeadlineCommand extends AddCommand {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public DeadlineCommand(String details) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        super(details);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public void execute(TaskList tasks, TextUi ui, Storage storage) throws"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            DukeException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        String[] taskDetails \u003d details.split(\" /by \");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        tasks.add(new Deadline(taskDetails[0], taskDetails[1]));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        super.execute(tasks, ui, storage);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dorcastan": 21
    }
  },
  {
    "path": "src/main/java/duke/command/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import duke.TextUi;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public DeleteCommand(String details) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        super(details);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public void execute(TaskList tasks, TextUi ui, Storage storage) throws"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            DukeException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        int taskIndex \u003d getTaskIndex(details, tasks.size());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        Task deletedTask \u003d tasks.remove(taskIndex);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        ui.showText(\"Noted. I\u0027ve removed this task:\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                + \"\\n  \" + deletedTask.toString()"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                + \"\\nNow you have \" + tasks.size() + \" tasks in the list.\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        save(tasks, storage);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dorcastan": 25
    }
  },
  {
    "path": "src/main/java/duke/command/DoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import duke.TextUi;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "public class DoneCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public DoneCommand(String details, boolean isDone) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        super(details);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        this.isDone \u003d isDone;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public void execute(TaskList tasks, TextUi ui, Storage storage) throws"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            DukeException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        int taskIndex \u003d getTaskIndex(details, tasks.size());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        Task selectedTask \u003d tasks.get(taskIndex);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        if (isDone) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            selectedTask.markAsDone();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            ui.showText(\"Nice! I\u0027ve marked this task as done:\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                    + \"\\n  \" + selectedTask.toString());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            selectedTask.markAsUndone();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            ui.showText(\"Oh dear. I\u0027ve marked this task as undone:\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                    + \"\\n  \" + selectedTask.toString());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        save(tasks, storage);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dorcastan": 32
    }
  },
  {
    "path": "src/main/java/duke/command/EventCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import duke.TextUi;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "public class EventCommand extends AddCommand {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public EventCommand(String details) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        super(details);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public void execute(TaskList tasks, TextUi ui, Storage storage) throws"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            DukeException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        String[] taskDetails \u003d details.split(\" /at \");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        tasks.add(new Event(taskDetails[0], taskDetails[1]));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        super.execute(tasks, ui, storage);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dorcastan": 21
    }
  },
  {
    "path": "src/main/java/duke/command/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import duke.TextUi;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public ListCommand() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        super(\"\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public void execute(TaskList tasks, TextUi ui, Storage storage) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        if (tasks.isEmpty()) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            ui.showText(\"You have no tasks now. Hooray!\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            ui.showList(tasks);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dorcastan": 21
    }
  },
  {
    "path": "src/main/java/duke/command/TodoCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import duke.TextUi;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import duke.task.Todo;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "public class TodoCommand extends AddCommand {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public TodoCommand(String details) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        super(details);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public void execute(TaskList tasks, TextUi ui, Storage storage) throws"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            DukeException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        tasks.add(new Todo(details));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        super.execute(tasks, ui, storage);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dorcastan": 20
    }
  },
  {
    "path": "src/main/java/duke/task/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    private Date by;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * Creates a new Deadline with the given description and due date."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * @param description       Task to be completed."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * @param by                Due date for the Deadline."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public Deadline(String description, String by) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        this.by \u003d Task.parseDate(by);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * Creates a new Deadline with the given description, due date and status."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * @param description       Task to be completed."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * @param by                Due date for the Deadline."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * @param isDone            Whether the Deadline is completed or not."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public Deadline(String description, String by, boolean isDone) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        super(description, isDone);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        this.by \u003d Task.parseDate(by);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * Returns the letter \"D\", representing the type Deadline."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * @return  \"D\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public String getType() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        return \"D\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * Returns a representation of the current Deadline, including its due"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * date or time, in an appropriate format for data storage."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * @return  String representing the current Deadline."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public String formatAsData() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        return super.formatAsData() + \" | \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                + String.format(\"%1$ta, %1$td %1$tb %1$ty, %1$tR\", by);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * Returns a string containing the type of Task, done status, description,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * and deadline."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * @return  String describing the Deadline."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        return \"[D]\" + super.toString() + \" (by: \""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                + String.format(\"%1$ta, %1$td %1$tb %1$ty, %1$tR\", by) + \")\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dorcastan": 59
    }
  },
  {
    "path": "src/main/java/duke/task/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    private Date time;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * Creates a new Event with the given description and timing."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * @param description       Description of Event."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * @param time              Timing of the Event."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public Event(String description, String time) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        this.time \u003d parseDate(time);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * Creates a new Event with the given description, timing and status."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * @param description       Description of Event."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * @param time              Timing of the Event."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * @param isDone            Whether the Event is done or not."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public Event(String description, String time, boolean isDone) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        super(description, isDone);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        this.time \u003d parseDate(time);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * Returns the letter \"E\", representing the type Event."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * @return  \"E\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public String getType() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        return \"E\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * Returns a representation of the current Event, including its time, in"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * an appropriate format for data storage."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * @return  String representing the current Event."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public String formatAsData() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        return super.formatAsData() + \" | \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                + String.format(\"%1$ta, %1$td %1$tb %1$ty, %1$tR\", time);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * Returns a string containing the type of Task, done status, description,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * and time."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * @return  String describing the Event."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        return \"[E]\" + super.toString() + \" (at: \""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                + String.format(\"%1$ta, %1$td %1$tb %1$ty, %1$tR\", time) + \")\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dorcastan": 59
    }
  },
  {
    "path": "src/main/java/duke/task/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * Array of date formats that Duke is able to parse. A valid date can take"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * any of the following formats:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * 1. EEE, dd MMM yy, hh:mm"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * 2. dd-MM-yyyy hh:mm"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * 3. dd-MM-yyyy"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * 4. dd-MM-yy"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * 5. hh:mm"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * 6. EEE"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * where EEE is the day of week (e.g. Mon, Fri)."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public static final SimpleDateFormat[] DATE_FORMATS \u003d {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        new SimpleDateFormat(\"EEE, dd MMM yy, hh:mm\"),"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        new SimpleDateFormat(\"dd-MM-yy hh:mm\"),"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        new SimpleDateFormat(\"dd-MM-yyyy\"),"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        new SimpleDateFormat(\"dd-MM-yy\"),"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        new SimpleDateFormat(\"hh:mm\"),"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        new SimpleDateFormat(\"EEE\")"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    };"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    private boolean isDone;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * Creates a new undone Task with the given description."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * @param description   Description of the Task. Description length should"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     *                      be at most 50 characters (for now)."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        this(description, false);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * Creates a new Task with the given description and isDone status."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * @param description   Description of the Task. Description length should"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     *                      be at most 50 characters (for now)."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public Task(String description, boolean isDone) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        this.isDone \u003d isDone;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * Returns a Date corresponding to the date represented by the given String."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * If the input format is invalid (does not match any of the date formats"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * specified in Task.DATE_FORMATS), returns the Date representing the"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * current instant."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * @param date      String representing a date"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * @return Date     Date corresponding to the given date String, or the"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     *                  current instant"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    static Date parseDate(String date) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        for (SimpleDateFormat format : DATE_FORMATS) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                return format.parse(date);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            } catch (ParseException e) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                // do nothing and try the next format"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        return new Date();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * Returns a tick or X symbol according to the isDone status of the"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * current task."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * @return  A tick symbol if the Task is done, and an X symbol otherwise."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    private String getStatusIcon() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        return isDone ? \"+\" : \" \";"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        // return isDone ? \"\\u2713\" : \"\\u2718\"; // return tick or X symbols"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * Returns a String of length 1 that indicates the current Task type."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * @return  String indicating Task type"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public String getType() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        return \"-\";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * Indicates that the current Task has been completed."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public void markAsDone() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * Indicates that the current Task has not been completed."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public void markAsUndone() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * Returns a representation of the current Task in an appropriate"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * format for data storage."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * @return  String representing the current Task."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public String formatAsData() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        return getType() + \" | \" + getStatusIcon() + \" | \" + description;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * Returns the description of the Task along with an indication of its"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * isDone status."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * @return  String containing the status and description of the current"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     *          Task."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        return \"[\" + getStatusIcon() + \"] \" + description;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dorcastan": 121
    }
  },
  {
    "path": "src/main/java/duke/task/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    private final List\u003cTask\u003e tasks;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public TaskList(List\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        this.tasks \u003d tasks;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public int size() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        return tasks.size();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public Task get(int index) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        return tasks.get(index);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public void add(Task newTask) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        tasks.add(newTask);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public Task remove(int index) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        return tasks.remove(index);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public boolean isEmpty() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        return tasks.isEmpty();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        String output \u003d \"\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        for (Task task : tasks) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            output \u003d output.concat(task.formatAsData() + \"\\n\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dorcastan": 45
    }
  },
  {
    "path": "src/main/java/duke/task/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "public class Todo extends Task {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * Creates a new Todo task with the given description."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * @param description       Task to be completed."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public Todo(String description) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * Creates a new Todo task with the given description and status."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * @param description       Task to be completed."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * @param isDone            Whether the Task has been completed or not."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public Todo(String description, boolean isDone) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        super(description, isDone);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * Returns the letter \"T\", representing the type Todo."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * @return  \"T\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public String getType() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        return \"T\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * Returns a string containing the type of Task, done status, and"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * description."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     * @return  String describing the Todo."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dorcastan": 39
    }
  },
  {
    "path": "src/test/java/duke/ParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import duke.command.ByeCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import duke.command.DeadlineCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import duke.command.DeleteCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import duke.command.DoneCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import duke.command.EventCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import duke.command.ListCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import duke.command.TodoCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNull;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "class ParserTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public void parse_invalidInput_exceptionThrown() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        // empty string"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            assertNull(Parser.parse(\"\"));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            assertEquals(\"I don\u0027t know what that means... :(\", e.getMessage());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        // random string"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            assertNull(Parser.parse(\"test\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            assertEquals(\"I don\u0027t know what that means... :(\", e.getMessage());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public void parse_validCommands_success() throws Exception {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        // commands with no details"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertEquals(new ListCommand().getDetails(),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                Parser.parse(\"list\").getDetails());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertEquals(new ByeCommand().getDetails(),"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                Parser.parse(\"bye\").getDetails());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        // done and undo commands"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertTrue(Parser.parse(\"done 4\") instanceof DoneCommand);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertTrue(Parser.parse(\"undo 4\") instanceof DoneCommand);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertTrue(Parser.parse(\"done 4\").isDone());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertFalse(Parser.parse(\"undo 4\").isDone());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        // commands with task index"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertEquals(new DoneCommand(\"4\", true).getDetails(),"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                Parser.parse(\"done 4\").getDetails());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertEquals(new DeleteCommand(\"4\").getDetails(),"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                Parser.parse(\"delete 4\").getDetails());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        // commands to add tasks"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertEquals(new DeadlineCommand(\"work /by now\").getDetails(),"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                Parser.parse(\"deadline work /by now\").getDetails());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertEquals(new EventCommand(\"meeting /at 3PM\").getDetails(),"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                Parser.parse(\"event meeting /at 3PM\").getDetails());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertEquals(new TodoCommand(\"work\").getDetails(),"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                Parser.parse(\"todo work\").getDetails());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    public void parse_leadingAndTrailingWhitespace_success() throws Exception {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertEquals(new ListCommand().getDetails(),"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                Parser.parse(\"   list   \").getDetails());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertEquals(new TodoCommand(\"work\").getDetails(),"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                Parser.parse(\"  todo work  \").getDetails());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dorcastan": 77
    }
  },
  {
    "path": "src/test/java/duke/command/CommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.*;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "class CommandTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    private class StorageStub implements Storage {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        boolean isWorking;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        StorageStub(boolean isWorking) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            this.isWorking \u003d isWorking;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        public List\u003cTask\u003e load() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            return new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        public void writeToFile(TaskList tasks) throws IOException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            if (!this.isWorking) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                throw new IOException(\"write error\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    private TaskList tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    void save_workingStorage_success() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            new ListCommand().save(tasks, new StorageStub(true));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    void save_badStorage_exceptionThrown() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            new ListCommand().save(tasks, new StorageStub(false));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            assertTrue(e.getMessage()"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                    .startsWith(\"oops! I encountered an error when saving your tasks.\\n\"));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    void getTaskIndex_validInputString_returnZeroIndexedInt() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            assertEquals(0, new ByeCommand().getTaskIndex(\"1\", 3));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    void getTaskIndex_inputNotNumber_exceptionThrown() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            new ByeCommand().getTaskIndex(\"abc\", 3);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            assertEquals(\"I couldn\u0027t find the task you requested!\","
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                    e.getMessage());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    void getTaskIndex_inputNumberExceedsIndex_exceptionThrown() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            new ByeCommand().getTaskIndex(\"23\", 3);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            assertEquals(\"I couldn\u0027t find the task you requested!\","
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                    e.getMessage());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dorcastan": 88
    }
  },
  {
    "path": "src/test/java/duke/command/DeadlineCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import duke.TextUi;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "class DeadlineCommandTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    private class StorageStub implements Storage {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        public List\u003cTask\u003e load() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            return new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        public void writeToFile(TaskList tasks) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            // do nothing"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    void execute_validCommand_taskAdded() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        // set up"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        TaskList tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        TextUi ui \u003d new TextUi();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        Storage storage \u003d new StorageStub();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        // run tests"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            new DeadlineCommand(\"work /by Thu\").execute(tasks, ui, storage);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        // assertions"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertEquals(1, tasks.size());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "        assertEquals(\"[D][ ] work (by: Thu, 01 Jan 70, 00:00)\","
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "                tasks.get(0).toString());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dorcastan": 49
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "todo borrow book"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "list"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "deadline return book /by Sunday"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "event project meeting /at Mon 2-4pm"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "done 2"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "done 1"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "list"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "undo 2"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "dorcastan": 9
    }
  },
  {
    "path": "text-ui-test/runtest.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "#!/usr/bin/env bash"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "# create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "if [ ! -d \"../bin\" ]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "then"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    mkdir ../bin"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "fi"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "# delete output from previous run"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "if [ -e \"./ACTUAL.TXT\" ]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "then"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    rm ACTUAL.TXT"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "fi"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "# compile the code into the bin folder, terminates if error occurred"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "if ! javac -cp ../src -Xlint:none -d ../bin ../src/main/java/*.java"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "then"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    echo \"********** BUILD FAILURE **********\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "fi"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "# run the program, feed commands from input.txt file and redirect the output to "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "# the ACTUAL.TXT"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "java -classpath ../bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "# compare the output to the expected output"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "diff ACTUAL.TXT EXPECTED.TXT"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "if [ $? -eq 0 ]"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "then"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    echo \"Test result: PASSED\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    exit 0"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "else"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    echo \"Test result: FAILED\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dorcastan"
        },
        "content": "fi"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dorcastan"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "dorcastan": 36
    }
  }
]
